var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/clean-css/lib/optimizer/level-0/optimize.js
var require_optimize = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-0/optimize.js"(exports, module) {
    function level0Optimize(tokens) {
      return tokens;
    }
    module.exports = level0Optimize;
  }
});

// node_modules/clean-css/lib/utils/natural-compare.js
var require_natural_compare = __commonJS({
  "node_modules/clean-css/lib/utils/natural-compare.js"(exports, module) {
    var NUMBER_PATTERN = /([0-9]+)/;
    function naturalCompare(value1, value2) {
      var keys1 = ("" + value1).split(NUMBER_PATTERN).map(tryParseInt);
      var keys2 = ("" + value2).split(NUMBER_PATTERN).map(tryParseInt);
      var key1;
      var key2;
      var compareFirst = Math.min(keys1.length, keys2.length);
      var i, l2;
      for (i = 0, l2 = compareFirst; i < l2; i++) {
        key1 = keys1[i];
        key2 = keys2[i];
        if (key1 != key2) {
          return key1 > key2 ? 1 : -1;
        }
      }
      return keys1.length > keys2.length ? 1 : keys1.length == keys2.length ? 0 : -1;
    }
    function tryParseInt(value) {
      return "" + parseInt(value) == value ? parseInt(value) : value;
    }
    module.exports = naturalCompare;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/sort-selectors.js
var require_sort_selectors = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/sort-selectors.js"(exports, module) {
    var naturalCompare = require_natural_compare();
    function naturalSorter(scope1, scope2) {
      return naturalCompare(scope1[1], scope2[1]);
    }
    function standardSorter(scope1, scope2) {
      return scope1[1] > scope2[1] ? 1 : -1;
    }
    function sortSelectors(selectors, method) {
      switch (method) {
        case "natural":
          return selectors.sort(naturalSorter);
        case "standard":
          return selectors.sort(standardSorter);
        case "none":
        case false:
          return selectors;
      }
    }
    module.exports = sortSelectors;
  }
});

// node_modules/clean-css/lib/utils/override.js
var require_override = __commonJS({
  "node_modules/clean-css/lib/utils/override.js"(exports, module) {
    function override(source1, source2) {
      var target = {};
      var key1;
      var key2;
      var item;
      for (key1 in source1) {
        item = source1[key1];
        if (Array.isArray(item)) {
          target[key1] = item.slice(0);
        } else if (typeof item == "object" && item !== null) {
          target[key1] = override(item, {});
        } else {
          target[key1] = item;
        }
      }
      for (key2 in source2) {
        item = source2[key2];
        if (key2 in target && Array.isArray(item)) {
          target[key2] = item.slice(0);
        } else if (key2 in target && typeof item == "object" && item !== null) {
          target[key2] = override(target[key2], item);
        } else {
          target[key2] = item;
        }
      }
      return target;
    }
    module.exports = override;
  }
});

// browser-external:os
var require_os = __commonJS({
  "browser-external:os"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "os" has been externalized for browser compatibility. Cannot access "os.${key}" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/clean-css/lib/options/format.js
var require_format = __commonJS({
  "node_modules/clean-css/lib/options/format.js"(exports, module) {
    var override = require_override();
    function getSystemLineBreak() {
      var systemLineBreak = "\n";
      try {
        var os = require_os();
        systemLineBreak = os.EOL;
      } catch (_) {
      }
      return systemLineBreak;
    }
    var Breaks = {
      AfterAtRule: "afterAtRule",
      AfterBlockBegins: "afterBlockBegins",
      AfterBlockEnds: "afterBlockEnds",
      AfterComment: "afterComment",
      AfterProperty: "afterProperty",
      AfterRuleBegins: "afterRuleBegins",
      AfterRuleEnds: "afterRuleEnds",
      BeforeBlockEnds: "beforeBlockEnds",
      BetweenSelectors: "betweenSelectors"
    };
    var BreakWith = {
      CarriageReturnLineFeed: "\r\n",
      LineFeed: "\n",
      System: getSystemLineBreak()
    };
    var IndentWith = {
      Space: " ",
      Tab: "	"
    };
    var Spaces = {
      AroundSelectorRelation: "aroundSelectorRelation",
      BeforeBlockBegins: "beforeBlockBegins",
      BeforeValue: "beforeValue"
    };
    var DEFAULTS = {
      breaks: breaks(false),
      breakWith: BreakWith.System,
      indentBy: 0,
      indentWith: IndentWith.Space,
      spaces: spaces(false),
      wrapAt: false,
      semicolonAfterLastProperty: false
    };
    var BEAUTIFY_ALIAS = "beautify";
    var KEEP_BREAKS_ALIAS = "keep-breaks";
    var OPTION_SEPARATOR = ";";
    var OPTION_NAME_VALUE_SEPARATOR = ":";
    var HASH_VALUES_OPTION_SEPARATOR = ",";
    var HASH_VALUES_NAME_VALUE_SEPARATOR = "=";
    var FALSE_KEYWORD_1 = "false";
    var FALSE_KEYWORD_2 = "off";
    var TRUE_KEYWORD_1 = "true";
    var TRUE_KEYWORD_2 = "on";
    function breaks(value) {
      var breakOptions = {};
      breakOptions[Breaks.AfterAtRule] = value;
      breakOptions[Breaks.AfterBlockBegins] = value;
      breakOptions[Breaks.AfterBlockEnds] = value;
      breakOptions[Breaks.AfterComment] = value;
      breakOptions[Breaks.AfterProperty] = value;
      breakOptions[Breaks.AfterRuleBegins] = value;
      breakOptions[Breaks.AfterRuleEnds] = value;
      breakOptions[Breaks.BeforeBlockEnds] = value;
      breakOptions[Breaks.BetweenSelectors] = value;
      return breakOptions;
    }
    function spaces(value) {
      var spaceOptions = {};
      spaceOptions[Spaces.AroundSelectorRelation] = value;
      spaceOptions[Spaces.BeforeBlockBegins] = value;
      spaceOptions[Spaces.BeforeValue] = value;
      return spaceOptions;
    }
    function formatFrom(source) {
      if (source === void 0 || source === false) {
        return false;
      }
      if (typeof source == "object" && "breakWith" in source) {
        source = override(source, { breakWith: mapBreakWith(source.breakWith) });
      }
      if (typeof source == "object" && "indentBy" in source) {
        source = override(source, { indentBy: parseInt(source.indentBy) });
      }
      if (typeof source == "object" && "indentWith" in source) {
        source = override(source, { indentWith: mapIndentWith(source.indentWith) });
      }
      if (typeof source == "object") {
        return remapBreaks(override(DEFAULTS, source));
      }
      if (typeof source == "string" && source == BEAUTIFY_ALIAS) {
        return remapBreaks(
          override(DEFAULTS, {
            breaks: breaks(true),
            indentBy: 2,
            spaces: spaces(true)
          })
        );
      }
      if (typeof source == "string" && source == KEEP_BREAKS_ALIAS) {
        return remapBreaks(
          override(DEFAULTS, {
            breaks: {
              afterAtRule: true,
              afterBlockBegins: true,
              afterBlockEnds: true,
              afterComment: true,
              afterRuleEnds: true,
              beforeBlockEnds: true
            }
          })
        );
      }
      if (typeof source == "string") {
        return remapBreaks(override(DEFAULTS, toHash(source)));
      }
      return DEFAULTS;
    }
    function toHash(string) {
      return string.split(OPTION_SEPARATOR).reduce(function(accumulator, directive) {
        var parts = directive.split(OPTION_NAME_VALUE_SEPARATOR);
        var name = parts[0];
        var value = parts[1];
        if (name == "breaks" || name == "spaces") {
          accumulator[name] = hashValuesToHash(value);
        } else if (name == "indentBy" || name == "wrapAt") {
          accumulator[name] = parseInt(value);
        } else if (name == "indentWith") {
          accumulator[name] = mapIndentWith(value);
        } else if (name == "breakWith") {
          accumulator[name] = mapBreakWith(value);
        }
        return accumulator;
      }, {});
    }
    function hashValuesToHash(string) {
      return string.split(HASH_VALUES_OPTION_SEPARATOR).reduce(function(accumulator, directive) {
        var parts = directive.split(HASH_VALUES_NAME_VALUE_SEPARATOR);
        var name = parts[0];
        var value = parts[1];
        accumulator[name] = normalizeValue(value);
        return accumulator;
      }, {});
    }
    function normalizeValue(value) {
      switch (value) {
        case FALSE_KEYWORD_1:
        case FALSE_KEYWORD_2:
          return false;
        case TRUE_KEYWORD_1:
        case TRUE_KEYWORD_2:
          return true;
        default:
          return value;
      }
    }
    function mapBreakWith(value) {
      switch (value) {
        case "windows":
        case "crlf":
        case BreakWith.CarriageReturnLineFeed:
          return BreakWith.CarriageReturnLineFeed;
        case "unix":
        case "lf":
        case BreakWith.LineFeed:
          return BreakWith.LineFeed;
        default:
          return BreakWith.System;
      }
    }
    function mapIndentWith(value) {
      switch (value) {
        case "space":
          return IndentWith.Space;
        case "tab":
          return IndentWith.Tab;
        default:
          return value;
      }
    }
    function remapBreaks(source) {
      for (var key in Breaks) {
        var breakName = Breaks[key];
        var breakValue = source.breaks[breakName];
        if (breakValue === true) {
          source.breaks[breakName] = source.breakWith;
        } else if (breakValue === false) {
          source.breaks[breakName] = "";
        } else {
          source.breaks[breakName] = source.breakWith.repeat(parseInt(breakValue));
        }
      }
      return source;
    }
    module.exports = {
      Breaks,
      Spaces,
      formatFrom
    };
  }
});

// node_modules/clean-css/lib/tokenizer/marker.js
var require_marker = __commonJS({
  "node_modules/clean-css/lib/tokenizer/marker.js"(exports, module) {
    var Marker = {
      ASTERISK: "*",
      AT: "@",
      BACK_SLASH: "\\",
      CARRIAGE_RETURN: "\r",
      CLOSE_CURLY_BRACKET: "}",
      CLOSE_ROUND_BRACKET: ")",
      CLOSE_SQUARE_BRACKET: "]",
      COLON: ":",
      COMMA: ",",
      DOUBLE_QUOTE: '"',
      EXCLAMATION: "!",
      FORWARD_SLASH: "/",
      INTERNAL: "-clean-css-",
      NEW_LINE_NIX: "\n",
      OPEN_CURLY_BRACKET: "{",
      OPEN_ROUND_BRACKET: "(",
      OPEN_SQUARE_BRACKET: "[",
      SEMICOLON: ";",
      SINGLE_QUOTE: "'",
      SPACE: " ",
      TAB: "	",
      UNDERSCORE: "_"
    };
    module.exports = Marker;
  }
});

// node_modules/clean-css/lib/utils/format-position.js
var require_format_position = __commonJS({
  "node_modules/clean-css/lib/utils/format-position.js"(exports, module) {
    function formatPosition(metadata) {
      var line = metadata[0];
      var column = metadata[1];
      var source = metadata[2];
      return source ? source + ":" + line + ":" + column : line + ":" + column;
    }
    module.exports = formatPosition;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/tidy-rules.js
var require_tidy_rules = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/tidy-rules.js"(exports, module) {
    var Spaces = require_format().Spaces;
    var Marker = require_marker();
    var formatPosition = require_format_position();
    var CASE_ATTRIBUTE_PATTERN = /[\s"'][iI]\s*\]/;
    var CASE_RESTORE_PATTERN = /([\d\w])([iI])\]/g;
    var DOUBLE_QUOTE_CASE_PATTERN = /="([a-zA-Z][a-zA-Z\d\-_]+)"([iI])/g;
    var DOUBLE_QUOTE_PATTERN = /="([a-zA-Z][a-zA-Z\d\-_]+)"(\s|\])/g;
    var HTML_COMMENT_PATTERN = /^(?:(?:<!--|-->)\s*)+/;
    var SINGLE_QUOTE_CASE_PATTERN = /='([a-zA-Z][a-zA-Z\d\-_]+)'([iI])/g;
    var SINGLE_QUOTE_PATTERN = /='([a-zA-Z][a-zA-Z\d\-_]+)'(\s|\])/g;
    var RELATION_PATTERN = /[>+~]/;
    var WHITESPACE_PATTERN = /\s/;
    var ASTERISK_PLUS_HTML_HACK = "*+html ";
    var ASTERISK_FIRST_CHILD_PLUS_HTML_HACK = "*:first-child+html ";
    var LESS_THAN = "<";
    var PSEUDO_CLASSES_WITH_SELECTORS = [
      ":current",
      ":future",
      ":has",
      ":host",
      ":host-context",
      ":is",
      ":not",
      ":past",
      ":where"
    ];
    function hasInvalidCharacters(value) {
      var isEscaped;
      var isInvalid = false;
      var character;
      var isQuote = false;
      var i, l2;
      for (i = 0, l2 = value.length; i < l2; i++) {
        character = value[i];
        if (isEscaped) {
        } else if (character == Marker.SINGLE_QUOTE || character == Marker.DOUBLE_QUOTE) {
          isQuote = !isQuote;
        } else if (!isQuote && (character == Marker.CLOSE_CURLY_BRACKET || character == Marker.EXCLAMATION || character == LESS_THAN || character == Marker.SEMICOLON)) {
          isInvalid = true;
          break;
        } else if (!isQuote && i === 0 && RELATION_PATTERN.test(character)) {
          isInvalid = true;
          break;
        }
        isEscaped = character == Marker.BACK_SLASH;
      }
      return isInvalid;
    }
    function removeWhitespace(value, format) {
      var stripped = [];
      var character;
      var isNewLineNix;
      var isNewLineWin;
      var isEscaped;
      var wasEscaped;
      var isQuoted;
      var isSingleQuoted;
      var isDoubleQuoted;
      var isAttribute;
      var isRelation;
      var isWhitespace;
      var isSpaceAwarePseudoClass;
      var roundBracketLevel = 0;
      var wasComma = false;
      var wasRelation = false;
      var wasWhitespace = false;
      var withCaseAttribute = CASE_ATTRIBUTE_PATTERN.test(value);
      var spaceAroundRelation = format && format.spaces[Spaces.AroundSelectorRelation];
      var i, l2;
      for (i = 0, l2 = value.length; i < l2; i++) {
        character = value[i];
        isNewLineNix = character == Marker.NEW_LINE_NIX;
        isNewLineWin = character == Marker.NEW_LINE_NIX && value[i - 1] == Marker.CARRIAGE_RETURN;
        isQuoted = isSingleQuoted || isDoubleQuoted;
        isRelation = !isAttribute && !isEscaped && roundBracketLevel === 0 && RELATION_PATTERN.test(character);
        isWhitespace = WHITESPACE_PATTERN.test(character);
        isSpaceAwarePseudoClass = roundBracketLevel == 1 && character == Marker.CLOSE_ROUND_BRACKET ? false : isSpaceAwarePseudoClass || roundBracketLevel === 0 && character == Marker.COLON && isPseudoClassWithSelectors(value, i);
        if (wasEscaped && isQuoted && isNewLineWin) {
          stripped.pop();
          stripped.pop();
        } else if (isEscaped && isQuoted && isNewLineNix) {
          stripped.pop();
        } else if (isEscaped) {
          stripped.push(character);
        } else if (character == Marker.OPEN_SQUARE_BRACKET && !isQuoted) {
          stripped.push(character);
          isAttribute = true;
        } else if (character == Marker.CLOSE_SQUARE_BRACKET && !isQuoted) {
          stripped.push(character);
          isAttribute = false;
        } else if (character == Marker.OPEN_ROUND_BRACKET && !isQuoted) {
          stripped.push(character);
          roundBracketLevel++;
        } else if (character == Marker.CLOSE_ROUND_BRACKET && !isQuoted) {
          stripped.push(character);
          roundBracketLevel--;
        } else if (character == Marker.SINGLE_QUOTE && !isQuoted) {
          stripped.push(character);
          isSingleQuoted = true;
        } else if (character == Marker.DOUBLE_QUOTE && !isQuoted) {
          stripped.push(character);
          isDoubleQuoted = true;
        } else if (character == Marker.SINGLE_QUOTE && isQuoted) {
          stripped.push(character);
          isSingleQuoted = false;
        } else if (character == Marker.DOUBLE_QUOTE && isQuoted) {
          stripped.push(character);
          isDoubleQuoted = false;
        } else if (isWhitespace && wasRelation && !spaceAroundRelation) {
          continue;
        } else if (!isWhitespace && wasRelation && spaceAroundRelation) {
          stripped.push(Marker.SPACE);
          stripped.push(character);
        } else if (isWhitespace && !wasWhitespace && wasComma && roundBracketLevel > 0 && isSpaceAwarePseudoClass) {
        } else if (isWhitespace && !wasWhitespace && roundBracketLevel > 0 && isSpaceAwarePseudoClass) {
          stripped.push(character);
        } else if (isWhitespace && (isAttribute || roundBracketLevel > 0) && !isQuoted) {
        } else if (isWhitespace && wasWhitespace && !isQuoted) {
        } else if ((isNewLineWin || isNewLineNix) && (isAttribute || roundBracketLevel > 0) && isQuoted) {
        } else if (isRelation && wasWhitespace && !spaceAroundRelation) {
          stripped.pop();
          stripped.push(character);
        } else if (isRelation && !wasWhitespace && spaceAroundRelation) {
          stripped.push(Marker.SPACE);
          stripped.push(character);
        } else if (isWhitespace) {
          stripped.push(Marker.SPACE);
        } else {
          stripped.push(character);
        }
        wasEscaped = isEscaped;
        isEscaped = character == Marker.BACK_SLASH;
        wasRelation = isRelation;
        wasWhitespace = isWhitespace;
        wasComma = character == Marker.COMMA;
      }
      return withCaseAttribute ? stripped.join("").replace(CASE_RESTORE_PATTERN, "$1 $2]") : stripped.join("");
    }
    function isPseudoClassWithSelectors(value, colonPosition) {
      var pseudoClass = value.substring(colonPosition, value.indexOf(Marker.OPEN_ROUND_BRACKET, colonPosition));
      return PSEUDO_CLASSES_WITH_SELECTORS.indexOf(pseudoClass) > -1;
    }
    function removeQuotes(value) {
      if (value.indexOf("'") == -1 && value.indexOf('"') == -1) {
        return value;
      }
      return value.replace(SINGLE_QUOTE_CASE_PATTERN, "=$1 $2").replace(SINGLE_QUOTE_PATTERN, "=$1$2").replace(DOUBLE_QUOTE_CASE_PATTERN, "=$1 $2").replace(DOUBLE_QUOTE_PATTERN, "=$1$2");
    }
    function replacePseudoClasses(value) {
      return value.replace("nth-child(1)", "first-child").replace("nth-of-type(1)", "first-of-type").replace("nth-of-type(even)", "nth-of-type(2n)").replace("nth-child(even)", "nth-child(2n)").replace("nth-of-type(2n+1)", "nth-of-type(odd)").replace("nth-child(2n+1)", "nth-child(odd)").replace("nth-last-child(1)", "last-child").replace("nth-last-of-type(1)", "last-of-type").replace("nth-last-of-type(even)", "nth-last-of-type(2n)").replace("nth-last-child(even)", "nth-last-child(2n)").replace("nth-last-of-type(2n+1)", "nth-last-of-type(odd)").replace("nth-last-child(2n+1)", "nth-last-child(odd)");
    }
    function tidyRules(rules, removeUnsupported, adjacentSpace, format, warnings) {
      var list = [];
      var repeated = [];
      function removeHTMLComment(rule2, match) {
        warnings.push("HTML comment '" + match + "' at " + formatPosition(rule2[2][0]) + ". Removing.");
        return "";
      }
      for (var i = 0, l2 = rules.length; i < l2; i++) {
        var rule = rules[i];
        var reduced = rule[1];
        reduced = reduced.replace(HTML_COMMENT_PATTERN, removeHTMLComment.bind(null, rule));
        if (hasInvalidCharacters(reduced)) {
          warnings.push("Invalid selector '" + rule[1] + "' at " + formatPosition(rule[2][0]) + ". Ignoring.");
          continue;
        }
        reduced = removeWhitespace(reduced, format);
        reduced = removeQuotes(reduced);
        if (adjacentSpace && reduced.indexOf("nav") > 0) {
          reduced = reduced.replace(/\+nav(\S|$)/, "+ nav$1");
        }
        if (removeUnsupported && reduced.indexOf(ASTERISK_PLUS_HTML_HACK) > -1) {
          continue;
        }
        if (removeUnsupported && reduced.indexOf(ASTERISK_FIRST_CHILD_PLUS_HTML_HACK) > -1) {
          continue;
        }
        if (reduced.indexOf("*") > -1) {
          reduced = reduced.replace(/\*([:#.[])/g, "$1").replace(/^(:first-child)?\+html/, "*$1+html");
        }
        if (repeated.indexOf(reduced) > -1) {
          continue;
        }
        reduced = replacePseudoClasses(reduced);
        rule[1] = reduced;
        repeated.push(reduced);
        list.push(rule);
      }
      if (list.length == 1 && list[0][1].length === 0) {
        warnings.push("Empty selector '" + list[0][1] + "' at " + formatPosition(list[0][2][0]) + ". Ignoring.");
        list = [];
      }
      return list;
    }
    module.exports = tidyRules;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/tidy-block.js
var require_tidy_block = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/tidy-block.js"(exports, module) {
    var SUPPORTED_COMPACT_BLOCK_MATCHER = /^@media\W/;
    var SUPPORTED_QUOTE_REMOVAL_MATCHER = /^@(?:keyframes|-moz-keyframes|-o-keyframes|-webkit-keyframes)\W/;
    function tidyBlock(values, spaceAfterClosingBrace) {
      var withoutSpaceAfterClosingBrace;
      var withoutQuotes;
      var i;
      for (i = values.length - 1; i >= 0; i--) {
        withoutSpaceAfterClosingBrace = !spaceAfterClosingBrace && SUPPORTED_COMPACT_BLOCK_MATCHER.test(values[i][1]);
        withoutQuotes = SUPPORTED_QUOTE_REMOVAL_MATCHER.test(values[i][1]);
        values[i][1] = values[i][1].replace(/\n|\r\n/g, " ").replace(/\s+/g, " ").replace(/(,|:|\() /g, "$1").replace(/ \)/g, ")");
        if (withoutQuotes) {
          values[i][1] = values[i][1].replace(/'([a-zA-Z][a-zA-Z\d\-_]+)'/, "$1").replace(/"([a-zA-Z][a-zA-Z\d\-_]+)"/, "$1");
        }
        if (withoutSpaceAfterClosingBrace) {
          values[i][1] = values[i][1].replace(/\) /g, ")");
        }
      }
      return values;
    }
    module.exports = tidyBlock;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/tidy-at-rule.js
var require_tidy_at_rule = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/tidy-at-rule.js"(exports, module) {
    function tidyAtRule(value) {
      return value.replace(/\s+/g, " ").replace(/url\(\s+/g, "url(").replace(/\s+\)/g, ")").trim();
    }
    module.exports = tidyAtRule;
  }
});

// node_modules/clean-css/lib/optimizer/hack.js
var require_hack = __commonJS({
  "node_modules/clean-css/lib/optimizer/hack.js"(exports, module) {
    var Hack = {
      ASTERISK: "asterisk",
      BANG: "bang",
      BACKSLASH: "backslash",
      UNDERSCORE: "underscore"
    };
    module.exports = Hack;
  }
});

// node_modules/clean-css/lib/optimizer/remove-unused.js
var require_remove_unused = __commonJS({
  "node_modules/clean-css/lib/optimizer/remove-unused.js"(exports, module) {
    function removeUnused(properties) {
      for (var i = properties.length - 1; i >= 0; i--) {
        var property = properties[i];
        if (property.unused) {
          property.all.splice(property.position, 1);
        }
      }
    }
    module.exports = removeUnused;
  }
});

// node_modules/clean-css/lib/optimizer/restore-from-optimizing.js
var require_restore_from_optimizing = __commonJS({
  "node_modules/clean-css/lib/optimizer/restore-from-optimizing.js"(exports, module) {
    var Hack = require_hack();
    var Marker = require_marker();
    var ASTERISK_HACK = "*";
    var BACKSLASH_HACK = "\\";
    var IMPORTANT_TOKEN = "!important";
    var UNDERSCORE_HACK = "_";
    var BANG_HACK = "!ie";
    function restoreFromOptimizing(properties, restoreCallback) {
      var property;
      var restored;
      var current;
      var i;
      for (i = properties.length - 1; i >= 0; i--) {
        property = properties[i];
        if (property.dynamic && property.important) {
          restoreImportant(property);
          continue;
        }
        if (property.dynamic) {
          continue;
        }
        if (property.unused) {
          continue;
        }
        if (!property.dirty && !property.important && !property.hack) {
          continue;
        }
        if (property.optimizable && restoreCallback) {
          restored = restoreCallback(property);
          property.value = restored;
        } else {
          restored = property.value;
        }
        if (property.important) {
          restoreImportant(property);
        }
        if (property.hack) {
          restoreHack(property);
        }
        if ("all" in property) {
          current = property.all[property.position];
          current[1][1] = property.name;
          current.splice(2, current.length - 1);
          Array.prototype.push.apply(current, restored);
        }
      }
    }
    function restoreImportant(property) {
      property.value[property.value.length - 1][1] += IMPORTANT_TOKEN;
    }
    function restoreHack(property) {
      if (property.hack[0] == Hack.UNDERSCORE) {
        property.name = UNDERSCORE_HACK + property.name;
      } else if (property.hack[0] == Hack.ASTERISK) {
        property.name = ASTERISK_HACK + property.name;
      } else if (property.hack[0] == Hack.BACKSLASH) {
        property.value[property.value.length - 1][1] += BACKSLASH_HACK + property.hack[1];
      } else if (property.hack[0] == Hack.BANG) {
        property.value[property.value.length - 1][1] += Marker.SPACE + BANG_HACK;
      }
    }
    module.exports = restoreFromOptimizing;
  }
});

// node_modules/clean-css/lib/tokenizer/token.js
var require_token = __commonJS({
  "node_modules/clean-css/lib/tokenizer/token.js"(exports, module) {
    var Token = {
      AT_RULE: "at-rule",
      // e.g. `@import`, `@charset`
      AT_RULE_BLOCK: "at-rule-block",
      // e.g. `@font-face{...}`
      AT_RULE_BLOCK_SCOPE: "at-rule-block-scope",
      // e.g. `@font-face`
      COMMENT: "comment",
      // e.g. `/* comment */`
      NESTED_BLOCK: "nested-block",
      // e.g. `@media screen{...}`, `@keyframes animation {...}`
      NESTED_BLOCK_SCOPE: "nested-block-scope",
      // e.g. `@media`, `@keyframes`
      PROPERTY: "property",
      // e.g. `color:red`
      PROPERTY_BLOCK: "property-block",
      // e.g. `--var:{color:red}`
      PROPERTY_NAME: "property-name",
      // e.g. `color`
      PROPERTY_VALUE: "property-value",
      // e.g. `red`
      RAW: "raw",
      // e.g. anything between /* clean-css ignore:start */ and /* clean-css ignore:end */ comments
      RULE: "rule",
      // e.g `div > a{...}`
      RULE_SCOPE: "rule-scope"
      // e.g `div > a`
    };
    module.exports = Token;
  }
});

// node_modules/clean-css/lib/optimizer/wrap-for-optimizing.js
var require_wrap_for_optimizing = __commonJS({
  "node_modules/clean-css/lib/optimizer/wrap-for-optimizing.js"(exports, module) {
    var Hack = require_hack();
    var Marker = require_marker();
    var Token = require_token();
    var Match = {
      ASTERISK: "*",
      BACKSLASH: "\\",
      BANG: "!",
      BANG_SUFFIX_PATTERN: /!\w+$/,
      IMPORTANT_TOKEN: "!important",
      IMPORTANT_TOKEN_PATTERN: new RegExp("!important$", "i"),
      IMPORTANT_WORD: "important",
      IMPORTANT_WORD_PATTERN: new RegExp("important$", "i"),
      SUFFIX_BANG_PATTERN: /!$/,
      UNDERSCORE: "_",
      VARIABLE_REFERENCE_PATTERN: /var\(--.+\)$/
    };
    function wrapAll(properties, skipProperties) {
      var wrapped = [];
      var single;
      var property;
      var i;
      for (i = properties.length - 1; i >= 0; i--) {
        property = properties[i];
        if (property[0] != Token.PROPERTY) {
          continue;
        }
        if (skipProperties && skipProperties.indexOf(property[1][1]) > -1) {
          continue;
        }
        single = wrapSingle(property);
        single.all = properties;
        single.position = i;
        wrapped.unshift(single);
      }
      return wrapped;
    }
    function someVariableReferences(property) {
      var i, l2;
      var value;
      for (i = 2, l2 = property.length; i < l2; i++) {
        value = property[i];
        if (value[0] != Token.PROPERTY_VALUE) {
          continue;
        }
        if (isVariableReference(value[1])) {
          return true;
        }
      }
      return false;
    }
    function isVariableReference(value) {
      return Match.VARIABLE_REFERENCE_PATTERN.test(value);
    }
    function isMultiplex(property) {
      var value;
      var i, l2;
      for (i = 3, l2 = property.length; i < l2; i++) {
        value = property[i];
        if (value[0] == Token.PROPERTY_VALUE && (value[1] == Marker.COMMA || value[1] == Marker.FORWARD_SLASH)) {
          return true;
        }
      }
      return false;
    }
    function hackFrom(property) {
      var match = false;
      var name = property[1][1];
      var lastValue = property[property.length - 1];
      if (name[0] == Match.UNDERSCORE) {
        match = [Hack.UNDERSCORE];
      } else if (name[0] == Match.ASTERISK) {
        match = [Hack.ASTERISK];
      } else if (lastValue[1][0] == Match.BANG && !lastValue[1].match(Match.IMPORTANT_WORD_PATTERN)) {
        match = [Hack.BANG];
      } else if (lastValue[1].indexOf(Match.BANG) > 0 && !lastValue[1].match(Match.IMPORTANT_WORD_PATTERN) && Match.BANG_SUFFIX_PATTERN.test(lastValue[1])) {
        match = [Hack.BANG];
      } else if (lastValue[1].indexOf(Match.BACKSLASH) > 0 && lastValue[1].indexOf(Match.BACKSLASH) == lastValue[1].length - Match.BACKSLASH.length - 1) {
        match = [Hack.BACKSLASH, lastValue[1].substring(lastValue[1].indexOf(Match.BACKSLASH) + 1)];
      } else if (lastValue[1].indexOf(Match.BACKSLASH) === 0 && lastValue[1].length == 2) {
        match = [Hack.BACKSLASH, lastValue[1].substring(1)];
      }
      return match;
    }
    function isImportant(property) {
      if (property.length < 3) {
        return false;
      }
      var lastValue = property[property.length - 1];
      if (Match.IMPORTANT_TOKEN_PATTERN.test(lastValue[1])) {
        return true;
      }
      if (Match.IMPORTANT_WORD_PATTERN.test(lastValue[1]) && Match.SUFFIX_BANG_PATTERN.test(property[property.length - 2][1])) {
        return true;
      }
      return false;
    }
    function stripImportant(property) {
      var lastValue = property[property.length - 1];
      var oneButLastValue = property[property.length - 2];
      if (Match.IMPORTANT_TOKEN_PATTERN.test(lastValue[1])) {
        lastValue[1] = lastValue[1].replace(Match.IMPORTANT_TOKEN_PATTERN, "");
      } else {
        lastValue[1] = lastValue[1].replace(Match.IMPORTANT_WORD_PATTERN, "");
        oneButLastValue[1] = oneButLastValue[1].replace(Match.SUFFIX_BANG_PATTERN, "");
      }
      if (lastValue[1].length === 0) {
        property.pop();
      }
      if (oneButLastValue[1].length === 0) {
        property.pop();
      }
    }
    function stripPrefixHack(property) {
      property[1][1] = property[1][1].substring(1);
    }
    function stripSuffixHack(property, hackFrom2) {
      var lastValue = property[property.length - 1];
      lastValue[1] = lastValue[1].substring(0, lastValue[1].indexOf(hackFrom2[0] == Hack.BACKSLASH ? Match.BACKSLASH : Match.BANG)).trim();
      if (lastValue[1].length === 0) {
        property.pop();
      }
    }
    function wrapSingle(property) {
      var importantProperty = isImportant(property);
      if (importantProperty) {
        stripImportant(property);
      }
      var whichHack = hackFrom(property);
      if (whichHack[0] == Hack.ASTERISK || whichHack[0] == Hack.UNDERSCORE) {
        stripPrefixHack(property);
      } else if (whichHack[0] == Hack.BACKSLASH || whichHack[0] == Hack.BANG) {
        stripSuffixHack(property, whichHack);
      }
      return {
        block: property[2] && property[2][0] == Token.PROPERTY_BLOCK,
        components: [],
        dirty: false,
        dynamic: someVariableReferences(property),
        hack: whichHack,
        important: importantProperty,
        name: property[1][1],
        multiplex: property.length > 3 ? isMultiplex(property) : false,
        optimizable: true,
        position: 0,
        shorthand: false,
        unused: false,
        value: property.slice(2)
      };
    }
    module.exports = {
      all: wrapAll,
      single: wrapSingle
    };
  }
});

// node_modules/clean-css/lib/optimizer/invalid-property-error.js
var require_invalid_property_error = __commonJS({
  "node_modules/clean-css/lib/optimizer/invalid-property-error.js"(exports, module) {
    function InvalidPropertyError(message) {
      this.name = "InvalidPropertyError";
      this.message = message;
      this.stack = new Error().stack;
    }
    InvalidPropertyError.prototype = Object.create(Error.prototype);
    InvalidPropertyError.prototype.constructor = InvalidPropertyError;
    module.exports = InvalidPropertyError;
  }
});

// node_modules/clean-css/lib/optimizer/configuration/break-up.js
var require_break_up = __commonJS({
  "node_modules/clean-css/lib/optimizer/configuration/break-up.js"(exports, module) {
    var InvalidPropertyError = require_invalid_property_error();
    var wrapSingle = require_wrap_for_optimizing().single;
    var Token = require_token();
    var Marker = require_marker();
    var formatPosition = require_format_position();
    function _anyIsInherit(values) {
      var i, l2;
      for (i = 0, l2 = values.length; i < l2; i++) {
        if (values[i][1] == "inherit") {
          return true;
        }
      }
      return false;
    }
    function _colorFilter(validator) {
      return function(value) {
        return value[1] == "invert" || validator.isColor(value[1]) || validator.isPrefixed(value[1]);
      };
    }
    function _styleFilter(validator) {
      return function(value) {
        return value[1] != "inherit" && validator.isStyleKeyword(value[1]) && !validator.isColorFunction(value[1]);
      };
    }
    function _wrapDefault(name, property, configuration) {
      var descriptor = configuration[name];
      if (descriptor.doubleValues && descriptor.defaultValue.length == 2) {
        return wrapSingle([
          Token.PROPERTY,
          [Token.PROPERTY_NAME, name],
          [Token.PROPERTY_VALUE, descriptor.defaultValue[0]],
          [Token.PROPERTY_VALUE, descriptor.defaultValue[1]]
        ]);
      }
      if (descriptor.doubleValues && descriptor.defaultValue.length == 1) {
        return wrapSingle([
          Token.PROPERTY,
          [Token.PROPERTY_NAME, name],
          [Token.PROPERTY_VALUE, descriptor.defaultValue[0]]
        ]);
      }
      return wrapSingle([
        Token.PROPERTY,
        [Token.PROPERTY_NAME, name],
        [Token.PROPERTY_VALUE, descriptor.defaultValue]
      ]);
    }
    function _widthFilter(validator) {
      return function(value) {
        return value[1] != "inherit" && (validator.isWidth(value[1]) || validator.isUnit(value[1]) || validator.isDynamicUnit(value[1])) && !validator.isStyleKeyword(value[1]) && !validator.isColorFunction(value[1]);
      };
    }
    function animation(property, configuration, validator) {
      var duration = _wrapDefault(property.name + "-duration", property, configuration);
      var timing = _wrapDefault(property.name + "-timing-function", property, configuration);
      var delay = _wrapDefault(property.name + "-delay", property, configuration);
      var iteration = _wrapDefault(property.name + "-iteration-count", property, configuration);
      var direction = _wrapDefault(property.name + "-direction", property, configuration);
      var fill = _wrapDefault(property.name + "-fill-mode", property, configuration);
      var play = _wrapDefault(property.name + "-play-state", property, configuration);
      var name = _wrapDefault(property.name + "-name", property, configuration);
      var components = [duration, timing, delay, iteration, direction, fill, play, name];
      var values = property.value;
      var value;
      var durationSet = false;
      var timingSet = false;
      var delaySet = false;
      var iterationSet = false;
      var directionSet = false;
      var fillSet = false;
      var playSet = false;
      var nameSet = false;
      var i;
      var l2;
      if (property.value.length == 1 && property.value[0][1] == "inherit") {
        duration.value = timing.value = delay.value = iteration.value = direction.value = fill.value = play.value = name.value = property.value;
        return components;
      }
      if (values.length > 1 && _anyIsInherit(values)) {
        throw new InvalidPropertyError("Invalid animation values at " + formatPosition(values[0][2][0]) + ". Ignoring.");
      }
      for (i = 0, l2 = values.length; i < l2; i++) {
        value = values[i];
        if (validator.isTime(value[1]) && !durationSet) {
          duration.value = [value];
          durationSet = true;
        } else if (validator.isTime(value[1]) && !delaySet) {
          delay.value = [value];
          delaySet = true;
        } else if ((validator.isGlobal(value[1]) || validator.isTimingFunction(value[1])) && !timingSet) {
          timing.value = [value];
          timingSet = true;
        } else if ((validator.isAnimationIterationCountKeyword(value[1]) || validator.isPositiveNumber(value[1])) && !iterationSet) {
          iteration.value = [value];
          iterationSet = true;
        } else if (validator.isAnimationDirectionKeyword(value[1]) && !directionSet) {
          direction.value = [value];
          directionSet = true;
        } else if (validator.isAnimationFillModeKeyword(value[1]) && !fillSet) {
          fill.value = [value];
          fillSet = true;
        } else if (validator.isAnimationPlayStateKeyword(value[1]) && !playSet) {
          play.value = [value];
          playSet = true;
        } else if ((validator.isAnimationNameKeyword(value[1]) || validator.isIdentifier(value[1])) && !nameSet) {
          name.value = [value];
          nameSet = true;
        } else {
          throw new InvalidPropertyError("Invalid animation value at " + formatPosition(value[2][0]) + ". Ignoring.");
        }
      }
      return components;
    }
    function background(property, configuration, validator) {
      var image = _wrapDefault("background-image", property, configuration);
      var position = _wrapDefault("background-position", property, configuration);
      var size = _wrapDefault("background-size", property, configuration);
      var repeat = _wrapDefault("background-repeat", property, configuration);
      var attachment = _wrapDefault("background-attachment", property, configuration);
      var origin = _wrapDefault("background-origin", property, configuration);
      var clip = _wrapDefault("background-clip", property, configuration);
      var color = _wrapDefault("background-color", property, configuration);
      var components = [image, position, size, repeat, attachment, origin, clip, color];
      var values = property.value;
      var positionSet = false;
      var clipSet = false;
      var originSet = false;
      var repeatSet = false;
      var anyValueSet = false;
      if (property.value.length == 1 && property.value[0][1] == "inherit") {
        color.value = image.value = repeat.value = position.value = size.value = origin.value = clip.value = property.value;
        return components;
      }
      if (property.value.length == 1 && property.value[0][1] == "0 0") {
        return components;
      }
      for (var i = values.length - 1; i >= 0; i--) {
        var value = values[i];
        if (validator.isBackgroundAttachmentKeyword(value[1])) {
          attachment.value = [value];
          anyValueSet = true;
        } else if (validator.isBackgroundClipKeyword(value[1]) || validator.isBackgroundOriginKeyword(value[1])) {
          if (clipSet) {
            origin.value = [value];
            originSet = true;
          } else {
            clip.value = [value];
            clipSet = true;
          }
          anyValueSet = true;
        } else if (validator.isBackgroundRepeatKeyword(value[1])) {
          if (repeatSet) {
            repeat.value.unshift(value);
          } else {
            repeat.value = [value];
            repeatSet = true;
          }
          anyValueSet = true;
        } else if (validator.isBackgroundPositionKeyword(value[1]) || validator.isBackgroundSizeKeyword(value[1]) || validator.isUnit(value[1]) || validator.isDynamicUnit(value[1])) {
          if (i > 0) {
            var previousValue = values[i - 1];
            if (previousValue[1] == Marker.FORWARD_SLASH) {
              size.value = [value];
            } else if (i > 1 && values[i - 2][1] == Marker.FORWARD_SLASH) {
              size.value = [previousValue, value];
              i -= 2;
            } else {
              if (!positionSet) {
                position.value = [];
              }
              position.value.unshift(value);
              positionSet = true;
            }
          } else {
            if (!positionSet) {
              position.value = [];
            }
            position.value.unshift(value);
            positionSet = true;
          }
          anyValueSet = true;
        } else if ((color.value[0][1] == configuration[color.name].defaultValue || color.value[0][1] == "none") && (validator.isColor(value[1]) || validator.isPrefixed(value[1]))) {
          color.value = [value];
          anyValueSet = true;
        } else if (validator.isUrl(value[1]) || validator.isFunction(value[1])) {
          image.value = [value];
          anyValueSet = true;
        }
      }
      if (clipSet && !originSet) {
        origin.value = clip.value.slice(0);
      }
      if (!anyValueSet) {
        throw new InvalidPropertyError("Invalid background value at " + formatPosition(values[0][2][0]) + ". Ignoring.");
      }
      return components;
    }
    function borderRadius(property, configuration) {
      var values = property.value;
      var splitAt = -1;
      for (var i = 0, l2 = values.length; i < l2; i++) {
        if (values[i][1] == Marker.FORWARD_SLASH) {
          splitAt = i;
          break;
        }
      }
      if (splitAt === 0 || splitAt === values.length - 1) {
        throw new InvalidPropertyError("Invalid border-radius value at " + formatPosition(values[0][2][0]) + ". Ignoring.");
      }
      var target = _wrapDefault(property.name, property, configuration);
      target.value = splitAt > -1 ? values.slice(0, splitAt) : values.slice(0);
      target.components = fourValues(target, configuration);
      var remainder = _wrapDefault(property.name, property, configuration);
      remainder.value = splitAt > -1 ? values.slice(splitAt + 1) : values.slice(0);
      remainder.components = fourValues(remainder, configuration);
      for (var j = 0; j < 4; j++) {
        target.components[j].multiplex = true;
        target.components[j].value = target.components[j].value.concat(remainder.components[j].value);
      }
      return target.components;
    }
    function font(property, configuration, validator) {
      var style = _wrapDefault("font-style", property, configuration);
      var variant = _wrapDefault("font-variant", property, configuration);
      var weight = _wrapDefault("font-weight", property, configuration);
      var stretch = _wrapDefault("font-stretch", property, configuration);
      var size = _wrapDefault("font-size", property, configuration);
      var height = _wrapDefault("line-height", property, configuration);
      var family = _wrapDefault("font-family", property, configuration);
      var components = [style, variant, weight, stretch, size, height, family];
      var values = property.value;
      var fuzzyMatched = 4;
      var index = 0;
      var isStretchSet = false;
      var isStretchValid;
      var isStyleSet = false;
      var isStyleValid;
      var isVariantSet = false;
      var isVariantValid;
      var isWeightSet = false;
      var isWeightValid;
      var appendableFamilyName = false;
      if (!values[index]) {
        throw new InvalidPropertyError("Missing font values at " + formatPosition(property.all[property.position][1][2][0]) + ". Ignoring.");
      }
      if (values.length == 1 && values[0][1] == "inherit") {
        style.value = variant.value = weight.value = stretch.value = size.value = height.value = family.value = values;
        return components;
      }
      if (values.length == 1 && (validator.isFontKeyword(values[0][1]) || validator.isGlobal(values[0][1]) || validator.isPrefixed(values[0][1]))) {
        values[0][1] = Marker.INTERNAL + values[0][1];
        style.value = variant.value = weight.value = stretch.value = size.value = height.value = family.value = values;
        return components;
      }
      if (values.length < 2 || !_anyIsFontSize(values, validator) || !_anyIsFontFamily(values, validator)) {
        throw new InvalidPropertyError("Invalid font values at " + formatPosition(property.all[property.position][1][2][0]) + ". Ignoring.");
      }
      if (values.length > 1 && _anyIsInherit(values)) {
        throw new InvalidPropertyError("Invalid font values at " + formatPosition(values[0][2][0]) + ". Ignoring.");
      }
      while (index < fuzzyMatched) {
        isStretchValid = validator.isFontStretchKeyword(values[index][1]) || validator.isGlobal(values[index][1]);
        isStyleValid = validator.isFontStyleKeyword(values[index][1]) || validator.isGlobal(values[index][1]);
        isVariantValid = validator.isFontVariantKeyword(values[index][1]) || validator.isGlobal(values[index][1]);
        isWeightValid = validator.isFontWeightKeyword(values[index][1]) || validator.isGlobal(values[index][1]);
        if (isStyleValid && !isStyleSet) {
          style.value = [values[index]];
          isStyleSet = true;
        } else if (isVariantValid && !isVariantSet) {
          variant.value = [values[index]];
          isVariantSet = true;
        } else if (isWeightValid && !isWeightSet) {
          weight.value = [values[index]];
          isWeightSet = true;
        } else if (isStretchValid && !isStretchSet) {
          stretch.value = [values[index]];
          isStretchSet = true;
        } else if (isStyleValid && isStyleSet || isVariantValid && isVariantSet || isWeightValid && isWeightSet || isStretchValid && isStretchSet) {
          throw new InvalidPropertyError("Invalid font style / variant / weight / stretch value at " + formatPosition(values[0][2][0]) + ". Ignoring.");
        } else {
          break;
        }
        index++;
      }
      if (validator.isFontSizeKeyword(values[index][1]) || validator.isUnit(values[index][1]) && !validator.isDynamicUnit(values[index][1])) {
        size.value = [values[index]];
        index++;
      } else {
        throw new InvalidPropertyError("Missing font size at " + formatPosition(values[0][2][0]) + ". Ignoring.");
      }
      if (!values[index]) {
        throw new InvalidPropertyError("Missing font family at " + formatPosition(values[0][2][0]) + ". Ignoring.");
      }
      if (values[index] && values[index][1] == Marker.FORWARD_SLASH && values[index + 1] && (validator.isLineHeightKeyword(values[index + 1][1]) || validator.isUnit(values[index + 1][1]) || validator.isNumber(values[index + 1][1]))) {
        height.value = [values[index + 1]];
        index++;
        index++;
      }
      family.value = [];
      while (values[index]) {
        if (values[index][1] == Marker.COMMA) {
          appendableFamilyName = false;
        } else {
          if (appendableFamilyName) {
            family.value[family.value.length - 1][1] += Marker.SPACE + values[index][1];
          } else {
            family.value.push(values[index]);
          }
          appendableFamilyName = true;
        }
        index++;
      }
      if (family.value.length === 0) {
        throw new InvalidPropertyError("Missing font family at " + formatPosition(values[0][2][0]) + ". Ignoring.");
      }
      return components;
    }
    function _anyIsFontSize(values, validator) {
      var value;
      var i, l2;
      for (i = 0, l2 = values.length; i < l2; i++) {
        value = values[i];
        if (validator.isFontSizeKeyword(value[1]) || validator.isUnit(value[1]) && !validator.isDynamicUnit(value[1]) || validator.isFunction(value[1])) {
          return true;
        }
      }
      return false;
    }
    function _anyIsFontFamily(values, validator) {
      var value;
      var i, l2;
      for (i = 0, l2 = values.length; i < l2; i++) {
        value = values[i];
        if (validator.isIdentifier(value[1]) || validator.isQuotedText(value[1])) {
          return true;
        }
      }
      return false;
    }
    function fourValues(property, configuration) {
      var componentNames = configuration[property.name].components;
      var components = [];
      var value = property.value;
      if (value.length < 1) {
        return [];
      }
      if (value.length < 2) {
        value[1] = value[0].slice(0);
      }
      if (value.length < 3) {
        value[2] = value[0].slice(0);
      }
      if (value.length < 4) {
        value[3] = value[1].slice(0);
      }
      for (var i = componentNames.length - 1; i >= 0; i--) {
        var component = wrapSingle([
          Token.PROPERTY,
          [Token.PROPERTY_NAME, componentNames[i]]
        ]);
        component.value = [value[i]];
        components.unshift(component);
      }
      return components;
    }
    function multiplex(splitWith) {
      return function(property, configuration, validator) {
        var splitsAt = [];
        var values = property.value;
        var i, j, l2, m2;
        for (i = 0, l2 = values.length; i < l2; i++) {
          if (values[i][1] == ",") {
            splitsAt.push(i);
          }
        }
        if (splitsAt.length === 0) {
          return splitWith(property, configuration, validator);
        }
        var splitComponents = [];
        for (i = 0, l2 = splitsAt.length; i <= l2; i++) {
          var from = i === 0 ? 0 : splitsAt[i - 1] + 1;
          var to = i < l2 ? splitsAt[i] : values.length;
          var _property = _wrapDefault(property.name, property, configuration);
          _property.value = values.slice(from, to);
          if (_property.value.length > 0) {
            splitComponents.push(splitWith(_property, configuration, validator));
          }
        }
        var components = splitComponents[0];
        for (i = 0, l2 = components.length; i < l2; i++) {
          components[i].multiplex = true;
          for (j = 1, m2 = splitComponents.length; j < m2; j++) {
            components[i].value.push([Token.PROPERTY_VALUE, Marker.COMMA]);
            Array.prototype.push.apply(components[i].value, splitComponents[j][i].value);
          }
        }
        return components;
      };
    }
    function listStyle(property, configuration, validator) {
      var type = _wrapDefault("list-style-type", property, configuration);
      var position = _wrapDefault("list-style-position", property, configuration);
      var image = _wrapDefault("list-style-image", property, configuration);
      var components = [type, position, image];
      if (property.value.length == 1 && property.value[0][1] == "inherit") {
        type.value = position.value = image.value = [property.value[0]];
        return components;
      }
      var values = property.value.slice(0);
      var total = values.length;
      var index = 0;
      for (index = 0, total = values.length; index < total; index++) {
        if (validator.isUrl(values[index][1]) || values[index][1] == "0") {
          image.value = [values[index]];
          values.splice(index, 1);
          break;
        }
      }
      for (index = 0, total = values.length; index < total; index++) {
        if (validator.isListStylePositionKeyword(values[index][1])) {
          position.value = [values[index]];
          values.splice(index, 1);
          break;
        }
      }
      if (values.length > 0 && (validator.isListStyleTypeKeyword(values[0][1]) || validator.isIdentifier(values[0][1]))) {
        type.value = [values[0]];
      }
      return components;
    }
    function transition(property, configuration, validator) {
      var prop = _wrapDefault(property.name + "-property", property, configuration);
      var duration = _wrapDefault(property.name + "-duration", property, configuration);
      var timing = _wrapDefault(property.name + "-timing-function", property, configuration);
      var delay = _wrapDefault(property.name + "-delay", property, configuration);
      var components = [prop, duration, timing, delay];
      var values = property.value;
      var value;
      var durationSet = false;
      var delaySet = false;
      var propSet = false;
      var timingSet = false;
      var i;
      var l2;
      if (property.value.length == 1 && property.value[0][1] == "inherit") {
        prop.value = duration.value = timing.value = delay.value = property.value;
        return components;
      }
      if (values.length > 1 && _anyIsInherit(values)) {
        throw new InvalidPropertyError("Invalid animation values at " + formatPosition(values[0][2][0]) + ". Ignoring.");
      }
      for (i = 0, l2 = values.length; i < l2; i++) {
        value = values[i];
        if (validator.isTime(value[1]) && !durationSet) {
          duration.value = [value];
          durationSet = true;
        } else if (validator.isTime(value[1]) && !delaySet) {
          delay.value = [value];
          delaySet = true;
        } else if ((validator.isGlobal(value[1]) || validator.isTimingFunction(value[1])) && !timingSet) {
          timing.value = [value];
          timingSet = true;
        } else if (validator.isIdentifier(value[1]) && !propSet) {
          prop.value = [value];
          propSet = true;
        } else {
          throw new InvalidPropertyError("Invalid animation value at " + formatPosition(value[2][0]) + ". Ignoring.");
        }
      }
      return components;
    }
    function widthStyleColor(property, configuration, validator) {
      var descriptor = configuration[property.name];
      var components = [
        _wrapDefault(descriptor.components[0], property, configuration),
        _wrapDefault(descriptor.components[1], property, configuration),
        _wrapDefault(descriptor.components[2], property, configuration)
      ];
      var color, style, width;
      for (var i = 0; i < 3; i++) {
        var component = components[i];
        if (component.name.indexOf("color") > 0) {
          color = component;
        } else if (component.name.indexOf("style") > 0) {
          style = component;
        } else {
          width = component;
        }
      }
      if (property.value.length == 1 && property.value[0][1] == "inherit" || property.value.length == 3 && property.value[0][1] == "inherit" && property.value[1][1] == "inherit" && property.value[2][1] == "inherit") {
        color.value = style.value = width.value = [property.value[0]];
        return components;
      }
      var values = property.value.slice(0);
      var match, matches;
      if (values.length > 0) {
        matches = values.filter(_widthFilter(validator));
        match = matches.length > 1 && (matches[0][1] == "none" || matches[0][1] == "auto") ? matches[1] : matches[0];
        if (match) {
          width.value = [match];
          values.splice(values.indexOf(match), 1);
        }
      }
      if (values.length > 0) {
        match = values.filter(_styleFilter(validator))[0];
        if (match) {
          style.value = [match];
          values.splice(values.indexOf(match), 1);
        }
      }
      if (values.length > 0) {
        match = values.filter(_colorFilter(validator))[0];
        if (match) {
          color.value = [match];
          values.splice(values.indexOf(match), 1);
        }
      }
      return components;
    }
    module.exports = {
      animation,
      background,
      border: widthStyleColor,
      borderRadius,
      font,
      fourValues,
      listStyle,
      multiplex,
      outline: widthStyleColor,
      transition
    };
  }
});

// node_modules/clean-css/lib/optimizer/vendor-prefixes.js
var require_vendor_prefixes = __commonJS({
  "node_modules/clean-css/lib/optimizer/vendor-prefixes.js"(exports, module) {
    var VENDOR_PREFIX_PATTERN = /(?:^|\W)(-\w+-)/g;
    function unique(value) {
      var prefixes = [];
      var match;
      while ((match = VENDOR_PREFIX_PATTERN.exec(value)) !== null) {
        if (prefixes.indexOf(match[0]) == -1) {
          prefixes.push(match[0]);
        }
      }
      return prefixes;
    }
    function same(value1, value2) {
      return unique(value1).sort().join(",") == unique(value2).sort().join(",");
    }
    module.exports = {
      unique,
      same
    };
  }
});

// node_modules/clean-css/lib/optimizer/configuration/properties/understandable.js
var require_understandable = __commonJS({
  "node_modules/clean-css/lib/optimizer/configuration/properties/understandable.js"(exports, module) {
    var sameVendorPrefixes = require_vendor_prefixes().same;
    function understandable(validator, value1, value2, _position, isPaired) {
      if (!sameVendorPrefixes(value1, value2)) {
        return false;
      }
      if (isPaired && validator.isVariable(value1) !== validator.isVariable(value2)) {
        return false;
      }
      return true;
    }
    module.exports = understandable;
  }
});

// node_modules/clean-css/lib/optimizer/configuration/can-override.js
var require_can_override = __commonJS({
  "node_modules/clean-css/lib/optimizer/configuration/can-override.js"(exports, module) {
    var understandable = require_understandable();
    function animationIterationCount(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true) && !(validator.isAnimationIterationCountKeyword(value2) || validator.isPositiveNumber(value2))) {
        return false;
      }
      if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      }
      return validator.isAnimationIterationCountKeyword(value2) || validator.isPositiveNumber(value2);
    }
    function animationName(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true) && !(validator.isAnimationNameKeyword(value2) || validator.isIdentifier(value2))) {
        return false;
      }
      if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      }
      return validator.isAnimationNameKeyword(value2) || validator.isIdentifier(value2);
    }
    function areSameFunction(validator, value1, value2) {
      if (!validator.isFunction(value1) || !validator.isFunction(value2)) {
        return false;
      }
      var function1Name = value1.substring(0, value1.indexOf("("));
      var function2Name = value2.substring(0, value2.indexOf("("));
      var function1Value = value1.substring(function1Name.length + 1, value1.length - 1);
      var function2Value = value2.substring(function2Name.length + 1, value2.length - 1);
      if (validator.isFunction(function1Value) || validator.isFunction(function2Value)) {
        return function1Name === function2Name && areSameFunction(validator, function1Value, function2Value);
      }
      return function1Name === function2Name;
    }
    function backgroundPosition(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true) && !(validator.isBackgroundPositionKeyword(value2) || validator.isGlobal(value2))) {
        return false;
      }
      if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      }
      if (validator.isBackgroundPositionKeyword(value2) || validator.isGlobal(value2)) {
        return true;
      }
      return unit(validator, value1, value2);
    }
    function backgroundSize(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true) && !(validator.isBackgroundSizeKeyword(value2) || validator.isGlobal(value2))) {
        return false;
      }
      if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      }
      if (validator.isBackgroundSizeKeyword(value2) || validator.isGlobal(value2)) {
        return true;
      }
      return unit(validator, value1, value2);
    }
    function color(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true) && !validator.isColor(value2)) {
        return false;
      }
      if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      }
      if (!validator.colorOpacity && (validator.isRgbColor(value1) || validator.isHslColor(value1))) {
        return false;
      }
      if (!validator.colorOpacity && (validator.isRgbColor(value2) || validator.isHslColor(value2))) {
        return false;
      }
      if (!validator.colorHexAlpha && (validator.isHexAlphaColor(value1) || validator.isHexAlphaColor(value2))) {
        return false;
      }
      if (validator.isColor(value1) && validator.isColor(value2)) {
        return true;
      }
      return sameFunctionOrValue(validator, value1, value2);
    }
    function components(overrideCheckers) {
      return function(validator, value1, value2, position) {
        return overrideCheckers[position](validator, value1, value2);
      };
    }
    function fontFamily(validator, value1, value2) {
      return understandable(validator, value1, value2, 0, true);
    }
    function image(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true) && !validator.isImage(value2)) {
        return false;
      }
      if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      }
      if (validator.isImage(value2)) {
        return true;
      }
      if (validator.isImage(value1)) {
        return false;
      }
      return sameFunctionOrValue(validator, value1, value2);
    }
    function keyword(propertyName2) {
      return function(validator, value1, value2) {
        if (!understandable(validator, value1, value2, 0, true) && !validator.isKeyword(propertyName2)(value2)) {
          return false;
        }
        if (validator.isVariable(value1) && validator.isVariable(value2)) {
          return true;
        }
        return validator.isKeyword(propertyName2)(value2);
      };
    }
    function keywordWithGlobal(propertyName2) {
      return function(validator, value1, value2) {
        if (!understandable(validator, value1, value2, 0, true) && !(validator.isKeyword(propertyName2)(value2) || validator.isGlobal(value2))) {
          return false;
        }
        if (validator.isVariable(value1) && validator.isVariable(value2)) {
          return true;
        }
        return validator.isKeyword(propertyName2)(value2) || validator.isGlobal(value2);
      };
    }
    function propertyName(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true) && !validator.isIdentifier(value2)) {
        return false;
      }
      if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      }
      return validator.isIdentifier(value2);
    }
    function sameFunctionOrValue(validator, value1, value2) {
      return areSameFunction(validator, value1, value2) ? true : value1 === value2;
    }
    function textShadow(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true) && !(validator.isUnit(value2) || validator.isColor(value2) || validator.isGlobal(value2))) {
        return false;
      }
      if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      }
      return validator.isUnit(value2) || validator.isColor(value2) || validator.isGlobal(value2);
    }
    function time(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true) && !validator.isTime(value2)) {
        return false;
      }
      if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      }
      if (validator.isTime(value1) && !validator.isTime(value2)) {
        return false;
      }
      if (validator.isTime(value2)) {
        return true;
      }
      if (validator.isTime(value1)) {
        return false;
      }
      if (validator.isFunction(value1) && !validator.isPrefixed(value1) && validator.isFunction(value2) && !validator.isPrefixed(value2)) {
        return true;
      }
      return sameFunctionOrValue(validator, value1, value2);
    }
    function timingFunction(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true) && !(validator.isTimingFunction(value2) || validator.isGlobal(value2))) {
        return false;
      }
      if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      }
      return validator.isTimingFunction(value2) || validator.isGlobal(value2);
    }
    function unit(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true) && !validator.isUnit(value2)) {
        return false;
      }
      if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      }
      if (validator.isUnit(value1) && !validator.isUnit(value2)) {
        return false;
      }
      if (validator.isUnit(value2)) {
        return true;
      }
      if (validator.isUnit(value1)) {
        return false;
      }
      if (validator.isFunction(value1) && !validator.isPrefixed(value1) && validator.isFunction(value2) && !validator.isPrefixed(value2)) {
        return true;
      }
      return sameFunctionOrValue(validator, value1, value2);
    }
    function unitOrKeywordWithGlobal(propertyName2) {
      var byKeyword = keywordWithGlobal(propertyName2);
      return function(validator, value1, value2) {
        return unit(validator, value1, value2) || byKeyword(validator, value1, value2);
      };
    }
    function unitOrNumber(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true) && !(validator.isUnit(value2) || validator.isNumber(value2))) {
        return false;
      }
      if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      }
      if ((validator.isUnit(value1) || validator.isNumber(value1)) && !(validator.isUnit(value2) || validator.isNumber(value2))) {
        return false;
      }
      if (validator.isUnit(value2) || validator.isNumber(value2)) {
        return true;
      }
      if (validator.isUnit(value1) || validator.isNumber(value1)) {
        return false;
      }
      if (validator.isFunction(value1) && !validator.isPrefixed(value1) && validator.isFunction(value2) && !validator.isPrefixed(value2)) {
        return true;
      }
      return sameFunctionOrValue(validator, value1, value2);
    }
    function zIndex(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true) && !validator.isZIndex(value2)) {
        return false;
      }
      if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      }
      return validator.isZIndex(value2);
    }
    module.exports = {
      generic: {
        color,
        components,
        image,
        propertyName,
        time,
        timingFunction,
        unit,
        unitOrNumber
      },
      property: {
        animationDirection: keywordWithGlobal("animation-direction"),
        animationFillMode: keyword("animation-fill-mode"),
        animationIterationCount,
        animationName,
        animationPlayState: keywordWithGlobal("animation-play-state"),
        backgroundAttachment: keyword("background-attachment"),
        backgroundClip: keywordWithGlobal("background-clip"),
        backgroundOrigin: keyword("background-origin"),
        backgroundPosition,
        backgroundRepeat: keyword("background-repeat"),
        backgroundSize,
        bottom: unitOrKeywordWithGlobal("bottom"),
        borderCollapse: keyword("border-collapse"),
        borderStyle: keywordWithGlobal("*-style"),
        clear: keywordWithGlobal("clear"),
        cursor: keywordWithGlobal("cursor"),
        display: keywordWithGlobal("display"),
        float: keywordWithGlobal("float"),
        left: unitOrKeywordWithGlobal("left"),
        fontFamily,
        fontStretch: keywordWithGlobal("font-stretch"),
        fontStyle: keywordWithGlobal("font-style"),
        fontVariant: keywordWithGlobal("font-variant"),
        fontWeight: keywordWithGlobal("font-weight"),
        listStyleType: keywordWithGlobal("list-style-type"),
        listStylePosition: keywordWithGlobal("list-style-position"),
        outlineStyle: keywordWithGlobal("*-style"),
        overflow: keywordWithGlobal("overflow"),
        position: keywordWithGlobal("position"),
        right: unitOrKeywordWithGlobal("right"),
        textAlign: keywordWithGlobal("text-align"),
        textDecoration: keywordWithGlobal("text-decoration"),
        textOverflow: keywordWithGlobal("text-overflow"),
        textShadow,
        top: unitOrKeywordWithGlobal("top"),
        transform: sameFunctionOrValue,
        verticalAlign: unitOrKeywordWithGlobal("vertical-align"),
        visibility: keywordWithGlobal("visibility"),
        whiteSpace: keywordWithGlobal("white-space"),
        zIndex
      }
    };
  }
});

// node_modules/clean-css/lib/optimizer/clone.js
var require_clone = __commonJS({
  "node_modules/clean-css/lib/optimizer/clone.js"(exports, module) {
    var wrapSingle = require_wrap_for_optimizing().single;
    var Token = require_token();
    function deep(property) {
      var cloned = shallow(property);
      for (var i = property.components.length - 1; i >= 0; i--) {
        var component = shallow(property.components[i]);
        component.value = property.components[i].value.slice(0);
        cloned.components.unshift(component);
      }
      cloned.dirty = true;
      cloned.value = property.value.slice(0);
      return cloned;
    }
    function shallow(property) {
      var cloned = wrapSingle([
        Token.PROPERTY,
        [Token.PROPERTY_NAME, property.name]
      ]);
      cloned.important = property.important;
      cloned.hack = property.hack;
      cloned.unused = false;
      return cloned;
    }
    module.exports = {
      deep,
      shallow
    };
  }
});

// node_modules/clean-css/lib/optimizer/configuration/restore.js
var require_restore = __commonJS({
  "node_modules/clean-css/lib/optimizer/configuration/restore.js"(exports, module) {
    var shallowClone = require_clone().shallow;
    var Token = require_token();
    var Marker = require_marker();
    function isInheritOnly(values) {
      for (var i = 0, l2 = values.length; i < l2; i++) {
        var value = values[i][1];
        if (value != "inherit" && value != Marker.COMMA && value != Marker.FORWARD_SLASH) {
          return false;
        }
      }
      return true;
    }
    function background(property, configuration, lastInMultiplex) {
      var components = property.components;
      var restored = [];
      var needsOne, needsBoth;
      function restoreValue(component2) {
        Array.prototype.unshift.apply(restored, component2.value);
      }
      function isDefaultValue(component2) {
        var descriptor = configuration[component2.name];
        if (descriptor.doubleValues && descriptor.defaultValue.length == 1) {
          return component2.value[0][1] == descriptor.defaultValue[0] && (component2.value[1] ? component2.value[1][1] == descriptor.defaultValue[0] : true);
        }
        if (descriptor.doubleValues && descriptor.defaultValue.length != 1) {
          return component2.value[0][1] == descriptor.defaultValue[0] && (component2.value[1] ? component2.value[1][1] : component2.value[0][1]) == descriptor.defaultValue[1];
        }
        return component2.value[0][1] == descriptor.defaultValue;
      }
      for (var i = components.length - 1; i >= 0; i--) {
        var component = components[i];
        var isDefault2 = isDefaultValue(component);
        if (component.name == "background-clip") {
          var originComponent = components[i - 1];
          var isOriginDefault = isDefaultValue(originComponent);
          needsOne = component.value[0][1] == originComponent.value[0][1];
          needsBoth = !needsOne && (isOriginDefault && !isDefault2 || !isOriginDefault && !isDefault2 || !isOriginDefault && isDefault2 && component.value[0][1] != originComponent.value[0][1]);
          if (needsOne) {
            restoreValue(originComponent);
          } else if (needsBoth) {
            restoreValue(component);
            restoreValue(originComponent);
          }
          i--;
        } else if (component.name == "background-size") {
          var positionComponent = components[i - 1];
          var isPositionDefault = isDefaultValue(positionComponent);
          needsOne = !isPositionDefault && isDefault2;
          needsBoth = !needsOne && (isPositionDefault && !isDefault2 || !isPositionDefault && !isDefault2);
          if (needsOne) {
            restoreValue(positionComponent);
          } else if (needsBoth) {
            restoreValue(component);
            restored.unshift([Token.PROPERTY_VALUE, Marker.FORWARD_SLASH]);
            restoreValue(positionComponent);
          } else if (positionComponent.value.length == 1) {
            restoreValue(positionComponent);
          }
          i--;
        } else {
          if (isDefault2 || configuration[component.name].multiplexLastOnly && !lastInMultiplex) {
            continue;
          }
          restoreValue(component);
        }
      }
      if (restored.length === 0 && property.value.length == 1 && property.value[0][1] == "0") {
        restored.push(property.value[0]);
      }
      if (restored.length === 0) {
        restored.push([Token.PROPERTY_VALUE, configuration[property.name].defaultValue]);
      }
      if (isInheritOnly(restored)) {
        return [restored[0]];
      }
      return restored;
    }
    function borderRadius(property) {
      if (property.multiplex) {
        var horizontal = shallowClone(property);
        var vertical = shallowClone(property);
        for (var i = 0; i < 4; i++) {
          var component = property.components[i];
          var horizontalComponent = shallowClone(property);
          horizontalComponent.value = [component.value[0]];
          horizontal.components.push(horizontalComponent);
          var verticalComponent = shallowClone(property);
          verticalComponent.value = [component.value[1] || component.value[0]];
          vertical.components.push(verticalComponent);
        }
        var horizontalValues = fourValues(horizontal);
        var verticalValues = fourValues(vertical);
        if (horizontalValues.length == verticalValues.length && horizontalValues[0][1] == verticalValues[0][1] && (horizontalValues.length > 1 ? horizontalValues[1][1] == verticalValues[1][1] : true) && (horizontalValues.length > 2 ? horizontalValues[2][1] == verticalValues[2][1] : true) && (horizontalValues.length > 3 ? horizontalValues[3][1] == verticalValues[3][1] : true)) {
          return horizontalValues;
        }
        return horizontalValues.concat([[Token.PROPERTY_VALUE, Marker.FORWARD_SLASH]]).concat(verticalValues);
      }
      return fourValues(property);
    }
    function font(property, configuration) {
      var components = property.components;
      var restored = [];
      var component;
      var componentIndex = 0;
      var fontFamilyIndex = 0;
      if (property.value[0][1].indexOf(Marker.INTERNAL) === 0) {
        property.value[0][1] = property.value[0][1].substring(Marker.INTERNAL.length);
        return property.value;
      }
      while (componentIndex < 4) {
        component = components[componentIndex];
        if (component.value[0][1] != configuration[component.name].defaultValue) {
          Array.prototype.push.apply(restored, component.value);
        }
        componentIndex++;
      }
      Array.prototype.push.apply(restored, components[componentIndex].value);
      componentIndex++;
      if (components[componentIndex].value[0][1] != configuration[components[componentIndex].name].defaultValue) {
        Array.prototype.push.apply(restored, [[Token.PROPERTY_VALUE, Marker.FORWARD_SLASH]]);
        Array.prototype.push.apply(restored, components[componentIndex].value);
      }
      componentIndex++;
      while (components[componentIndex].value[fontFamilyIndex]) {
        restored.push(components[componentIndex].value[fontFamilyIndex]);
        if (components[componentIndex].value[fontFamilyIndex + 1]) {
          restored.push([Token.PROPERTY_VALUE, Marker.COMMA]);
        }
        fontFamilyIndex++;
      }
      if (isInheritOnly(restored)) {
        return [restored[0]];
      }
      return restored;
    }
    function fourValues(property) {
      var components = property.components;
      var value1 = components[0].value[0];
      var value2 = components[1].value[0];
      var value3 = components[2].value[0];
      var value4 = components[3].value[0];
      if (value1[1] == value2[1] && value1[1] == value3[1] && value1[1] == value4[1]) {
        return [value1];
      }
      if (value1[1] == value3[1] && value2[1] == value4[1]) {
        return [value1, value2];
      }
      if (value2[1] == value4[1]) {
        return [value1, value2, value3];
      }
      return [value1, value2, value3, value4];
    }
    function multiplex(restoreWith) {
      return function(property, configuration) {
        if (!property.multiplex) {
          return restoreWith(property, configuration, true);
        }
        var multiplexSize = 0;
        var restored = [];
        var componentMultiplexSoFar = {};
        var i, l2;
        for (i = 0, l2 = property.components[0].value.length; i < l2; i++) {
          if (property.components[0].value[i][1] == Marker.COMMA) {
            multiplexSize++;
          }
        }
        for (i = 0; i <= multiplexSize; i++) {
          var _property = shallowClone(property);
          for (var j = 0, m2 = property.components.length; j < m2; j++) {
            var componentToClone = property.components[j];
            var _component = shallowClone(componentToClone);
            _property.components.push(_component);
            for (var k = componentMultiplexSoFar[_component.name] || 0, n2 = componentToClone.value.length; k < n2; k++) {
              if (componentToClone.value[k][1] == Marker.COMMA) {
                componentMultiplexSoFar[_component.name] = k + 1;
                break;
              }
              _component.value.push(componentToClone.value[k]);
            }
          }
          var lastInMultiplex = i == multiplexSize;
          var _restored = restoreWith(_property, configuration, lastInMultiplex);
          Array.prototype.push.apply(restored, _restored);
          if (i < multiplexSize) {
            restored.push([Token.PROPERTY_VALUE, Marker.COMMA]);
          }
        }
        return restored;
      };
    }
    function withoutDefaults(property, configuration) {
      var components = property.components;
      var restored = [];
      for (var i = components.length - 1; i >= 0; i--) {
        var component = components[i];
        var descriptor = configuration[component.name];
        if (component.value[0][1] != descriptor.defaultValue || "keepUnlessDefault" in descriptor && !isDefault(components, configuration, descriptor.keepUnlessDefault)) {
          restored.unshift(component.value[0]);
        }
      }
      if (restored.length === 0) {
        restored.push([Token.PROPERTY_VALUE, configuration[property.name].defaultValue]);
      }
      if (isInheritOnly(restored)) {
        return [restored[0]];
      }
      return restored;
    }
    function isDefault(components, configuration, propertyName) {
      var component;
      var i, l2;
      for (i = 0, l2 = components.length; i < l2; i++) {
        component = components[i];
        if (component.name == propertyName && component.value[0][1] == configuration[propertyName].defaultValue) {
          return true;
        }
      }
      return false;
    }
    module.exports = {
      background,
      borderRadius,
      font,
      fourValues,
      multiplex,
      withoutDefaults
    };
  }
});

// node_modules/clean-css/lib/options/rounding-precision.js
var require_rounding_precision = __commonJS({
  "node_modules/clean-css/lib/options/rounding-precision.js"(exports, module) {
    var override = require_override();
    var INTEGER_PATTERN = /^\d+$/;
    var ALL_UNITS = ["*", "all"];
    var DEFAULT_PRECISION = "off";
    var DIRECTIVES_SEPARATOR = ",";
    var DIRECTIVE_VALUE_SEPARATOR = "=";
    function roundingPrecisionFrom(source) {
      return override(defaults(DEFAULT_PRECISION), buildPrecisionFrom(source));
    }
    function defaults(value) {
      return {
        ch: value,
        cm: value,
        em: value,
        ex: value,
        in: value,
        mm: value,
        pc: value,
        pt: value,
        px: value,
        q: value,
        rem: value,
        vh: value,
        vmax: value,
        vmin: value,
        vw: value,
        "%": value
      };
    }
    function buildPrecisionFrom(source) {
      if (source === null || source === void 0) {
        return {};
      }
      if (typeof source == "boolean") {
        return {};
      }
      if (typeof source == "number" && source == -1) {
        return defaults(DEFAULT_PRECISION);
      }
      if (typeof source == "number") {
        return defaults(source);
      }
      if (typeof source == "string" && INTEGER_PATTERN.test(source)) {
        return defaults(parseInt(source));
      }
      if (typeof source == "string" && source == DEFAULT_PRECISION) {
        return defaults(DEFAULT_PRECISION);
      }
      if (typeof source == "object") {
        return source;
      }
      return source.split(DIRECTIVES_SEPARATOR).reduce(function(accumulator, directive) {
        var directiveParts = directive.split(DIRECTIVE_VALUE_SEPARATOR);
        var name = directiveParts[0];
        var value = parseInt(directiveParts[1]);
        if (Number.isNaN(value) || value == -1) {
          value = DEFAULT_PRECISION;
        }
        if (ALL_UNITS.indexOf(name) > -1) {
          accumulator = override(accumulator, defaults(value));
        } else {
          accumulator[name] = value;
        }
        return accumulator;
      }, {});
    }
    module.exports = {
      DEFAULT: DEFAULT_PRECISION,
      roundingPrecisionFrom
    };
  }
});

// node_modules/clean-css/lib/options/optimization-level.js
var require_optimization_level = __commonJS({
  "node_modules/clean-css/lib/options/optimization-level.js"(exports, module) {
    var roundingPrecisionFrom = require_rounding_precision().roundingPrecisionFrom;
    var override = require_override();
    var OptimizationLevel = {
      Zero: "0",
      One: "1",
      Two: "2"
    };
    var DEFAULTS = {};
    DEFAULTS[OptimizationLevel.Zero] = {};
    DEFAULTS[OptimizationLevel.One] = {
      cleanupCharsets: true,
      normalizeUrls: true,
      optimizeBackground: true,
      optimizeBorderRadius: true,
      optimizeFilter: true,
      optimizeFontWeight: true,
      optimizeOutline: true,
      removeEmpty: true,
      removeNegativePaddings: true,
      removeQuotes: true,
      removeWhitespace: true,
      replaceMultipleZeros: true,
      replaceTimeUnits: true,
      replaceZeroUnits: true,
      roundingPrecision: roundingPrecisionFrom(void 0),
      selectorsSortingMethod: "standard",
      specialComments: "all",
      tidyAtRules: true,
      tidyBlockScopes: true,
      tidySelectors: true,
      variableValueOptimizers: []
    };
    DEFAULTS[OptimizationLevel.Two] = {
      mergeAdjacentRules: true,
      mergeIntoShorthands: true,
      mergeMedia: true,
      mergeNonAdjacentRules: true,
      mergeSemantically: false,
      overrideProperties: true,
      removeEmpty: true,
      reduceNonAdjacentRules: true,
      removeDuplicateFontRules: true,
      removeDuplicateMediaBlocks: true,
      removeDuplicateRules: true,
      removeUnusedAtRules: false,
      restructureRules: false,
      skipProperties: []
    };
    var ALL_KEYWORD_1 = "*";
    var ALL_KEYWORD_2 = "all";
    var FALSE_KEYWORD_1 = "false";
    var FALSE_KEYWORD_2 = "off";
    var TRUE_KEYWORD_1 = "true";
    var TRUE_KEYWORD_2 = "on";
    var LIST_VALUE_SEPARATOR = ",";
    var OPTION_SEPARATOR = ";";
    var OPTION_VALUE_SEPARATOR = ":";
    function optimizationLevelFrom(source) {
      var level = override(DEFAULTS, {});
      var Zero = OptimizationLevel.Zero;
      var One = OptimizationLevel.One;
      var Two = OptimizationLevel.Two;
      if (void 0 === source) {
        delete level[Two];
        return level;
      }
      if (typeof source == "string") {
        source = parseInt(source);
      }
      if (typeof source == "number" && source === parseInt(Two)) {
        return level;
      }
      if (typeof source == "number" && source === parseInt(One)) {
        delete level[Two];
        return level;
      }
      if (typeof source == "number" && source === parseInt(Zero)) {
        delete level[Two];
        delete level[One];
        return level;
      }
      if (typeof source == "object") {
        source = covertValuesToHashes(source);
      }
      if (One in source && "roundingPrecision" in source[One]) {
        source[One].roundingPrecision = roundingPrecisionFrom(source[One].roundingPrecision);
      }
      if (Two in source && "skipProperties" in source[Two] && typeof source[Two].skipProperties == "string") {
        source[Two].skipProperties = source[Two].skipProperties.split(LIST_VALUE_SEPARATOR);
      }
      if (Zero in source || One in source || Two in source) {
        level[Zero] = override(level[Zero], source[Zero]);
      }
      if (One in source && ALL_KEYWORD_1 in source[One]) {
        level[One] = override(level[One], defaults(One, normalizeValue(source[One][ALL_KEYWORD_1])));
        delete source[One][ALL_KEYWORD_1];
      }
      if (One in source && ALL_KEYWORD_2 in source[One]) {
        level[One] = override(level[One], defaults(One, normalizeValue(source[One][ALL_KEYWORD_2])));
        delete source[One][ALL_KEYWORD_2];
      }
      if (One in source || Two in source) {
        level[One] = override(level[One], source[One]);
      } else {
        delete level[One];
      }
      if (Two in source && ALL_KEYWORD_1 in source[Two]) {
        level[Two] = override(level[Two], defaults(Two, normalizeValue(source[Two][ALL_KEYWORD_1])));
        delete source[Two][ALL_KEYWORD_1];
      }
      if (Two in source && ALL_KEYWORD_2 in source[Two]) {
        level[Two] = override(level[Two], defaults(Two, normalizeValue(source[Two][ALL_KEYWORD_2])));
        delete source[Two][ALL_KEYWORD_2];
      }
      if (Two in source) {
        level[Two] = override(level[Two], source[Two]);
      } else {
        delete level[Two];
      }
      return level;
    }
    function defaults(level, value) {
      var options = override(DEFAULTS[level], {});
      var key;
      for (key in options) {
        if (typeof options[key] == "boolean") {
          options[key] = value;
        }
      }
      return options;
    }
    function normalizeValue(value) {
      switch (value) {
        case FALSE_KEYWORD_1:
        case FALSE_KEYWORD_2:
          return false;
        case TRUE_KEYWORD_1:
        case TRUE_KEYWORD_2:
          return true;
        default:
          return value;
      }
    }
    function covertValuesToHashes(source) {
      var clonedSource = override(source, {});
      var level;
      var i;
      for (i = 0; i <= 2; i++) {
        level = "" + i;
        if (level in clonedSource && (clonedSource[level] === void 0 || clonedSource[level] === false)) {
          delete clonedSource[level];
        }
        if (level in clonedSource && clonedSource[level] === true) {
          clonedSource[level] = {};
        }
        if (level in clonedSource && typeof clonedSource[level] == "string") {
          clonedSource[level] = covertToHash(clonedSource[level], level);
        }
      }
      return clonedSource;
    }
    function covertToHash(asString, level) {
      return asString.split(OPTION_SEPARATOR).reduce(function(accumulator, directive) {
        var parts = directive.split(OPTION_VALUE_SEPARATOR);
        var name = parts[0];
        var value = parts[1];
        var normalizedValue = normalizeValue(value);
        if (ALL_KEYWORD_1 == name || ALL_KEYWORD_2 == name) {
          accumulator = override(accumulator, defaults(level, normalizedValue));
        } else {
          accumulator[name] = normalizedValue;
        }
        return accumulator;
      }, {});
    }
    module.exports = {
      OptimizationLevel,
      optimizationLevelFrom
    };
  }
});

// node_modules/clean-css/lib/optimizer/level-1/property-optimizers/background.js
var require_background = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/property-optimizers/background.js"(exports, module) {
    var OptimizationLevel = require_optimization_level().OptimizationLevel;
    var plugin = {
      level1: {
        property: function background(_rule, property, options) {
          var values = property.value;
          if (!options.level[OptimizationLevel.One].optimizeBackground) {
            return;
          }
          if (values.length == 1 && values[0][1] == "none") {
            values[0][1] = "0 0";
          }
          if (values.length == 1 && values[0][1] == "transparent") {
            values[0][1] = "0 0";
          }
        }
      }
    };
    module.exports = plugin;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/property-optimizers/box-shadow.js
var require_box_shadow = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/property-optimizers/box-shadow.js"(exports, module) {
    var plugin = {
      level1: {
        property: function boxShadow(_rule, property) {
          var values = property.value;
          if (values.length == 4 && values[0][1] === "0" && values[1][1] === "0" && values[2][1] === "0" && values[3][1] === "0") {
            property.value.splice(2);
            property.dirty = true;
          }
        }
      }
    };
    module.exports = plugin;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/property-optimizers/border-radius.js
var require_border_radius = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/property-optimizers/border-radius.js"(exports, module) {
    var OptimizationLevel = require_optimization_level().OptimizationLevel;
    var plugin = {
      level1: {
        property: function borderRadius(_rule, property, options) {
          var values = property.value;
          if (!options.level[OptimizationLevel.One].optimizeBorderRadius) {
            return;
          }
          if (values.length == 3 && values[1][1] == "/" && values[0][1] == values[2][1]) {
            property.value.splice(1);
            property.dirty = true;
          } else if (values.length == 5 && values[2][1] == "/" && values[0][1] == values[3][1] && values[1][1] == values[4][1]) {
            property.value.splice(2);
            property.dirty = true;
          } else if (values.length == 7 && values[3][1] == "/" && values[0][1] == values[4][1] && values[1][1] == values[5][1] && values[2][1] == values[6][1]) {
            property.value.splice(3);
            property.dirty = true;
          } else if (values.length == 9 && values[4][1] == "/" && values[0][1] == values[5][1] && values[1][1] == values[6][1] && values[2][1] == values[7][1] && values[3][1] == values[8][1]) {
            property.value.splice(4);
            property.dirty = true;
          }
        }
      }
    };
    module.exports = plugin;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/property-optimizers/filter.js
var require_filter = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/property-optimizers/filter.js"(exports, module) {
    var OptimizationLevel = require_optimization_level().OptimizationLevel;
    var ALPHA_OR_CHROMA_FILTER_PATTERN = /progid:DXImageTransform\.Microsoft\.(Alpha|Chroma)(\W)/;
    var NO_SPACE_AFTER_COMMA_PATTERN = /,(\S)/g;
    var WHITESPACE_AROUND_EQUALS_PATTERN = / ?= ?/g;
    var plugin = {
      level1: {
        property: function filter(_rule, property, options) {
          if (!options.compatibility.properties.ieFilters) {
            return;
          }
          if (!options.level[OptimizationLevel.One].optimizeFilter) {
            return;
          }
          if (property.value.length == 1) {
            property.value[0][1] = property.value[0][1].replace(
              ALPHA_OR_CHROMA_FILTER_PATTERN,
              function(match, filter2, suffix) {
                return filter2.toLowerCase() + suffix;
              }
            );
          }
          property.value[0][1] = property.value[0][1].replace(NO_SPACE_AFTER_COMMA_PATTERN, ", $1").replace(WHITESPACE_AROUND_EQUALS_PATTERN, "=");
        }
      }
    };
    module.exports = plugin;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/property-optimizers/font-weight.js
var require_font_weight = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/property-optimizers/font-weight.js"(exports, module) {
    var OptimizationLevel = require_optimization_level().OptimizationLevel;
    var plugin = {
      level1: {
        property: function fontWeight(_rule, property, options) {
          var value = property.value[0][1];
          if (!options.level[OptimizationLevel.One].optimizeFontWeight) {
            return;
          }
          if (value == "normal") {
            value = "400";
          } else if (value == "bold") {
            value = "700";
          }
          property.value[0][1] = value;
        }
      }
    };
    module.exports = plugin;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/property-optimizers/margin.js
var require_margin = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/property-optimizers/margin.js"(exports, module) {
    var OptimizationLevel = require_optimization_level().OptimizationLevel;
    var plugin = {
      level1: {
        property: function margin(_rule, property, options) {
          var values = property.value;
          if (!options.level[OptimizationLevel.One].replaceMultipleZeros) {
            return;
          }
          if (values.length == 4 && values[0][1] === "0" && values[1][1] === "0" && values[2][1] === "0" && values[3][1] === "0") {
            property.value.splice(1);
            property.dirty = true;
          }
        }
      }
    };
    module.exports = plugin;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/property-optimizers/outline.js
var require_outline = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/property-optimizers/outline.js"(exports, module) {
    var OptimizationLevel = require_optimization_level().OptimizationLevel;
    var plugin = {
      level1: {
        property: function outline(_rule, property, options) {
          var values = property.value;
          if (!options.level[OptimizationLevel.One].optimizeOutline) {
            return;
          }
          if (values.length == 1 && values[0][1] == "none") {
            values[0][1] = "0";
          }
        }
      }
    };
    module.exports = plugin;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/property-optimizers/padding.js
var require_padding = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/property-optimizers/padding.js"(exports, module) {
    var OptimizationLevel = require_optimization_level().OptimizationLevel;
    function isNegative(value) {
      return value && value[1][0] == "-" && parseFloat(value[1]) < 0;
    }
    var plugin = {
      level1: {
        property: function padding(_rule, property, options) {
          var values = property.value;
          if (values.length == 4 && values[0][1] === "0" && values[1][1] === "0" && values[2][1] === "0" && values[3][1] === "0") {
            property.value.splice(1);
            property.dirty = true;
          }
          if (options.level[OptimizationLevel.One].removeNegativePaddings && (isNegative(property.value[0]) || isNegative(property.value[1]) || isNegative(property.value[2]) || isNegative(property.value[3]))) {
            property.unused = true;
          }
        }
      }
    };
    module.exports = plugin;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/property-optimizers.js
var require_property_optimizers = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/property-optimizers.js"(exports, module) {
    module.exports = {
      background: require_background().level1.property,
      boxShadow: require_box_shadow().level1.property,
      borderRadius: require_border_radius().level1.property,
      filter: require_filter().level1.property,
      fontWeight: require_font_weight().level1.property,
      margin: require_margin().level1.property,
      outline: require_outline().level1.property,
      padding: require_padding().level1.property
    };
  }
});

// node_modules/clean-css/lib/optimizer/level-1/value-optimizers/color/shorten-hex.js
var require_shorten_hex = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/value-optimizers/color/shorten-hex.js"(exports, module) {
    var COLORS = {
      aliceblue: "#f0f8ff",
      antiquewhite: "#faebd7",
      aqua: "#0ff",
      aquamarine: "#7fffd4",
      azure: "#f0ffff",
      beige: "#f5f5dc",
      bisque: "#ffe4c4",
      black: "#000",
      blanchedalmond: "#ffebcd",
      blue: "#00f",
      blueviolet: "#8a2be2",
      brown: "#a52a2a",
      burlywood: "#deb887",
      cadetblue: "#5f9ea0",
      chartreuse: "#7fff00",
      chocolate: "#d2691e",
      coral: "#ff7f50",
      cornflowerblue: "#6495ed",
      cornsilk: "#fff8dc",
      crimson: "#dc143c",
      cyan: "#0ff",
      darkblue: "#00008b",
      darkcyan: "#008b8b",
      darkgoldenrod: "#b8860b",
      darkgray: "#a9a9a9",
      darkgreen: "#006400",
      darkgrey: "#a9a9a9",
      darkkhaki: "#bdb76b",
      darkmagenta: "#8b008b",
      darkolivegreen: "#556b2f",
      darkorange: "#ff8c00",
      darkorchid: "#9932cc",
      darkred: "#8b0000",
      darksalmon: "#e9967a",
      darkseagreen: "#8fbc8f",
      darkslateblue: "#483d8b",
      darkslategray: "#2f4f4f",
      darkslategrey: "#2f4f4f",
      darkturquoise: "#00ced1",
      darkviolet: "#9400d3",
      deeppink: "#ff1493",
      deepskyblue: "#00bfff",
      dimgray: "#696969",
      dimgrey: "#696969",
      dodgerblue: "#1e90ff",
      firebrick: "#b22222",
      floralwhite: "#fffaf0",
      forestgreen: "#228b22",
      fuchsia: "#f0f",
      gainsboro: "#dcdcdc",
      ghostwhite: "#f8f8ff",
      gold: "#ffd700",
      goldenrod: "#daa520",
      gray: "#808080",
      green: "#008000",
      greenyellow: "#adff2f",
      grey: "#808080",
      honeydew: "#f0fff0",
      hotpink: "#ff69b4",
      indianred: "#cd5c5c",
      indigo: "#4b0082",
      ivory: "#fffff0",
      khaki: "#f0e68c",
      lavender: "#e6e6fa",
      lavenderblush: "#fff0f5",
      lawngreen: "#7cfc00",
      lemonchiffon: "#fffacd",
      lightblue: "#add8e6",
      lightcoral: "#f08080",
      lightcyan: "#e0ffff",
      lightgoldenrodyellow: "#fafad2",
      lightgray: "#d3d3d3",
      lightgreen: "#90ee90",
      lightgrey: "#d3d3d3",
      lightpink: "#ffb6c1",
      lightsalmon: "#ffa07a",
      lightseagreen: "#20b2aa",
      lightskyblue: "#87cefa",
      lightslategray: "#778899",
      lightslategrey: "#778899",
      lightsteelblue: "#b0c4de",
      lightyellow: "#ffffe0",
      lime: "#0f0",
      limegreen: "#32cd32",
      linen: "#faf0e6",
      magenta: "#ff00ff",
      maroon: "#800000",
      mediumaquamarine: "#66cdaa",
      mediumblue: "#0000cd",
      mediumorchid: "#ba55d3",
      mediumpurple: "#9370db",
      mediumseagreen: "#3cb371",
      mediumslateblue: "#7b68ee",
      mediumspringgreen: "#00fa9a",
      mediumturquoise: "#48d1cc",
      mediumvioletred: "#c71585",
      midnightblue: "#191970",
      mintcream: "#f5fffa",
      mistyrose: "#ffe4e1",
      moccasin: "#ffe4b5",
      navajowhite: "#ffdead",
      navy: "#000080",
      oldlace: "#fdf5e6",
      olive: "#808000",
      olivedrab: "#6b8e23",
      orange: "#ffa500",
      orangered: "#ff4500",
      orchid: "#da70d6",
      palegoldenrod: "#eee8aa",
      palegreen: "#98fb98",
      paleturquoise: "#afeeee",
      palevioletred: "#db7093",
      papayawhip: "#ffefd5",
      peachpuff: "#ffdab9",
      peru: "#cd853f",
      pink: "#ffc0cb",
      plum: "#dda0dd",
      powderblue: "#b0e0e6",
      purple: "#800080",
      rebeccapurple: "#663399",
      red: "#f00",
      rosybrown: "#bc8f8f",
      royalblue: "#4169e1",
      saddlebrown: "#8b4513",
      salmon: "#fa8072",
      sandybrown: "#f4a460",
      seagreen: "#2e8b57",
      seashell: "#fff5ee",
      sienna: "#a0522d",
      silver: "#c0c0c0",
      skyblue: "#87ceeb",
      slateblue: "#6a5acd",
      slategray: "#708090",
      slategrey: "#708090",
      snow: "#fffafa",
      springgreen: "#00ff7f",
      steelblue: "#4682b4",
      tan: "#d2b48c",
      teal: "#008080",
      thistle: "#d8bfd8",
      tomato: "#ff6347",
      turquoise: "#40e0d0",
      violet: "#ee82ee",
      wheat: "#f5deb3",
      white: "#fff",
      whitesmoke: "#f5f5f5",
      yellow: "#ff0",
      yellowgreen: "#9acd32"
    };
    var toHex = {};
    var toName = {};
    for (name in COLORS) {
      hex = COLORS[name];
      if (name.length < hex.length) {
        toName[hex] = name;
      } else {
        toHex[name] = hex;
      }
    }
    var hex;
    var name;
    var toHexPattern = new RegExp("(^| |,|\\))(" + Object.keys(toHex).join("|") + ")( |,|\\)|$)", "ig");
    var toNamePattern = new RegExp("(" + Object.keys(toName).join("|") + ")([^a-f0-9]|$)", "ig");
    function hexConverter(match, prefix, colorValue, suffix) {
      return prefix + toHex[colorValue.toLowerCase()] + suffix;
    }
    function nameConverter(match, colorValue, suffix) {
      return toName[colorValue.toLowerCase()] + suffix;
    }
    function shortenHex(value) {
      var hasHex = value.indexOf("#") > -1;
      var shortened = value.replace(toHexPattern, hexConverter);
      if (shortened != value) {
        shortened = shortened.replace(toHexPattern, hexConverter);
      }
      return hasHex ? shortened.replace(toNamePattern, nameConverter) : shortened;
    }
    module.exports = shortenHex;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/value-optimizers/color/shorten-hsl.js
var require_shorten_hsl = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/value-optimizers/color/shorten-hsl.js"(exports, module) {
    function hslToRgb(h, s, l2) {
      var r2, g, b;
      h %= 360;
      if (h < 0) {
        h += 360;
      }
      h = ~~h / 360;
      if (s < 0) {
        s = 0;
      } else if (s > 100) {
        s = 100;
      }
      s = ~~s / 100;
      if (l2 < 0) {
        l2 = 0;
      } else if (l2 > 100) {
        l2 = 100;
      }
      l2 = ~~l2 / 100;
      if (s === 0) {
        r2 = g = b = l2;
      } else {
        var q = l2 < 0.5 ? l2 * (1 + s) : l2 + s - l2 * s;
        var p2 = 2 * l2 - q;
        r2 = hueToRgb(p2, q, h + 1 / 3);
        g = hueToRgb(p2, q, h);
        b = hueToRgb(p2, q, h - 1 / 3);
      }
      return [~~(r2 * 255), ~~(g * 255), ~~(b * 255)];
    }
    function hueToRgb(p2, q, t) {
      if (t < 0) {
        t += 1;
      }
      if (t > 1) {
        t -= 1;
      }
      if (t < 1 / 6) {
        return p2 + (q - p2) * 6 * t;
      }
      if (t < 1 / 2) {
        return q;
      }
      if (t < 2 / 3) {
        return p2 + (q - p2) * (2 / 3 - t) * 6;
      }
      return p2;
    }
    function shortenHsl(hue, saturation, lightness) {
      var asRgb = hslToRgb(hue, saturation, lightness);
      var redAsHex = asRgb[0].toString(16);
      var greenAsHex = asRgb[1].toString(16);
      var blueAsHex = asRgb[2].toString(16);
      return "#" + ((redAsHex.length == 1 ? "0" : "") + redAsHex) + ((greenAsHex.length == 1 ? "0" : "") + greenAsHex) + ((blueAsHex.length == 1 ? "0" : "") + blueAsHex);
    }
    module.exports = shortenHsl;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/value-optimizers/color/shorten-rgb.js
var require_shorten_rgb = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/value-optimizers/color/shorten-rgb.js"(exports, module) {
    function shortenRgb(red, green, blue) {
      var normalizedRed = Math.max(0, Math.min(parseInt(red), 255));
      var normalizedGreen = Math.max(0, Math.min(parseInt(green), 255));
      var normalizedBlue = Math.max(0, Math.min(parseInt(blue), 255));
      return "#" + ("00000" + (normalizedRed << 16 | normalizedGreen << 8 | normalizedBlue).toString(16)).slice(-6);
    }
    module.exports = shortenRgb;
  }
});

// node_modules/clean-css/lib/utils/split.js
var require_split = __commonJS({
  "node_modules/clean-css/lib/utils/split.js"(exports, module) {
    var Marker = require_marker();
    function is(value, separator, isSeparatorRegex) {
      return isSeparatorRegex ? separator.test(value) : value === separator;
    }
    function split(value, separator) {
      var openLevel = Marker.OPEN_ROUND_BRACKET;
      var closeLevel = Marker.CLOSE_ROUND_BRACKET;
      var level = 0;
      var cursor = 0;
      var lastStart = 0;
      var lastValue;
      var lastCharacter;
      var len = value.length;
      var parts = [];
      var isSeparatorRegex = typeof separator == "object" && "exec" in separator;
      if (!isSeparatorRegex && value.indexOf(separator) == -1) {
        return [value];
      }
      if (value.indexOf(openLevel) == -1) {
        return value.split(separator);
      }
      while (cursor < len) {
        if (value[cursor] == openLevel) {
          level++;
        } else if (value[cursor] == closeLevel) {
          level--;
        }
        if (level === 0 && cursor > 0 && cursor + 1 < len && is(value[cursor], separator, isSeparatorRegex)) {
          parts.push(value.substring(lastStart, cursor));
          if (isSeparatorRegex && separator.exec(value[cursor]).length > 1) {
            parts.push(value[cursor]);
          }
          lastStart = cursor + 1;
        }
        cursor++;
      }
      if (lastStart < cursor + 1) {
        lastValue = value.substring(lastStart);
        lastCharacter = lastValue[lastValue.length - 1];
        if (is(lastCharacter, separator, isSeparatorRegex)) {
          lastValue = lastValue.substring(0, lastValue.length - 1);
        }
        parts.push(lastValue);
      }
      return parts;
    }
    module.exports = split;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/value-optimizers/color.js
var require_color = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/value-optimizers/color.js"(exports, module) {
    var shortenHex = require_shorten_hex();
    var shortenHsl = require_shorten_hsl();
    var shortenRgb = require_shorten_rgb();
    var split = require_split();
    var ANY_COLOR_FUNCTION_PATTERN = /(rgb|rgba|hsl|hsla)\(([^()]+)\)/gi;
    var COLOR_PREFIX_PATTERN = /#|rgb|hsl/gi;
    var HEX_LONG_PATTERN = /(^|[^='"])#([0-9a-f]{6})/gi;
    var HEX_SHORT_PATTERN = /(^|[^='"])#([0-9a-f]{3})/gi;
    var HEX_VALUE_PATTERN = /[0-9a-f]/i;
    var HSL_PATTERN = /hsl\((-?\d+),(-?\d+)%?,(-?\d+)%?\)/gi;
    var RGBA_HSLA_PATTERN = /(rgb|hsl)a?\((-?\d+),(-?\d+%?),(-?\d+%?),(0*[1-9]+[0-9]*(\.?\d*)?)\)/gi;
    var RGB_PATTERN = /rgb\((-?\d+),(-?\d+),(-?\d+)\)/gi;
    var TRANSPARENT_FUNCTION_PATTERN = /(?:rgba|hsla)\(0,0%?,0%?,0\)/g;
    var plugin = {
      level1: {
        value: function color(name, value, options) {
          if (!options.compatibility.properties.colors) {
            return value;
          }
          if (!value.match(COLOR_PREFIX_PATTERN)) {
            return shortenHex(value);
          }
          value = value.replace(RGBA_HSLA_PATTERN, function(match, colorFn, p1, p2, p3, alpha) {
            return parseInt(alpha) >= 1 ? colorFn + "(" + [p1, p2, p3].join(",") + ")" : match;
          }).replace(RGB_PATTERN, function(match, red, green, blue) {
            return shortenRgb(red, green, blue);
          }).replace(HSL_PATTERN, function(match, hue, saturation, lightness) {
            return shortenHsl(hue, saturation, lightness);
          }).replace(HEX_LONG_PATTERN, function(match, prefix, color2, at, inputValue) {
            var suffix = inputValue[at + match.length];
            if (suffix && HEX_VALUE_PATTERN.test(suffix)) {
              return match;
            }
            if (color2[0] == color2[1] && color2[2] == color2[3] && color2[4] == color2[5]) {
              return (prefix + "#" + color2[0] + color2[2] + color2[4]).toLowerCase();
            }
            return (prefix + "#" + color2).toLowerCase();
          }).replace(HEX_SHORT_PATTERN, function(match, prefix, color2) {
            return prefix + "#" + color2.toLowerCase();
          }).replace(ANY_COLOR_FUNCTION_PATTERN, function(match, colorFunction, colorDef) {
            var tokens = colorDef.split(",");
            var colorFnLowercase = colorFunction && colorFunction.toLowerCase();
            var applies = colorFnLowercase == "hsl" && tokens.length == 3 || colorFnLowercase == "hsla" && tokens.length == 4 || colorFnLowercase == "rgb" && tokens.length === 3 && colorDef.indexOf("%") > 0 || colorFnLowercase == "rgba" && tokens.length == 4 && tokens[0].indexOf("%") > 0;
            if (!applies) {
              return match;
            }
            if (tokens[1].indexOf("%") == -1) {
              tokens[1] += "%";
            }
            if (tokens[2].indexOf("%") == -1) {
              tokens[2] += "%";
            }
            return colorFunction + "(" + tokens.join(",") + ")";
          });
          if (options.compatibility.colors.opacity && name.indexOf("background") == -1) {
            value = value.replace(TRANSPARENT_FUNCTION_PATTERN, function(match) {
              if (split(value, ",").pop().indexOf("gradient(") > -1) {
                return match;
              }
              return "transparent";
            });
          }
          return shortenHex(value);
        }
      }
    };
    module.exports = plugin;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/value-optimizers/degrees.js
var require_degrees = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/value-optimizers/degrees.js"(exports, module) {
    var ZERO_DEG_PATTERN = /\(0deg\)/g;
    var plugin = {
      level1: {
        value: function degrees(_name, value, options) {
          if (!options.compatibility.properties.zeroUnits) {
            return value;
          }
          if (value.indexOf("0deg") == -1) {
            return value;
          }
          return value.replace(ZERO_DEG_PATTERN, "(0)");
        }
      }
    };
    module.exports = plugin;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/value-optimizers/starts-as-url.js
var require_starts_as_url = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/value-optimizers/starts-as-url.js"(exports, module) {
    var URL_PREFIX_PATTERN = /^url\(/i;
    function startsAsUrl(value) {
      return URL_PREFIX_PATTERN.test(value);
    }
    module.exports = startsAsUrl;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/value-optimizers/fraction.js
var require_fraction = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/value-optimizers/fraction.js"(exports, module) {
    var split = require_split();
    var startsAsUrl = require_starts_as_url();
    var OptimizationLevel = require_optimization_level().OptimizationLevel;
    var EXPRESSION_PATTERN = /^expression\(.*\)$/;
    var ANY_FUNCTION_PATTERN = /^(-(?:moz|ms|o|webkit)-[a-z-]+|[a-z-]+)\((.+)\)$/;
    var TOKEN_SEPARATOR_PATTERN = /([\s,/])/;
    var DOT_ZERO_PATTERN = /(^|\D)\.0+(\D|$)/g;
    var FRACTION_PATTERN = /\.([1-9]*)0+(\D|$)/g;
    var LEADING_ZERO_FRACTION_PATTERN = /(^|\D)0\.(\d)/g;
    var MINUS_ZERO_FRACTION_PATTERN = /([^\w\d-]|^)-0([^.]|$)/g;
    var ZERO_PREFIXED_UNIT_PATTERN = /(^|\s)0+([1-9])/g;
    function optimizeRecursively(value) {
      var functionTokens;
      var tokens;
      if (startsAsUrl(value)) {
        return value;
      }
      if (EXPRESSION_PATTERN.test(value)) {
        return value;
      }
      functionTokens = ANY_FUNCTION_PATTERN.exec(value);
      if (!functionTokens) {
        return optimizeFractions(value);
      }
      tokens = split(functionTokens[2], TOKEN_SEPARATOR_PATTERN).map(function(token) {
        return optimizeRecursively(token);
      });
      return functionTokens[1] + "(" + tokens.join("") + ")";
    }
    function optimizeFractions(value) {
      if (value.indexOf("0") == -1) {
        return value;
      }
      if (value.indexOf("-") > -1) {
        value = value.replace(MINUS_ZERO_FRACTION_PATTERN, "$10$2").replace(MINUS_ZERO_FRACTION_PATTERN, "$10$2");
      }
      return value.replace(ZERO_PREFIXED_UNIT_PATTERN, "$1$2").replace(DOT_ZERO_PATTERN, "$10$2").replace(FRACTION_PATTERN, function(match, nonZeroPart, suffix) {
        return (nonZeroPart.length > 0 ? "." : "") + nonZeroPart + suffix;
      }).replace(LEADING_ZERO_FRACTION_PATTERN, "$1.$2");
    }
    var plugin = {
      level1: {
        value: function fraction(name, value, options) {
          if (!options.level[OptimizationLevel.One].replaceZeroUnits) {
            return value;
          }
          return optimizeRecursively(value);
        }
      }
    };
    module.exports = plugin;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/value-optimizers/precision.js
var require_precision = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/value-optimizers/precision.js"(exports, module) {
    var plugin = {
      level1: {
        value: function precision(_name, value, options) {
          if (!options.precision.enabled || value.indexOf(".") === -1) {
            return value;
          }
          return value.replace(options.precision.decimalPointMatcher, "$1$2$3").replace(options.precision.zeroMatcher, function(match, integerPart, fractionPart, unit) {
            var multiplier = options.precision.units[unit].multiplier;
            var parsedInteger = parseInt(integerPart);
            var integer = Number.isNaN(parsedInteger) ? 0 : parsedInteger;
            var fraction = parseFloat(fractionPart);
            return Math.round((integer + fraction) * multiplier) / multiplier + unit;
          });
        }
      }
    };
    module.exports = plugin;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/value-optimizers/text-quotes.js
var require_text_quotes = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/value-optimizers/text-quotes.js"(exports, module) {
    var OptimizationLevel = require_optimization_level().OptimizationLevel;
    var LOCAL_PREFIX_PATTERN = /^local\(/i;
    var QUOTED_PATTERN = /^('.*'|".*")$/;
    var QUOTED_BUT_SAFE_PATTERN = /^['"][a-zA-Z][a-zA-Z\d\-_]+['"]$/;
    var GENERIC_FONT_FAMILY_PATTERN = /^['"](?:cursive|default|emoji|fangsong|fantasy|inherit|initial|math|monospace|revert|revert-layer|sans-serif|serif|system-ui|ui-monospace|ui-rounded|ui-sans-serif|ui-serif|unset)['"]$/;
    var plugin = {
      level1: {
        value: function textQuotes(name, value, options) {
          if ((name == "font-family" || name == "font") && GENERIC_FONT_FAMILY_PATTERN.test(value)) {
            return value;
          }
          if (!options.level[OptimizationLevel.One].removeQuotes) {
            return value;
          }
          if (!QUOTED_PATTERN.test(value) && !LOCAL_PREFIX_PATTERN.test(value)) {
            return value;
          }
          return QUOTED_BUT_SAFE_PATTERN.test(value) ? value.substring(1, value.length - 1) : value;
        }
      }
    };
    module.exports = plugin;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/value-optimizers/time.js
var require_time = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/value-optimizers/time.js"(exports, module) {
    var OptimizationLevel = require_optimization_level().OptimizationLevel;
    var TIME_VALUE = /^(-?[\d.]+)(m?s)$/;
    var plugin = {
      level1: {
        value: function time(name, value, options) {
          if (!options.level[OptimizationLevel.One].replaceTimeUnits) {
            return value;
          }
          if (!TIME_VALUE.test(value)) {
            return value;
          }
          return value.replace(TIME_VALUE, function(match, val, unit) {
            var newValue;
            if (unit == "ms") {
              newValue = parseInt(val) / 1e3 + "s";
            } else if (unit == "s") {
              newValue = parseFloat(val) * 1e3 + "ms";
            }
            return newValue.length < match.length ? newValue : match;
          });
        }
      }
    };
    module.exports = plugin;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/value-optimizers/unit.js
var require_unit = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/value-optimizers/unit.js"(exports, module) {
    var WHOLE_PIXEL_VALUE = /(?:^|\s|\()(-?\d+)px/;
    var plugin = {
      level1: {
        value: function unit(_name, value, options) {
          if (!WHOLE_PIXEL_VALUE.test(value)) {
            return value;
          }
          return value.replace(WHOLE_PIXEL_VALUE, function(match, val) {
            var newValue;
            var intVal = parseInt(val);
            if (intVal === 0) {
              return match;
            }
            if (options.compatibility.properties.shorterLengthUnits && options.compatibility.units.pt && intVal * 3 % 4 === 0) {
              newValue = intVal * 3 / 4 + "pt";
            }
            if (options.compatibility.properties.shorterLengthUnits && options.compatibility.units.pc && intVal % 16 === 0) {
              newValue = intVal / 16 + "pc";
            }
            if (options.compatibility.properties.shorterLengthUnits && options.compatibility.units.in && intVal % 96 === 0) {
              newValue = intVal / 96 + "in";
            }
            if (newValue) {
              newValue = match.substring(0, match.indexOf(val)) + newValue;
            }
            return newValue && newValue.length < match.length ? newValue : match;
          });
        }
      }
    };
    module.exports = plugin;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/value-optimizers/url-prefix.js
var require_url_prefix = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/value-optimizers/url-prefix.js"(exports, module) {
    var startsAsUrl = require_starts_as_url();
    var OptimizationLevel = require_optimization_level().OptimizationLevel;
    var URL_PREFIX_PATTERN = /^url\(/i;
    var plugin = {
      level1: {
        value: function urlPrefix(_name, value, options) {
          if (!options.level[OptimizationLevel.One].normalizeUrls) {
            return value;
          }
          if (!startsAsUrl(value)) {
            return value;
          }
          return value.replace(URL_PREFIX_PATTERN, "url(");
        }
      }
    };
    module.exports = plugin;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/value-optimizers/url-quotes.js
var require_url_quotes = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/value-optimizers/url-quotes.js"(exports, module) {
    var QUOTED_URL_PATTERN = /^url\(['"].+['"]\)$/;
    var QUOTED_URL_WITH_WHITESPACE_PATTERN = /^url\(['"].*[*\s()'"].*['"]\)$/;
    var QUOTES_PATTERN = /["']/g;
    var URL_DATA_PATTERN = /^url\(['"]data:[^;]+;charset/;
    var plugin = {
      level1: {
        value: function urlQuotes(_name, value, options) {
          if (options.compatibility.properties.urlQuotes) {
            return value;
          }
          return QUOTED_URL_PATTERN.test(value) && !QUOTED_URL_WITH_WHITESPACE_PATTERN.test(value) && !URL_DATA_PATTERN.test(value) ? value.replace(QUOTES_PATTERN, "") : value;
        }
      }
    };
    module.exports = plugin;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/value-optimizers/url-whitespace.js
var require_url_whitespace = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/value-optimizers/url-whitespace.js"(exports, module) {
    var startsAsUrl = require_starts_as_url();
    var WHITESPACE_PATTERN = /\\?\n|\\?\r\n/g;
    var WHITESPACE_PREFIX_PATTERN = /(\()\s+/g;
    var WHITESPACE_SUFFIX_PATTERN = /\s+(\))/g;
    var plugin = {
      level1: {
        value: function urlWhitespace(_name, value) {
          if (!startsAsUrl(value)) {
            return value;
          }
          return value.replace(WHITESPACE_PATTERN, "").replace(WHITESPACE_PREFIX_PATTERN, "$1").replace(WHITESPACE_SUFFIX_PATTERN, "$1");
        }
      }
    };
    module.exports = plugin;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/value-optimizers/whitespace.js
var require_whitespace = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/value-optimizers/whitespace.js"(exports, module) {
    var OptimizationLevel = require_optimization_level().OptimizationLevel;
    var Marker = require_marker();
    var CALC_DIVISION_WHITESPACE_PATTERN = /\) ?\/ ?/g;
    var COMMA_AND_SPACE_PATTERN = /, /g;
    var LINE_BREAK_PATTERN = /\r?\n/g;
    var MULTI_WHITESPACE_PATTERN = /\s+/g;
    var FUNCTION_CLOSING_BRACE_WHITESPACE_PATTERN = /\s+(;?\))/g;
    var FUNCTION_OPENING_BRACE_WHITESPACE_PATTERN = /(\(;?)\s+/g;
    var VARIABLE_NAME_PATTERN = /^--\S+$/;
    var VARIABLE_VALUE_PATTERN = /^var\(\s*--\S+\s*\)$/;
    var plugin = {
      level1: {
        value: function whitespace(name, value, options) {
          if (!options.level[OptimizationLevel.One].removeWhitespace) {
            return value;
          }
          if (VARIABLE_NAME_PATTERN.test(name) && !VARIABLE_VALUE_PATTERN.test(value)) {
            return value;
          }
          if (value.indexOf(" ") == -1 && value.indexOf("\n") == -1 || value.indexOf("expression") === 0) {
            return value;
          }
          if (value.indexOf(Marker.SINGLE_QUOTE) > -1 || value.indexOf(Marker.DOUBLE_QUOTE) > -1) {
            return value;
          }
          value = value.replace(LINE_BREAK_PATTERN, "");
          value = value.replace(MULTI_WHITESPACE_PATTERN, " ");
          if (value.indexOf("calc") > -1) {
            value = value.replace(CALC_DIVISION_WHITESPACE_PATTERN, ")/ ");
          }
          return value.replace(FUNCTION_OPENING_BRACE_WHITESPACE_PATTERN, "$1").replace(FUNCTION_CLOSING_BRACE_WHITESPACE_PATTERN, "$1").replace(COMMA_AND_SPACE_PATTERN, ",");
        }
      }
    };
    module.exports = plugin;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/value-optimizers/zero.js
var require_zero = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/value-optimizers/zero.js"(exports, module) {
    var split = require_split();
    var ANY_FUNCTION_PATTERN = /^(-(?:moz|ms|o|webkit)-[a-z-]+|[a-z-]+)\((.+)\)$/;
    var SKIP_FUNCTION_PATTERN = /^(?:-moz-calc|-webkit-calc|calc|rgb|hsl|rgba|hsla|min|max|clamp|expression)\(/;
    var TOKEN_SEPARATOR_PATTERN = /([\s,/])/;
    function removeRecursively(value, options) {
      var functionTokens;
      var tokens;
      if (SKIP_FUNCTION_PATTERN.test(value)) {
        return value;
      }
      functionTokens = ANY_FUNCTION_PATTERN.exec(value);
      if (!functionTokens) {
        return removeZeros(value, options);
      }
      tokens = split(functionTokens[2], TOKEN_SEPARATOR_PATTERN).map(function(token) {
        return removeRecursively(token, options);
      });
      return functionTokens[1] + "(" + tokens.join("") + ")";
    }
    function removeZeros(value, options) {
      return value.replace(options.unitsRegexp, "$10$2").replace(options.unitsRegexp, "$10$2");
    }
    var plugin = {
      level1: {
        value: function zero(name, value, options) {
          if (!options.compatibility.properties.zeroUnits) {
            return value;
          }
          if (value.indexOf("%") > 0 && (name == "height" || name == "max-height" || name == "width" || name == "max-width")) {
            return value;
          }
          return removeRecursively(value, options);
        }
      }
    };
    module.exports = plugin;
  }
});

// node_modules/clean-css/lib/optimizer/level-1/value-optimizers.js
var require_value_optimizers = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/value-optimizers.js"(exports, module) {
    module.exports = {
      color: require_color().level1.value,
      degrees: require_degrees().level1.value,
      fraction: require_fraction().level1.value,
      precision: require_precision().level1.value,
      textQuotes: require_text_quotes().level1.value,
      time: require_time().level1.value,
      unit: require_unit().level1.value,
      urlPrefix: require_url_prefix().level1.value,
      urlQuotes: require_url_quotes().level1.value,
      urlWhiteSpace: require_url_whitespace().level1.value,
      whiteSpace: require_whitespace().level1.value,
      zero: require_zero().level1.value
    };
  }
});

// node_modules/clean-css/lib/optimizer/configuration.js
var require_configuration = __commonJS({
  "node_modules/clean-css/lib/optimizer/configuration.js"(exports, module) {
    var breakUp = require_break_up();
    var canOverride = require_can_override();
    var restore = require_restore();
    var propertyOptimizers = require_property_optimizers();
    var valueOptimizers = require_value_optimizers();
    var override = require_override();
    var configuration = {
      animation: {
        canOverride: canOverride.generic.components([
          canOverride.generic.time,
          canOverride.generic.timingFunction,
          canOverride.generic.time,
          canOverride.property.animationIterationCount,
          canOverride.property.animationDirection,
          canOverride.property.animationFillMode,
          canOverride.property.animationPlayState,
          canOverride.property.animationName
        ]),
        components: [
          "animation-duration",
          "animation-timing-function",
          "animation-delay",
          "animation-iteration-count",
          "animation-direction",
          "animation-fill-mode",
          "animation-play-state",
          "animation-name"
        ],
        breakUp: breakUp.multiplex(breakUp.animation),
        defaultValue: "none",
        restore: restore.multiplex(restore.withoutDefaults),
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.textQuotes,
          valueOptimizers.time,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ],
        vendorPrefixes: [
          "-moz-",
          "-o-",
          "-webkit-"
        ]
      },
      "animation-delay": {
        canOverride: canOverride.generic.time,
        componentOf: [
          "animation"
        ],
        defaultValue: "0s",
        intoMultiplexMode: "real",
        valueOptimizers: [
          valueOptimizers.time,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ],
        vendorPrefixes: [
          "-moz-",
          "-o-",
          "-webkit-"
        ]
      },
      "animation-direction": {
        canOverride: canOverride.property.animationDirection,
        componentOf: [
          "animation"
        ],
        defaultValue: "normal",
        intoMultiplexMode: "real",
        vendorPrefixes: [
          "-moz-",
          "-o-",
          "-webkit-"
        ]
      },
      "animation-duration": {
        canOverride: canOverride.generic.time,
        componentOf: [
          "animation"
        ],
        defaultValue: "0s",
        intoMultiplexMode: "real",
        keepUnlessDefault: "animation-delay",
        valueOptimizers: [
          valueOptimizers.time,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ],
        vendorPrefixes: [
          "-moz-",
          "-o-",
          "-webkit-"
        ]
      },
      "animation-fill-mode": {
        canOverride: canOverride.property.animationFillMode,
        componentOf: [
          "animation"
        ],
        defaultValue: "none",
        intoMultiplexMode: "real",
        vendorPrefixes: [
          "-moz-",
          "-o-",
          "-webkit-"
        ]
      },
      "animation-iteration-count": {
        canOverride: canOverride.property.animationIterationCount,
        componentOf: [
          "animation"
        ],
        defaultValue: "1",
        intoMultiplexMode: "real",
        vendorPrefixes: [
          "-moz-",
          "-o-",
          "-webkit-"
        ]
      },
      "animation-name": {
        canOverride: canOverride.property.animationName,
        componentOf: [
          "animation"
        ],
        defaultValue: "none",
        intoMultiplexMode: "real",
        valueOptimizers: [
          valueOptimizers.textQuotes
        ],
        vendorPrefixes: [
          "-moz-",
          "-o-",
          "-webkit-"
        ]
      },
      "animation-play-state": {
        canOverride: canOverride.property.animationPlayState,
        componentOf: [
          "animation"
        ],
        defaultValue: "running",
        intoMultiplexMode: "real",
        vendorPrefixes: [
          "-moz-",
          "-o-",
          "-webkit-"
        ]
      },
      "animation-timing-function": {
        canOverride: canOverride.generic.timingFunction,
        componentOf: [
          "animation"
        ],
        defaultValue: "ease",
        intoMultiplexMode: "real",
        vendorPrefixes: [
          "-moz-",
          "-o-",
          "-webkit-"
        ]
      },
      background: {
        canOverride: canOverride.generic.components([
          canOverride.generic.image,
          canOverride.property.backgroundPosition,
          canOverride.property.backgroundSize,
          canOverride.property.backgroundRepeat,
          canOverride.property.backgroundAttachment,
          canOverride.property.backgroundOrigin,
          canOverride.property.backgroundClip,
          canOverride.generic.color
        ]),
        components: [
          "background-image",
          "background-position",
          "background-size",
          "background-repeat",
          "background-attachment",
          "background-origin",
          "background-clip",
          "background-color"
        ],
        breakUp: breakUp.multiplex(breakUp.background),
        defaultValue: "0 0",
        propertyOptimizer: propertyOptimizers.background,
        restore: restore.multiplex(restore.background),
        shortestValue: "0",
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.urlWhiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.zero,
          valueOptimizers.color,
          valueOptimizers.urlPrefix,
          valueOptimizers.urlQuotes
        ]
      },
      "background-attachment": {
        canOverride: canOverride.property.backgroundAttachment,
        componentOf: [
          "background"
        ],
        defaultValue: "scroll",
        intoMultiplexMode: "real"
      },
      "background-clip": {
        canOverride: canOverride.property.backgroundClip,
        componentOf: [
          "background"
        ],
        defaultValue: "border-box",
        intoMultiplexMode: "real",
        shortestValue: "border-box"
      },
      "background-color": {
        canOverride: canOverride.generic.color,
        componentOf: [
          "background"
        ],
        defaultValue: "transparent",
        intoMultiplexMode: "real",
        // otherwise real color will turn into default since color appears in last multiplex only
        multiplexLastOnly: true,
        nonMergeableValue: "none",
        shortestValue: "red",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.color
        ]
      },
      "background-image": {
        canOverride: canOverride.generic.image,
        componentOf: [
          "background"
        ],
        defaultValue: "none",
        intoMultiplexMode: "default",
        valueOptimizers: [
          valueOptimizers.urlWhiteSpace,
          valueOptimizers.urlPrefix,
          valueOptimizers.urlQuotes,
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero,
          valueOptimizers.color
        ]
      },
      "background-origin": {
        canOverride: canOverride.property.backgroundOrigin,
        componentOf: [
          "background"
        ],
        defaultValue: "padding-box",
        intoMultiplexMode: "real",
        shortestValue: "border-box"
      },
      "background-position": {
        canOverride: canOverride.property.backgroundPosition,
        componentOf: [
          "background"
        ],
        defaultValue: ["0", "0"],
        doubleValues: true,
        intoMultiplexMode: "real",
        shortestValue: "0",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "background-repeat": {
        canOverride: canOverride.property.backgroundRepeat,
        componentOf: [
          "background"
        ],
        defaultValue: ["repeat"],
        doubleValues: true,
        intoMultiplexMode: "real"
      },
      "background-size": {
        canOverride: canOverride.property.backgroundSize,
        componentOf: [
          "background"
        ],
        defaultValue: ["auto"],
        doubleValues: true,
        intoMultiplexMode: "real",
        shortestValue: "0 0",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      bottom: {
        canOverride: canOverride.property.bottom,
        defaultValue: "auto",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      border: {
        breakUp: breakUp.border,
        canOverride: canOverride.generic.components([
          canOverride.generic.unit,
          canOverride.property.borderStyle,
          canOverride.generic.color
        ]),
        components: [
          "border-width",
          "border-style",
          "border-color"
        ],
        defaultValue: "none",
        overridesShorthands: [
          "border-bottom",
          "border-left",
          "border-right",
          "border-top"
        ],
        restore: restore.withoutDefaults,
        shorthand: true,
        shorthandComponents: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.zero,
          valueOptimizers.color
        ]
      },
      "border-bottom": {
        breakUp: breakUp.border,
        canOverride: canOverride.generic.components([
          canOverride.generic.unit,
          canOverride.property.borderStyle,
          canOverride.generic.color
        ]),
        components: [
          "border-bottom-width",
          "border-bottom-style",
          "border-bottom-color"
        ],
        defaultValue: "none",
        restore: restore.withoutDefaults,
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.zero,
          valueOptimizers.color
        ]
      },
      "border-bottom-color": {
        canOverride: canOverride.generic.color,
        componentOf: [
          "border-bottom",
          "border-color"
        ],
        defaultValue: "none",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.color
        ]
      },
      "border-bottom-left-radius": {
        canOverride: canOverride.generic.unit,
        componentOf: [
          "border-radius"
        ],
        defaultValue: "0",
        propertyOptimizer: propertyOptimizers.borderRadius,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ],
        vendorPrefixes: [
          "-moz-",
          "-o-"
        ]
      },
      "border-bottom-right-radius": {
        canOverride: canOverride.generic.unit,
        componentOf: [
          "border-radius"
        ],
        defaultValue: "0",
        propertyOptimizer: propertyOptimizers.borderRadius,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ],
        vendorPrefixes: [
          "-moz-",
          "-o-"
        ]
      },
      "border-bottom-style": {
        canOverride: canOverride.property.borderStyle,
        componentOf: [
          "border-bottom",
          "border-style"
        ],
        defaultValue: "none"
      },
      "border-bottom-width": {
        canOverride: canOverride.generic.unit,
        componentOf: [
          "border-bottom",
          "border-width"
        ],
        defaultValue: "medium",
        oppositeTo: "border-top-width",
        shortestValue: "0",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "border-collapse": {
        canOverride: canOverride.property.borderCollapse,
        defaultValue: "separate"
      },
      "border-color": {
        breakUp: breakUp.fourValues,
        canOverride: canOverride.generic.components([
          canOverride.generic.color,
          canOverride.generic.color,
          canOverride.generic.color,
          canOverride.generic.color
        ]),
        componentOf: [
          "border"
        ],
        components: [
          "border-top-color",
          "border-right-color",
          "border-bottom-color",
          "border-left-color"
        ],
        defaultValue: "none",
        restore: restore.fourValues,
        shortestValue: "red",
        shorthand: true,
        singleTypeComponents: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.color
        ]
      },
      "border-left": {
        breakUp: breakUp.border,
        canOverride: canOverride.generic.components([
          canOverride.generic.unit,
          canOverride.property.borderStyle,
          canOverride.generic.color
        ]),
        components: [
          "border-left-width",
          "border-left-style",
          "border-left-color"
        ],
        defaultValue: "none",
        restore: restore.withoutDefaults,
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.zero,
          valueOptimizers.color
        ]
      },
      "border-left-color": {
        canOverride: canOverride.generic.color,
        componentOf: [
          "border-color",
          "border-left"
        ],
        defaultValue: "none",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.color
        ]
      },
      "border-left-style": {
        canOverride: canOverride.property.borderStyle,
        componentOf: [
          "border-left",
          "border-style"
        ],
        defaultValue: "none"
      },
      "border-left-width": {
        canOverride: canOverride.generic.unit,
        componentOf: [
          "border-left",
          "border-width"
        ],
        defaultValue: "medium",
        oppositeTo: "border-right-width",
        shortestValue: "0",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "border-radius": {
        breakUp: breakUp.borderRadius,
        canOverride: canOverride.generic.components([
          canOverride.generic.unit,
          canOverride.generic.unit,
          canOverride.generic.unit,
          canOverride.generic.unit
        ]),
        components: [
          "border-top-left-radius",
          "border-top-right-radius",
          "border-bottom-right-radius",
          "border-bottom-left-radius"
        ],
        defaultValue: "0",
        propertyOptimizer: propertyOptimizers.borderRadius,
        restore: restore.borderRadius,
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ],
        vendorPrefixes: [
          "-moz-",
          "-o-"
        ]
      },
      "border-right": {
        breakUp: breakUp.border,
        canOverride: canOverride.generic.components([
          canOverride.generic.unit,
          canOverride.property.borderStyle,
          canOverride.generic.color
        ]),
        components: [
          "border-right-width",
          "border-right-style",
          "border-right-color"
        ],
        defaultValue: "none",
        restore: restore.withoutDefaults,
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.color
        ]
      },
      "border-right-color": {
        canOverride: canOverride.generic.color,
        componentOf: [
          "border-color",
          "border-right"
        ],
        defaultValue: "none",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.color
        ]
      },
      "border-right-style": {
        canOverride: canOverride.property.borderStyle,
        componentOf: [
          "border-right",
          "border-style"
        ],
        defaultValue: "none"
      },
      "border-right-width": {
        canOverride: canOverride.generic.unit,
        componentOf: [
          "border-right",
          "border-width"
        ],
        defaultValue: "medium",
        oppositeTo: "border-left-width",
        shortestValue: "0",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "border-style": {
        breakUp: breakUp.fourValues,
        canOverride: canOverride.generic.components([
          canOverride.property.borderStyle,
          canOverride.property.borderStyle,
          canOverride.property.borderStyle,
          canOverride.property.borderStyle
        ]),
        componentOf: [
          "border"
        ],
        components: [
          "border-top-style",
          "border-right-style",
          "border-bottom-style",
          "border-left-style"
        ],
        defaultValue: "none",
        restore: restore.fourValues,
        shorthand: true,
        singleTypeComponents: true
      },
      "border-top": {
        breakUp: breakUp.border,
        canOverride: canOverride.generic.components([
          canOverride.generic.unit,
          canOverride.property.borderStyle,
          canOverride.generic.color
        ]),
        components: [
          "border-top-width",
          "border-top-style",
          "border-top-color"
        ],
        defaultValue: "none",
        restore: restore.withoutDefaults,
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.zero,
          valueOptimizers.color,
          valueOptimizers.unit
        ]
      },
      "border-top-color": {
        canOverride: canOverride.generic.color,
        componentOf: [
          "border-color",
          "border-top"
        ],
        defaultValue: "none",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.color
        ]
      },
      "border-top-left-radius": {
        canOverride: canOverride.generic.unit,
        componentOf: [
          "border-radius"
        ],
        defaultValue: "0",
        propertyOptimizer: propertyOptimizers.borderRadius,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ],
        vendorPrefixes: [
          "-moz-",
          "-o-"
        ]
      },
      "border-top-right-radius": {
        canOverride: canOverride.generic.unit,
        componentOf: [
          "border-radius"
        ],
        defaultValue: "0",
        propertyOptimizer: propertyOptimizers.borderRadius,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ],
        vendorPrefixes: [
          "-moz-",
          "-o-"
        ]
      },
      "border-top-style": {
        canOverride: canOverride.property.borderStyle,
        componentOf: [
          "border-style",
          "border-top"
        ],
        defaultValue: "none"
      },
      "border-top-width": {
        canOverride: canOverride.generic.unit,
        componentOf: [
          "border-top",
          "border-width"
        ],
        defaultValue: "medium",
        oppositeTo: "border-bottom-width",
        shortestValue: "0",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "border-width": {
        breakUp: breakUp.fourValues,
        canOverride: canOverride.generic.components([
          canOverride.generic.unit,
          canOverride.generic.unit,
          canOverride.generic.unit,
          canOverride.generic.unit
        ]),
        componentOf: [
          "border"
        ],
        components: [
          "border-top-width",
          "border-right-width",
          "border-bottom-width",
          "border-left-width"
        ],
        defaultValue: "medium",
        restore: restore.fourValues,
        shortestValue: "0",
        shorthand: true,
        singleTypeComponents: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "box-shadow": {
        propertyOptimizer: propertyOptimizers.boxShadow,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero,
          valueOptimizers.color
        ],
        vendorPrefixes: [
          "-moz-",
          "-ms-",
          "-o-",
          "-webkit-"
        ]
      },
      clear: {
        canOverride: canOverride.property.clear,
        defaultValue: "none"
      },
      clip: {
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      color: {
        canOverride: canOverride.generic.color,
        defaultValue: "transparent",
        shortestValue: "red",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.color
        ]
      },
      "column-gap": {
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      cursor: {
        canOverride: canOverride.property.cursor,
        defaultValue: "auto"
      },
      display: { canOverride: canOverride.property.display },
      filter: {
        propertyOptimizer: propertyOptimizers.filter,
        valueOptimizers: [
          valueOptimizers.fraction
        ]
      },
      float: {
        canOverride: canOverride.property.float,
        defaultValue: "none"
      },
      font: {
        breakUp: breakUp.font,
        canOverride: canOverride.generic.components([
          canOverride.property.fontStyle,
          canOverride.property.fontVariant,
          canOverride.property.fontWeight,
          canOverride.property.fontStretch,
          canOverride.generic.unit,
          canOverride.generic.unit,
          canOverride.property.fontFamily
        ]),
        components: [
          "font-style",
          "font-variant",
          "font-weight",
          "font-stretch",
          "font-size",
          "line-height",
          "font-family"
        ],
        restore: restore.font,
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.textQuotes
        ]
      },
      "font-family": {
        canOverride: canOverride.property.fontFamily,
        defaultValue: "user|agent|specific",
        valueOptimizers: [
          valueOptimizers.textQuotes
        ]
      },
      "font-size": {
        canOverride: canOverride.generic.unit,
        defaultValue: "medium",
        shortestValue: "0",
        valueOptimizers: [
          valueOptimizers.fraction
        ]
      },
      "font-stretch": {
        canOverride: canOverride.property.fontStretch,
        defaultValue: "normal"
      },
      "font-style": {
        canOverride: canOverride.property.fontStyle,
        defaultValue: "normal"
      },
      "font-variant": {
        canOverride: canOverride.property.fontVariant,
        defaultValue: "normal"
      },
      "font-weight": {
        canOverride: canOverride.property.fontWeight,
        defaultValue: "normal",
        propertyOptimizer: propertyOptimizers.fontWeight,
        shortestValue: "400"
      },
      gap: {
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      height: {
        canOverride: canOverride.generic.unit,
        defaultValue: "auto",
        shortestValue: "0",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      left: {
        canOverride: canOverride.property.left,
        defaultValue: "auto",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "letter-spacing": {
        valueOptimizers: [
          valueOptimizers.fraction,
          valueOptimizers.zero
        ]
      },
      "line-height": {
        canOverride: canOverride.generic.unitOrNumber,
        defaultValue: "normal",
        shortestValue: "0",
        valueOptimizers: [
          valueOptimizers.fraction,
          valueOptimizers.zero
        ]
      },
      "list-style": {
        canOverride: canOverride.generic.components([
          canOverride.property.listStyleType,
          canOverride.property.listStylePosition,
          canOverride.property.listStyleImage
        ]),
        components: [
          "list-style-type",
          "list-style-position",
          "list-style-image"
        ],
        breakUp: breakUp.listStyle,
        restore: restore.withoutDefaults,
        defaultValue: "outside",
        // can't use 'disc' because that'd override default 'decimal' for <ol>
        shortestValue: "none",
        shorthand: true
      },
      "list-style-image": {
        canOverride: canOverride.generic.image,
        componentOf: [
          "list-style"
        ],
        defaultValue: "none"
      },
      "list-style-position": {
        canOverride: canOverride.property.listStylePosition,
        componentOf: [
          "list-style"
        ],
        defaultValue: "outside",
        shortestValue: "inside"
      },
      "list-style-type": {
        canOverride: canOverride.property.listStyleType,
        componentOf: [
          "list-style"
        ],
        // NOTE: we can't tell the real default value here, it's 'disc' for <ul> and 'decimal' for <ol>
        // this is a hack, but it doesn't matter because this value will be either overridden or
        // it will disappear at the final step anyway
        defaultValue: "decimal|disc",
        shortestValue: "none"
      },
      margin: {
        breakUp: breakUp.fourValues,
        canOverride: canOverride.generic.components([
          canOverride.generic.unit,
          canOverride.generic.unit,
          canOverride.generic.unit,
          canOverride.generic.unit
        ]),
        components: [
          "margin-top",
          "margin-right",
          "margin-bottom",
          "margin-left"
        ],
        defaultValue: "0",
        propertyOptimizer: propertyOptimizers.margin,
        restore: restore.fourValues,
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "margin-bottom": {
        canOverride: canOverride.generic.unit,
        componentOf: [
          "margin"
        ],
        defaultValue: "0",
        oppositeTo: "margin-top",
        propertyOptimizer: propertyOptimizers.margin,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "margin-inline-end": {
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "margin-inline-start": {
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "margin-left": {
        canOverride: canOverride.generic.unit,
        componentOf: [
          "margin"
        ],
        defaultValue: "0",
        oppositeTo: "margin-right",
        propertyOptimizer: propertyOptimizers.margin,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "margin-right": {
        canOverride: canOverride.generic.unit,
        componentOf: [
          "margin"
        ],
        defaultValue: "0",
        oppositeTo: "margin-left",
        propertyOptimizer: propertyOptimizers.margin,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "margin-top": {
        canOverride: canOverride.generic.unit,
        componentOf: [
          "margin"
        ],
        defaultValue: "0",
        oppositeTo: "margin-bottom",
        propertyOptimizer: propertyOptimizers.margin,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "max-height": {
        canOverride: canOverride.generic.unit,
        defaultValue: "none",
        shortestValue: "0",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "max-width": {
        canOverride: canOverride.generic.unit,
        defaultValue: "none",
        shortestValue: "0",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "min-height": {
        canOverride: canOverride.generic.unit,
        defaultValue: "0",
        shortestValue: "0",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "min-width": {
        canOverride: canOverride.generic.unit,
        defaultValue: "0",
        shortestValue: "0",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      opacity: {
        valueOptimizers: [
          valueOptimizers.fraction,
          valueOptimizers.precision
        ]
      },
      outline: {
        canOverride: canOverride.generic.components([
          canOverride.generic.color,
          canOverride.property.outlineStyle,
          canOverride.generic.unit
        ]),
        components: [
          "outline-color",
          "outline-style",
          "outline-width"
        ],
        breakUp: breakUp.outline,
        restore: restore.withoutDefaults,
        defaultValue: "0",
        propertyOptimizer: propertyOptimizers.outline,
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "outline-color": {
        canOverride: canOverride.generic.color,
        componentOf: [
          "outline"
        ],
        defaultValue: "invert",
        shortestValue: "red",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.color
        ]
      },
      "outline-style": {
        canOverride: canOverride.property.outlineStyle,
        componentOf: [
          "outline"
        ],
        defaultValue: "none"
      },
      "outline-width": {
        canOverride: canOverride.generic.unit,
        componentOf: [
          "outline"
        ],
        defaultValue: "medium",
        shortestValue: "0",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      overflow: {
        canOverride: canOverride.property.overflow,
        defaultValue: "visible"
      },
      "overflow-x": {
        canOverride: canOverride.property.overflow,
        defaultValue: "visible"
      },
      "overflow-y": {
        canOverride: canOverride.property.overflow,
        defaultValue: "visible"
      },
      padding: {
        breakUp: breakUp.fourValues,
        canOverride: canOverride.generic.components([
          canOverride.generic.unit,
          canOverride.generic.unit,
          canOverride.generic.unit,
          canOverride.generic.unit
        ]),
        components: [
          "padding-top",
          "padding-right",
          "padding-bottom",
          "padding-left"
        ],
        defaultValue: "0",
        propertyOptimizer: propertyOptimizers.padding,
        restore: restore.fourValues,
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "padding-bottom": {
        canOverride: canOverride.generic.unit,
        componentOf: [
          "padding"
        ],
        defaultValue: "0",
        oppositeTo: "padding-top",
        propertyOptimizer: propertyOptimizers.padding,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "padding-left": {
        canOverride: canOverride.generic.unit,
        componentOf: [
          "padding"
        ],
        defaultValue: "0",
        oppositeTo: "padding-right",
        propertyOptimizer: propertyOptimizers.padding,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "padding-right": {
        canOverride: canOverride.generic.unit,
        componentOf: [
          "padding"
        ],
        defaultValue: "0",
        oppositeTo: "padding-left",
        propertyOptimizer: propertyOptimizers.padding,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "padding-top": {
        canOverride: canOverride.generic.unit,
        componentOf: [
          "padding"
        ],
        defaultValue: "0",
        oppositeTo: "padding-bottom",
        propertyOptimizer: propertyOptimizers.padding,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      position: {
        canOverride: canOverride.property.position,
        defaultValue: "static"
      },
      right: {
        canOverride: canOverride.property.right,
        defaultValue: "auto",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "row-gap": {
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      src: {
        valueOptimizers: [
          valueOptimizers.urlWhiteSpace,
          valueOptimizers.urlPrefix,
          valueOptimizers.urlQuotes
        ]
      },
      "stroke-width": {
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "text-align": {
        canOverride: canOverride.property.textAlign,
        // NOTE: we can't tell the real default value here, as it depends on default text direction
        // this is a hack, but it doesn't matter because this value will be either overridden or
        // it will disappear anyway
        defaultValue: "left|right"
      },
      "text-decoration": {
        canOverride: canOverride.property.textDecoration,
        defaultValue: "none"
      },
      "text-indent": {
        canOverride: canOverride.property.textOverflow,
        defaultValue: "none",
        valueOptimizers: [
          valueOptimizers.fraction,
          valueOptimizers.zero
        ]
      },
      "text-overflow": {
        canOverride: canOverride.property.textOverflow,
        defaultValue: "none"
      },
      "text-shadow": {
        canOverride: canOverride.property.textShadow,
        defaultValue: "none",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.zero,
          valueOptimizers.color
        ]
      },
      top: {
        canOverride: canOverride.property.top,
        defaultValue: "auto",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      transform: {
        canOverride: canOverride.property.transform,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.degrees,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ],
        vendorPrefixes: [
          "-moz-",
          "-ms-",
          "-o-",
          "-webkit-"
        ]
      },
      transition: {
        breakUp: breakUp.multiplex(breakUp.transition),
        canOverride: canOverride.generic.components([
          canOverride.property.transitionProperty,
          canOverride.generic.time,
          canOverride.generic.timingFunction,
          canOverride.generic.time
        ]),
        components: [
          "transition-property",
          "transition-duration",
          "transition-timing-function",
          "transition-delay"
        ],
        defaultValue: "none",
        restore: restore.multiplex(restore.withoutDefaults),
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.time,
          valueOptimizers.fraction
        ],
        vendorPrefixes: [
          "-moz-",
          "-ms-",
          "-o-",
          "-webkit-"
        ]
      },
      "transition-delay": {
        canOverride: canOverride.generic.time,
        componentOf: [
          "transition"
        ],
        defaultValue: "0s",
        intoMultiplexMode: "real",
        valueOptimizers: [
          valueOptimizers.time
        ],
        vendorPrefixes: [
          "-moz-",
          "-ms-",
          "-o-",
          "-webkit-"
        ]
      },
      "transition-duration": {
        canOverride: canOverride.generic.time,
        componentOf: [
          "transition"
        ],
        defaultValue: "0s",
        intoMultiplexMode: "real",
        keepUnlessDefault: "transition-delay",
        valueOptimizers: [
          valueOptimizers.time,
          valueOptimizers.fraction
        ],
        vendorPrefixes: [
          "-moz-",
          "-ms-",
          "-o-",
          "-webkit-"
        ]
      },
      "transition-property": {
        canOverride: canOverride.generic.propertyName,
        componentOf: [
          "transition"
        ],
        defaultValue: "all",
        intoMultiplexMode: "placeholder",
        placeholderValue: "_",
        // it's a short value that won't match any property and still be a valid `transition-property`
        vendorPrefixes: [
          "-moz-",
          "-ms-",
          "-o-",
          "-webkit-"
        ]
      },
      "transition-timing-function": {
        canOverride: canOverride.generic.timingFunction,
        componentOf: [
          "transition"
        ],
        defaultValue: "ease",
        intoMultiplexMode: "real",
        vendorPrefixes: [
          "-moz-",
          "-ms-",
          "-o-",
          "-webkit-"
        ]
      },
      "vertical-align": {
        canOverride: canOverride.property.verticalAlign,
        defaultValue: "baseline",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      visibility: {
        canOverride: canOverride.property.visibility,
        defaultValue: "visible"
      },
      "-webkit-tap-highlight-color": {
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.color
        ]
      },
      "-webkit-margin-end": {
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "white-space": {
        canOverride: canOverride.property.whiteSpace,
        defaultValue: "normal"
      },
      width: {
        canOverride: canOverride.generic.unit,
        defaultValue: "auto",
        shortestValue: "0",
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      "z-index": {
        canOverride: canOverride.property.zIndex,
        defaultValue: "auto"
      }
    };
    var vendorPrefixedConfiguration = {};
    function cloneDescriptor(propertyName2, prefix2) {
      var clonedDescriptor2 = override(configuration[propertyName2], {});
      if ("componentOf" in clonedDescriptor2) {
        clonedDescriptor2.componentOf = clonedDescriptor2.componentOf.map(function(shorthandName) {
          return prefix2 + shorthandName;
        });
      }
      if ("components" in clonedDescriptor2) {
        clonedDescriptor2.components = clonedDescriptor2.components.map(function(longhandName) {
          return prefix2 + longhandName;
        });
      }
      if ("keepUnlessDefault" in clonedDescriptor2) {
        clonedDescriptor2.keepUnlessDefault = prefix2 + clonedDescriptor2.keepUnlessDefault;
      }
      return clonedDescriptor2;
    }
    for (propertyName in configuration) {
      descriptor = configuration[propertyName];
      if (!("vendorPrefixes" in descriptor)) {
        continue;
      }
      for (i = 0; i < descriptor.vendorPrefixes.length; i++) {
        prefix = descriptor.vendorPrefixes[i];
        clonedDescriptor = cloneDescriptor(propertyName, prefix);
        delete clonedDescriptor.vendorPrefixes;
        vendorPrefixedConfiguration[prefix + propertyName] = clonedDescriptor;
      }
      delete descriptor.vendorPrefixes;
    }
    var descriptor;
    var prefix;
    var clonedDescriptor;
    var i;
    var propertyName;
    module.exports = override(configuration, vendorPrefixedConfiguration);
  }
});

// node_modules/clean-css/lib/writer/helpers.js
var require_helpers = __commonJS({
  "node_modules/clean-css/lib/writer/helpers.js"(exports, module) {
    var emptyCharacter = "";
    var Breaks = require_format().Breaks;
    var Spaces = require_format().Spaces;
    var Marker = require_marker();
    var Token = require_token();
    function supportsAfterClosingBrace(token) {
      return token[1][1] == "background" || token[1][1] == "transform" || token[1][1] == "src";
    }
    function afterClosingBrace(token, valueIndex) {
      return token[valueIndex][1][token[valueIndex][1].length - 1] == Marker.CLOSE_ROUND_BRACKET;
    }
    function afterComma(token, valueIndex) {
      return token[valueIndex][1] == Marker.COMMA;
    }
    function afterSlash(token, valueIndex) {
      return token[valueIndex][1] == Marker.FORWARD_SLASH;
    }
    function beforeComma(token, valueIndex) {
      return token[valueIndex + 1] && token[valueIndex + 1][1] == Marker.COMMA;
    }
    function beforeSlash(token, valueIndex) {
      return token[valueIndex + 1] && token[valueIndex + 1][1] == Marker.FORWARD_SLASH;
    }
    function inFilter(token) {
      return token[1][1] == "filter" || token[1][1] == "-ms-filter";
    }
    function disallowsSpace(context, token, valueIndex) {
      return !context.spaceAfterClosingBrace && supportsAfterClosingBrace(token) && afterClosingBrace(token, valueIndex) || beforeSlash(token, valueIndex) || afterSlash(token, valueIndex) || beforeComma(token, valueIndex) || afterComma(token, valueIndex);
    }
    function rules(context, tokens) {
      var store = context.store;
      for (var i = 0, l2 = tokens.length; i < l2; i++) {
        store(context, tokens[i]);
        if (i < l2 - 1) {
          store(context, comma(context));
        }
      }
    }
    function body(context, tokens) {
      var lastPropertyAt = lastPropertyIndex(tokens);
      for (var i = 0, l2 = tokens.length; i < l2; i++) {
        property(context, tokens, i, lastPropertyAt);
      }
    }
    function lastPropertyIndex(tokens) {
      var index = tokens.length - 1;
      for (; index >= 0; index--) {
        if (tokens[index][0] != Token.COMMENT) {
          break;
        }
      }
      return index;
    }
    function property(context, tokens, position, lastPropertyAt) {
      var store = context.store;
      var token = tokens[position];
      var propertyValue = token[2];
      var isPropertyBlock = propertyValue && propertyValue[0] === Token.PROPERTY_BLOCK;
      var needsSemicolon;
      if (context.format) {
        if (context.format.semicolonAfterLastProperty || isPropertyBlock) {
          needsSemicolon = true;
        } else if (position < lastPropertyAt) {
          needsSemicolon = true;
        } else {
          needsSemicolon = false;
        }
      } else {
        needsSemicolon = position < lastPropertyAt || isPropertyBlock;
      }
      var isLast = position === lastPropertyAt;
      switch (token[0]) {
        case Token.AT_RULE:
          store(context, token);
          store(context, semicolon(context, Breaks.AfterProperty, false));
          break;
        case Token.AT_RULE_BLOCK:
          rules(context, token[1]);
          store(context, openBrace(context, Breaks.AfterRuleBegins, true));
          body(context, token[2]);
          store(context, closeBrace(context, Breaks.AfterRuleEnds, false, isLast));
          break;
        case Token.COMMENT:
          store(context, token);
          store(context, breakFor(context, Breaks.AfterComment) + context.indentWith);
          break;
        case Token.PROPERTY:
          store(context, token[1]);
          store(context, colon(context));
          if (propertyValue) {
            value(context, token);
          }
          store(
            context,
            needsSemicolon ? semicolon(context, Breaks.AfterProperty, isLast) : emptyCharacter
          );
          break;
        case Token.RAW:
          store(context, token);
      }
    }
    function value(context, token) {
      var store = context.store;
      var j, m2;
      if (token[2][0] == Token.PROPERTY_BLOCK) {
        store(context, openBrace(context, Breaks.AfterBlockBegins, false));
        body(context, token[2][1]);
        store(context, closeBrace(context, Breaks.AfterBlockEnds, false, true));
      } else {
        for (j = 2, m2 = token.length; j < m2; j++) {
          store(context, token[j]);
          if (j < m2 - 1 && (inFilter(token) || !disallowsSpace(context, token, j))) {
            store(context, Marker.SPACE);
          }
        }
      }
    }
    function breakFor(context, where) {
      return context.format ? context.format.breaks[where] : emptyCharacter;
    }
    function allowsSpace(context, where) {
      return context.format && context.format.spaces[where];
    }
    function openBrace(context, where, needsPrefixSpace) {
      if (context.format) {
        context.indentBy += context.format.indentBy;
        context.indentWith = context.format.indentWith.repeat(context.indentBy);
        return (needsPrefixSpace && allowsSpace(context, Spaces.BeforeBlockBegins) ? Marker.SPACE : emptyCharacter) + Marker.OPEN_CURLY_BRACKET + breakFor(context, where) + context.indentWith;
      }
      return Marker.OPEN_CURLY_BRACKET;
    }
    function closeBrace(context, where, beforeBlockEnd, isLast) {
      if (context.format) {
        context.indentBy -= context.format.indentBy;
        context.indentWith = context.format.indentWith.repeat(context.indentBy);
        return (beforeBlockEnd ? breakFor(context, Breaks.BeforeBlockEnds) : breakFor(context, Breaks.AfterProperty)) + context.indentWith + Marker.CLOSE_CURLY_BRACKET + (isLast ? emptyCharacter : breakFor(context, where) + context.indentWith);
      }
      return Marker.CLOSE_CURLY_BRACKET;
    }
    function colon(context) {
      return context.format ? Marker.COLON + (allowsSpace(context, Spaces.BeforeValue) ? Marker.SPACE : emptyCharacter) : Marker.COLON;
    }
    function semicolon(context, where, isLast) {
      return context.format ? Marker.SEMICOLON + (isLast ? emptyCharacter : breakFor(context, where) + context.indentWith) : Marker.SEMICOLON;
    }
    function comma(context) {
      return context.format ? Marker.COMMA + breakFor(context, Breaks.BetweenSelectors) + context.indentWith : Marker.COMMA;
    }
    function all(context, tokens) {
      var store = context.store;
      var token;
      var isLast;
      var i, l2;
      for (i = 0, l2 = tokens.length; i < l2; i++) {
        token = tokens[i];
        isLast = i == l2 - 1;
        switch (token[0]) {
          case Token.AT_RULE:
            store(context, token);
            store(context, semicolon(context, Breaks.AfterAtRule, isLast));
            break;
          case Token.AT_RULE_BLOCK:
            rules(context, token[1]);
            store(context, openBrace(context, Breaks.AfterRuleBegins, true));
            body(context, token[2]);
            store(context, closeBrace(context, Breaks.AfterRuleEnds, false, isLast));
            break;
          case Token.NESTED_BLOCK:
            rules(context, token[1]);
            store(context, openBrace(context, Breaks.AfterBlockBegins, true));
            all(context, token[2]);
            store(context, closeBrace(context, Breaks.AfterBlockEnds, true, isLast));
            break;
          case Token.COMMENT:
            store(context, token);
            store(context, breakFor(context, Breaks.AfterComment) + context.indentWith);
            break;
          case Token.RAW:
            store(context, token);
            break;
          case Token.RULE:
            rules(context, token[1]);
            store(context, openBrace(context, Breaks.AfterRuleBegins, true));
            body(context, token[2]);
            store(context, closeBrace(context, Breaks.AfterRuleEnds, false, isLast));
            break;
        }
      }
    }
    module.exports = {
      all,
      body,
      property,
      rules,
      value
    };
  }
});

// node_modules/clean-css/lib/writer/one-time.js
var require_one_time = __commonJS({
  "node_modules/clean-css/lib/writer/one-time.js"(exports, module) {
    var helpers = require_helpers();
    function store(serializeContext, token) {
      serializeContext.output.push(typeof token == "string" ? token : token[1]);
    }
    function context() {
      var newContext = {
        output: [],
        store
      };
      return newContext;
    }
    function all(tokens) {
      var oneTimeContext = context();
      helpers.all(oneTimeContext, tokens);
      return oneTimeContext.output.join("");
    }
    function body(tokens) {
      var oneTimeContext = context();
      helpers.body(oneTimeContext, tokens);
      return oneTimeContext.output.join("");
    }
    function property(tokens, position) {
      var oneTimeContext = context();
      helpers.property(oneTimeContext, tokens, position, true);
      return oneTimeContext.output.join("");
    }
    function rules(tokens) {
      var oneTimeContext = context();
      helpers.rules(oneTimeContext, tokens);
      return oneTimeContext.output.join("");
    }
    function value(tokens) {
      var oneTimeContext = context();
      helpers.value(oneTimeContext, tokens);
      return oneTimeContext.output.join("");
    }
    module.exports = {
      all,
      body,
      property,
      rules,
      value
    };
  }
});

// node_modules/clean-css/lib/optimizer/level-1/optimize.js
var require_optimize2 = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-1/optimize.js"(exports, module) {
    var sortSelectors = require_sort_selectors();
    var tidyRules = require_tidy_rules();
    var tidyBlock = require_tidy_block();
    var tidyAtRule = require_tidy_at_rule();
    var Hack = require_hack();
    var removeUnused = require_remove_unused();
    var restoreFromOptimizing = require_restore_from_optimizing();
    var wrapForOptimizing = require_wrap_for_optimizing().all;
    var configuration = require_configuration();
    var optimizers = require_value_optimizers();
    var OptimizationLevel = require_optimization_level().OptimizationLevel;
    var Token = require_token();
    var Marker = require_marker();
    var formatPosition = require_format_position();
    var serializeRules = require_one_time().rules;
    var CHARSET_TOKEN = "@charset";
    var CHARSET_REGEXP = new RegExp("^" + CHARSET_TOKEN, "i");
    var DEFAULT_ROUNDING_PRECISION = require_rounding_precision().DEFAULT;
    var VARIABLE_PROPERTY_NAME_PATTERN = /^--\S+$/;
    var PROPERTY_NAME_PATTERN = /^(?:-chrome-|-[\w-]+\w|\w[\w-]+\w|\w{1,})$/;
    var IMPORT_PREFIX_PATTERN = /^@import/i;
    var URL_PREFIX_PATTERN = /^url\(/i;
    function startsAsUrl(value) {
      return URL_PREFIX_PATTERN.test(value);
    }
    function isImport(token) {
      return IMPORT_PREFIX_PATTERN.test(token[1]);
    }
    function isLegacyFilter(property) {
      var value;
      if (property.name == "filter" || property.name == "-ms-filter") {
        value = property.value[0][1];
        return value.indexOf("progid") > -1 || value.indexOf("alpha") === 0 || value.indexOf("chroma") === 0;
      }
      return false;
    }
    function noop() {
    }
    function noopValueOptimizer(_name, value, _options) {
      return value;
    }
    function optimizeBody(rule, properties, context) {
      var options = context.options;
      var valueOptimizers;
      var property, name, type, value;
      var propertyToken;
      var propertyOptimizer;
      var serializedRule = serializeRules(rule);
      var _properties = wrapForOptimizing(properties);
      var pluginValueOptimizers = context.options.plugins.level1Value;
      var pluginPropertyOptimizers = context.options.plugins.level1Property;
      var isVariable;
      var i, l2;
      for (i = 0, l2 = _properties.length; i < l2; i++) {
        var j, k, m2, n2;
        property = _properties[i];
        name = property.name;
        propertyOptimizer = configuration[name] && configuration[name].propertyOptimizer || noop;
        valueOptimizers = configuration[name] && configuration[name].valueOptimizers || [optimizers.whiteSpace];
        isVariable = VARIABLE_PROPERTY_NAME_PATTERN.test(name);
        if (isVariable) {
          valueOptimizers = options.variableOptimizers.length > 0 ? options.variableOptimizers : [optimizers.whiteSpace];
        }
        if (!isVariable && !PROPERTY_NAME_PATTERN.test(name)) {
          propertyToken = property.all[property.position];
          context.warnings.push("Invalid property name '" + name + "' at " + formatPosition(propertyToken[1][2][0]) + ". Ignoring.");
          property.unused = true;
          continue;
        }
        if (property.value.length === 0) {
          propertyToken = property.all[property.position];
          context.warnings.push("Empty property '" + name + "' at " + formatPosition(propertyToken[1][2][0]) + ". Ignoring.");
          property.unused = true;
          continue;
        }
        if (property.hack && ((property.hack[0] == Hack.ASTERISK || property.hack[0] == Hack.UNDERSCORE) && !options.compatibility.properties.iePrefixHack || property.hack[0] == Hack.BACKSLASH && !options.compatibility.properties.ieSuffixHack || property.hack[0] == Hack.BANG && !options.compatibility.properties.ieBangHack)) {
          property.unused = true;
          continue;
        }
        if (!options.compatibility.properties.ieFilters && isLegacyFilter(property)) {
          property.unused = true;
          continue;
        }
        if (property.block) {
          optimizeBody(rule, property.value[0][1], context);
          continue;
        }
        for (j = 0, m2 = property.value.length; j < m2; j++) {
          type = property.value[j][0];
          value = property.value[j][1];
          if (type == Token.PROPERTY_BLOCK) {
            property.unused = true;
            context.warnings.push("Invalid value token at " + formatPosition(value[0][1][2][0]) + ". Ignoring.");
            break;
          }
          if (startsAsUrl(value) && !context.validator.isUrl(value)) {
            property.unused = true;
            context.warnings.push("Broken URL '" + value + "' at " + formatPosition(property.value[j][2][0]) + ". Ignoring.");
            break;
          }
          for (k = 0, n2 = valueOptimizers.length; k < n2; k++) {
            value = valueOptimizers[k](name, value, options);
          }
          for (k = 0, n2 = pluginValueOptimizers.length; k < n2; k++) {
            value = pluginValueOptimizers[k](name, value, options);
          }
          property.value[j][1] = value;
        }
        propertyOptimizer(serializedRule, property, options);
        for (j = 0, m2 = pluginPropertyOptimizers.length; j < m2; j++) {
          pluginPropertyOptimizers[j](serializedRule, property, options);
        }
      }
      restoreFromOptimizing(_properties);
      removeUnused(_properties);
      removeComments(properties, options);
    }
    function removeComments(tokens, options) {
      var token;
      var i;
      for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        if (token[0] != Token.COMMENT) {
          continue;
        }
        optimizeComment(token, options);
        if (token[1].length === 0) {
          tokens.splice(i, 1);
          i--;
        }
      }
    }
    function optimizeComment(token, options) {
      if (token[1][2] == Marker.EXCLAMATION && (options.level[OptimizationLevel.One].specialComments == "all" || options.commentsKept < options.level[OptimizationLevel.One].specialComments)) {
        options.commentsKept++;
        return;
      }
      token[1] = [];
    }
    function cleanupCharsets(tokens) {
      var hasCharset = false;
      for (var i = 0, l2 = tokens.length; i < l2; i++) {
        var token = tokens[i];
        if (token[0] != Token.AT_RULE) {
          continue;
        }
        if (!CHARSET_REGEXP.test(token[1])) {
          continue;
        }
        if (hasCharset || token[1].indexOf(CHARSET_TOKEN) == -1) {
          tokens.splice(i, 1);
          i--;
          l2--;
        } else {
          hasCharset = true;
          tokens.splice(i, 1);
          tokens.unshift([Token.AT_RULE, token[1].replace(CHARSET_REGEXP, CHARSET_TOKEN)]);
        }
      }
    }
    function buildUnitRegexp(options) {
      var units = ["px", "em", "ex", "cm", "mm", "in", "pt", "pc", "%"];
      var otherUnits = ["ch", "rem", "vh", "vm", "vmax", "vmin", "vw"];
      otherUnits.forEach(function(unit) {
        if (options.compatibility.units[unit]) {
          units.push(unit);
        }
      });
      return new RegExp("(^|\\s|\\(|,)0(?:" + units.join("|") + ")(\\W|$)", "g");
    }
    function buildPrecisionOptions(roundingPrecision) {
      var precisionOptions = {
        matcher: null,
        units: {}
      };
      var optimizable = [];
      var unit;
      var value;
      for (unit in roundingPrecision) {
        value = roundingPrecision[unit];
        if (value != DEFAULT_ROUNDING_PRECISION) {
          precisionOptions.units[unit] = {};
          precisionOptions.units[unit].value = value;
          precisionOptions.units[unit].multiplier = 10 ** value;
          optimizable.push(unit);
        }
      }
      if (optimizable.length > 0) {
        precisionOptions.enabled = true;
        precisionOptions.decimalPointMatcher = new RegExp("(\\d)\\.($|" + optimizable.join("|") + ")($|\\W)", "g");
        precisionOptions.zeroMatcher = new RegExp("(\\d*)(\\.\\d+)(" + optimizable.join("|") + ")", "g");
      }
      return precisionOptions;
    }
    function buildVariableOptimizers(options) {
      return options.level[OptimizationLevel.One].variableValueOptimizers.map(function(optimizer) {
        if (typeof optimizer == "string") {
          return optimizers[optimizer] || noopValueOptimizer;
        }
        return optimizer;
      });
    }
    function level1Optimize(tokens, context) {
      var options = context.options;
      var levelOptions = options.level[OptimizationLevel.One];
      var ie7Hack = options.compatibility.selectors.ie7Hack;
      var adjacentSpace = options.compatibility.selectors.adjacentSpace;
      var spaceAfterClosingBrace = options.compatibility.properties.spaceAfterClosingBrace;
      var format = options.format;
      var mayHaveCharset = false;
      var afterRules = false;
      options.unitsRegexp = options.unitsRegexp || buildUnitRegexp(options);
      options.precision = options.precision || buildPrecisionOptions(levelOptions.roundingPrecision);
      options.commentsKept = options.commentsKept || 0;
      options.variableOptimizers = options.variableOptimizers || buildVariableOptimizers(options);
      for (var i = 0, l2 = tokens.length; i < l2; i++) {
        var token = tokens[i];
        switch (token[0]) {
          case Token.AT_RULE:
            token[1] = isImport(token) && afterRules ? "" : token[1];
            token[1] = levelOptions.tidyAtRules ? tidyAtRule(token[1]) : token[1];
            mayHaveCharset = true;
            break;
          case Token.AT_RULE_BLOCK:
            optimizeBody(token[1], token[2], context);
            afterRules = true;
            break;
          case Token.NESTED_BLOCK:
            token[1] = levelOptions.tidyBlockScopes ? tidyBlock(token[1], spaceAfterClosingBrace) : token[1];
            level1Optimize(token[2], context);
            afterRules = true;
            break;
          case Token.COMMENT:
            optimizeComment(token, options);
            break;
          case Token.RULE:
            token[1] = levelOptions.tidySelectors ? tidyRules(token[1], !ie7Hack, adjacentSpace, format, context.warnings) : token[1];
            token[1] = token[1].length > 1 ? sortSelectors(token[1], levelOptions.selectorsSortingMethod) : token[1];
            optimizeBody(token[1], token[2], context);
            afterRules = true;
            break;
        }
        if (token[0] == Token.COMMENT && token[1].length === 0 || levelOptions.removeEmpty && (token[1].length === 0 || token[2] && token[2].length === 0)) {
          tokens.splice(i, 1);
          i--;
          l2--;
        }
      }
      if (levelOptions.cleanupCharsets && mayHaveCharset) {
        cleanupCharsets(tokens);
      }
      return tokens;
    }
    module.exports = level1Optimize;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/is-mergeable.js
var require_is_mergeable = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/is-mergeable.js"(exports, module) {
    var Marker = require_marker();
    var split = require_split();
    var DEEP_SELECTOR_PATTERN = /\/deep\//;
    var DOUBLE_COLON_PATTERN = /^::/;
    var VENDOR_PREFIXED_PATTERN = /:(-moz-|-ms-|-o-|-webkit-)/;
    var NOT_PSEUDO = ":not";
    var PSEUDO_CLASSES_WITH_ARGUMENTS = [
      ":dir",
      ":lang",
      ":not",
      ":nth-child",
      ":nth-last-child",
      ":nth-last-of-type",
      ":nth-of-type"
    ];
    var RELATION_PATTERN = /[>+~]/;
    var UNMIXABLE_PSEUDO_CLASSES = [
      ":after",
      ":before",
      ":first-letter",
      ":first-line",
      ":lang"
    ];
    var UNMIXABLE_PSEUDO_ELEMENTS = [
      "::after",
      "::before",
      "::first-letter",
      "::first-line"
    ];
    var Level = {
      DOUBLE_QUOTE: "double-quote",
      SINGLE_QUOTE: "single-quote",
      ROOT: "root"
    };
    function isMergeable(selector, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) {
      var singleSelectors = split(selector, Marker.COMMA);
      var singleSelector;
      var i, l2;
      for (i = 0, l2 = singleSelectors.length; i < l2; i++) {
        singleSelector = singleSelectors[i];
        if (singleSelector.length === 0 || isDeepSelector(singleSelector) || isVendorPrefixed(singleSelector) || singleSelector.indexOf(Marker.COLON) > -1 && !areMergeable(
          singleSelector,
          extractPseudoFrom(singleSelector),
          mergeablePseudoClasses,
          mergeablePseudoElements,
          multiplePseudoMerging
        )) {
          return false;
        }
      }
      return true;
    }
    function isDeepSelector(selector) {
      return DEEP_SELECTOR_PATTERN.test(selector);
    }
    function isVendorPrefixed(selector) {
      return VENDOR_PREFIXED_PATTERN.test(selector);
    }
    function extractPseudoFrom(selector) {
      var list = [];
      var character;
      var buffer = [];
      var level = Level.ROOT;
      var roundBracketLevel = 0;
      var isQuoted;
      var isEscaped;
      var isPseudo = false;
      var isRelation;
      var wasColon = false;
      var index;
      var len;
      for (index = 0, len = selector.length; index < len; index++) {
        character = selector[index];
        isRelation = !isEscaped && RELATION_PATTERN.test(character);
        isQuoted = level == Level.DOUBLE_QUOTE || level == Level.SINGLE_QUOTE;
        if (isEscaped) {
          buffer.push(character);
        } else if (character == Marker.DOUBLE_QUOTE && level == Level.ROOT) {
          buffer.push(character);
          level = Level.DOUBLE_QUOTE;
        } else if (character == Marker.DOUBLE_QUOTE && level == Level.DOUBLE_QUOTE) {
          buffer.push(character);
          level = Level.ROOT;
        } else if (character == Marker.SINGLE_QUOTE && level == Level.ROOT) {
          buffer.push(character);
          level = Level.SINGLE_QUOTE;
        } else if (character == Marker.SINGLE_QUOTE && level == Level.SINGLE_QUOTE) {
          buffer.push(character);
          level = Level.ROOT;
        } else if (isQuoted) {
          buffer.push(character);
        } else if (character == Marker.OPEN_ROUND_BRACKET) {
          buffer.push(character);
          roundBracketLevel++;
        } else if (character == Marker.CLOSE_ROUND_BRACKET && roundBracketLevel == 1 && isPseudo) {
          buffer.push(character);
          list.push(buffer.join(""));
          roundBracketLevel--;
          buffer = [];
          isPseudo = false;
        } else if (character == Marker.CLOSE_ROUND_BRACKET) {
          buffer.push(character);
          roundBracketLevel--;
        } else if (character == Marker.COLON && roundBracketLevel === 0 && isPseudo && !wasColon) {
          list.push(buffer.join(""));
          buffer = [];
          buffer.push(character);
        } else if (character == Marker.COLON && roundBracketLevel === 0 && !wasColon) {
          buffer = [];
          buffer.push(character);
          isPseudo = true;
        } else if (character == Marker.SPACE && roundBracketLevel === 0 && isPseudo) {
          list.push(buffer.join(""));
          buffer = [];
          isPseudo = false;
        } else if (isRelation && roundBracketLevel === 0 && isPseudo) {
          list.push(buffer.join(""));
          buffer = [];
          isPseudo = false;
        } else {
          buffer.push(character);
        }
        isEscaped = character == Marker.BACK_SLASH;
        wasColon = character == Marker.COLON;
      }
      if (buffer.length > 0 && isPseudo) {
        list.push(buffer.join(""));
      }
      return list;
    }
    function areMergeable(selector, matches, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) {
      return areAllowed(matches, mergeablePseudoClasses, mergeablePseudoElements) && needArguments(matches) && (matches.length < 2 || !someIncorrectlyChained(selector, matches)) && (matches.length < 2 || multiplePseudoMerging && allMixable(matches));
    }
    function areAllowed(matches, mergeablePseudoClasses, mergeablePseudoElements) {
      var match;
      var name;
      var i, l2;
      for (i = 0, l2 = matches.length; i < l2; i++) {
        match = matches[i];
        name = match.indexOf(Marker.OPEN_ROUND_BRACKET) > -1 ? match.substring(0, match.indexOf(Marker.OPEN_ROUND_BRACKET)) : match;
        if (mergeablePseudoClasses.indexOf(name) === -1 && mergeablePseudoElements.indexOf(name) === -1) {
          return false;
        }
      }
      return true;
    }
    function needArguments(matches) {
      var match;
      var name;
      var bracketOpensAt;
      var hasArguments;
      var i, l2;
      for (i = 0, l2 = matches.length; i < l2; i++) {
        match = matches[i];
        bracketOpensAt = match.indexOf(Marker.OPEN_ROUND_BRACKET);
        hasArguments = bracketOpensAt > -1;
        name = hasArguments ? match.substring(0, bracketOpensAt) : match;
        if (hasArguments && PSEUDO_CLASSES_WITH_ARGUMENTS.indexOf(name) == -1) {
          return false;
        }
        if (!hasArguments && PSEUDO_CLASSES_WITH_ARGUMENTS.indexOf(name) > -1) {
          return false;
        }
      }
      return true;
    }
    function someIncorrectlyChained(selector, matches) {
      var positionInSelector = 0;
      var match;
      var matchAt;
      var nextMatch;
      var nextMatchAt;
      var name;
      var nextName;
      var areChained;
      var i, l2;
      for (i = 0, l2 = matches.length; i < l2; i++) {
        match = matches[i];
        nextMatch = matches[i + 1];
        if (!nextMatch) {
          break;
        }
        matchAt = selector.indexOf(match, positionInSelector);
        nextMatchAt = selector.indexOf(match, matchAt + 1);
        positionInSelector = nextMatchAt;
        areChained = matchAt + match.length == nextMatchAt;
        if (areChained) {
          name = match.indexOf(Marker.OPEN_ROUND_BRACKET) > -1 ? match.substring(0, match.indexOf(Marker.OPEN_ROUND_BRACKET)) : match;
          nextName = nextMatch.indexOf(Marker.OPEN_ROUND_BRACKET) > -1 ? nextMatch.substring(0, nextMatch.indexOf(Marker.OPEN_ROUND_BRACKET)) : nextMatch;
          if (name != NOT_PSEUDO || nextName != NOT_PSEUDO) {
            return true;
          }
        }
      }
      return false;
    }
    function allMixable(matches) {
      var unmixableMatches = 0;
      var match;
      var i, l2;
      for (i = 0, l2 = matches.length; i < l2; i++) {
        match = matches[i];
        if (isPseudoElement(match)) {
          unmixableMatches += UNMIXABLE_PSEUDO_ELEMENTS.indexOf(match) > -1 ? 1 : 0;
        } else {
          unmixableMatches += UNMIXABLE_PSEUDO_CLASSES.indexOf(match) > -1 ? 1 : 0;
        }
        if (unmixableMatches > 1) {
          return false;
        }
      }
      return true;
    }
    function isPseudoElement(pseudo) {
      return DOUBLE_COLON_PATTERN.test(pseudo);
    }
    module.exports = isMergeable;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/properties/every-values-pair.js
var require_every_values_pair = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/properties/every-values-pair.js"(exports, module) {
    var Marker = require_marker();
    function everyValuesPair(fn, left, right) {
      var leftSize = left.value.length;
      var rightSize = right.value.length;
      var total = Math.max(leftSize, rightSize);
      var lowerBound = Math.min(leftSize, rightSize) - 1;
      var leftValue;
      var rightValue;
      var position;
      for (position = 0; position < total; position++) {
        leftValue = left.value[position] && left.value[position][1] || leftValue;
        rightValue = right.value[position] && right.value[position][1] || rightValue;
        if (leftValue == Marker.COMMA || rightValue == Marker.COMMA) {
          continue;
        }
        if (!fn(leftValue, rightValue, position, position <= lowerBound)) {
          return false;
        }
      }
      return true;
    }
    module.exports = everyValuesPair;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/properties/has-inherit.js
var require_has_inherit = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/properties/has-inherit.js"(exports, module) {
    function hasInherit(property) {
      for (var i = property.value.length - 1; i >= 0; i--) {
        if (property.value[i][1] == "inherit") {
          return true;
        }
      }
      return false;
    }
    module.exports = hasInherit;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/properties/has-same-values.js
var require_has_same_values = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/properties/has-same-values.js"(exports, module) {
    function hasSameValues(property) {
      var firstValue = property.value[0][1];
      var i, l2;
      for (i = 1, l2 = property.value.length; i < l2; i++) {
        if (property.value[i][1] != firstValue) {
          return false;
        }
      }
      return true;
    }
    module.exports = hasSameValues;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/properties/populate-components.js
var require_populate_components = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/properties/populate-components.js"(exports, module) {
    var configuration = require_configuration();
    var InvalidPropertyError = require_invalid_property_error();
    function populateComponents(properties, validator, warnings) {
      var component;
      var j, m2;
      for (var i = properties.length - 1; i >= 0; i--) {
        var property = properties[i];
        var descriptor = configuration[property.name];
        if (!property.dynamic && descriptor && descriptor.shorthand) {
          if (onlyValueIsVariable(property, validator) || moreThanOneValueIsVariable(property, validator)) {
            property.optimizable = false;
            continue;
          }
          property.shorthand = true;
          property.dirty = true;
          try {
            property.components = descriptor.breakUp(property, configuration, validator);
            if (descriptor.shorthandComponents) {
              for (j = 0, m2 = property.components.length; j < m2; j++) {
                component = property.components[j];
                component.components = configuration[component.name].breakUp(component, configuration, validator);
              }
            }
          } catch (e) {
            if (e instanceof InvalidPropertyError) {
              property.components = [];
              warnings.push(e.message);
            } else {
              throw e;
            }
          }
          if (property.components.length > 0) {
            property.multiplex = property.components[0].multiplex;
          } else {
            property.unused = true;
          }
        }
      }
    }
    function onlyValueIsVariable(property, validator) {
      return property.value.length == 1 && validator.isVariable(property.value[0][1]);
    }
    function moreThanOneValueIsVariable(property, validator) {
      return property.value.length > 1 && property.value.filter(
        function(value) {
          return validator.isVariable(value[1]);
        }
      ).length > 1;
    }
    module.exports = populateComponents;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/restore-with-components.js
var require_restore_with_components = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/restore-with-components.js"(exports, module) {
    var configuration = require_configuration();
    function restoreWithComponents(property) {
      var descriptor = configuration[property.name];
      if (descriptor && descriptor.shorthand) {
        return descriptor.restore(property, configuration);
      }
      return property.value;
    }
    module.exports = restoreWithComponents;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/properties/merge-into-shorthands.js
var require_merge_into_shorthands = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/properties/merge-into-shorthands.js"(exports, module) {
    var everyValuesPair = require_every_values_pair();
    var hasInherit = require_has_inherit();
    var hasSameValues = require_has_same_values();
    var populateComponents = require_populate_components();
    var configuration = require_configuration();
    var deepClone = require_clone().deep;
    var restoreWithComponents = require_restore_with_components();
    var restoreFromOptimizing = require_restore_from_optimizing();
    var wrapSingle = require_wrap_for_optimizing().single;
    var serializeBody = require_one_time().body;
    var Token = require_token();
    function mergeIntoShorthands(properties, validator) {
      var candidates = {};
      var descriptor;
      var componentOf;
      var property;
      var i, l2;
      var j, m2;
      if (properties.length < 3) {
        return;
      }
      for (i = 0, l2 = properties.length; i < l2; i++) {
        property = properties[i];
        descriptor = configuration[property.name];
        if (property.dynamic) {
          continue;
        }
        if (property.unused) {
          continue;
        }
        if (property.hack) {
          continue;
        }
        if (property.block) {
          continue;
        }
        if (descriptor && descriptor.singleTypeComponents && !hasSameValues(property)) {
          continue;
        }
        invalidateOrCompact(properties, i, candidates, validator);
        if (descriptor && descriptor.componentOf) {
          for (j = 0, m2 = descriptor.componentOf.length; j < m2; j++) {
            componentOf = descriptor.componentOf[j];
            candidates[componentOf] = candidates[componentOf] || {};
            candidates[componentOf][property.name] = property;
          }
        }
      }
      invalidateOrCompact(properties, i, candidates, validator);
    }
    function invalidateOrCompact(properties, position, candidates, validator) {
      var invalidatedBy = properties[position];
      var shorthandName;
      var shorthandDescriptor;
      var candidateComponents;
      var replacedCandidates = [];
      var i;
      for (shorthandName in candidates) {
        if (void 0 !== invalidatedBy && shorthandName == invalidatedBy.name) {
          continue;
        }
        shorthandDescriptor = configuration[shorthandName];
        candidateComponents = candidates[shorthandName];
        if (invalidatedBy && invalidates(candidates, shorthandName, invalidatedBy)) {
          delete candidates[shorthandName];
          continue;
        }
        if (shorthandDescriptor.components.length > Object.keys(candidateComponents).length) {
          continue;
        }
        if (mixedImportance(candidateComponents)) {
          continue;
        }
        if (!overridable(candidateComponents, shorthandName, validator)) {
          continue;
        }
        if (!mergeable(candidateComponents)) {
          continue;
        }
        if (mixedInherit(candidateComponents)) {
          replaceWithInheritBestFit(properties, candidateComponents, shorthandName, validator);
        } else {
          replaceWithShorthand(properties, candidateComponents, shorthandName, validator);
        }
        replacedCandidates.push(shorthandName);
      }
      for (i = replacedCandidates.length - 1; i >= 0; i--) {
        delete candidates[replacedCandidates[i]];
      }
    }
    function invalidates(candidates, shorthandName, invalidatedBy) {
      var shorthandDescriptor = configuration[shorthandName];
      var invalidatedByDescriptor = configuration[invalidatedBy.name];
      var componentName;
      if ("overridesShorthands" in shorthandDescriptor && shorthandDescriptor.overridesShorthands.indexOf(invalidatedBy.name) > -1) {
        return true;
      }
      if (invalidatedByDescriptor && "componentOf" in invalidatedByDescriptor) {
        for (componentName in candidates[shorthandName]) {
          if (invalidatedByDescriptor.componentOf.indexOf(componentName) > -1) {
            return true;
          }
        }
      }
      return false;
    }
    function mixedImportance(components) {
      var important;
      var componentName;
      for (componentName in components) {
        if (void 0 !== important && components[componentName].important != important) {
          return true;
        }
        important = components[componentName].important;
      }
      return false;
    }
    function overridable(components, shorthandName, validator) {
      var descriptor = configuration[shorthandName];
      var newValuePlaceholder = [
        Token.PROPERTY,
        [Token.PROPERTY_NAME, shorthandName],
        [Token.PROPERTY_VALUE, descriptor.defaultValue]
      ];
      var newProperty = wrapSingle(newValuePlaceholder);
      var component;
      var mayOverride;
      var i, l2;
      populateComponents([newProperty], validator, []);
      for (i = 0, l2 = descriptor.components.length; i < l2; i++) {
        component = components[descriptor.components[i]];
        mayOverride = configuration[component.name].canOverride || sameValue;
        if (!everyValuesPair(mayOverride.bind(null, validator), newProperty.components[i], component)) {
          return false;
        }
      }
      return true;
    }
    function sameValue(_validator, value1, value2) {
      return value1 === value2;
    }
    function mergeable(components) {
      var lastCount = null;
      var currentCount;
      var componentName;
      var component;
      var descriptor;
      var values;
      for (componentName in components) {
        component = components[componentName];
        descriptor = configuration[componentName];
        if (!("restore" in descriptor)) {
          continue;
        }
        restoreFromOptimizing([component.all[component.position]], restoreWithComponents);
        values = descriptor.restore(component, configuration);
        currentCount = values.length;
        if (lastCount !== null && currentCount !== lastCount) {
          return false;
        }
        lastCount = currentCount;
      }
      return true;
    }
    function mixedInherit(components) {
      var componentName;
      var lastValue = null;
      var currentValue;
      for (componentName in components) {
        currentValue = hasInherit(components[componentName]);
        if (lastValue !== null && lastValue !== currentValue) {
          return true;
        }
        lastValue = currentValue;
      }
      return false;
    }
    function replaceWithInheritBestFit(properties, candidateComponents, shorthandName, validator) {
      var viaLonghands = buildSequenceWithInheritLonghands(candidateComponents, shorthandName, validator);
      var viaShorthand = buildSequenceWithInheritShorthand(candidateComponents, shorthandName, validator);
      var longhandTokensSequence = viaLonghands[0];
      var shorthandTokensSequence = viaShorthand[0];
      var isLonghandsShorter = serializeBody(longhandTokensSequence).length < serializeBody(shorthandTokensSequence).length;
      var newTokensSequence = isLonghandsShorter ? longhandTokensSequence : shorthandTokensSequence;
      var newProperty = isLonghandsShorter ? viaLonghands[1] : viaShorthand[1];
      var newComponents = isLonghandsShorter ? viaLonghands[2] : viaShorthand[2];
      var lastComponent = candidateComponents[Object.keys(candidateComponents).pop()];
      var all = lastComponent.all;
      var insertAt = lastComponent.position;
      var componentName;
      var oldComponent;
      var newComponent;
      var newToken;
      newProperty.position = insertAt;
      newProperty.shorthand = true;
      newProperty.important = lastComponent.important;
      newProperty.multiplex = false;
      newProperty.dirty = true;
      newProperty.all = all;
      newProperty.all[insertAt] = newTokensSequence[0];
      properties.splice(insertAt, 1, newProperty);
      for (componentName in candidateComponents) {
        oldComponent = candidateComponents[componentName];
        oldComponent.unused = true;
        newProperty.multiplex = newProperty.multiplex || oldComponent.multiplex;
        if (oldComponent.name in newComponents) {
          newComponent = newComponents[oldComponent.name];
          newToken = findTokenIn(newTokensSequence, componentName);
          newComponent.position = all.length;
          newComponent.all = all;
          newComponent.all.push(newToken);
          properties.push(newComponent);
        }
      }
    }
    function buildSequenceWithInheritLonghands(components, shorthandName, validator) {
      var tokensSequence = [];
      var inheritComponents = {};
      var nonInheritComponents = {};
      var descriptor = configuration[shorthandName];
      var shorthandToken = [
        Token.PROPERTY,
        [Token.PROPERTY_NAME, shorthandName],
        [Token.PROPERTY_VALUE, descriptor.defaultValue]
      ];
      var newProperty = wrapSingle(shorthandToken);
      var component;
      var longhandToken;
      var newComponent;
      var nameMetadata;
      var i, l2;
      populateComponents([newProperty], validator, []);
      for (i = 0, l2 = descriptor.components.length; i < l2; i++) {
        component = components[descriptor.components[i]];
        if (hasInherit(component)) {
          longhandToken = component.all[component.position].slice(0, 2);
          Array.prototype.push.apply(longhandToken, component.value);
          tokensSequence.push(longhandToken);
          newComponent = deepClone(component);
          newComponent.value = inferComponentValue(components, newComponent.name);
          newProperty.components[i] = newComponent;
          inheritComponents[component.name] = deepClone(component);
        } else {
          newComponent = deepClone(component);
          newComponent.all = component.all;
          newProperty.components[i] = newComponent;
          nonInheritComponents[component.name] = component;
        }
      }
      newProperty.important = components[Object.keys(components).pop()].important;
      nameMetadata = joinMetadata(nonInheritComponents, 1);
      shorthandToken[1].push(nameMetadata);
      restoreFromOptimizing([newProperty], restoreWithComponents);
      shorthandToken = shorthandToken.slice(0, 2);
      Array.prototype.push.apply(shorthandToken, newProperty.value);
      tokensSequence.unshift(shorthandToken);
      return [tokensSequence, newProperty, inheritComponents];
    }
    function inferComponentValue(components, propertyName) {
      var descriptor = configuration[propertyName];
      if ("oppositeTo" in descriptor) {
        return components[descriptor.oppositeTo].value;
      }
      return [[Token.PROPERTY_VALUE, descriptor.defaultValue]];
    }
    function joinMetadata(components, at) {
      var metadata = [];
      var component;
      var originalValue;
      var componentMetadata;
      var componentName;
      for (componentName in components) {
        component = components[componentName];
        originalValue = component.all[component.position];
        componentMetadata = originalValue[at][originalValue[at].length - 1];
        Array.prototype.push.apply(metadata, componentMetadata);
      }
      return metadata.sort(metadataSorter);
    }
    function metadataSorter(metadata1, metadata2) {
      var line1 = metadata1[0];
      var line2 = metadata2[0];
      var column1 = metadata1[1];
      var column2 = metadata2[1];
      if (line1 < line2) {
        return -1;
      }
      if (line1 === line2) {
        return column1 < column2 ? -1 : 1;
      }
      return 1;
    }
    function buildSequenceWithInheritShorthand(components, shorthandName, validator) {
      var tokensSequence = [];
      var inheritComponents = {};
      var nonInheritComponents = {};
      var descriptor = configuration[shorthandName];
      var shorthandToken = [
        Token.PROPERTY,
        [Token.PROPERTY_NAME, shorthandName],
        [Token.PROPERTY_VALUE, "inherit"]
      ];
      var newProperty = wrapSingle(shorthandToken);
      var component;
      var longhandToken;
      var nameMetadata;
      var valueMetadata;
      var i, l2;
      populateComponents([newProperty], validator, []);
      for (i = 0, l2 = descriptor.components.length; i < l2; i++) {
        component = components[descriptor.components[i]];
        if (hasInherit(component)) {
          inheritComponents[component.name] = component;
        } else {
          longhandToken = component.all[component.position].slice(0, 2);
          Array.prototype.push.apply(longhandToken, component.value);
          tokensSequence.push(longhandToken);
          nonInheritComponents[component.name] = deepClone(component);
        }
      }
      nameMetadata = joinMetadata(inheritComponents, 1);
      shorthandToken[1].push(nameMetadata);
      valueMetadata = joinMetadata(inheritComponents, 2);
      shorthandToken[2].push(valueMetadata);
      tokensSequence.unshift(shorthandToken);
      return [tokensSequence, newProperty, nonInheritComponents];
    }
    function findTokenIn(tokens, componentName) {
      var i, l2;
      for (i = 0, l2 = tokens.length; i < l2; i++) {
        if (tokens[i][1][1] == componentName) {
          return tokens[i];
        }
      }
    }
    function replaceWithShorthand(properties, candidateComponents, shorthandName, validator) {
      var descriptor = configuration[shorthandName];
      var nameMetadata;
      var valueMetadata;
      var newValuePlaceholder = [
        Token.PROPERTY,
        [Token.PROPERTY_NAME, shorthandName],
        [Token.PROPERTY_VALUE, descriptor.defaultValue]
      ];
      var all;
      var insertAt = inferInsertAtFrom(properties, candidateComponents, shorthandName);
      var newProperty = wrapSingle(newValuePlaceholder);
      newProperty.shorthand = true;
      newProperty.dirty = true;
      newProperty.multiplex = false;
      populateComponents([newProperty], validator, []);
      for (var i = 0, l2 = descriptor.components.length; i < l2; i++) {
        var component = candidateComponents[descriptor.components[i]];
        newProperty.components[i] = deepClone(component);
        newProperty.important = component.important;
        newProperty.multiplex = newProperty.multiplex || component.multiplex;
        all = component.all;
      }
      for (var componentName in candidateComponents) {
        candidateComponents[componentName].unused = true;
      }
      nameMetadata = joinMetadata(candidateComponents, 1);
      newValuePlaceholder[1].push(nameMetadata);
      valueMetadata = joinMetadata(candidateComponents, 2);
      newValuePlaceholder[2].push(valueMetadata);
      newProperty.position = insertAt;
      newProperty.all = all;
      newProperty.all[insertAt] = newValuePlaceholder;
      properties.splice(insertAt, 1, newProperty);
    }
    function inferInsertAtFrom(properties, candidateComponents, shorthandName) {
      var candidateComponentNames = Object.keys(candidateComponents);
      var firstCandidatePosition = candidateComponents[candidateComponentNames[0]].position;
      var lastCandidatePosition = candidateComponents[candidateComponentNames[candidateComponentNames.length - 1]].position;
      if (shorthandName == "border" && traversesVia(properties.slice(firstCandidatePosition, lastCandidatePosition), "border-image")) {
        return firstCandidatePosition;
      }
      return lastCandidatePosition;
    }
    function traversesVia(properties, propertyName) {
      for (var i = properties.length - 1; i >= 0; i--) {
        if (properties[i].name == propertyName) {
          return true;
        }
      }
      return false;
    }
    module.exports = mergeIntoShorthands;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/properties/has-unset.js
var require_has_unset = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/properties/has-unset.js"(exports, module) {
    function hasUnset(property) {
      for (var i = property.value.length - 1; i >= 0; i--) {
        if (property.value[i][1] == "unset") {
          return true;
        }
      }
      return false;
    }
    module.exports = hasUnset;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/properties/find-component-in.js
var require_find_component_in = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/properties/find-component-in.js"(exports, module) {
    var configuration = require_configuration();
    function findComponentIn(shorthand, longhand) {
      var comparator = nameComparator(longhand);
      return findInDirectComponents(shorthand, comparator) || findInSubComponents(shorthand, comparator);
    }
    function nameComparator(to) {
      return function(property) {
        return to.name === property.name;
      };
    }
    function findInDirectComponents(shorthand, comparator) {
      return shorthand.components.filter(comparator)[0];
    }
    function findInSubComponents(shorthand, comparator) {
      var shorthandComponent;
      var longhandMatch;
      var i, l2;
      if (!configuration[shorthand.name].shorthandComponents) {
        return;
      }
      for (i = 0, l2 = shorthand.components.length; i < l2; i++) {
        shorthandComponent = shorthand.components[i];
        longhandMatch = findInDirectComponents(shorthandComponent, comparator);
        if (longhandMatch) {
          return longhandMatch;
        }
      }
    }
    module.exports = findComponentIn;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/properties/is-component-of.js
var require_is_component_of = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/properties/is-component-of.js"(exports, module) {
    var configuration = require_configuration();
    function isComponentOf(property1, property2, shallow) {
      return isDirectComponentOf(property1, property2) || !shallow && !!configuration[property1.name].shorthandComponents && isSubComponentOf(property1, property2);
    }
    function isDirectComponentOf(property1, property2) {
      var descriptor = configuration[property1.name];
      return "components" in descriptor && descriptor.components.indexOf(property2.name) > -1;
    }
    function isSubComponentOf(property1, property2) {
      return property1.components.some(function(component) {
        return isDirectComponentOf(component, property2);
      });
    }
    module.exports = isComponentOf;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/properties/is-mergeable-shorthand.js
var require_is_mergeable_shorthand = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/properties/is-mergeable-shorthand.js"(exports, module) {
    var Marker = require_marker();
    function isMergeableShorthand(shorthand) {
      if (shorthand.name != "font") {
        return true;
      }
      return shorthand.value[0][1].indexOf(Marker.INTERNAL) == -1;
    }
    module.exports = isMergeableShorthand;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/properties/overrides-non-component-shorthand.js
var require_overrides_non_component_shorthand = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/properties/overrides-non-component-shorthand.js"(exports, module) {
    var configuration = require_configuration();
    function overridesNonComponentShorthand(property1, property2) {
      return property1.name in configuration && "overridesShorthands" in configuration[property1.name] && configuration[property1.name].overridesShorthands.indexOf(property2.name) > -1;
    }
    module.exports = overridesNonComponentShorthand;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/properties/override-properties.js
var require_override_properties = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/properties/override-properties.js"(exports, module) {
    var hasInherit = require_has_inherit();
    var hasUnset = require_has_unset();
    var everyValuesPair = require_every_values_pair();
    var findComponentIn = require_find_component_in();
    var isComponentOf = require_is_component_of();
    var isMergeableShorthand = require_is_mergeable_shorthand();
    var overridesNonComponentShorthand = require_overrides_non_component_shorthand();
    var sameVendorPrefixesIn = require_vendor_prefixes().same;
    var configuration = require_configuration();
    var deepClone = require_clone().deep;
    var restoreWithComponents = require_restore_with_components();
    var shallowClone = require_clone().shallow;
    var restoreFromOptimizing = require_restore_from_optimizing();
    var Token = require_token();
    var Marker = require_marker();
    var serializeProperty = require_one_time().property;
    function sameValue(_validator, value1, value2) {
      return value1 === value2;
    }
    function wouldBreakCompatibility(property, validator) {
      for (var i = 0; i < property.components.length; i++) {
        var component = property.components[i];
        var descriptor = configuration[component.name];
        var canOverride = descriptor && descriptor.canOverride || sameValue;
        var _component = shallowClone(component);
        _component.value = [[Token.PROPERTY_VALUE, descriptor.defaultValue]];
        if (!everyValuesPair(canOverride.bind(null, validator), _component, component)) {
          return true;
        }
      }
      return false;
    }
    function overrideIntoMultiplex(property, by) {
      by.unused = true;
      turnIntoMultiplex(by, multiplexSize(property));
      property.value = by.value;
    }
    function overrideByMultiplex(property, by) {
      by.unused = true;
      property.multiplex = true;
      property.value = by.value;
    }
    function overrideSimple(property, by) {
      by.unused = true;
      property.value = by.value;
    }
    function override(property, by) {
      if (by.multiplex) {
        overrideByMultiplex(property, by);
      } else if (property.multiplex) {
        overrideIntoMultiplex(property, by);
      } else {
        overrideSimple(property, by);
      }
    }
    function overrideShorthand(property, by) {
      by.unused = true;
      for (var i = 0, l2 = property.components.length; i < l2; i++) {
        override(property.components[i], by.components[i]);
      }
    }
    function turnIntoMultiplex(property, size) {
      property.multiplex = true;
      if (configuration[property.name].shorthand) {
        turnShorthandValueIntoMultiplex(property, size);
      } else {
        turnLonghandValueIntoMultiplex(property, size);
      }
    }
    function turnShorthandValueIntoMultiplex(property, size) {
      var component;
      var i, l2;
      for (i = 0, l2 = property.components.length; i < l2; i++) {
        component = property.components[i];
        if (!component.multiplex) {
          turnLonghandValueIntoMultiplex(component, size);
        }
      }
    }
    function turnLonghandValueIntoMultiplex(property, size) {
      var descriptor = configuration[property.name];
      var withRealValue = descriptor.intoMultiplexMode == "real";
      var withValue = descriptor.intoMultiplexMode == "real" ? property.value.slice(0) : descriptor.intoMultiplexMode == "placeholder" ? descriptor.placeholderValue : descriptor.defaultValue;
      var i = multiplexSize(property);
      var j;
      var m2 = withValue.length;
      for (; i < size; i++) {
        property.value.push([Token.PROPERTY_VALUE, Marker.COMMA]);
        if (Array.isArray(withValue)) {
          for (j = 0; j < m2; j++) {
            property.value.push(withRealValue ? withValue[j] : [Token.PROPERTY_VALUE, withValue[j]]);
          }
        } else {
          property.value.push(withRealValue ? withValue : [Token.PROPERTY_VALUE, withValue]);
        }
      }
    }
    function multiplexSize(component) {
      var size = 0;
      for (var i = 0, l2 = component.value.length; i < l2; i++) {
        if (component.value[i][1] == Marker.COMMA) {
          size++;
        }
      }
      return size + 1;
    }
    function lengthOf(property) {
      var fakeAsArray = [
        Token.PROPERTY,
        [Token.PROPERTY_NAME, property.name]
      ].concat(property.value);
      return serializeProperty([fakeAsArray], 0).length;
    }
    function moreSameShorthands(properties, startAt, name) {
      var count = 0;
      for (var i = startAt; i >= 0; i--) {
        if (properties[i].name == name && !properties[i].unused) {
          count++;
        }
        if (count > 1) {
          break;
        }
      }
      return count > 1;
    }
    function overridingFunction(shorthand, validator) {
      for (var i = 0, l2 = shorthand.components.length; i < l2; i++) {
        if (!anyValue(validator.isUrl, shorthand.components[i]) && anyValue(validator.isFunction, shorthand.components[i])) {
          return true;
        }
      }
      return false;
    }
    function anyValue(fn, property) {
      for (var i = 0, l2 = property.value.length; i < l2; i++) {
        if (property.value[i][1] == Marker.COMMA) {
          continue;
        }
        if (fn(property.value[i][1])) {
          return true;
        }
      }
      return false;
    }
    function wouldResultInLongerValue(left, right) {
      if (!left.multiplex && !right.multiplex || left.multiplex && right.multiplex) {
        return false;
      }
      var multiplex = left.multiplex ? left : right;
      var simple = left.multiplex ? right : left;
      var component;
      var multiplexClone = deepClone(multiplex);
      restoreFromOptimizing([multiplexClone], restoreWithComponents);
      var simpleClone = deepClone(simple);
      restoreFromOptimizing([simpleClone], restoreWithComponents);
      var lengthBefore = lengthOf(multiplexClone) + 1 + lengthOf(simpleClone);
      if (left.multiplex) {
        component = findComponentIn(multiplexClone, simpleClone);
        overrideIntoMultiplex(component, simpleClone);
      } else {
        component = findComponentIn(simpleClone, multiplexClone);
        turnIntoMultiplex(simpleClone, multiplexSize(multiplexClone));
        overrideByMultiplex(component, multiplexClone);
      }
      restoreFromOptimizing([simpleClone], restoreWithComponents);
      var lengthAfter = lengthOf(simpleClone);
      return lengthBefore <= lengthAfter;
    }
    function isCompactable(property) {
      return property.name in configuration;
    }
    function noneOverrideHack(left, right) {
      return !left.multiplex && (left.name == "background" || left.name == "background-image") && right.multiplex && (right.name == "background" || right.name == "background-image") && anyLayerIsNone(right.value);
    }
    function anyLayerIsNone(values) {
      var layers = intoLayers(values);
      for (var i = 0, l2 = layers.length; i < l2; i++) {
        if (layers[i].length == 1 && layers[i][0][1] == "none") {
          return true;
        }
      }
      return false;
    }
    function intoLayers(values) {
      var layers = [];
      for (var i = 0, layer = [], l2 = values.length; i < l2; i++) {
        var value = values[i];
        if (value[1] == Marker.COMMA) {
          layers.push(layer);
          layer = [];
        } else {
          layer.push(value);
        }
      }
      layers.push(layer);
      return layers;
    }
    function overrideProperties(properties, withMerging, compatibility, validator) {
      var mayOverride, right, left, component;
      var overriddenComponents;
      var overriddenComponent;
      var overridingComponent;
      var overridable;
      var i, j, k;
      propertyLoop:
        for (i = properties.length - 1; i >= 0; i--) {
          right = properties[i];
          if (!isCompactable(right)) {
            continue;
          }
          if (right.block) {
            continue;
          }
          mayOverride = configuration[right.name].canOverride || sameValue;
          traverseLoop:
            for (j = i - 1; j >= 0; j--) {
              left = properties[j];
              if (!isCompactable(left)) {
                continue;
              }
              if (left.block) {
                continue;
              }
              if (left.dynamic || right.dynamic) {
                continue;
              }
              if (left.unused || right.unused) {
                continue;
              }
              if (left.hack && !right.hack && !right.important || !left.hack && !left.important && right.hack) {
                continue;
              }
              if (left.important == right.important && left.hack[0] != right.hack[0]) {
                continue;
              }
              if (left.important == right.important && (left.hack[0] != right.hack[0] || left.hack[1] && left.hack[1] != right.hack[1])) {
                continue;
              }
              if (hasInherit(right)) {
                continue;
              }
              if (noneOverrideHack(left, right)) {
                continue;
              }
              if (right.shorthand && isComponentOf(right, left)) {
                if (!right.important && left.important) {
                  continue;
                }
                if (!sameVendorPrefixesIn([left], right.components)) {
                  continue;
                }
                if (!anyValue(validator.isFunction, left) && overridingFunction(right, validator)) {
                  continue;
                }
                if (!isMergeableShorthand(right)) {
                  left.unused = true;
                  continue;
                }
                component = findComponentIn(right, left);
                mayOverride = configuration[left.name].canOverride || sameValue;
                if (everyValuesPair(mayOverride.bind(null, validator), left, component)) {
                  left.unused = true;
                }
              } else if (right.shorthand && overridesNonComponentShorthand(right, left)) {
                if (!right.important && left.important) {
                  continue;
                }
                if (!sameVendorPrefixesIn([left], right.components)) {
                  continue;
                }
                if (!anyValue(validator.isFunction, left) && overridingFunction(right, validator)) {
                  continue;
                }
                overriddenComponents = left.shorthand ? left.components : [left];
                for (k = overriddenComponents.length - 1; k >= 0; k--) {
                  overriddenComponent = overriddenComponents[k];
                  overridingComponent = findComponentIn(right, overriddenComponent);
                  mayOverride = configuration[overriddenComponent.name].canOverride || sameValue;
                  if (!everyValuesPair(mayOverride.bind(null, validator), left, overridingComponent)) {
                    continue traverseLoop;
                  }
                }
                left.unused = true;
              } else if (withMerging && left.shorthand && !right.shorthand && isComponentOf(left, right, true)) {
                if (right.important && !left.important) {
                  continue;
                }
                if (!right.important && left.important) {
                  right.unused = true;
                  continue;
                }
                if (moreSameShorthands(properties, i - 1, left.name)) {
                  continue;
                }
                if (overridingFunction(left, validator)) {
                  continue;
                }
                if (!isMergeableShorthand(left)) {
                  continue;
                }
                if (hasUnset(left) || hasUnset(right)) {
                  continue;
                }
                component = findComponentIn(left, right);
                if (everyValuesPair(mayOverride.bind(null, validator), component, right)) {
                  var disabledBackgroundMerging = !compatibility.properties.backgroundClipMerging && component.name.indexOf("background-clip") > -1 || !compatibility.properties.backgroundOriginMerging && component.name.indexOf("background-origin") > -1 || !compatibility.properties.backgroundSizeMerging && component.name.indexOf("background-size") > -1;
                  var nonMergeableValue = configuration[right.name].nonMergeableValue === right.value[0][1];
                  if (disabledBackgroundMerging || nonMergeableValue) {
                    continue;
                  }
                  if (!compatibility.properties.merging && wouldBreakCompatibility(left, validator)) {
                    continue;
                  }
                  if (component.value[0][1] != right.value[0][1] && (hasInherit(left) || hasInherit(right))) {
                    continue;
                  }
                  if (wouldResultInLongerValue(left, right)) {
                    continue;
                  }
                  if (!left.multiplex && right.multiplex) {
                    turnIntoMultiplex(left, multiplexSize(right));
                  }
                  override(component, right);
                  left.dirty = true;
                }
              } else if (withMerging && left.shorthand && right.shorthand && left.name == right.name) {
                if (!left.multiplex && right.multiplex) {
                  continue;
                }
                if (!right.important && left.important) {
                  right.unused = true;
                  continue propertyLoop;
                }
                if (right.important && !left.important) {
                  left.unused = true;
                  continue;
                }
                if (!isMergeableShorthand(right)) {
                  left.unused = true;
                  continue;
                }
                for (k = left.components.length - 1; k >= 0; k--) {
                  var leftComponent = left.components[k];
                  var rightComponent = right.components[k];
                  mayOverride = configuration[leftComponent.name].canOverride || sameValue;
                  if (!everyValuesPair(mayOverride.bind(null, validator), leftComponent, rightComponent)) {
                    continue propertyLoop;
                  }
                }
                overrideShorthand(left, right);
                left.dirty = true;
              } else if (withMerging && left.shorthand && right.shorthand && isComponentOf(left, right)) {
                if (!left.important && right.important) {
                  continue;
                }
                component = findComponentIn(left, right);
                mayOverride = configuration[right.name].canOverride || sameValue;
                if (!everyValuesPair(mayOverride.bind(null, validator), component, right)) {
                  continue;
                }
                if (left.important && !right.important) {
                  right.unused = true;
                  continue;
                }
                var rightRestored = configuration[right.name].restore(right, configuration);
                if (rightRestored.length > 1) {
                  continue;
                }
                component = findComponentIn(left, right);
                override(component, right);
                right.dirty = true;
              } else if (left.name == right.name) {
                overridable = true;
                if (right.shorthand) {
                  for (k = right.components.length - 1; k >= 0 && overridable; k--) {
                    overriddenComponent = left.components[k];
                    overridingComponent = right.components[k];
                    mayOverride = configuration[overridingComponent.name].canOverride || sameValue;
                    overridable = everyValuesPair(mayOverride.bind(null, validator), overriddenComponent, overridingComponent);
                  }
                } else {
                  mayOverride = configuration[right.name].canOverride || sameValue;
                  overridable = everyValuesPair(mayOverride.bind(null, validator), left, right);
                }
                if (left.important && !right.important && overridable) {
                  right.unused = true;
                  continue;
                }
                if (!left.important && right.important && overridable) {
                  left.unused = true;
                  continue;
                }
                if (!overridable) {
                  continue;
                }
                left.unused = true;
              }
            }
        }
    }
    module.exports = overrideProperties;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/properties/optimize.js
var require_optimize3 = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/properties/optimize.js"(exports, module) {
    var mergeIntoShorthands = require_merge_into_shorthands();
    var overrideProperties = require_override_properties();
    var populateComponents = require_populate_components();
    var restoreWithComponents = require_restore_with_components();
    var wrapForOptimizing = require_wrap_for_optimizing().all;
    var removeUnused = require_remove_unused();
    var restoreFromOptimizing = require_restore_from_optimizing();
    var OptimizationLevel = require_optimization_level().OptimizationLevel;
    function optimizeProperties(properties, withOverriding, withMerging, context) {
      var levelOptions = context.options.level[OptimizationLevel.Two];
      var _properties = wrapForOptimizing(properties, levelOptions.skipProperties);
      var _property;
      var i, l2;
      populateComponents(_properties, context.validator, context.warnings);
      for (i = 0, l2 = _properties.length; i < l2; i++) {
        _property = _properties[i];
        if (_property.block) {
          optimizeProperties(_property.value[0][1], withOverriding, withMerging, context);
        }
      }
      if (withMerging && levelOptions.mergeIntoShorthands) {
        mergeIntoShorthands(_properties, context.validator);
      }
      if (withOverriding && levelOptions.overrideProperties) {
        overrideProperties(_properties, withMerging, context.options.compatibility, context.validator);
      }
      restoreFromOptimizing(_properties, restoreWithComponents);
      removeUnused(_properties);
    }
    module.exports = optimizeProperties;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/merge-adjacent.js
var require_merge_adjacent = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/merge-adjacent.js"(exports, module) {
    var isMergeable = require_is_mergeable();
    var optimizeProperties = require_optimize3();
    var sortSelectors = require_sort_selectors();
    var tidyRules = require_tidy_rules();
    var OptimizationLevel = require_optimization_level().OptimizationLevel;
    var serializeBody = require_one_time().body;
    var serializeRules = require_one_time().rules;
    var Token = require_token();
    function mergeAdjacent(tokens, context) {
      var lastToken = [null, [], []];
      var options = context.options;
      var adjacentSpace = options.compatibility.selectors.adjacentSpace;
      var selectorsSortingMethod = options.level[OptimizationLevel.One].selectorsSortingMethod;
      var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;
      var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;
      var mergeLimit = options.compatibility.selectors.mergeLimit;
      var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;
      for (var i = 0, l2 = tokens.length; i < l2; i++) {
        var token = tokens[i];
        if (token[0] != Token.RULE) {
          lastToken = [null, [], []];
          continue;
        }
        if (lastToken[0] == Token.RULE && serializeRules(token[1]) == serializeRules(lastToken[1])) {
          Array.prototype.push.apply(lastToken[2], token[2]);
          optimizeProperties(lastToken[2], true, true, context);
          token[2] = [];
        } else if (lastToken[0] == Token.RULE && serializeBody(token[2]) == serializeBody(lastToken[2]) && isMergeable(serializeRules(token[1]), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) && isMergeable(
          serializeRules(lastToken[1]),
          mergeablePseudoClasses,
          mergeablePseudoElements,
          multiplePseudoMerging
        ) && lastToken[1].length < mergeLimit) {
          lastToken[1] = tidyRules(lastToken[1].concat(token[1]), false, adjacentSpace, false, context.warnings);
          lastToken[1] = lastToken.length > 1 ? sortSelectors(lastToken[1], selectorsSortingMethod) : lastToken[1];
          token[2] = [];
        } else {
          lastToken = token;
        }
      }
    }
    module.exports = mergeAdjacent;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/rules-overlap.js
var require_rules_overlap = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/rules-overlap.js"(exports, module) {
    var MODIFIER_PATTERN = /--.+$/;
    function rulesOverlap(rule1, rule2, bemMode) {
      var scope1;
      var scope2;
      var i, l2;
      var j, m2;
      for (i = 0, l2 = rule1.length; i < l2; i++) {
        scope1 = rule1[i][1];
        for (j = 0, m2 = rule2.length; j < m2; j++) {
          scope2 = rule2[j][1];
          if (scope1 == scope2) {
            return true;
          }
          if (bemMode && withoutModifiers(scope1) == withoutModifiers(scope2)) {
            return true;
          }
        }
      }
      return false;
    }
    function withoutModifiers(scope) {
      return scope.replace(MODIFIER_PATTERN, "");
    }
    module.exports = rulesOverlap;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/specificity.js
var require_specificity = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/specificity.js"(exports, module) {
    var Marker = require_marker();
    var Selector = {
      ADJACENT_SIBLING: "+",
      DESCENDANT: ">",
      DOT: ".",
      HASH: "#",
      NON_ADJACENT_SIBLING: "~",
      PSEUDO: ":"
    };
    var LETTER_PATTERN = /[a-zA-Z]/;
    var NOT_PREFIX = ":not(";
    var SEPARATOR_PATTERN = /[\s,(>~+]/;
    function specificity(selector) {
      var result = [0, 0, 0];
      var character;
      var isEscaped;
      var isSingleQuoted;
      var isDoubleQuoted;
      var roundBracketLevel = 0;
      var couldIntroduceNewTypeSelector;
      var withinNotPseudoClass = false;
      var wasPseudoClass = false;
      var i, l2;
      for (i = 0, l2 = selector.length; i < l2; i++) {
        character = selector[i];
        if (isEscaped) {
        } else if (character == Marker.SINGLE_QUOTE && !isDoubleQuoted && !isSingleQuoted) {
          isSingleQuoted = true;
        } else if (character == Marker.SINGLE_QUOTE && !isDoubleQuoted && isSingleQuoted) {
          isSingleQuoted = false;
        } else if (character == Marker.DOUBLE_QUOTE && !isDoubleQuoted && !isSingleQuoted) {
          isDoubleQuoted = true;
        } else if (character == Marker.DOUBLE_QUOTE && isDoubleQuoted && !isSingleQuoted) {
          isDoubleQuoted = false;
        } else if (isSingleQuoted || isDoubleQuoted) {
          continue;
        } else if (roundBracketLevel > 0 && !withinNotPseudoClass) {
        } else if (character == Marker.OPEN_ROUND_BRACKET) {
          roundBracketLevel++;
        } else if (character == Marker.CLOSE_ROUND_BRACKET && roundBracketLevel == 1) {
          roundBracketLevel--;
          withinNotPseudoClass = false;
        } else if (character == Marker.CLOSE_ROUND_BRACKET) {
          roundBracketLevel--;
        } else if (character == Selector.HASH) {
          result[0]++;
        } else if (character == Selector.DOT || character == Marker.OPEN_SQUARE_BRACKET) {
          result[1]++;
        } else if (character == Selector.PSEUDO && !wasPseudoClass && !isNotPseudoClass(selector, i)) {
          result[1]++;
          withinNotPseudoClass = false;
        } else if (character == Selector.PSEUDO) {
          withinNotPseudoClass = true;
        } else if ((i === 0 || couldIntroduceNewTypeSelector) && LETTER_PATTERN.test(character)) {
          result[2]++;
        }
        isEscaped = character == Marker.BACK_SLASH;
        wasPseudoClass = character == Selector.PSEUDO;
        couldIntroduceNewTypeSelector = !isEscaped && SEPARATOR_PATTERN.test(character);
      }
      return result;
    }
    function isNotPseudoClass(selector, index) {
      return selector.indexOf(NOT_PREFIX, index) === index;
    }
    module.exports = specificity;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/specificities-overlap.js
var require_specificities_overlap = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/specificities-overlap.js"(exports, module) {
    var specificity = require_specificity();
    function specificitiesOverlap(selector1, selector2, cache) {
      var specificity1;
      var specificity2;
      var i, l2;
      var j, m2;
      for (i = 0, l2 = selector1.length; i < l2; i++) {
        specificity1 = findSpecificity(selector1[i][1], cache);
        for (j = 0, m2 = selector2.length; j < m2; j++) {
          specificity2 = findSpecificity(selector2[j][1], cache);
          if (specificity1[0] === specificity2[0] && specificity1[1] === specificity2[1] && specificity1[2] === specificity2[2]) {
            return true;
          }
        }
      }
      return false;
    }
    function findSpecificity(selector, cache) {
      var value;
      if (!(selector in cache)) {
        cache[selector] = value = specificity(selector);
      }
      return value || cache[selector];
    }
    module.exports = specificitiesOverlap;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/reorderable.js
var require_reorderable = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/reorderable.js"(exports, module) {
    var rulesOverlap = require_rules_overlap();
    var specificitiesOverlap = require_specificities_overlap();
    var FLEX_PROPERTIES = /align-items|box-align|box-pack|flex|justify/;
    var BORDER_PROPERTIES = /^border-(top|right|bottom|left|color|style|width|radius)/;
    function canReorder(left, right, cache) {
      for (var i = right.length - 1; i >= 0; i--) {
        for (var j = left.length - 1; j >= 0; j--) {
          if (!canReorderSingle(left[j], right[i], cache)) {
            return false;
          }
        }
      }
      return true;
    }
    function canReorderSingle(left, right, cache) {
      var leftName = left[0];
      var leftValue = left[1];
      var leftNameRoot = left[2];
      var leftSelector = left[5];
      var leftInSpecificSelector = left[6];
      var rightName = right[0];
      var rightValue = right[1];
      var rightNameRoot = right[2];
      var rightSelector = right[5];
      var rightInSpecificSelector = right[6];
      if (leftName == "font" && rightName == "line-height" || rightName == "font" && leftName == "line-height") {
        return false;
      }
      if (FLEX_PROPERTIES.test(leftName) && FLEX_PROPERTIES.test(rightName)) {
        return false;
      }
      if (leftNameRoot == rightNameRoot && unprefixed(leftName) == unprefixed(rightName) && vendorPrefixed(leftName) ^ vendorPrefixed(rightName)) {
        return false;
      }
      if (leftNameRoot == "border" && BORDER_PROPERTIES.test(rightNameRoot) && (leftName == "border" || leftName == rightNameRoot || leftValue != rightValue && sameBorderComponent(leftName, rightName))) {
        return false;
      }
      if (rightNameRoot == "border" && BORDER_PROPERTIES.test(leftNameRoot) && (rightName == "border" || rightName == leftNameRoot || leftValue != rightValue && sameBorderComponent(leftName, rightName))) {
        return false;
      }
      if (leftNameRoot == "border" && rightNameRoot == "border" && leftName != rightName && (isSideBorder(leftName) && isStyleBorder(rightName) || isStyleBorder(leftName) && isSideBorder(rightName))) {
        return false;
      }
      if (leftNameRoot != rightNameRoot) {
        return true;
      }
      if (leftName == rightName && leftNameRoot == rightNameRoot && (leftValue == rightValue || withDifferentVendorPrefix(leftValue, rightValue))) {
        return true;
      }
      if (leftName != rightName && leftNameRoot == rightNameRoot && leftName != leftNameRoot && rightName != rightNameRoot) {
        return true;
      }
      if (leftName != rightName && leftNameRoot == rightNameRoot && leftValue == rightValue) {
        return true;
      }
      if (rightInSpecificSelector && leftInSpecificSelector && !inheritable(leftNameRoot) && !inheritable(rightNameRoot) && !rulesOverlap(rightSelector, leftSelector, false)) {
        return true;
      }
      if (!specificitiesOverlap(leftSelector, rightSelector, cache)) {
        return true;
      }
      return false;
    }
    function vendorPrefixed(name) {
      return /^-(?:moz|webkit|ms|o)-/.test(name);
    }
    function unprefixed(name) {
      return name.replace(/^-(?:moz|webkit|ms|o)-/, "");
    }
    function sameBorderComponent(name1, name2) {
      return name1.split("-").pop() == name2.split("-").pop();
    }
    function isSideBorder(name) {
      return name == "border-top" || name == "border-right" || name == "border-bottom" || name == "border-left";
    }
    function isStyleBorder(name) {
      return name == "border-color" || name == "border-style" || name == "border-width";
    }
    function withDifferentVendorPrefix(value1, value2) {
      return vendorPrefixed(value1) && vendorPrefixed(value2) && value1.split("-")[1] != value2.split("-")[2];
    }
    function inheritable(name) {
      return name == "font" || name == "line-height" || name == "list-style";
    }
    module.exports = {
      canReorder,
      canReorderSingle
    };
  }
});

// node_modules/clean-css/lib/optimizer/level-2/extract-properties.js
var require_extract_properties = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/extract-properties.js"(exports, module) {
    var Token = require_token();
    var serializeRules = require_one_time().rules;
    var serializeValue = require_one_time().value;
    function extractProperties(token) {
      var properties = [];
      var inSpecificSelector;
      var property;
      var name;
      var value;
      var i, l2;
      if (token[0] == Token.RULE) {
        inSpecificSelector = !/[.+>~]/.test(serializeRules(token[1]));
        for (i = 0, l2 = token[2].length; i < l2; i++) {
          property = token[2][i];
          if (property[0] != Token.PROPERTY) {
            continue;
          }
          name = property[1][1];
          if (name.length === 0) {
            continue;
          }
          value = serializeValue(property, i);
          properties.push([
            name,
            value,
            findNameRoot(name),
            token[2][i],
            name + ":" + value,
            token[1],
            inSpecificSelector
          ]);
        }
      } else if (token[0] == Token.NESTED_BLOCK) {
        for (i = 0, l2 = token[2].length; i < l2; i++) {
          properties = properties.concat(extractProperties(token[2][i]));
        }
      }
      return properties;
    }
    function findNameRoot(name) {
      if (name == "list-style") {
        return name;
      }
      if (name.indexOf("-radius") > 0) {
        return "border-radius";
      }
      if (name == "border-collapse" || name == "border-spacing" || name == "border-image") {
        return name;
      }
      if (name.indexOf("border-") === 0 && /^border-\w+-\w+$/.test(name)) {
        return name.match(/border-\w+/)[0];
      }
      if (name.indexOf("border-") === 0 && /^border-\w+$/.test(name)) {
        return "border";
      }
      if (name.indexOf("text-") === 0) {
        return name;
      }
      if (name == "-chrome-") {
        return name;
      }
      return name.replace(/^-\w+-/, "").match(/([a-zA-Z]+)/)[0].toLowerCase();
    }
    module.exports = extractProperties;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/merge-media-queries.js
var require_merge_media_queries = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/merge-media-queries.js"(exports, module) {
    var canReorder = require_reorderable().canReorder;
    var canReorderSingle = require_reorderable().canReorderSingle;
    var extractProperties = require_extract_properties();
    var rulesOverlap = require_rules_overlap();
    var serializeRules = require_one_time().rules;
    var OptimizationLevel = require_optimization_level().OptimizationLevel;
    var Token = require_token();
    function mergeMediaQueries(tokens, context) {
      var mergeSemantically = context.options.level[OptimizationLevel.Two].mergeSemantically;
      var specificityCache = context.cache.specificity;
      var candidates = {};
      var reduced = [];
      for (var i = tokens.length - 1; i >= 0; i--) {
        var token = tokens[i];
        if (token[0] != Token.NESTED_BLOCK) {
          continue;
        }
        var key = serializeRules(token[1]);
        var candidate = candidates[key];
        if (!candidate) {
          candidate = [];
          candidates[key] = candidate;
        }
        candidate.push(i);
      }
      for (var name in candidates) {
        var positions = candidates[name];
        positionLoop:
          for (var j = positions.length - 1; j > 0; j--) {
            var positionOne = positions[j];
            var tokenOne = tokens[positionOne];
            var positionTwo = positions[j - 1];
            var tokenTwo = tokens[positionTwo];
            directionLoop:
              for (var direction = 1; direction >= -1; direction -= 2) {
                var topToBottom = direction == 1;
                var from = topToBottom ? positionOne + 1 : positionTwo - 1;
                var to = topToBottom ? positionTwo : positionOne;
                var delta = topToBottom ? 1 : -1;
                var source = topToBottom ? tokenOne : tokenTwo;
                var target = topToBottom ? tokenTwo : tokenOne;
                var movedProperties = extractProperties(source);
                while (from != to) {
                  var traversedProperties = extractProperties(tokens[from]);
                  from += delta;
                  if (mergeSemantically && allSameRulePropertiesCanBeReordered(movedProperties, traversedProperties, specificityCache)) {
                    continue;
                  }
                  if (!canReorder(movedProperties, traversedProperties, specificityCache)) {
                    continue directionLoop;
                  }
                }
                target[2] = topToBottom ? source[2].concat(target[2]) : target[2].concat(source[2]);
                source[2] = [];
                reduced.push(target);
                continue positionLoop;
              }
          }
      }
      return reduced;
    }
    function allSameRulePropertiesCanBeReordered(movedProperties, traversedProperties, specificityCache) {
      var movedProperty;
      var movedRule;
      var traversedProperty;
      var traversedRule;
      var i, l2;
      var j, m2;
      for (i = 0, l2 = movedProperties.length; i < l2; i++) {
        movedProperty = movedProperties[i];
        movedRule = movedProperty[5];
        for (j = 0, m2 = traversedProperties.length; j < m2; j++) {
          traversedProperty = traversedProperties[j];
          traversedRule = traversedProperty[5];
          if (rulesOverlap(movedRule, traversedRule, true) && !canReorderSingle(movedProperty, traversedProperty, specificityCache)) {
            return false;
          }
        }
      }
      return true;
    }
    module.exports = mergeMediaQueries;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/merge-non-adjacent-by-body.js
var require_merge_non_adjacent_by_body = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/merge-non-adjacent-by-body.js"(exports, module) {
    var isMergeable = require_is_mergeable();
    var sortSelectors = require_sort_selectors();
    var tidyRules = require_tidy_rules();
    var OptimizationLevel = require_optimization_level().OptimizationLevel;
    var serializeBody = require_one_time().body;
    var serializeRules = require_one_time().rules;
    var Token = require_token();
    function unsafeSelector(value) {
      return /\.|\*| :/.test(value);
    }
    function isBemElement(token) {
      var asString = serializeRules(token[1]);
      return asString.indexOf("__") > -1 || asString.indexOf("--") > -1;
    }
    function withoutModifier(selector) {
      return selector.replace(/--[^ ,>+~:]+/g, "");
    }
    function removeAnyUnsafeElements(left, candidates) {
      var leftSelector = withoutModifier(serializeRules(left[1]));
      for (var body in candidates) {
        var right = candidates[body];
        var rightSelector = withoutModifier(serializeRules(right[1]));
        if (rightSelector.indexOf(leftSelector) > -1 || leftSelector.indexOf(rightSelector) > -1) {
          delete candidates[body];
        }
      }
    }
    function mergeNonAdjacentByBody(tokens, context) {
      var options = context.options;
      var mergeSemantically = options.level[OptimizationLevel.Two].mergeSemantically;
      var adjacentSpace = options.compatibility.selectors.adjacentSpace;
      var selectorsSortingMethod = options.level[OptimizationLevel.One].selectorsSortingMethod;
      var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;
      var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;
      var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;
      var candidates = {};
      for (var i = tokens.length - 1; i >= 0; i--) {
        var token = tokens[i];
        if (token[0] != Token.RULE) {
          continue;
        }
        if (token[2].length > 0 && (!mergeSemantically && unsafeSelector(serializeRules(token[1])))) {
          candidates = {};
        }
        if (token[2].length > 0 && mergeSemantically && isBemElement(token)) {
          removeAnyUnsafeElements(token, candidates);
        }
        var candidateBody = serializeBody(token[2]);
        var oldToken = candidates[candidateBody];
        if (oldToken && isMergeable(
          serializeRules(token[1]),
          mergeablePseudoClasses,
          mergeablePseudoElements,
          multiplePseudoMerging
        ) && isMergeable(
          serializeRules(oldToken[1]),
          mergeablePseudoClasses,
          mergeablePseudoElements,
          multiplePseudoMerging
        )) {
          if (token[2].length > 0) {
            token[1] = tidyRules(oldToken[1].concat(token[1]), false, adjacentSpace, false, context.warnings);
            token[1] = token[1].length > 1 ? sortSelectors(token[1], selectorsSortingMethod) : token[1];
          } else {
            token[1] = oldToken[1].concat(token[1]);
          }
          oldToken[2] = [];
          candidates[candidateBody] = null;
        }
        candidates[serializeBody(token[2])] = token;
      }
    }
    module.exports = mergeNonAdjacentByBody;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/merge-non-adjacent-by-selector.js
var require_merge_non_adjacent_by_selector = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/merge-non-adjacent-by-selector.js"(exports, module) {
    var canReorder = require_reorderable().canReorder;
    var extractProperties = require_extract_properties();
    var optimizeProperties = require_optimize3();
    var serializeRules = require_one_time().rules;
    var Token = require_token();
    function mergeNonAdjacentBySelector(tokens, context) {
      var specificityCache = context.cache.specificity;
      var allSelectors = {};
      var repeatedSelectors = [];
      var i;
      for (i = tokens.length - 1; i >= 0; i--) {
        if (tokens[i][0] != Token.RULE) {
          continue;
        }
        if (tokens[i][2].length === 0) {
          continue;
        }
        var selector = serializeRules(tokens[i][1]);
        allSelectors[selector] = [i].concat(allSelectors[selector] || []);
        if (allSelectors[selector].length == 2) {
          repeatedSelectors.push(selector);
        }
      }
      for (i = repeatedSelectors.length - 1; i >= 0; i--) {
        var positions = allSelectors[repeatedSelectors[i]];
        selectorIterator:
          for (var j = positions.length - 1; j > 0; j--) {
            var positionOne = positions[j - 1];
            var tokenOne = tokens[positionOne];
            var positionTwo = positions[j];
            var tokenTwo = tokens[positionTwo];
            directionIterator:
              for (var direction = 1; direction >= -1; direction -= 2) {
                var topToBottom = direction == 1;
                var from = topToBottom ? positionOne + 1 : positionTwo - 1;
                var to = topToBottom ? positionTwo : positionOne;
                var delta = topToBottom ? 1 : -1;
                var moved = topToBottom ? tokenOne : tokenTwo;
                var target = topToBottom ? tokenTwo : tokenOne;
                var movedProperties = extractProperties(moved);
                while (from != to) {
                  var traversedProperties = extractProperties(tokens[from]);
                  from += delta;
                  var reorderable = topToBottom ? canReorder(movedProperties, traversedProperties, specificityCache) : canReorder(traversedProperties, movedProperties, specificityCache);
                  if (!reorderable && !topToBottom) {
                    continue selectorIterator;
                  }
                  if (!reorderable && topToBottom) {
                    continue directionIterator;
                  }
                }
                if (topToBottom) {
                  Array.prototype.push.apply(moved[2], target[2]);
                  target[2] = moved[2];
                } else {
                  Array.prototype.push.apply(target[2], moved[2]);
                }
                optimizeProperties(target[2], true, true, context);
                moved[2] = [];
              }
          }
      }
    }
    module.exports = mergeNonAdjacentBySelector;
  }
});

// node_modules/clean-css/lib/utils/clone-array.js
var require_clone_array = __commonJS({
  "node_modules/clean-css/lib/utils/clone-array.js"(exports, module) {
    function cloneArray(array) {
      var cloned = array.slice(0);
      for (var i = 0, l2 = cloned.length; i < l2; i++) {
        if (Array.isArray(cloned[i])) {
          cloned[i] = cloneArray(cloned[i]);
        }
      }
      return cloned;
    }
    module.exports = cloneArray;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/reduce-non-adjacent.js
var require_reduce_non_adjacent = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/reduce-non-adjacent.js"(exports, module) {
    var isMergeable = require_is_mergeable();
    var optimizeProperties = require_optimize3();
    var cloneArray = require_clone_array();
    var Token = require_token();
    var serializeBody = require_one_time().body;
    var serializeRules = require_one_time().rules;
    function reduceNonAdjacent(tokens, context) {
      var options = context.options;
      var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;
      var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;
      var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;
      var candidates = {};
      var repeated = [];
      for (var i = tokens.length - 1; i >= 0; i--) {
        var token = tokens[i];
        if (token[0] != Token.RULE) {
          continue;
        } else if (token[2].length === 0) {
          continue;
        }
        var selectorAsString = serializeRules(token[1]);
        var isComplexAndNotSpecial = token[1].length > 1 && isMergeable(selectorAsString, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging);
        var wrappedSelectors = wrappedSelectorsFrom(token[1]);
        var selectors = isComplexAndNotSpecial ? [selectorAsString].concat(wrappedSelectors) : [selectorAsString];
        for (var j = 0, m2 = selectors.length; j < m2; j++) {
          var selector = selectors[j];
          if (!candidates[selector]) {
            candidates[selector] = [];
          } else {
            repeated.push(selector);
          }
          candidates[selector].push({
            where: i,
            list: wrappedSelectors,
            isPartial: isComplexAndNotSpecial && j > 0,
            isComplex: isComplexAndNotSpecial && j === 0
          });
        }
      }
      reduceSimpleNonAdjacentCases(tokens, repeated, candidates, options, context);
      reduceComplexNonAdjacentCases(tokens, candidates, options, context);
    }
    function wrappedSelectorsFrom(list) {
      var wrapped = [];
      for (var i = 0; i < list.length; i++) {
        wrapped.push([list[i][1]]);
      }
      return wrapped;
    }
    function reduceSimpleNonAdjacentCases(tokens, repeated, candidates, options, context) {
      function filterOut(idx, bodies) {
        return data[idx].isPartial && bodies.length === 0;
      }
      function reduceBody(token, newBody, processedCount, tokenIdx) {
        if (!data[processedCount - tokenIdx - 1].isPartial) {
          token[2] = newBody;
        }
      }
      for (var i = 0, l2 = repeated.length; i < l2; i++) {
        var selector = repeated[i];
        var data = candidates[selector];
        reduceSelector(tokens, data, {
          filterOut,
          callback: reduceBody
        }, options, context);
      }
    }
    function reduceComplexNonAdjacentCases(tokens, candidates, options, context) {
      var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;
      var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;
      var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;
      var localContext = {};
      function filterOut(idx) {
        return localContext.data[idx].where < localContext.intoPosition;
      }
      function collectReducedBodies(token, newBody, processedCount, tokenIdx) {
        if (tokenIdx === 0) {
          localContext.reducedBodies.push(newBody);
        }
      }
      allSelectors:
        for (var complexSelector in candidates) {
          var into = candidates[complexSelector];
          if (!into[0].isComplex) {
            continue;
          }
          var intoPosition = into[into.length - 1].where;
          var intoToken = tokens[intoPosition];
          var reducedBodies = [];
          var selectors = isMergeable(complexSelector, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) ? into[0].list : [complexSelector];
          localContext.intoPosition = intoPosition;
          localContext.reducedBodies = reducedBodies;
          for (var j = 0, m2 = selectors.length; j < m2; j++) {
            var selector = selectors[j];
            var data = candidates[selector];
            if (data.length < 2) {
              continue allSelectors;
            }
            localContext.data = data;
            reduceSelector(tokens, data, {
              filterOut,
              callback: collectReducedBodies
            }, options, context);
            if (serializeBody(reducedBodies[reducedBodies.length - 1]) != serializeBody(reducedBodies[0])) {
              continue allSelectors;
            }
          }
          intoToken[2] = reducedBodies[0];
        }
    }
    function reduceSelector(tokens, data, context, options, outerContext) {
      var bodies = [];
      var bodiesAsList = [];
      var processedTokens = [];
      for (var j = data.length - 1; j >= 0; j--) {
        if (context.filterOut(j, bodies)) {
          continue;
        }
        var where = data[j].where;
        var token = tokens[where];
        var clonedBody = cloneArray(token[2]);
        bodies = bodies.concat(clonedBody);
        bodiesAsList.push(clonedBody);
        processedTokens.push(where);
      }
      optimizeProperties(bodies, true, false, outerContext);
      var processedCount = processedTokens.length;
      var propertyIdx = bodies.length - 1;
      var tokenIdx = processedCount - 1;
      while (tokenIdx >= 0) {
        if ((tokenIdx === 0 || bodies[propertyIdx] && bodiesAsList[tokenIdx].indexOf(bodies[propertyIdx]) > -1) && propertyIdx > -1) {
          propertyIdx--;
          continue;
        }
        var newBody = bodies.splice(propertyIdx + 1);
        context.callback(tokens[processedTokens[tokenIdx]], newBody, processedCount, tokenIdx);
        tokenIdx--;
      }
    }
    module.exports = reduceNonAdjacent;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/remove-duplicate-font-at-rules.js
var require_remove_duplicate_font_at_rules = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/remove-duplicate-font-at-rules.js"(exports, module) {
    var Token = require_token();
    var serializeAll = require_one_time().all;
    var FONT_FACE_SCOPE = "@font-face";
    function removeDuplicateFontAtRules(tokens) {
      var fontAtRules = [];
      var token;
      var key;
      var i, l2;
      for (i = 0, l2 = tokens.length; i < l2; i++) {
        token = tokens[i];
        if (token[0] != Token.AT_RULE_BLOCK && token[1][0][1] != FONT_FACE_SCOPE) {
          continue;
        }
        key = serializeAll([token]);
        if (fontAtRules.indexOf(key) > -1) {
          token[2] = [];
        } else {
          fontAtRules.push(key);
        }
      }
    }
    module.exports = removeDuplicateFontAtRules;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/remove-duplicate-media-queries.js
var require_remove_duplicate_media_queries = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/remove-duplicate-media-queries.js"(exports, module) {
    var Token = require_token();
    var serializeAll = require_one_time().all;
    var serializeRules = require_one_time().rules;
    function removeDuplicateMediaQueries(tokens) {
      var candidates = {};
      var candidate;
      var token;
      var key;
      var i, l2;
      for (i = 0, l2 = tokens.length; i < l2; i++) {
        token = tokens[i];
        if (token[0] != Token.NESTED_BLOCK) {
          continue;
        }
        key = serializeRules(token[1]) + "%" + serializeAll(token[2]);
        candidate = candidates[key];
        if (candidate) {
          candidate[2] = [];
        }
        candidates[key] = token;
      }
    }
    module.exports = removeDuplicateMediaQueries;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/remove-duplicates.js
var require_remove_duplicates = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/remove-duplicates.js"(exports, module) {
    var Token = require_token();
    var serializeBody = require_one_time().body;
    var serializeRules = require_one_time().rules;
    function removeDuplicates(tokens) {
      var matched = {};
      var moreThanOnce = [];
      var id, token;
      var body, bodies;
      for (var i = 0, l2 = tokens.length; i < l2; i++) {
        token = tokens[i];
        if (token[0] != Token.RULE) {
          continue;
        }
        id = serializeRules(token[1]);
        if (matched[id] && matched[id].length == 1) {
          moreThanOnce.push(id);
        } else {
          matched[id] = matched[id] || [];
        }
        matched[id].push(i);
      }
      for (i = 0, l2 = moreThanOnce.length; i < l2; i++) {
        id = moreThanOnce[i];
        bodies = [];
        for (var j = matched[id].length - 1; j >= 0; j--) {
          token = tokens[matched[id][j]];
          body = serializeBody(token[2]);
          if (bodies.indexOf(body) > -1) {
            token[2] = [];
          } else {
            bodies.push(body);
          }
        }
      }
    }
    module.exports = removeDuplicates;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/remove-unused-at-rules.js
var require_remove_unused_at_rules = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/remove-unused-at-rules.js"(exports, module) {
    var populateComponents = require_populate_components();
    var wrapForOptimizing = require_wrap_for_optimizing().single;
    var restoreFromOptimizing = require_restore_from_optimizing();
    var Token = require_token();
    var animationNameRegex = /^(-moz-|-o-|-webkit-)?animation-name$/;
    var animationRegex = /^(-moz-|-o-|-webkit-)?animation$/;
    var keyframeRegex = /^@(-moz-|-o-|-webkit-)?keyframes /;
    var importantRegex = /\s{0,31}!important$/;
    var optionalMatchingQuotesRegex = /^(['"]?)(.*)\1$/;
    function normalize(value) {
      return value.replace(optionalMatchingQuotesRegex, "$2").replace(importantRegex, "");
    }
    function removeUnusedAtRules(tokens, context) {
      removeUnusedAtRule(tokens, matchCounterStyle, markCounterStylesAsUsed, context);
      removeUnusedAtRule(tokens, matchFontFace, markFontFacesAsUsed, context);
      removeUnusedAtRule(tokens, matchKeyframe, markKeyframesAsUsed, context);
      removeUnusedAtRule(tokens, matchNamespace, markNamespacesAsUsed, context);
    }
    function removeUnusedAtRule(tokens, matchCallback, markCallback, context) {
      var atRules = {};
      var atRule;
      var atRuleTokens;
      var atRuleToken;
      var zeroAt;
      var i, l2;
      for (i = 0, l2 = tokens.length; i < l2; i++) {
        matchCallback(tokens[i], atRules);
      }
      if (Object.keys(atRules).length === 0) {
        return;
      }
      markUsedAtRules(tokens, markCallback, atRules, context);
      for (atRule in atRules) {
        atRuleTokens = atRules[atRule];
        for (i = 0, l2 = atRuleTokens.length; i < l2; i++) {
          atRuleToken = atRuleTokens[i];
          zeroAt = atRuleToken[0] == Token.AT_RULE ? 1 : 2;
          atRuleToken[zeroAt] = [];
        }
      }
    }
    function markUsedAtRules(tokens, markCallback, atRules, context) {
      var boundMarkCallback = markCallback(atRules);
      var i, l2;
      for (i = 0, l2 = tokens.length; i < l2; i++) {
        switch (tokens[i][0]) {
          case Token.RULE:
            boundMarkCallback(tokens[i], context);
            break;
          case Token.NESTED_BLOCK:
            markUsedAtRules(tokens[i][2], markCallback, atRules, context);
        }
      }
    }
    function matchCounterStyle(token, atRules) {
      var match;
      if (token[0] == Token.AT_RULE_BLOCK && token[1][0][1].indexOf("@counter-style") === 0) {
        match = token[1][0][1].split(" ")[1];
        atRules[match] = atRules[match] || [];
        atRules[match].push(token);
      }
    }
    function markCounterStylesAsUsed(atRules) {
      return function(token, context) {
        var property;
        var wrappedProperty;
        var i, l2;
        for (i = 0, l2 = token[2].length; i < l2; i++) {
          property = token[2][i];
          if (property[1][1] == "list-style") {
            wrappedProperty = wrapForOptimizing(property);
            populateComponents([wrappedProperty], context.validator, context.warnings);
            if (wrappedProperty.components[0].value[0][1] in atRules) {
              delete atRules[property[2][1]];
            }
            restoreFromOptimizing([wrappedProperty]);
          }
          if (property[1][1] == "list-style-type" && property[2][1] in atRules) {
            delete atRules[property[2][1]];
          }
        }
      };
    }
    function matchFontFace(token, atRules) {
      var property;
      var match;
      var i, l2;
      if (token[0] == Token.AT_RULE_BLOCK && token[1][0][1] == "@font-face") {
        for (i = 0, l2 = token[2].length; i < l2; i++) {
          property = token[2][i];
          if (property[1][1] == "font-family") {
            match = normalize(property[2][1].toLowerCase());
            atRules[match] = atRules[match] || [];
            atRules[match].push(token);
            break;
          }
        }
      }
    }
    function markFontFacesAsUsed(atRules) {
      return function(token, context) {
        var property;
        var wrappedProperty;
        var component;
        var normalizedMatch;
        var i, l2;
        var j, m2;
        for (i = 0, l2 = token[2].length; i < l2; i++) {
          property = token[2][i];
          if (property[1][1] == "font") {
            wrappedProperty = wrapForOptimizing(property);
            populateComponents([wrappedProperty], context.validator, context.warnings);
            component = wrappedProperty.components[6];
            for (j = 0, m2 = component.value.length; j < m2; j++) {
              normalizedMatch = normalize(component.value[j][1].toLowerCase());
              if (normalizedMatch in atRules) {
                delete atRules[normalizedMatch];
              }
            }
            restoreFromOptimizing([wrappedProperty]);
          }
          if (property[1][1] == "font-family") {
            for (j = 2, m2 = property.length; j < m2; j++) {
              normalizedMatch = normalize(property[j][1].toLowerCase());
              if (normalizedMatch in atRules) {
                delete atRules[normalizedMatch];
              }
            }
          }
        }
      };
    }
    function matchKeyframe(token, atRules) {
      var match;
      if (token[0] == Token.NESTED_BLOCK && keyframeRegex.test(token[1][0][1])) {
        match = token[1][0][1].split(" ")[1];
        atRules[match] = atRules[match] || [];
        atRules[match].push(token);
      }
    }
    function markKeyframesAsUsed(atRules) {
      return function(token, context) {
        var property;
        var wrappedProperty;
        var component;
        var i, l2;
        var j, m2;
        for (i = 0, l2 = token[2].length; i < l2; i++) {
          property = token[2][i];
          if (animationRegex.test(property[1][1])) {
            wrappedProperty = wrapForOptimizing(property);
            populateComponents([wrappedProperty], context.validator, context.warnings);
            component = wrappedProperty.components[7];
            for (j = 0, m2 = component.value.length; j < m2; j++) {
              if (component.value[j][1] in atRules) {
                delete atRules[component.value[j][1]];
              }
            }
            restoreFromOptimizing([wrappedProperty]);
          }
          if (animationNameRegex.test(property[1][1])) {
            for (j = 2, m2 = property.length; j < m2; j++) {
              if (property[j][1] in atRules) {
                delete atRules[property[j][1]];
              }
            }
          }
        }
      };
    }
    function matchNamespace(token, atRules) {
      var match;
      if (token[0] == Token.AT_RULE && token[1].indexOf("@namespace") === 0) {
        match = token[1].split(" ")[1];
        atRules[match] = atRules[match] || [];
        atRules[match].push(token);
      }
    }
    function markNamespacesAsUsed(atRules) {
      var namespaceRegex = new RegExp(Object.keys(atRules).join("\\||") + "\\|", "g");
      return function(token) {
        var match;
        var scope;
        var normalizedMatch;
        var i, l2;
        var j, m2;
        for (i = 0, l2 = token[1].length; i < l2; i++) {
          scope = token[1][i];
          match = scope[1].match(namespaceRegex);
          for (j = 0, m2 = match.length; j < m2; j++) {
            normalizedMatch = match[j].substring(0, match[j].length - 1);
            if (normalizedMatch in atRules) {
              delete atRules[normalizedMatch];
            }
          }
        }
      };
    }
    module.exports = removeUnusedAtRules;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/tidy-rule-duplicates.js
var require_tidy_rule_duplicates = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/tidy-rule-duplicates.js"(exports, module) {
    function ruleSorter(s1, s2) {
      return s1[1] > s2[1] ? 1 : -1;
    }
    function tidyRuleDuplicates(rules) {
      var list = [];
      var repeated = [];
      for (var i = 0, l2 = rules.length; i < l2; i++) {
        var rule = rules[i];
        if (repeated.indexOf(rule[1]) == -1) {
          repeated.push(rule[1]);
          list.push(rule);
        }
      }
      return list.sort(ruleSorter);
    }
    module.exports = tidyRuleDuplicates;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/restructure.js
var require_restructure = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/restructure.js"(exports, module) {
    var canReorderSingle = require_reorderable().canReorderSingle;
    var extractProperties = require_extract_properties();
    var isMergeable = require_is_mergeable();
    var tidyRuleDuplicates = require_tidy_rule_duplicates();
    var Token = require_token();
    var cloneArray = require_clone_array();
    var serializeBody = require_one_time().body;
    var serializeRules = require_one_time().rules;
    function naturalSorter(a, b) {
      return a > b ? 1 : -1;
    }
    function cloneAndMergeSelectors(propertyA, propertyB) {
      var cloned = cloneArray(propertyA);
      cloned[5] = cloned[5].concat(propertyB[5]);
      return cloned;
    }
    function restructure(tokens, context) {
      var options = context.options;
      var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;
      var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;
      var mergeLimit = options.compatibility.selectors.mergeLimit;
      var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;
      var specificityCache = context.cache.specificity;
      var movableTokens = {};
      var movedProperties = [];
      var multiPropertyMoveCache = {};
      var movedToBeDropped = [];
      var maxCombinationsLevel = 2;
      var ID_JOIN_CHARACTER = "%";
      function sendToMultiPropertyMoveCache(position2, movedProperty2, allFits) {
        for (var i2 = allFits.length - 1; i2 >= 0; i2--) {
          var fit = allFits[i2][0];
          var id = addToCache(movedProperty2, fit);
          if (multiPropertyMoveCache[id].length > 1 && processMultiPropertyMove(position2, multiPropertyMoveCache[id])) {
            removeAllMatchingFromCache(id);
            break;
          }
        }
      }
      function addToCache(movedProperty2, fit) {
        var id = cacheId(fit);
        multiPropertyMoveCache[id] = multiPropertyMoveCache[id] || [];
        multiPropertyMoveCache[id].push([movedProperty2, fit]);
        return id;
      }
      function removeAllMatchingFromCache(matchId) {
        var matchSelectors = matchId.split(ID_JOIN_CHARACTER);
        var forRemoval = [];
        var i2;
        for (var id in multiPropertyMoveCache) {
          var selectors = id.split(ID_JOIN_CHARACTER);
          for (i2 = selectors.length - 1; i2 >= 0; i2--) {
            if (matchSelectors.indexOf(selectors[i2]) > -1) {
              forRemoval.push(id);
              break;
            }
          }
        }
        for (i2 = forRemoval.length - 1; i2 >= 0; i2--) {
          delete multiPropertyMoveCache[forRemoval[i2]];
        }
      }
      function cacheId(cachedTokens) {
        var id = [];
        for (var i2 = 0, l2 = cachedTokens.length; i2 < l2; i2++) {
          id.push(serializeRules(cachedTokens[i2][1]));
        }
        return id.join(ID_JOIN_CHARACTER);
      }
      function tokensToMerge(sourceTokens) {
        var uniqueTokensWithBody = [];
        var mergeableTokens = [];
        for (var i2 = sourceTokens.length - 1; i2 >= 0; i2--) {
          if (!isMergeable(
            serializeRules(sourceTokens[i2][1]),
            mergeablePseudoClasses,
            mergeablePseudoElements,
            multiplePseudoMerging
          )) {
            continue;
          }
          mergeableTokens.unshift(sourceTokens[i2]);
          if (sourceTokens[i2][2].length > 0 && uniqueTokensWithBody.indexOf(sourceTokens[i2]) == -1) {
            uniqueTokensWithBody.push(sourceTokens[i2]);
          }
        }
        return uniqueTokensWithBody.length > 1 ? mergeableTokens : [];
      }
      function shortenIfPossible(position2, movedProperty2) {
        var name = movedProperty2[0];
        var value = movedProperty2[1];
        var key2 = movedProperty2[4];
        var valueSize = name.length + value.length + 1;
        var allSelectors = [];
        var qualifiedTokens = [];
        var mergeableTokens = tokensToMerge(movableTokens[key2]);
        if (mergeableTokens.length < 2) {
          return;
        }
        var allFits = findAllFits(mergeableTokens, valueSize, 1);
        var bestFit = allFits[0];
        if (bestFit[1] > 0) {
          return sendToMultiPropertyMoveCache(position2, movedProperty2, allFits);
        }
        for (var i2 = bestFit[0].length - 1; i2 >= 0; i2--) {
          allSelectors = bestFit[0][i2][1].concat(allSelectors);
          qualifiedTokens.unshift(bestFit[0][i2]);
        }
        allSelectors = tidyRuleDuplicates(allSelectors);
        dropAsNewTokenAt(position2, [movedProperty2], allSelectors, qualifiedTokens);
      }
      function fitSorter(fit1, fit2) {
        return fit1[1] > fit2[1] ? 1 : fit1[1] == fit2[1] ? 0 : -1;
      }
      function findAllFits(mergeableTokens, propertySize, propertiesCount) {
        var combinations = allCombinations(mergeableTokens, propertySize, propertiesCount, maxCombinationsLevel - 1);
        return combinations.sort(fitSorter);
      }
      function allCombinations(tokensVariant, propertySize, propertiesCount, level) {
        var differenceVariants = [[tokensVariant, sizeDifference(tokensVariant, propertySize, propertiesCount)]];
        if (tokensVariant.length > 2 && level > 0) {
          for (var i2 = tokensVariant.length - 1; i2 >= 0; i2--) {
            var subVariant = Array.prototype.slice.call(tokensVariant, 0);
            subVariant.splice(i2, 1);
            differenceVariants = differenceVariants.concat(
              allCombinations(subVariant, propertySize, propertiesCount, level - 1)
            );
          }
        }
        return differenceVariants;
      }
      function sizeDifference(tokensVariant, propertySize, propertiesCount) {
        var allSelectorsSize = 0;
        for (var i2 = tokensVariant.length - 1; i2 >= 0; i2--) {
          allSelectorsSize += tokensVariant[i2][2].length > propertiesCount ? serializeRules(tokensVariant[i2][1]).length : -1;
        }
        return allSelectorsSize - (tokensVariant.length - 1) * propertySize + 1;
      }
      function dropAsNewTokenAt(position2, properties2, allSelectors, mergeableTokens) {
        var i2, j2, k2, m3;
        var allProperties = [];
        for (i2 = mergeableTokens.length - 1; i2 >= 0; i2--) {
          var mergeableToken = mergeableTokens[i2];
          for (j2 = mergeableToken[2].length - 1; j2 >= 0; j2--) {
            var mergeableProperty = mergeableToken[2][j2];
            for (k2 = 0, m3 = properties2.length; k2 < m3; k2++) {
              var property2 = properties2[k2];
              var mergeablePropertyName = mergeableProperty[1][1];
              var propertyName = property2[0];
              var propertyBody = property2[4];
              if (mergeablePropertyName == propertyName && serializeBody([mergeableProperty]) == propertyBody) {
                mergeableToken[2].splice(j2, 1);
                break;
              }
            }
          }
        }
        for (i2 = properties2.length - 1; i2 >= 0; i2--) {
          allProperties.unshift(properties2[i2][3]);
        }
        var newToken = [Token.RULE, allSelectors, allProperties];
        tokens.splice(position2, 0, newToken);
      }
      function dropPropertiesAt(position2, movedProperty2) {
        var key2 = movedProperty2[4];
        var toMove = movableTokens[key2];
        if (toMove && toMove.length > 1) {
          if (!shortenMultiMovesIfPossible(position2, movedProperty2)) {
            shortenIfPossible(position2, movedProperty2);
          }
        }
      }
      function shortenMultiMovesIfPossible(position2, movedProperty2) {
        var candidates = [];
        var propertiesAndMergableTokens = [];
        var key2 = movedProperty2[4];
        var j2, k2;
        var mergeableTokens = tokensToMerge(movableTokens[key2]);
        if (mergeableTokens.length < 2) {
          return;
        }
        movableLoop:
          for (var value in movableTokens) {
            var tokensList = movableTokens[value];
            for (j2 = mergeableTokens.length - 1; j2 >= 0; j2--) {
              if (tokensList.indexOf(mergeableTokens[j2]) == -1) {
                continue movableLoop;
              }
            }
            candidates.push(value);
          }
        if (candidates.length < 2) {
          return false;
        }
        for (j2 = candidates.length - 1; j2 >= 0; j2--) {
          for (k2 = movedProperties.length - 1; k2 >= 0; k2--) {
            if (movedProperties[k2][4] == candidates[j2]) {
              propertiesAndMergableTokens.unshift([movedProperties[k2], mergeableTokens]);
              break;
            }
          }
        }
        return processMultiPropertyMove(position2, propertiesAndMergableTokens);
      }
      function processMultiPropertyMove(position2, propertiesAndMergableTokens) {
        var valueSize = 0;
        var properties2 = [];
        var property2;
        for (var i2 = propertiesAndMergableTokens.length - 1; i2 >= 0; i2--) {
          property2 = propertiesAndMergableTokens[i2][0];
          var fullValue = property2[4];
          valueSize += fullValue.length + (i2 > 0 ? 1 : 0);
          properties2.push(property2);
        }
        var mergeableTokens = propertiesAndMergableTokens[0][1];
        var bestFit = findAllFits(mergeableTokens, valueSize, properties2.length)[0];
        if (bestFit[1] > 0) {
          return false;
        }
        var allSelectors = [];
        var qualifiedTokens = [];
        for (i2 = bestFit[0].length - 1; i2 >= 0; i2--) {
          allSelectors = bestFit[0][i2][1].concat(allSelectors);
          qualifiedTokens.unshift(bestFit[0][i2]);
        }
        allSelectors = tidyRuleDuplicates(allSelectors);
        dropAsNewTokenAt(position2, properties2, allSelectors, qualifiedTokens);
        for (i2 = properties2.length - 1; i2 >= 0; i2--) {
          property2 = properties2[i2];
          var index = movedProperties.indexOf(property2);
          delete movableTokens[property2[4]];
          if (index > -1 && movedToBeDropped.indexOf(index) == -1) {
            movedToBeDropped.push(index);
          }
        }
        return true;
      }
      function boundToAnotherPropertyInCurrrentToken(property2, movedProperty2, token2) {
        var propertyName = property2[0];
        var movedPropertyName = movedProperty2[0];
        if (propertyName != movedPropertyName) {
          return false;
        }
        var key2 = movedProperty2[4];
        var toMove = movableTokens[key2];
        return toMove && toMove.indexOf(token2) > -1;
      }
      for (var i = tokens.length - 1; i >= 0; i--) {
        var token = tokens[i];
        var isRule;
        var j, k, m2;
        var samePropertyAt;
        if (token[0] == Token.RULE) {
          isRule = true;
        } else if (token[0] == Token.NESTED_BLOCK) {
          isRule = false;
        } else {
          continue;
        }
        var movedCount = movedProperties.length;
        var properties = extractProperties(token);
        movedToBeDropped = [];
        var unmovableInCurrentToken = [];
        for (j = properties.length - 1; j >= 0; j--) {
          for (k = j - 1; k >= 0; k--) {
            if (!canReorderSingle(properties[j], properties[k], specificityCache)) {
              unmovableInCurrentToken.push(j);
              break;
            }
          }
        }
        for (j = properties.length - 1; j >= 0; j--) {
          var property = properties[j];
          var movedSameProperty = false;
          for (k = 0; k < movedCount; k++) {
            var movedProperty = movedProperties[k];
            if (movedToBeDropped.indexOf(k) == -1 && (!canReorderSingle(property, movedProperty, specificityCache) && !boundToAnotherPropertyInCurrrentToken(property, movedProperty, token) || movableTokens[movedProperty[4]] && movableTokens[movedProperty[4]].length === mergeLimit)) {
              dropPropertiesAt(i + 1, movedProperty);
              if (movedToBeDropped.indexOf(k) == -1) {
                movedToBeDropped.push(k);
                delete movableTokens[movedProperty[4]];
              }
            }
            if (!movedSameProperty) {
              movedSameProperty = property[0] == movedProperty[0] && property[1] == movedProperty[1];
              if (movedSameProperty) {
                samePropertyAt = k;
              }
            }
          }
          if (!isRule || unmovableInCurrentToken.indexOf(j) > -1) {
            continue;
          }
          var key = property[4];
          if (movedSameProperty && movedProperties[samePropertyAt][5].length + property[5].length > mergeLimit) {
            dropPropertiesAt(i + 1, movedProperties[samePropertyAt]);
            movedProperties.splice(samePropertyAt, 1);
            movableTokens[key] = [token];
            movedSameProperty = false;
          } else {
            movableTokens[key] = movableTokens[key] || [];
            movableTokens[key].push(token);
          }
          if (movedSameProperty) {
            movedProperties[samePropertyAt] = cloneAndMergeSelectors(movedProperties[samePropertyAt], property);
          } else {
            movedProperties.push(property);
          }
        }
        movedToBeDropped = movedToBeDropped.sort(naturalSorter);
        for (j = 0, m2 = movedToBeDropped.length; j < m2; j++) {
          var dropAt = movedToBeDropped[j] - j;
          movedProperties.splice(dropAt, 1);
        }
      }
      var position = tokens[0] && tokens[0][0] == Token.AT_RULE && tokens[0][1].indexOf("@charset") === 0 ? 1 : 0;
      for (; position < tokens.length - 1; position++) {
        var isImportRule = tokens[position][0] === Token.AT_RULE && tokens[position][1].indexOf("@import") === 0;
        var isComment = tokens[position][0] === Token.COMMENT;
        if (!(isImportRule || isComment)) {
          break;
        }
      }
      for (i = 0; i < movedProperties.length; i++) {
        dropPropertiesAt(position, movedProperties[i]);
      }
    }
    module.exports = restructure;
  }
});

// node_modules/clean-css/lib/optimizer/level-2/optimize.js
var require_optimize4 = __commonJS({
  "node_modules/clean-css/lib/optimizer/level-2/optimize.js"(exports, module) {
    var mergeAdjacent = require_merge_adjacent();
    var mergeMediaQueries = require_merge_media_queries();
    var mergeNonAdjacentByBody = require_merge_non_adjacent_by_body();
    var mergeNonAdjacentBySelector = require_merge_non_adjacent_by_selector();
    var reduceNonAdjacent = require_reduce_non_adjacent();
    var removeDuplicateFontAtRules = require_remove_duplicate_font_at_rules();
    var removeDuplicateMediaQueries = require_remove_duplicate_media_queries();
    var removeDuplicates = require_remove_duplicates();
    var removeUnusedAtRules = require_remove_unused_at_rules();
    var restructure = require_restructure();
    var optimizeProperties = require_optimize3();
    var OptimizationLevel = require_optimization_level().OptimizationLevel;
    var Token = require_token();
    function removeEmpty(tokens) {
      for (var i = 0, l2 = tokens.length; i < l2; i++) {
        var token = tokens[i];
        var isEmpty = false;
        switch (token[0]) {
          case Token.RULE:
            isEmpty = token[1].length === 0 || token[2].length === 0;
            break;
          case Token.NESTED_BLOCK:
            removeEmpty(token[2]);
            isEmpty = token[2].length === 0;
            break;
          case Token.AT_RULE:
            isEmpty = token[1].length === 0;
            break;
          case Token.AT_RULE_BLOCK:
            isEmpty = token[2].length === 0;
        }
        if (isEmpty) {
          tokens.splice(i, 1);
          i--;
          l2--;
        }
      }
    }
    function recursivelyOptimizeBlocks(tokens, context) {
      for (var i = 0, l2 = tokens.length; i < l2; i++) {
        var token = tokens[i];
        if (token[0] == Token.NESTED_BLOCK) {
          var isKeyframes = /@(-moz-|-o-|-webkit-)?keyframes/.test(token[1][0][1]);
          level2Optimize(token[2], context, !isKeyframes);
        }
      }
    }
    function recursivelyOptimizeProperties(tokens, context) {
      for (var i = 0, l2 = tokens.length; i < l2; i++) {
        var token = tokens[i];
        switch (token[0]) {
          case Token.RULE:
            optimizeProperties(token[2], true, true, context);
            break;
          case Token.NESTED_BLOCK:
            recursivelyOptimizeProperties(token[2], context);
        }
      }
    }
    function level2Optimize(tokens, context, withRestructuring) {
      var levelOptions = context.options.level[OptimizationLevel.Two];
      var level2Plugins = context.options.plugins.level2Block;
      var reduced;
      var i;
      recursivelyOptimizeBlocks(tokens, context);
      recursivelyOptimizeProperties(tokens, context);
      if (levelOptions.removeDuplicateRules) {
        removeDuplicates(tokens, context);
      }
      if (levelOptions.mergeAdjacentRules) {
        mergeAdjacent(tokens, context);
      }
      if (levelOptions.reduceNonAdjacentRules) {
        reduceNonAdjacent(tokens, context);
      }
      if (levelOptions.mergeNonAdjacentRules && levelOptions.mergeNonAdjacentRules != "body") {
        mergeNonAdjacentBySelector(tokens, context);
      }
      if (levelOptions.mergeNonAdjacentRules && levelOptions.mergeNonAdjacentRules != "selector") {
        mergeNonAdjacentByBody(tokens, context);
      }
      if (levelOptions.restructureRules && levelOptions.mergeAdjacentRules && withRestructuring) {
        restructure(tokens, context);
        mergeAdjacent(tokens, context);
      }
      if (levelOptions.restructureRules && !levelOptions.mergeAdjacentRules && withRestructuring) {
        restructure(tokens, context);
      }
      if (levelOptions.removeDuplicateFontRules) {
        removeDuplicateFontAtRules(tokens, context);
      }
      if (levelOptions.removeDuplicateMediaBlocks) {
        removeDuplicateMediaQueries(tokens, context);
      }
      if (levelOptions.removeUnusedAtRules) {
        removeUnusedAtRules(tokens, context);
      }
      if (levelOptions.mergeMedia) {
        reduced = mergeMediaQueries(tokens, context);
        for (i = reduced.length - 1; i >= 0; i--) {
          level2Optimize(reduced[i][2], context, false);
        }
      }
      for (i = 0; i < level2Plugins.length; i++) {
        level2Plugins[i](tokens);
      }
      if (levelOptions.removeEmpty) {
        removeEmpty(tokens);
      }
      return tokens;
    }
    module.exports = level2Optimize;
  }
});

// node_modules/clean-css/lib/optimizer/validator.js
var require_validator = __commonJS({
  "node_modules/clean-css/lib/optimizer/validator.js"(exports, module) {
    var functionNoVendorRegexStr = "[A-Z]+(\\-|[A-Z]|[0-9])+\\(.*?\\)";
    var functionVendorRegexStr = "\\-(\\-|[A-Z]|[0-9])+\\(.*?\\)";
    var variableRegexStr = "var\\(\\-\\-[^\\)]+\\)";
    var functionAnyRegexStr = "(" + variableRegexStr + "|" + functionNoVendorRegexStr + "|" + functionVendorRegexStr + ")";
    var calcRegex = new RegExp("^(\\-moz\\-|\\-webkit\\-)?calc\\([^\\)]+\\)$", "i");
    var decimalRegex = /[0-9]/;
    var functionAnyRegex = new RegExp("^" + functionAnyRegexStr + "$", "i");
    var hexAlphaColorRegex = /^#(?:[0-9a-f]{4}|[0-9a-f]{8})$/i;
    var hslColorRegex = /^hsl\(\s{0,31}[-.]?\d+\s{0,31},\s{0,31}\d*\.?\d+%\s{0,31},\s{0,31}\d*\.?\d+%\s{0,31}\)|hsla\(\s{0,31}[-.]?\d+\s{0,31},\s{0,31}\d*\.?\d+%\s{0,31},\s{0,31}\d*\.?\d+%\s{0,31},\s{0,31}\.?\d+\s{0,31}\)$/;
    var hslColorWithSpacesRegex = /^hsl\(\s{0,31}[-.]?\d+(deg)?\s{1,31}\d*\.?\d+%\s{1,31}\d*\.?\d+%\s{0,31}\)|hsla\(\s{0,31}[-.]?\d+(deg)?\s{1,31}\d*\.?\d+%\s{1,31}\d*\.?\d+%\s{1,31}\/\s{1,31}\d*\.?\d+%?\s{0,31}\)$/;
    var identifierRegex = /^(-[a-z0-9_][a-z0-9\-_]*|[a-z_][a-z0-9\-_]*)$/i;
    var namedEntityRegex = /^[a-z]+$/i;
    var prefixRegex = /^-([a-z0-9]|-)*$/i;
    var quotedTextRegex = /^("[^"]*"|'[^']*')$/i;
    var rgbColorRegex = /^rgb\(\s{0,31}[\d]{1,3}\s{0,31},\s{0,31}[\d]{1,3}\s{0,31},\s{0,31}[\d]{1,3}\s{0,31}\)|rgba\(\s{0,31}[\d]{1,3}\s{0,31},\s{0,31}[\d]{1,3}\s{0,31},\s{0,31}[\d]{1,3}\s{0,31},\s{0,31}[.\d]+\s{0,31}\)$/i;
    var rgbColorWithSpacesRegex = /^rgb\(\s{0,31}[\d]{1,3}\s{1,31}[\d]{1,3}\s{1,31}[\d]{1,3}\s{0,31}\)|rgba\(\s{0,31}[\d]{1,3}\s{1,31}[\d]{1,3}\s{1,31}[\d]{1,3}\s{1,31}\/\s{1,31}[\d]*\.?[.\d]+%?\s{0,31}\)$/i;
    var timeUnitPattern = /\d+(s|ms)/;
    var timingFunctionRegex = /^(cubic-bezier|steps)\([^)]+\)$/;
    var validTimeUnits = ["ms", "s"];
    var urlRegex = /^url\([\s\S]+\)$/i;
    var variableRegex = new RegExp("^" + variableRegexStr + "$", "i");
    var eightValueColorRegex = /^#[0-9a-f]{8}$/i;
    var fourValueColorRegex = /^#[0-9a-f]{4}$/i;
    var sixValueColorRegex = /^#[0-9a-f]{6}$/i;
    var threeValueColorRegex = /^#[0-9a-f]{3}$/i;
    var DECIMAL_DOT = ".";
    var MINUS_SIGN = "-";
    var PLUS_SIGN = "+";
    var Keywords = {
      "^": [
        "inherit",
        "initial",
        "unset"
      ],
      "*-style": [
        "auto",
        "dashed",
        "dotted",
        "double",
        "groove",
        "hidden",
        "inset",
        "none",
        "outset",
        "ridge",
        "solid"
      ],
      "*-timing-function": [
        "ease",
        "ease-in",
        "ease-in-out",
        "ease-out",
        "linear",
        "step-end",
        "step-start"
      ],
      "animation-direction": [
        "alternate",
        "alternate-reverse",
        "normal",
        "reverse"
      ],
      "animation-fill-mode": [
        "backwards",
        "both",
        "forwards",
        "none"
      ],
      "animation-iteration-count": [
        "infinite"
      ],
      "animation-name": [
        "none"
      ],
      "animation-play-state": [
        "paused",
        "running"
      ],
      "background-attachment": [
        "fixed",
        "inherit",
        "local",
        "scroll"
      ],
      "background-clip": [
        "border-box",
        "content-box",
        "inherit",
        "padding-box",
        "text"
      ],
      "background-origin": [
        "border-box",
        "content-box",
        "inherit",
        "padding-box"
      ],
      "background-position": [
        "bottom",
        "center",
        "left",
        "right",
        "top"
      ],
      "background-repeat": [
        "no-repeat",
        "inherit",
        "repeat",
        "repeat-x",
        "repeat-y",
        "round",
        "space"
      ],
      "background-size": [
        "auto",
        "cover",
        "contain"
      ],
      "border-collapse": [
        "collapse",
        "inherit",
        "separate"
      ],
      bottom: [
        "auto"
      ],
      clear: [
        "both",
        "left",
        "none",
        "right"
      ],
      color: [
        "transparent"
      ],
      cursor: [
        "all-scroll",
        "auto",
        "col-resize",
        "crosshair",
        "default",
        "e-resize",
        "help",
        "move",
        "n-resize",
        "ne-resize",
        "no-drop",
        "not-allowed",
        "nw-resize",
        "pointer",
        "progress",
        "row-resize",
        "s-resize",
        "se-resize",
        "sw-resize",
        "text",
        "vertical-text",
        "w-resize",
        "wait"
      ],
      display: [
        "block",
        "inline",
        "inline-block",
        "inline-table",
        "list-item",
        "none",
        "table",
        "table-caption",
        "table-cell",
        "table-column",
        "table-column-group",
        "table-footer-group",
        "table-header-group",
        "table-row",
        "table-row-group"
      ],
      float: [
        "left",
        "none",
        "right"
      ],
      left: [
        "auto"
      ],
      font: [
        "caption",
        "icon",
        "menu",
        "message-box",
        "small-caption",
        "status-bar",
        "unset"
      ],
      "font-size": [
        "large",
        "larger",
        "medium",
        "small",
        "smaller",
        "x-large",
        "x-small",
        "xx-large",
        "xx-small"
      ],
      "font-stretch": [
        "condensed",
        "expanded",
        "extra-condensed",
        "extra-expanded",
        "normal",
        "semi-condensed",
        "semi-expanded",
        "ultra-condensed",
        "ultra-expanded"
      ],
      "font-style": [
        "italic",
        "normal",
        "oblique"
      ],
      "font-variant": [
        "normal",
        "small-caps"
      ],
      "font-weight": [
        "100",
        "200",
        "300",
        "400",
        "500",
        "600",
        "700",
        "800",
        "900",
        "bold",
        "bolder",
        "lighter",
        "normal"
      ],
      "line-height": [
        "normal"
      ],
      "list-style-position": [
        "inside",
        "outside"
      ],
      "list-style-type": [
        "armenian",
        "circle",
        "decimal",
        "decimal-leading-zero",
        "disc",
        "decimal|disc",
        // this is the default value of list-style-type, see comment in configuration.js
        "georgian",
        "lower-alpha",
        "lower-greek",
        "lower-latin",
        "lower-roman",
        "none",
        "square",
        "upper-alpha",
        "upper-latin",
        "upper-roman"
      ],
      overflow: [
        "auto",
        "hidden",
        "scroll",
        "visible"
      ],
      position: [
        "absolute",
        "fixed",
        "relative",
        "static"
      ],
      right: [
        "auto"
      ],
      "text-align": [
        "center",
        "justify",
        "left",
        "left|right",
        // this is the default value of list-style-type, see comment in configuration.js
        "right"
      ],
      "text-decoration": [
        "line-through",
        "none",
        "overline",
        "underline"
      ],
      "text-overflow": [
        "clip",
        "ellipsis"
      ],
      top: [
        "auto"
      ],
      "vertical-align": [
        "baseline",
        "bottom",
        "middle",
        "sub",
        "super",
        "text-bottom",
        "text-top",
        "top"
      ],
      visibility: [
        "collapse",
        "hidden",
        "visible"
      ],
      "white-space": [
        "normal",
        "nowrap",
        "pre"
      ],
      width: [
        "inherit",
        "initial",
        "medium",
        "thick",
        "thin"
      ]
    };
    var Units = [
      "%",
      "ch",
      "cm",
      "em",
      "ex",
      "in",
      "mm",
      "pc",
      "pt",
      "px",
      "rem",
      "vh",
      "vm",
      "vmax",
      "vmin",
      "vw"
    ];
    function isColor(value) {
      return value != "auto" && (isKeyword("color")(value) || isHexColor(value) || isColorFunction(value) || isNamedEntity(value));
    }
    function isColorFunction(value) {
      return isRgbColor(value) || isHslColor(value);
    }
    function isDynamicUnit(value) {
      return calcRegex.test(value);
    }
    function isFunction(value) {
      return functionAnyRegex.test(value);
    }
    function isHexColor(value) {
      return threeValueColorRegex.test(value) || fourValueColorRegex.test(value) || sixValueColorRegex.test(value) || eightValueColorRegex.test(value);
    }
    function isHslColor(value) {
      return hslColorRegex.test(value) || hslColorWithSpacesRegex.test(value);
    }
    function isHexAlphaColor(value) {
      return hexAlphaColorRegex.test(value);
    }
    function isIdentifier(value) {
      return identifierRegex.test(value);
    }
    function isQuotedText(value) {
      return quotedTextRegex.test(value);
    }
    function isImage(value) {
      return value == "none" || value == "inherit" || isUrl(value);
    }
    function isKeyword(propertyName) {
      return function(value) {
        return Keywords[propertyName].indexOf(value) > -1;
      };
    }
    function isNamedEntity(value) {
      return namedEntityRegex.test(value);
    }
    function isNumber(value) {
      return scanForNumber(value) == value.length;
    }
    function isRgbColor(value) {
      return rgbColorRegex.test(value) || rgbColorWithSpacesRegex.test(value);
    }
    function isPrefixed(value) {
      return prefixRegex.test(value);
    }
    function isPositiveNumber(value) {
      return isNumber(value) && parseFloat(value) >= 0;
    }
    function isVariable(value) {
      return variableRegex.test(value);
    }
    function isTime(value) {
      var numberUpTo = scanForNumber(value);
      return numberUpTo == value.length && parseInt(value) === 0 || numberUpTo > -1 && validTimeUnits.indexOf(value.slice(numberUpTo + 1)) > -1 || isCalculatedTime(value);
    }
    function isCalculatedTime(value) {
      return isFunction(value) && timeUnitPattern.test(value);
    }
    function isTimingFunction() {
      var isTimingFunctionKeyword = isKeyword("*-timing-function");
      return function(value) {
        return isTimingFunctionKeyword(value) || timingFunctionRegex.test(value);
      };
    }
    function isUnit(validUnits, value) {
      var numberUpTo = scanForNumber(value);
      return numberUpTo == value.length && parseInt(value) === 0 || numberUpTo > -1 && validUnits.indexOf(value.slice(numberUpTo + 1).toLowerCase()) > -1 || value == "auto" || value == "inherit";
    }
    function isUrl(value) {
      return urlRegex.test(value);
    }
    function isZIndex(value) {
      return value == "auto" || isNumber(value) || isKeyword("^")(value);
    }
    function scanForNumber(value) {
      var hasDot = false;
      var hasSign = false;
      var character;
      var i, l2;
      for (i = 0, l2 = value.length; i < l2; i++) {
        character = value[i];
        if (i === 0 && (character == PLUS_SIGN || character == MINUS_SIGN)) {
          hasSign = true;
        } else if (i > 0 && hasSign && (character == PLUS_SIGN || character == MINUS_SIGN)) {
          return i - 1;
        } else if (character == DECIMAL_DOT && !hasDot) {
          hasDot = true;
        } else if (character == DECIMAL_DOT && hasDot) {
          return i - 1;
        } else if (decimalRegex.test(character)) {
          continue;
        } else {
          return i - 1;
        }
      }
      return i;
    }
    function validator(compatibility) {
      var validUnits = Units.slice(0).filter(function(value) {
        return !(value in compatibility.units) || compatibility.units[value] === true;
      });
      if (compatibility.customUnits.rpx) {
        validUnits.push("rpx");
      }
      return {
        colorOpacity: compatibility.colors.opacity,
        colorHexAlpha: compatibility.colors.hexAlpha,
        isAnimationDirectionKeyword: isKeyword("animation-direction"),
        isAnimationFillModeKeyword: isKeyword("animation-fill-mode"),
        isAnimationIterationCountKeyword: isKeyword("animation-iteration-count"),
        isAnimationNameKeyword: isKeyword("animation-name"),
        isAnimationPlayStateKeyword: isKeyword("animation-play-state"),
        isTimingFunction: isTimingFunction(),
        isBackgroundAttachmentKeyword: isKeyword("background-attachment"),
        isBackgroundClipKeyword: isKeyword("background-clip"),
        isBackgroundOriginKeyword: isKeyword("background-origin"),
        isBackgroundPositionKeyword: isKeyword("background-position"),
        isBackgroundRepeatKeyword: isKeyword("background-repeat"),
        isBackgroundSizeKeyword: isKeyword("background-size"),
        isColor,
        isColorFunction,
        isDynamicUnit,
        isFontKeyword: isKeyword("font"),
        isFontSizeKeyword: isKeyword("font-size"),
        isFontStretchKeyword: isKeyword("font-stretch"),
        isFontStyleKeyword: isKeyword("font-style"),
        isFontVariantKeyword: isKeyword("font-variant"),
        isFontWeightKeyword: isKeyword("font-weight"),
        isFunction,
        isGlobal: isKeyword("^"),
        isHexAlphaColor,
        isHslColor,
        isIdentifier,
        isImage,
        isKeyword,
        isLineHeightKeyword: isKeyword("line-height"),
        isListStylePositionKeyword: isKeyword("list-style-position"),
        isListStyleTypeKeyword: isKeyword("list-style-type"),
        isNumber,
        isPrefixed,
        isPositiveNumber,
        isQuotedText,
        isRgbColor,
        isStyleKeyword: isKeyword("*-style"),
        isTime,
        isUnit: isUnit.bind(null, validUnits),
        isUrl,
        isVariable,
        isWidth: isKeyword("width"),
        isZIndex
      };
    }
    module.exports = validator;
  }
});

// node_modules/clean-css/lib/options/compatibility.js
var require_compatibility = __commonJS({
  "node_modules/clean-css/lib/options/compatibility.js"(exports, module) {
    var DEFAULTS = {
      "*": {
        colors: {
          hexAlpha: false,
          // 4- and 8-character hex notation
          opacity: true
          // rgba / hsla
        },
        customUnits: { rpx: false },
        properties: {
          backgroundClipMerging: true,
          // background-clip to shorthand
          backgroundOriginMerging: true,
          // background-origin to shorthand
          backgroundSizeMerging: true,
          // background-size to shorthand
          colors: true,
          // any kind of color transformations, like `#ff00ff` to `#f0f` or `#fff` into `red`
          ieBangHack: false,
          // !ie suffix hacks on IE<8
          ieFilters: false,
          // whether to preserve `filter` and `-ms-filter` properties
          iePrefixHack: false,
          // underscore / asterisk prefix hacks on IE
          ieSuffixHack: false,
          // \9 suffix hacks on IE6-9, \0 suffix hack on IE6-11
          merging: true,
          // merging properties into one
          shorterLengthUnits: false,
          // optimize pixel units into `pt`, `pc` or `in` units
          spaceAfterClosingBrace: true,
          // 'url() no-repeat' to 'url()no-repeat'
          urlQuotes: true,
          // whether to wrap content of `url()` into quotes or not
          zeroUnits: true
          // 0[unit] -> 0
        },
        selectors: {
          adjacentSpace: false,
          // div+ nav Android stock browser hack
          ie7Hack: false,
          // *+html hack
          mergeablePseudoClasses: [
            ":active",
            ":after",
            ":before",
            ":empty",
            ":checked",
            ":disabled",
            ":empty",
            ":enabled",
            ":first-child",
            ":first-letter",
            ":first-line",
            ":first-of-type",
            ":focus",
            ":hover",
            ":lang",
            ":last-child",
            ":last-of-type",
            ":link",
            ":not",
            ":nth-child",
            ":nth-last-child",
            ":nth-last-of-type",
            ":nth-of-type",
            ":only-child",
            ":only-of-type",
            ":root",
            ":target",
            ":visited"
          ],
          // selectors with these pseudo-classes can be merged as these are universally supported
          mergeablePseudoElements: [
            "::after",
            "::before",
            "::first-letter",
            "::first-line"
          ],
          // selectors with these pseudo-elements can be merged as these are universally supported
          mergeLimit: 8191,
          // number of rules that can be safely merged together
          multiplePseudoMerging: true
        },
        units: {
          ch: true,
          in: true,
          pc: true,
          pt: true,
          rem: true,
          vh: true,
          vm: true,
          // vm is vmin on IE9+ see https://developer.mozilla.org/en-US/docs/Web/CSS/length
          vmax: true,
          vmin: true,
          vw: true
        }
      }
    };
    DEFAULTS.ie11 = merge(DEFAULTS["*"], { properties: { ieSuffixHack: true } });
    DEFAULTS.ie10 = merge(DEFAULTS["*"], { properties: { ieSuffixHack: true } });
    DEFAULTS.ie9 = merge(DEFAULTS["*"], {
      properties: {
        ieFilters: true,
        ieSuffixHack: true
      }
    });
    DEFAULTS.ie8 = merge(DEFAULTS.ie9, {
      colors: { opacity: false },
      properties: {
        backgroundClipMerging: false,
        backgroundOriginMerging: false,
        backgroundSizeMerging: false,
        iePrefixHack: true,
        merging: false
      },
      selectors: {
        mergeablePseudoClasses: [
          ":after",
          ":before",
          ":first-child",
          ":first-letter",
          ":focus",
          ":hover",
          ":visited"
        ],
        mergeablePseudoElements: []
      },
      units: {
        ch: false,
        rem: false,
        vh: false,
        vm: false,
        vmax: false,
        vmin: false,
        vw: false
      }
    });
    DEFAULTS.ie7 = merge(DEFAULTS.ie8, {
      properties: { ieBangHack: true },
      selectors: {
        ie7Hack: true,
        mergeablePseudoClasses: [
          ":first-child",
          ":first-letter",
          ":hover",
          ":visited"
        ]
      }
    });
    function compatibilityFrom(source) {
      return merge(DEFAULTS["*"], calculateSource(source));
    }
    function merge(source, target) {
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          var value = source[key];
          if (Object.prototype.hasOwnProperty.call(target, key) && typeof value === "object" && !Array.isArray(value)) {
            target[key] = merge(value, target[key] || {});
          } else {
            target[key] = key in target ? target[key] : value;
          }
        }
      }
      return target;
    }
    function calculateSource(source) {
      if (typeof source == "object") {
        return source;
      }
      if (!/[,+-]/.test(source)) {
        return DEFAULTS[source] || DEFAULTS["*"];
      }
      var parts = source.split(",");
      var template = parts[0] in DEFAULTS ? DEFAULTS[parts.shift()] : DEFAULTS["*"];
      source = {};
      parts.forEach(function(part) {
        var isAdd = part[0] == "+";
        var key = part.substring(1).split(".");
        var group = key[0];
        var option = key[1];
        source[group] = source[group] || {};
        source[group][option] = isAdd;
      });
      return merge(template, source);
    }
    module.exports = compatibilityFrom;
  }
});

// browser-external:http
var require_http = __commonJS({
  "browser-external:http"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "http" has been externalized for browser compatibility. Cannot access "http.${key}" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:https
var require_https = __commonJS({
  "browser-external:https"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "https" has been externalized for browser compatibility. Cannot access "https.${key}" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:url
var require_url = __commonJS({
  "browser-external:url"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "url" has been externalized for browser compatibility. Cannot access "url.${key}" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/clean-css/lib/utils/is-http-resource.js
var require_is_http_resource = __commonJS({
  "node_modules/clean-css/lib/utils/is-http-resource.js"(exports, module) {
    var HTTP_RESOURCE_PATTERN = /^http:\/\//;
    function isHttpResource(uri) {
      return HTTP_RESOURCE_PATTERN.test(uri);
    }
    module.exports = isHttpResource;
  }
});

// node_modules/clean-css/lib/utils/is-https-resource.js
var require_is_https_resource = __commonJS({
  "node_modules/clean-css/lib/utils/is-https-resource.js"(exports, module) {
    var HTTPS_RESOURCE_PATTERN = /^https:\/\//;
    function isHttpsResource(uri) {
      return HTTPS_RESOURCE_PATTERN.test(uri);
    }
    module.exports = isHttpsResource;
  }
});

// node_modules/clean-css/lib/reader/load-remote-resource.js
var require_load_remote_resource = __commonJS({
  "node_modules/clean-css/lib/reader/load-remote-resource.js"(exports, module) {
    var http = require_http();
    var https = require_https();
    var url = require_url();
    var isHttpResource = require_is_http_resource();
    var isHttpsResource = require_is_https_resource();
    var override = require_override();
    var HTTP_PROTOCOL = "http:";
    function loadRemoteResource(uri, inlineRequest, inlineTimeout, callback) {
      var proxyProtocol = inlineRequest.protocol || inlineRequest.hostname;
      var errorHandled = false;
      var requestOptions;
      var fetch;
      requestOptions = override(
        url.parse(uri),
        inlineRequest || {}
      );
      if (inlineRequest.hostname !== void 0) {
        requestOptions.protocol = inlineRequest.protocol || HTTP_PROTOCOL;
        requestOptions.path = requestOptions.href;
      }
      fetch = proxyProtocol && !isHttpsResource(proxyProtocol) || isHttpResource(uri) ? http.get : https.get;
      fetch(requestOptions, function(res) {
        var chunks = [];
        var movedUri;
        if (errorHandled) {
          return;
        }
        if (res.statusCode < 200 || res.statusCode > 399) {
          return callback(res.statusCode, null);
        }
        if (res.statusCode > 299) {
          movedUri = url.resolve(uri, res.headers.location);
          return loadRemoteResource(movedUri, inlineRequest, inlineTimeout, callback);
        }
        res.on("data", function(chunk) {
          chunks.push(chunk.toString());
        });
        res.on("end", function() {
          var body = chunks.join("");
          callback(null, body);
        });
      }).on("error", function(res) {
        if (errorHandled) {
          return;
        }
        errorHandled = true;
        callback(res.message, null);
      }).on("timeout", function() {
        if (errorHandled) {
          return;
        }
        errorHandled = true;
        callback("timeout", null);
      }).setTimeout(inlineTimeout);
    }
    module.exports = loadRemoteResource;
  }
});

// node_modules/clean-css/lib/options/fetch.js
var require_fetch = __commonJS({
  "node_modules/clean-css/lib/options/fetch.js"(exports, module) {
    var loadRemoteResource = require_load_remote_resource();
    function fetchFrom(callback) {
      return callback || loadRemoteResource;
    }
    module.exports = fetchFrom;
  }
});

// node_modules/clean-css/lib/options/inline.js
var require_inline = __commonJS({
  "node_modules/clean-css/lib/options/inline.js"(exports, module) {
    function inlineOptionsFrom(rules) {
      if (Array.isArray(rules)) {
        return rules;
      }
      if (rules === false) {
        return ["none"];
      }
      return void 0 === rules ? ["local"] : rules.split(",");
    }
    module.exports = inlineOptionsFrom;
  }
});

// node_modules/clean-css/lib/options/inline-request.js
var require_inline_request = __commonJS({
  "node_modules/clean-css/lib/options/inline-request.js"(exports, module) {
    var url = require_url();
    var override = require_override();
    function inlineRequestFrom(option) {
      return override(
        /* jshint camelcase: false */
        proxyOptionsFrom(process.env.HTTP_PROXY || process.env.http_proxy),
        option || {}
      );
    }
    function proxyOptionsFrom(httpProxy) {
      return httpProxy ? {
        hostname: url.parse(httpProxy).hostname,
        port: parseInt(url.parse(httpProxy).port)
      } : {};
    }
    module.exports = inlineRequestFrom;
  }
});

// node_modules/clean-css/lib/options/inline-timeout.js
var require_inline_timeout = __commonJS({
  "node_modules/clean-css/lib/options/inline-timeout.js"(exports, module) {
    var DEFAULT_TIMEOUT = 5e3;
    function inlineTimeoutFrom(option) {
      return option || DEFAULT_TIMEOUT;
    }
    module.exports = inlineTimeoutFrom;
  }
});

// node_modules/clean-css/lib/options/plugins.js
var require_plugins = __commonJS({
  "node_modules/clean-css/lib/options/plugins.js"(exports, module) {
    function pluginsFrom(plugins) {
      var flatPlugins = {
        level1Value: [],
        level1Property: [],
        level2Block: []
      };
      plugins = plugins || [];
      flatPlugins.level1Value = plugins.map(function(plugin) {
        return plugin.level1 && plugin.level1.value;
      }).filter(function(plugin) {
        return plugin != null;
      });
      flatPlugins.level1Property = plugins.map(function(plugin) {
        return plugin.level1 && plugin.level1.property;
      }).filter(function(plugin) {
        return plugin != null;
      });
      flatPlugins.level2Block = plugins.map(function(plugin) {
        return plugin.level2 && plugin.level2.block;
      }).filter(function(plugin) {
        return plugin != null;
      });
      return flatPlugins;
    }
    module.exports = pluginsFrom;
  }
});

// node_modules/clean-css/lib/options/rebase.js
var require_rebase = __commonJS({
  "node_modules/clean-css/lib/options/rebase.js"(exports, module) {
    function rebaseFrom(rebaseOption, rebaseToOption) {
      if (void 0 !== rebaseToOption) {
        return true;
      }
      if (void 0 === rebaseOption) {
        return false;
      }
      return !!rebaseOption;
    }
    module.exports = rebaseFrom;
  }
});

// browser-external:path
var require_path = __commonJS({
  "browser-external:path"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "path" has been externalized for browser compatibility. Cannot access "path.${key}" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/clean-css/lib/options/rebase-to.js
var require_rebase_to = __commonJS({
  "node_modules/clean-css/lib/options/rebase-to.js"(exports, module) {
    var path = require_path();
    function rebaseToFrom(option) {
      return option ? path.resolve(option) : process.cwd();
    }
    module.exports = rebaseToFrom;
  }
});

// node_modules/source-map/lib/base64.js
var require_base64 = __commonJS({
  "node_modules/source-map/lib/base64.js"(exports) {
    var intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
    exports.encode = function(number) {
      if (0 <= number && number < intToCharMap.length) {
        return intToCharMap[number];
      }
      throw new TypeError("Must be between 0 and 63: " + number);
    };
    exports.decode = function(charCode) {
      var bigA = 65;
      var bigZ = 90;
      var littleA = 97;
      var littleZ = 122;
      var zero = 48;
      var nine = 57;
      var plus = 43;
      var slash = 47;
      var littleOffset = 26;
      var numberOffset = 52;
      if (bigA <= charCode && charCode <= bigZ) {
        return charCode - bigA;
      }
      if (littleA <= charCode && charCode <= littleZ) {
        return charCode - littleA + littleOffset;
      }
      if (zero <= charCode && charCode <= nine) {
        return charCode - zero + numberOffset;
      }
      if (charCode == plus) {
        return 62;
      }
      if (charCode == slash) {
        return 63;
      }
      return -1;
    };
  }
});

// node_modules/source-map/lib/base64-vlq.js
var require_base64_vlq = __commonJS({
  "node_modules/source-map/lib/base64-vlq.js"(exports) {
    var base64 = require_base64();
    var VLQ_BASE_SHIFT = 5;
    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
    var VLQ_BASE_MASK = VLQ_BASE - 1;
    var VLQ_CONTINUATION_BIT = VLQ_BASE;
    function toVLQSigned(aValue) {
      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
    }
    function fromVLQSigned(aValue) {
      var isNegative = (aValue & 1) === 1;
      var shifted = aValue >> 1;
      return isNegative ? -shifted : shifted;
    }
    exports.encode = function base64VLQ_encode(aValue) {
      var encoded = "";
      var digit;
      var vlq = toVLQSigned(aValue);
      do {
        digit = vlq & VLQ_BASE_MASK;
        vlq >>>= VLQ_BASE_SHIFT;
        if (vlq > 0) {
          digit |= VLQ_CONTINUATION_BIT;
        }
        encoded += base64.encode(digit);
      } while (vlq > 0);
      return encoded;
    };
    exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
      var strLen = aStr.length;
      var result = 0;
      var shift = 0;
      var continuation, digit;
      do {
        if (aIndex >= strLen) {
          throw new Error("Expected more digits in base 64 VLQ value.");
        }
        digit = base64.decode(aStr.charCodeAt(aIndex++));
        if (digit === -1) {
          throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
        }
        continuation = !!(digit & VLQ_CONTINUATION_BIT);
        digit &= VLQ_BASE_MASK;
        result = result + (digit << shift);
        shift += VLQ_BASE_SHIFT;
      } while (continuation);
      aOutParam.value = fromVLQSigned(result);
      aOutParam.rest = aIndex;
    };
  }
});

// node_modules/source-map/lib/util.js
var require_util = __commonJS({
  "node_modules/source-map/lib/util.js"(exports) {
    function getArg(aArgs, aName, aDefaultValue) {
      if (aName in aArgs) {
        return aArgs[aName];
      } else if (arguments.length === 3) {
        return aDefaultValue;
      } else {
        throw new Error('"' + aName + '" is a required argument.');
      }
    }
    exports.getArg = getArg;
    var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
    var dataUrlRegexp = /^data:.+\,.+$/;
    function urlParse(aUrl) {
      var match = aUrl.match(urlRegexp);
      if (!match) {
        return null;
      }
      return {
        scheme: match[1],
        auth: match[2],
        host: match[3],
        port: match[4],
        path: match[5]
      };
    }
    exports.urlParse = urlParse;
    function urlGenerate(aParsedUrl) {
      var url = "";
      if (aParsedUrl.scheme) {
        url += aParsedUrl.scheme + ":";
      }
      url += "//";
      if (aParsedUrl.auth) {
        url += aParsedUrl.auth + "@";
      }
      if (aParsedUrl.host) {
        url += aParsedUrl.host;
      }
      if (aParsedUrl.port) {
        url += ":" + aParsedUrl.port;
      }
      if (aParsedUrl.path) {
        url += aParsedUrl.path;
      }
      return url;
    }
    exports.urlGenerate = urlGenerate;
    function normalize(aPath) {
      var path = aPath;
      var url = urlParse(aPath);
      if (url) {
        if (!url.path) {
          return aPath;
        }
        path = url.path;
      }
      var isAbsolute = exports.isAbsolute(path);
      var parts = path.split(/\/+/);
      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
        part = parts[i];
        if (part === ".") {
          parts.splice(i, 1);
        } else if (part === "..") {
          up++;
        } else if (up > 0) {
          if (part === "") {
            parts.splice(i + 1, up);
            up = 0;
          } else {
            parts.splice(i, 2);
            up--;
          }
        }
      }
      path = parts.join("/");
      if (path === "") {
        path = isAbsolute ? "/" : ".";
      }
      if (url) {
        url.path = path;
        return urlGenerate(url);
      }
      return path;
    }
    exports.normalize = normalize;
    function join(aRoot, aPath) {
      if (aRoot === "") {
        aRoot = ".";
      }
      if (aPath === "") {
        aPath = ".";
      }
      var aPathUrl = urlParse(aPath);
      var aRootUrl = urlParse(aRoot);
      if (aRootUrl) {
        aRoot = aRootUrl.path || "/";
      }
      if (aPathUrl && !aPathUrl.scheme) {
        if (aRootUrl) {
          aPathUrl.scheme = aRootUrl.scheme;
        }
        return urlGenerate(aPathUrl);
      }
      if (aPathUrl || aPath.match(dataUrlRegexp)) {
        return aPath;
      }
      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
        aRootUrl.host = aPath;
        return urlGenerate(aRootUrl);
      }
      var joined = aPath.charAt(0) === "/" ? aPath : normalize(aRoot.replace(/\/+$/, "") + "/" + aPath);
      if (aRootUrl) {
        aRootUrl.path = joined;
        return urlGenerate(aRootUrl);
      }
      return joined;
    }
    exports.join = join;
    exports.isAbsolute = function(aPath) {
      return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
    };
    function relative(aRoot, aPath) {
      if (aRoot === "") {
        aRoot = ".";
      }
      aRoot = aRoot.replace(/\/$/, "");
      var level = 0;
      while (aPath.indexOf(aRoot + "/") !== 0) {
        var index = aRoot.lastIndexOf("/");
        if (index < 0) {
          return aPath;
        }
        aRoot = aRoot.slice(0, index);
        if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
          return aPath;
        }
        ++level;
      }
      return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
    }
    exports.relative = relative;
    var supportsNullProto = function() {
      var obj = /* @__PURE__ */ Object.create(null);
      return !("__proto__" in obj);
    }();
    function identity(s) {
      return s;
    }
    function toSetString(aStr) {
      if (isProtoString(aStr)) {
        return "$" + aStr;
      }
      return aStr;
    }
    exports.toSetString = supportsNullProto ? identity : toSetString;
    function fromSetString(aStr) {
      if (isProtoString(aStr)) {
        return aStr.slice(1);
      }
      return aStr;
    }
    exports.fromSetString = supportsNullProto ? identity : fromSetString;
    function isProtoString(s) {
      if (!s) {
        return false;
      }
      var length = s.length;
      if (length < 9) {
        return false;
      }
      if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {
        return false;
      }
      for (var i = length - 10; i >= 0; i--) {
        if (s.charCodeAt(i) !== 36) {
          return false;
        }
      }
      return true;
    }
    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
      var cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0 || onlyCompareOriginal) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByOriginalPositions = compareByOriginalPositions;
    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0 || onlyCompareGenerated) {
        return cmp;
      }
      cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
    function strcmp(aStr1, aStr2) {
      if (aStr1 === aStr2) {
        return 0;
      }
      if (aStr1 === null) {
        return 1;
      }
      if (aStr2 === null) {
        return -1;
      }
      if (aStr1 > aStr2) {
        return 1;
      }
      return -1;
    }
    function compareByGeneratedPositionsInflated(mappingA, mappingB) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
    function parseSourceMapInput(str) {
      return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""));
    }
    exports.parseSourceMapInput = parseSourceMapInput;
    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
      sourceURL = sourceURL || "";
      if (sourceRoot) {
        if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") {
          sourceRoot += "/";
        }
        sourceURL = sourceRoot + sourceURL;
      }
      if (sourceMapURL) {
        var parsed = urlParse(sourceMapURL);
        if (!parsed) {
          throw new Error("sourceMapURL could not be parsed");
        }
        if (parsed.path) {
          var index = parsed.path.lastIndexOf("/");
          if (index >= 0) {
            parsed.path = parsed.path.substring(0, index + 1);
          }
        }
        sourceURL = join(urlGenerate(parsed), sourceURL);
      }
      return normalize(sourceURL);
    }
    exports.computeSourceURL = computeSourceURL;
  }
});

// node_modules/source-map/lib/array-set.js
var require_array_set = __commonJS({
  "node_modules/source-map/lib/array-set.js"(exports) {
    var util = require_util();
    var has = Object.prototype.hasOwnProperty;
    var hasNativeMap = typeof Map !== "undefined";
    function ArraySet() {
      this._array = [];
      this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);
    }
    ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
      var set = new ArraySet();
      for (var i = 0, len = aArray.length; i < len; i++) {
        set.add(aArray[i], aAllowDuplicates);
      }
      return set;
    };
    ArraySet.prototype.size = function ArraySet_size() {
      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
    };
    ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
      var idx = this._array.length;
      if (!isDuplicate || aAllowDuplicates) {
        this._array.push(aStr);
      }
      if (!isDuplicate) {
        if (hasNativeMap) {
          this._set.set(aStr, idx);
        } else {
          this._set[sStr] = idx;
        }
      }
    };
    ArraySet.prototype.has = function ArraySet_has(aStr) {
      if (hasNativeMap) {
        return this._set.has(aStr);
      } else {
        var sStr = util.toSetString(aStr);
        return has.call(this._set, sStr);
      }
    };
    ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
      if (hasNativeMap) {
        var idx = this._set.get(aStr);
        if (idx >= 0) {
          return idx;
        }
      } else {
        var sStr = util.toSetString(aStr);
        if (has.call(this._set, sStr)) {
          return this._set[sStr];
        }
      }
      throw new Error('"' + aStr + '" is not in the set.');
    };
    ArraySet.prototype.at = function ArraySet_at(aIdx) {
      if (aIdx >= 0 && aIdx < this._array.length) {
        return this._array[aIdx];
      }
      throw new Error("No element indexed by " + aIdx);
    };
    ArraySet.prototype.toArray = function ArraySet_toArray() {
      return this._array.slice();
    };
    exports.ArraySet = ArraySet;
  }
});

// node_modules/source-map/lib/mapping-list.js
var require_mapping_list = __commonJS({
  "node_modules/source-map/lib/mapping-list.js"(exports) {
    var util = require_util();
    function generatedPositionAfter(mappingA, mappingB) {
      var lineA = mappingA.generatedLine;
      var lineB = mappingB.generatedLine;
      var columnA = mappingA.generatedColumn;
      var columnB = mappingB.generatedColumn;
      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
    }
    function MappingList() {
      this._array = [];
      this._sorted = true;
      this._last = { generatedLine: -1, generatedColumn: 0 };
    }
    MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
      this._array.forEach(aCallback, aThisArg);
    };
    MappingList.prototype.add = function MappingList_add(aMapping) {
      if (generatedPositionAfter(this._last, aMapping)) {
        this._last = aMapping;
        this._array.push(aMapping);
      } else {
        this._sorted = false;
        this._array.push(aMapping);
      }
    };
    MappingList.prototype.toArray = function MappingList_toArray() {
      if (!this._sorted) {
        this._array.sort(util.compareByGeneratedPositionsInflated);
        this._sorted = true;
      }
      return this._array;
    };
    exports.MappingList = MappingList;
  }
});

// node_modules/source-map/lib/source-map-generator.js
var require_source_map_generator = __commonJS({
  "node_modules/source-map/lib/source-map-generator.js"(exports) {
    var base64VLQ = require_base64_vlq();
    var util = require_util();
    var ArraySet = require_array_set().ArraySet;
    var MappingList = require_mapping_list().MappingList;
    function SourceMapGenerator(aArgs) {
      if (!aArgs) {
        aArgs = {};
      }
      this._file = util.getArg(aArgs, "file", null);
      this._sourceRoot = util.getArg(aArgs, "sourceRoot", null);
      this._skipValidation = util.getArg(aArgs, "skipValidation", false);
      this._sources = new ArraySet();
      this._names = new ArraySet();
      this._mappings = new MappingList();
      this._sourcesContents = null;
    }
    SourceMapGenerator.prototype._version = 3;
    SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot;
      var generator = new SourceMapGenerator({
        file: aSourceMapConsumer.file,
        sourceRoot
      });
      aSourceMapConsumer.eachMapping(function(mapping) {
        var newMapping = {
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }
        };
        if (mapping.source != null) {
          newMapping.source = mapping.source;
          if (sourceRoot != null) {
            newMapping.source = util.relative(sourceRoot, newMapping.source);
          }
          newMapping.original = {
            line: mapping.originalLine,
            column: mapping.originalColumn
          };
          if (mapping.name != null) {
            newMapping.name = mapping.name;
          }
        }
        generator.addMapping(newMapping);
      });
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var sourceRelative = sourceFile;
        if (sourceRoot !== null) {
          sourceRelative = util.relative(sourceRoot, sourceFile);
        }
        if (!generator._sources.has(sourceRelative)) {
          generator._sources.add(sourceRelative);
        }
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          generator.setSourceContent(sourceFile, content);
        }
      });
      return generator;
    };
    SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
      var generated = util.getArg(aArgs, "generated");
      var original = util.getArg(aArgs, "original", null);
      var source = util.getArg(aArgs, "source", null);
      var name = util.getArg(aArgs, "name", null);
      if (!this._skipValidation) {
        this._validateMapping(generated, original, source, name);
      }
      if (source != null) {
        source = String(source);
        if (!this._sources.has(source)) {
          this._sources.add(source);
        }
      }
      if (name != null) {
        name = String(name);
        if (!this._names.has(name)) {
          this._names.add(name);
        }
      }
      this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source,
        name
      });
    };
    SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      if (this._sourceRoot != null) {
        source = util.relative(this._sourceRoot, source);
      }
      if (aSourceContent != null) {
        if (!this._sourcesContents) {
          this._sourcesContents = /* @__PURE__ */ Object.create(null);
        }
        this._sourcesContents[util.toSetString(source)] = aSourceContent;
      } else if (this._sourcesContents) {
        delete this._sourcesContents[util.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
          this._sourcesContents = null;
        }
      }
    };
    SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      var sourceFile = aSourceFile;
      if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
          throw new Error(
            `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`
          );
        }
        sourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      if (sourceRoot != null) {
        sourceFile = util.relative(sourceRoot, sourceFile);
      }
      var newSources = new ArraySet();
      var newNames = new ArraySet();
      this._mappings.unsortedForEach(function(mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          if (original.source != null) {
            mapping.source = original.source;
            if (aSourceMapPath != null) {
              mapping.source = util.join(aSourceMapPath, mapping.source);
            }
            if (sourceRoot != null) {
              mapping.source = util.relative(sourceRoot, mapping.source);
            }
            mapping.originalLine = original.line;
            mapping.originalColumn = original.column;
            if (original.name != null) {
              mapping.name = original.name;
            }
          }
        }
        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
          newSources.add(source);
        }
        var name = mapping.name;
        if (name != null && !newNames.has(name)) {
          newNames.add(name);
        }
      }, this);
      this._sources = newSources;
      this._names = newNames;
      aSourceMapConsumer.sources.forEach(function(sourceFile2) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);
        if (content != null) {
          if (aSourceMapPath != null) {
            sourceFile2 = util.join(aSourceMapPath, sourceFile2);
          }
          if (sourceRoot != null) {
            sourceFile2 = util.relative(sourceRoot, sourceFile2);
          }
          this.setSourceContent(sourceFile2, content);
        }
      }, this);
    };
    SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
      if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {
        throw new Error(
          "original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values."
        );
      }
      if (aGenerated && "line" in aGenerated && "column" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
        return;
      } else if (aGenerated && "line" in aGenerated && "column" in aGenerated && aOriginal && "line" in aOriginal && "column" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
        return;
      } else {
        throw new Error("Invalid mapping: " + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    };
    SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
      var previousGeneratedColumn = 0;
      var previousGeneratedLine = 1;
      var previousOriginalColumn = 0;
      var previousOriginalLine = 0;
      var previousName = 0;
      var previousSource = 0;
      var result = "";
      var next;
      var mapping;
      var nameIdx;
      var sourceIdx;
      var mappings = this._mappings.toArray();
      for (var i = 0, len = mappings.length; i < len; i++) {
        mapping = mappings[i];
        next = "";
        if (mapping.generatedLine !== previousGeneratedLine) {
          previousGeneratedColumn = 0;
          while (mapping.generatedLine !== previousGeneratedLine) {
            next += ";";
            previousGeneratedLine++;
          }
        } else {
          if (i > 0) {
            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
              continue;
            }
            next += ",";
          }
        }
        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;
        if (mapping.source != null) {
          sourceIdx = this._sources.indexOf(mapping.source);
          next += base64VLQ.encode(sourceIdx - previousSource);
          previousSource = sourceIdx;
          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
          previousOriginalLine = mapping.originalLine - 1;
          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
          previousOriginalColumn = mapping.originalColumn;
          if (mapping.name != null) {
            nameIdx = this._names.indexOf(mapping.name);
            next += base64VLQ.encode(nameIdx - previousName);
            previousName = nameIdx;
          }
        }
        result += next;
      }
      return result;
    };
    SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
      return aSources.map(function(source) {
        if (!this._sourcesContents) {
          return null;
        }
        if (aSourceRoot != null) {
          source = util.relative(aSourceRoot, source);
        }
        var key = util.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
      }, this);
    };
    SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
      var map = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      if (this._file != null) {
        map.file = this._file;
      }
      if (this._sourceRoot != null) {
        map.sourceRoot = this._sourceRoot;
      }
      if (this._sourcesContents) {
        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
      }
      return map;
    };
    SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
      return JSON.stringify(this.toJSON());
    };
    exports.SourceMapGenerator = SourceMapGenerator;
  }
});

// node_modules/source-map/lib/binary-search.js
var require_binary_search = __commonJS({
  "node_modules/source-map/lib/binary-search.js"(exports) {
    exports.GREATEST_LOWER_BOUND = 1;
    exports.LEAST_UPPER_BOUND = 2;
    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
      var mid = Math.floor((aHigh - aLow) / 2) + aLow;
      var cmp = aCompare(aNeedle, aHaystack[mid], true);
      if (cmp === 0) {
        return mid;
      } else if (cmp > 0) {
        if (aHigh - mid > 1) {
          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
        }
        if (aBias == exports.LEAST_UPPER_BOUND) {
          return aHigh < aHaystack.length ? aHigh : -1;
        } else {
          return mid;
        }
      } else {
        if (mid - aLow > 1) {
          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
        }
        if (aBias == exports.LEAST_UPPER_BOUND) {
          return mid;
        } else {
          return aLow < 0 ? -1 : aLow;
        }
      }
    }
    exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
      if (aHaystack.length === 0) {
        return -1;
      }
      var index = recursiveSearch(
        -1,
        aHaystack.length,
        aNeedle,
        aHaystack,
        aCompare,
        aBias || exports.GREATEST_LOWER_BOUND
      );
      if (index < 0) {
        return -1;
      }
      while (index - 1 >= 0) {
        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
          break;
        }
        --index;
      }
      return index;
    };
  }
});

// node_modules/source-map/lib/quick-sort.js
var require_quick_sort = __commonJS({
  "node_modules/source-map/lib/quick-sort.js"(exports) {
    function swap(ary, x, y) {
      var temp = ary[x];
      ary[x] = ary[y];
      ary[y] = temp;
    }
    function randomIntInRange(low, high) {
      return Math.round(low + Math.random() * (high - low));
    }
    function doQuickSort(ary, comparator, p2, r2) {
      if (p2 < r2) {
        var pivotIndex = randomIntInRange(p2, r2);
        var i = p2 - 1;
        swap(ary, pivotIndex, r2);
        var pivot = ary[r2];
        for (var j = p2; j < r2; j++) {
          if (comparator(ary[j], pivot) <= 0) {
            i += 1;
            swap(ary, i, j);
          }
        }
        swap(ary, i + 1, j);
        var q = i + 1;
        doQuickSort(ary, comparator, p2, q - 1);
        doQuickSort(ary, comparator, q + 1, r2);
      }
    }
    exports.quickSort = function(ary, comparator) {
      doQuickSort(ary, comparator, 0, ary.length - 1);
    };
  }
});

// node_modules/source-map/lib/source-map-consumer.js
var require_source_map_consumer = __commonJS({
  "node_modules/source-map/lib/source-map-consumer.js"(exports) {
    var util = require_util();
    var binarySearch = require_binary_search();
    var ArraySet = require_array_set().ArraySet;
    var base64VLQ = require_base64_vlq();
    var quickSort = require_quick_sort().quickSort;
    function SourceMapConsumer(aSourceMap, aSourceMapURL) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === "string") {
        sourceMap = util.parseSourceMapInput(aSourceMap);
      }
      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
    }
    SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
    };
    SourceMapConsumer.prototype._version = 3;
    SourceMapConsumer.prototype.__generatedMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, "_generatedMappings", {
      configurable: true,
      enumerable: true,
      get: function() {
        if (!this.__generatedMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__generatedMappings;
      }
    });
    SourceMapConsumer.prototype.__originalMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, "_originalMappings", {
      configurable: true,
      enumerable: true,
      get: function() {
        if (!this.__originalMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__originalMappings;
      }
    });
    SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
      var c2 = aStr.charAt(index);
      return c2 === ";" || c2 === ",";
    };
    SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      throw new Error("Subclasses must implement _parseMappings");
    };
    SourceMapConsumer.GENERATED_ORDER = 1;
    SourceMapConsumer.ORIGINAL_ORDER = 2;
    SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
    SourceMapConsumer.LEAST_UPPER_BOUND = 2;
    SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
      var context = aContext || null;
      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
      var mappings;
      switch (order) {
        case SourceMapConsumer.GENERATED_ORDER:
          mappings = this._generatedMappings;
          break;
        case SourceMapConsumer.ORIGINAL_ORDER:
          mappings = this._originalMappings;
          break;
        default:
          throw new Error("Unknown order of iteration.");
      }
      var sourceRoot = this.sourceRoot;
      mappings.map(function(mapping) {
        var source = mapping.source === null ? null : this._sources.at(mapping.source);
        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
        return {
          source,
          generatedLine: mapping.generatedLine,
          generatedColumn: mapping.generatedColumn,
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: mapping.name === null ? null : this._names.at(mapping.name)
        };
      }, this).forEach(aCallback, context);
    };
    SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
      var line = util.getArg(aArgs, "line");
      var needle = {
        source: util.getArg(aArgs, "source"),
        originalLine: line,
        originalColumn: util.getArg(aArgs, "column", 0)
      };
      needle.source = this._findSourceIndex(needle.source);
      if (needle.source < 0) {
        return [];
      }
      var mappings = [];
      var index = this._findMapping(
        needle,
        this._originalMappings,
        "originalLine",
        "originalColumn",
        util.compareByOriginalPositions,
        binarySearch.LEAST_UPPER_BOUND
      );
      if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (aArgs.column === void 0) {
          var originalLine = mapping.originalLine;
          while (mapping && mapping.originalLine === originalLine) {
            mappings.push({
              line: util.getArg(mapping, "generatedLine", null),
              column: util.getArg(mapping, "generatedColumn", null),
              lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
            });
            mapping = this._originalMappings[++index];
          }
        } else {
          var originalColumn = mapping.originalColumn;
          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
            mappings.push({
              line: util.getArg(mapping, "generatedLine", null),
              column: util.getArg(mapping, "generatedColumn", null),
              lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
            });
            mapping = this._originalMappings[++index];
          }
        }
      }
      return mappings;
    };
    exports.SourceMapConsumer = SourceMapConsumer;
    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === "string") {
        sourceMap = util.parseSourceMapInput(aSourceMap);
      }
      var version = util.getArg(sourceMap, "version");
      var sources = util.getArg(sourceMap, "sources");
      var names = util.getArg(sourceMap, "names", []);
      var sourceRoot = util.getArg(sourceMap, "sourceRoot", null);
      var sourcesContent = util.getArg(sourceMap, "sourcesContent", null);
      var mappings = util.getArg(sourceMap, "mappings");
      var file = util.getArg(sourceMap, "file", null);
      if (version != this._version) {
        throw new Error("Unsupported version: " + version);
      }
      if (sourceRoot) {
        sourceRoot = util.normalize(sourceRoot);
      }
      sources = sources.map(String).map(util.normalize).map(function(source) {
        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
      });
      this._names = ArraySet.fromArray(names.map(String), true);
      this._sources = ArraySet.fromArray(sources, true);
      this._absoluteSources = this._sources.toArray().map(function(s) {
        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
      });
      this.sourceRoot = sourceRoot;
      this.sourcesContent = sourcesContent;
      this._mappings = mappings;
      this._sourceMapURL = aSourceMapURL;
      this.file = file;
    }
    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
      var relativeSource = aSource;
      if (this.sourceRoot != null) {
        relativeSource = util.relative(this.sourceRoot, relativeSource);
      }
      if (this._sources.has(relativeSource)) {
        return this._sources.indexOf(relativeSource);
      }
      var i;
      for (i = 0; i < this._absoluteSources.length; ++i) {
        if (this._absoluteSources[i] == aSource) {
          return i;
        }
      }
      return -1;
    };
    BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
      var smc = Object.create(BasicSourceMapConsumer.prototype);
      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
      smc.sourceRoot = aSourceMap._sourceRoot;
      smc.sourcesContent = aSourceMap._generateSourcesContent(
        smc._sources.toArray(),
        smc.sourceRoot
      );
      smc.file = aSourceMap._file;
      smc._sourceMapURL = aSourceMapURL;
      smc._absoluteSources = smc._sources.toArray().map(function(s) {
        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
      });
      var generatedMappings = aSourceMap._mappings.toArray().slice();
      var destGeneratedMappings = smc.__generatedMappings = [];
      var destOriginalMappings = smc.__originalMappings = [];
      for (var i = 0, length = generatedMappings.length; i < length; i++) {
        var srcMapping = generatedMappings[i];
        var destMapping = new Mapping();
        destMapping.generatedLine = srcMapping.generatedLine;
        destMapping.generatedColumn = srcMapping.generatedColumn;
        if (srcMapping.source) {
          destMapping.source = sources.indexOf(srcMapping.source);
          destMapping.originalLine = srcMapping.originalLine;
          destMapping.originalColumn = srcMapping.originalColumn;
          if (srcMapping.name) {
            destMapping.name = names.indexOf(srcMapping.name);
          }
          destOriginalMappings.push(destMapping);
        }
        destGeneratedMappings.push(destMapping);
      }
      quickSort(smc.__originalMappings, util.compareByOriginalPositions);
      return smc;
    };
    BasicSourceMapConsumer.prototype._version = 3;
    Object.defineProperty(BasicSourceMapConsumer.prototype, "sources", {
      get: function() {
        return this._absoluteSources.slice();
      }
    });
    function Mapping() {
      this.generatedLine = 0;
      this.generatedColumn = 0;
      this.source = null;
      this.originalLine = null;
      this.originalColumn = null;
      this.name = null;
    }
    BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      var generatedLine = 1;
      var previousGeneratedColumn = 0;
      var previousOriginalLine = 0;
      var previousOriginalColumn = 0;
      var previousSource = 0;
      var previousName = 0;
      var length = aStr.length;
      var index = 0;
      var cachedSegments = {};
      var temp = {};
      var originalMappings = [];
      var generatedMappings = [];
      var mapping, str, segment, end, value;
      while (index < length) {
        if (aStr.charAt(index) === ";") {
          generatedLine++;
          index++;
          previousGeneratedColumn = 0;
        } else if (aStr.charAt(index) === ",") {
          index++;
        } else {
          mapping = new Mapping();
          mapping.generatedLine = generatedLine;
          for (end = index; end < length; end++) {
            if (this._charIsMappingSeparator(aStr, end)) {
              break;
            }
          }
          str = aStr.slice(index, end);
          segment = cachedSegments[str];
          if (segment) {
            index += str.length;
          } else {
            segment = [];
            while (index < end) {
              base64VLQ.decode(aStr, index, temp);
              value = temp.value;
              index = temp.rest;
              segment.push(value);
            }
            if (segment.length === 2) {
              throw new Error("Found a source, but no line and column");
            }
            if (segment.length === 3) {
              throw new Error("Found a source and line, but no column");
            }
            cachedSegments[str] = segment;
          }
          mapping.generatedColumn = previousGeneratedColumn + segment[0];
          previousGeneratedColumn = mapping.generatedColumn;
          if (segment.length > 1) {
            mapping.source = previousSource + segment[1];
            previousSource += segment[1];
            mapping.originalLine = previousOriginalLine + segment[2];
            previousOriginalLine = mapping.originalLine;
            mapping.originalLine += 1;
            mapping.originalColumn = previousOriginalColumn + segment[3];
            previousOriginalColumn = mapping.originalColumn;
            if (segment.length > 4) {
              mapping.name = previousName + segment[4];
              previousName += segment[4];
            }
          }
          generatedMappings.push(mapping);
          if (typeof mapping.originalLine === "number") {
            originalMappings.push(mapping);
          }
        }
      }
      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
      this.__generatedMappings = generatedMappings;
      quickSort(originalMappings, util.compareByOriginalPositions);
      this.__originalMappings = originalMappings;
    };
    BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
      if (aNeedle[aLineName] <= 0) {
        throw new TypeError("Line must be greater than or equal to 1, got " + aNeedle[aLineName]);
      }
      if (aNeedle[aColumnName] < 0) {
        throw new TypeError("Column must be greater than or equal to 0, got " + aNeedle[aColumnName]);
      }
      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
    };
    BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
      for (var index = 0; index < this._generatedMappings.length; ++index) {
        var mapping = this._generatedMappings[index];
        if (index + 1 < this._generatedMappings.length) {
          var nextMapping = this._generatedMappings[index + 1];
          if (mapping.generatedLine === nextMapping.generatedLine) {
            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
            continue;
          }
        }
        mapping.lastGeneratedColumn = Infinity;
      }
    };
    BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, "line"),
        generatedColumn: util.getArg(aArgs, "column")
      };
      var index = this._findMapping(
        needle,
        this._generatedMappings,
        "generatedLine",
        "generatedColumn",
        util.compareByGeneratedPositionsDeflated,
        util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
      );
      if (index >= 0) {
        var mapping = this._generatedMappings[index];
        if (mapping.generatedLine === needle.generatedLine) {
          var source = util.getArg(mapping, "source", null);
          if (source !== null) {
            source = this._sources.at(source);
            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
          }
          var name = util.getArg(mapping, "name", null);
          if (name !== null) {
            name = this._names.at(name);
          }
          return {
            source,
            line: util.getArg(mapping, "originalLine", null),
            column: util.getArg(mapping, "originalColumn", null),
            name
          };
        }
      }
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    };
    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
      if (!this.sourcesContent) {
        return false;
      }
      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
        return sc == null;
      });
    };
    BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      if (!this.sourcesContent) {
        return null;
      }
      var index = this._findSourceIndex(aSource);
      if (index >= 0) {
        return this.sourcesContent[index];
      }
      var relativeSource = aSource;
      if (this.sourceRoot != null) {
        relativeSource = util.relative(this.sourceRoot, relativeSource);
      }
      var url;
      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
        var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
        if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
        }
        if ((!url.path || url.path == "/") && this._sources.has("/" + relativeSource)) {
          return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
        }
      }
      if (nullOnMissing) {
        return null;
      } else {
        throw new Error('"' + relativeSource + '" is not in the SourceMap.');
      }
    };
    BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
      var source = util.getArg(aArgs, "source");
      source = this._findSourceIndex(source);
      if (source < 0) {
        return {
          line: null,
          column: null,
          lastColumn: null
        };
      }
      var needle = {
        source,
        originalLine: util.getArg(aArgs, "line"),
        originalColumn: util.getArg(aArgs, "column")
      };
      var index = this._findMapping(
        needle,
        this._originalMappings,
        "originalLine",
        "originalColumn",
        util.compareByOriginalPositions,
        util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
      );
      if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (mapping.source === needle.source) {
          return {
            line: util.getArg(mapping, "generatedLine", null),
            column: util.getArg(mapping, "generatedColumn", null),
            lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
          };
        }
      }
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    };
    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === "string") {
        sourceMap = util.parseSourceMapInput(aSourceMap);
      }
      var version = util.getArg(sourceMap, "version");
      var sections = util.getArg(sourceMap, "sections");
      if (version != this._version) {
        throw new Error("Unsupported version: " + version);
      }
      this._sources = new ArraySet();
      this._names = new ArraySet();
      var lastOffset = {
        line: -1,
        column: 0
      };
      this._sections = sections.map(function(s) {
        if (s.url) {
          throw new Error("Support for url field in sections not implemented.");
        }
        var offset = util.getArg(s, "offset");
        var offsetLine = util.getArg(offset, "line");
        var offsetColumn = util.getArg(offset, "column");
        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
          throw new Error("Section offsets must be ordered and non-overlapping.");
        }
        lastOffset = offset;
        return {
          generatedOffset: {
            // The offset fields are 0-based, but we use 1-based indices when
            // encoding/decoding from VLQ.
            generatedLine: offsetLine + 1,
            generatedColumn: offsetColumn + 1
          },
          consumer: new SourceMapConsumer(util.getArg(s, "map"), aSourceMapURL)
        };
      });
    }
    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
    IndexedSourceMapConsumer.prototype._version = 3;
    Object.defineProperty(IndexedSourceMapConsumer.prototype, "sources", {
      get: function() {
        var sources = [];
        for (var i = 0; i < this._sections.length; i++) {
          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
            sources.push(this._sections[i].consumer.sources[j]);
          }
        }
        return sources;
      }
    });
    IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, "line"),
        generatedColumn: util.getArg(aArgs, "column")
      };
      var sectionIndex = binarySearch.search(
        needle,
        this._sections,
        function(needle2, section2) {
          var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;
          if (cmp) {
            return cmp;
          }
          return needle2.generatedColumn - section2.generatedOffset.generatedColumn;
        }
      );
      var section = this._sections[sectionIndex];
      if (!section) {
        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      }
      return section.consumer.originalPositionFor({
        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
        bias: aArgs.bias
      });
    };
    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
      return this._sections.every(function(s) {
        return s.consumer.hasContentsOfAllSources();
      });
    };
    IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var content = section.consumer.sourceContentFor(aSource, true);
        if (content) {
          return content;
        }
      }
      if (nullOnMissing) {
        return null;
      } else {
        throw new Error('"' + aSource + '" is not in the SourceMap.');
      }
    };
    IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        if (section.consumer._findSourceIndex(util.getArg(aArgs, "source")) === -1) {
          continue;
        }
        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
        if (generatedPosition) {
          var ret = {
            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
          };
          return ret;
        }
      }
      return {
        line: null,
        column: null
      };
    };
    IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      this.__generatedMappings = [];
      this.__originalMappings = [];
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var sectionMappings = section.consumer._generatedMappings;
        for (var j = 0; j < sectionMappings.length; j++) {
          var mapping = sectionMappings[j];
          var source = section.consumer._sources.at(mapping.source);
          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
          this._sources.add(source);
          source = this._sources.indexOf(source);
          var name = null;
          if (mapping.name) {
            name = section.consumer._names.at(mapping.name);
            this._names.add(name);
            name = this._names.indexOf(name);
          }
          var adjustedMapping = {
            source,
            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name
          };
          this.__generatedMappings.push(adjustedMapping);
          if (typeof adjustedMapping.originalLine === "number") {
            this.__originalMappings.push(adjustedMapping);
          }
        }
      }
      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
      quickSort(this.__originalMappings, util.compareByOriginalPositions);
    };
    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
  }
});

// node_modules/source-map/lib/source-node.js
var require_source_node = __commonJS({
  "node_modules/source-map/lib/source-node.js"(exports) {
    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
    var util = require_util();
    var REGEX_NEWLINE = /(\r?\n)/;
    var NEWLINE_CODE = 10;
    var isSourceNode = "$$$isSourceNode$$$";
    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
      this.children = [];
      this.sourceContents = {};
      this.line = aLine == null ? null : aLine;
      this.column = aColumn == null ? null : aColumn;
      this.source = aSource == null ? null : aSource;
      this.name = aName == null ? null : aName;
      this[isSourceNode] = true;
      if (aChunks != null)
        this.add(aChunks);
    }
    SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
      var node = new SourceNode();
      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
      var remainingLinesIndex = 0;
      var shiftNextLine = function() {
        var lineContents = getNextLine();
        var newLine = getNextLine() || "";
        return lineContents + newLine;
        function getNextLine() {
          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;
        }
      };
      var lastGeneratedLine = 1, lastGeneratedColumn = 0;
      var lastMapping = null;
      aSourceMapConsumer.eachMapping(function(mapping) {
        if (lastMapping !== null) {
          if (lastGeneratedLine < mapping.generatedLine) {
            addMappingWithCode(lastMapping, shiftNextLine());
            lastGeneratedLine++;
            lastGeneratedColumn = 0;
          } else {
            var nextLine = remainingLines[remainingLinesIndex] || "";
            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
            addMappingWithCode(lastMapping, code);
            lastMapping = mapping;
            return;
          }
        }
        while (lastGeneratedLine < mapping.generatedLine) {
          node.add(shiftNextLine());
          lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
          var nextLine = remainingLines[remainingLinesIndex] || "";
          node.add(nextLine.substr(0, mapping.generatedColumn));
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
      }, this);
      if (remainingLinesIndex < remainingLines.length) {
        if (lastMapping) {
          addMappingWithCode(lastMapping, shiftNextLine());
        }
        node.add(remainingLines.splice(remainingLinesIndex).join(""));
      }
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aRelativePath != null) {
            sourceFile = util.join(aRelativePath, sourceFile);
          }
          node.setSourceContent(sourceFile, content);
        }
      });
      return node;
      function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === void 0) {
          node.add(code);
        } else {
          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
          node.add(new SourceNode(
            mapping.originalLine,
            mapping.originalColumn,
            source,
            code,
            mapping.name
          ));
        }
      }
    };
    SourceNode.prototype.add = function SourceNode_add(aChunk) {
      if (Array.isArray(aChunk)) {
        aChunk.forEach(function(chunk) {
          this.add(chunk);
        }, this);
      } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
        if (aChunk) {
          this.children.push(aChunk);
        }
      } else {
        throw new TypeError(
          "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
        );
      }
      return this;
    };
    SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
      if (Array.isArray(aChunk)) {
        for (var i = aChunk.length - 1; i >= 0; i--) {
          this.prepend(aChunk[i]);
        }
      } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
        this.children.unshift(aChunk);
      } else {
        throw new TypeError(
          "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
        );
      }
      return this;
    };
    SourceNode.prototype.walk = function SourceNode_walk(aFn) {
      var chunk;
      for (var i = 0, len = this.children.length; i < len; i++) {
        chunk = this.children[i];
        if (chunk[isSourceNode]) {
          chunk.walk(aFn);
        } else {
          if (chunk !== "") {
            aFn(chunk, {
              source: this.source,
              line: this.line,
              column: this.column,
              name: this.name
            });
          }
        }
      }
    };
    SourceNode.prototype.join = function SourceNode_join(aSep) {
      var newChildren;
      var i;
      var len = this.children.length;
      if (len > 0) {
        newChildren = [];
        for (i = 0; i < len - 1; i++) {
          newChildren.push(this.children[i]);
          newChildren.push(aSep);
        }
        newChildren.push(this.children[i]);
        this.children = newChildren;
      }
      return this;
    };
    SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
      var lastChild = this.children[this.children.length - 1];
      if (lastChild[isSourceNode]) {
        lastChild.replaceRight(aPattern, aReplacement);
      } else if (typeof lastChild === "string") {
        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
      } else {
        this.children.push("".replace(aPattern, aReplacement));
      }
      return this;
    };
    SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
    };
    SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
      for (var i = 0, len = this.children.length; i < len; i++) {
        if (this.children[i][isSourceNode]) {
          this.children[i].walkSourceContents(aFn);
        }
      }
      var sources = Object.keys(this.sourceContents);
      for (var i = 0, len = sources.length; i < len; i++) {
        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
      }
    };
    SourceNode.prototype.toString = function SourceNode_toString() {
      var str = "";
      this.walk(function(chunk) {
        str += chunk;
      });
      return str;
    };
    SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
      var generated = {
        code: "",
        line: 1,
        column: 0
      };
      var map = new SourceMapGenerator(aArgs);
      var sourceMappingActive = false;
      var lastOriginalSource = null;
      var lastOriginalLine = null;
      var lastOriginalColumn = null;
      var lastOriginalName = null;
      this.walk(function(chunk, original) {
        generated.code += chunk;
        if (original.source !== null && original.line !== null && original.column !== null) {
          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
          lastOriginalSource = original.source;
          lastOriginalLine = original.line;
          lastOriginalColumn = original.column;
          lastOriginalName = original.name;
          sourceMappingActive = true;
        } else if (sourceMappingActive) {
          map.addMapping({
            generated: {
              line: generated.line,
              column: generated.column
            }
          });
          lastOriginalSource = null;
          sourceMappingActive = false;
        }
        for (var idx = 0, length = chunk.length; idx < length; idx++) {
          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
            generated.line++;
            generated.column = 0;
            if (idx + 1 === length) {
              lastOriginalSource = null;
              sourceMappingActive = false;
            } else if (sourceMappingActive) {
              map.addMapping({
                source: original.source,
                original: {
                  line: original.line,
                  column: original.column
                },
                generated: {
                  line: generated.line,
                  column: generated.column
                },
                name: original.name
              });
            }
          } else {
            generated.column++;
          }
        }
      });
      this.walkSourceContents(function(sourceFile, sourceContent) {
        map.setSourceContent(sourceFile, sourceContent);
      });
      return { code: generated.code, map };
    };
    exports.SourceNode = SourceNode;
  }
});

// node_modules/source-map/source-map.js
var require_source_map = __commonJS({
  "node_modules/source-map/source-map.js"(exports) {
    exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
    exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;
    exports.SourceNode = require_source_node().SourceNode;
  }
});

// node_modules/clean-css/lib/reader/input-source-map-tracker.js
var require_input_source_map_tracker = __commonJS({
  "node_modules/clean-css/lib/reader/input-source-map-tracker.js"(exports, module) {
    var SourceMapConsumer = require_source_map().SourceMapConsumer;
    function inputSourceMapTracker() {
      var maps = {};
      return {
        all: all.bind(null, maps),
        isTracking: isTracking.bind(null, maps),
        originalPositionFor: originalPositionFor.bind(null, maps),
        track: track.bind(null, maps)
      };
    }
    function all(maps) {
      return maps;
    }
    function isTracking(maps, source) {
      return source in maps;
    }
    function originalPositionFor(maps, metadata, range, selectorFallbacks) {
      var line = metadata[0];
      var column = metadata[1];
      var source = metadata[2];
      var position = {
        line,
        column: column + range
      };
      var originalPosition;
      while (!originalPosition && position.column > column) {
        position.column--;
        originalPosition = maps[source].originalPositionFor(position);
      }
      if (!originalPosition || originalPosition.column < 0) {
        return metadata;
      }
      if (originalPosition.line === null && line > 1 && selectorFallbacks > 0) {
        return originalPositionFor(maps, [line - 1, column, source], range, selectorFallbacks - 1);
      }
      return originalPosition.line !== null ? toMetadata(originalPosition) : metadata;
    }
    function toMetadata(asHash) {
      return [asHash.line, asHash.column, asHash.source];
    }
    function track(maps, source, data) {
      maps[source] = new SourceMapConsumer(data);
    }
    module.exports = inputSourceMapTracker;
  }
});

// browser-external:fs
var require_fs = __commonJS({
  "browser-external:fs"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "fs" has been externalized for browser compatibility. Cannot access "fs.${key}" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/clean-css/lib/utils/is-remote-resource.js
var require_is_remote_resource = __commonJS({
  "node_modules/clean-css/lib/utils/is-remote-resource.js"(exports, module) {
    var REMOTE_RESOURCE_PATTERN = /^(\w+:\/\/|\/\/)/;
    var FILE_RESOURCE_PATTERN = /^file:\/\//;
    function isRemoteResource(uri) {
      return REMOTE_RESOURCE_PATTERN.test(uri) && !FILE_RESOURCE_PATTERN.test(uri);
    }
    module.exports = isRemoteResource;
  }
});

// node_modules/clean-css/lib/utils/has-protocol.js
var require_has_protocol = __commonJS({
  "node_modules/clean-css/lib/utils/has-protocol.js"(exports, module) {
    var NO_PROTOCOL_RESOURCE_PATTERN = /^\/\//;
    function hasProtocol(uri) {
      return !NO_PROTOCOL_RESOURCE_PATTERN.test(uri);
    }
    module.exports = hasProtocol;
  }
});

// node_modules/clean-css/lib/reader/is-allowed-resource.js
var require_is_allowed_resource = __commonJS({
  "node_modules/clean-css/lib/reader/is-allowed-resource.js"(exports, module) {
    var path = require_path();
    var url = require_url();
    var isRemoteResource = require_is_remote_resource();
    var hasProtocol = require_has_protocol();
    var HTTP_PROTOCOL = "http:";
    function isAllowedResource(uri, isRemote, rules) {
      var match;
      var absoluteUri;
      var allowed = !isRemote;
      var rule;
      var isNegated;
      var normalizedRule;
      var i;
      if (rules.length === 0) {
        return false;
      }
      if (isRemote && !hasProtocol(uri)) {
        uri = HTTP_PROTOCOL + uri;
      }
      match = isRemote ? url.parse(uri).host : uri;
      absoluteUri = isRemote ? uri : path.resolve(uri);
      for (i = 0; i < rules.length; i++) {
        rule = rules[i];
        isNegated = rule[0] == "!";
        normalizedRule = rule.substring(1);
        if (isNegated && isRemote && isRemoteRule(normalizedRule)) {
          allowed = allowed && !isAllowedResource(uri, true, [normalizedRule]);
        } else if (isNegated && !isRemote && !isRemoteRule(normalizedRule)) {
          allowed = allowed && !isAllowedResource(uri, false, [normalizedRule]);
        } else if (isNegated) {
          allowed = allowed && true;
        } else if (rule == "all") {
          allowed = true;
        } else if (isRemote && rule == "local") {
          allowed = allowed || false;
        } else if (isRemote && rule == "remote") {
          allowed = true;
        } else if (!isRemote && rule == "remote") {
          allowed = false;
        } else if (!isRemote && rule == "local") {
          allowed = true;
        } else if (rule === match) {
          allowed = true;
        } else if (rule === uri) {
          allowed = true;
        } else if (isRemote && absoluteUri.indexOf(rule) === 0) {
          allowed = true;
        } else if (!isRemote && absoluteUri.indexOf(path.resolve(rule)) === 0) {
          allowed = true;
        } else if (isRemote != isRemoteRule(normalizedRule)) {
          allowed = allowed && true;
        } else {
          allowed = false;
        }
      }
      return allowed;
    }
    function isRemoteRule(rule) {
      return isRemoteResource(rule) || url.parse(HTTP_PROTOCOL + "//" + rule).host == rule;
    }
    module.exports = isAllowedResource;
  }
});

// node_modules/clean-css/lib/reader/match-data-uri.js
var require_match_data_uri = __commonJS({
  "node_modules/clean-css/lib/reader/match-data-uri.js"(exports, module) {
    var DATA_URI_PATTERN = /^data:(\S*?)?(;charset=(?:(?!;charset=)[^;])+)?(;[^,]+?)?,(.+)/;
    function matchDataUri(uri) {
      return DATA_URI_PATTERN.exec(uri);
    }
    module.exports = matchDataUri;
  }
});

// node_modules/clean-css/lib/reader/rebase-local-map.js
var require_rebase_local_map = __commonJS({
  "node_modules/clean-css/lib/reader/rebase-local-map.js"(exports, module) {
    var path = require_path();
    function rebaseLocalMap(sourceMap, sourceUri, rebaseTo) {
      var currentPath = path.resolve("");
      var absoluteUri = path.resolve(currentPath, sourceUri);
      var absoluteUriDirectory = path.dirname(absoluteUri);
      sourceMap.sources = sourceMap.sources.map(function(source) {
        return path.relative(rebaseTo, path.resolve(absoluteUriDirectory, source));
      });
      return sourceMap;
    }
    module.exports = rebaseLocalMap;
  }
});

// node_modules/clean-css/lib/reader/rebase-remote-map.js
var require_rebase_remote_map = __commonJS({
  "node_modules/clean-css/lib/reader/rebase-remote-map.js"(exports, module) {
    var path = require_path();
    var url = require_url();
    function rebaseRemoteMap(sourceMap, sourceUri) {
      var sourceDirectory = path.dirname(sourceUri);
      sourceMap.sources = sourceMap.sources.map(function(source) {
        return url.resolve(sourceDirectory, source);
      });
      return sourceMap;
    }
    module.exports = rebaseRemoteMap;
  }
});

// node_modules/clean-css/lib/utils/is-data-uri-resource.js
var require_is_data_uri_resource = __commonJS({
  "node_modules/clean-css/lib/utils/is-data-uri-resource.js"(exports, module) {
    var DATA_URI_PATTERN = /^data:(\S{0,31}?)?(;charset=(?:(?!;charset=)[^;])+)?(;[^,]+?)?,(.+)/;
    function isDataUriResource(uri) {
      return DATA_URI_PATTERN.test(uri);
    }
    module.exports = isDataUriResource;
  }
});

// node_modules/clean-css/lib/reader/apply-source-maps.js
var require_apply_source_maps = __commonJS({
  "node_modules/clean-css/lib/reader/apply-source-maps.js"(exports, module) {
    var fs = require_fs();
    var path = require_path();
    var isAllowedResource = require_is_allowed_resource();
    var matchDataUri = require_match_data_uri();
    var rebaseLocalMap = require_rebase_local_map();
    var rebaseRemoteMap = require_rebase_remote_map();
    var Token = require_token();
    var hasProtocol = require_has_protocol();
    var isDataUriResource = require_is_data_uri_resource();
    var isRemoteResource = require_is_remote_resource();
    var MAP_MARKER_PATTERN = /^\/\*# sourceMappingURL=(\S+) \*\/$/;
    function applySourceMaps(tokens, context, callback) {
      var applyContext = {
        callback,
        fetch: context.options.fetch,
        index: 0,
        inline: context.options.inline,
        inlineRequest: context.options.inlineRequest,
        inlineTimeout: context.options.inlineTimeout,
        inputSourceMapTracker: context.inputSourceMapTracker,
        localOnly: context.localOnly,
        processedTokens: [],
        rebaseTo: context.options.rebaseTo,
        sourceTokens: tokens,
        warnings: context.warnings
      };
      return context.options.sourceMap && tokens.length > 0 ? doApplySourceMaps(applyContext) : callback(tokens);
    }
    function doApplySourceMaps(applyContext) {
      var singleSourceTokens = [];
      var lastSource = findTokenSource(applyContext.sourceTokens[0]);
      var source;
      var token;
      var l2;
      for (l2 = applyContext.sourceTokens.length; applyContext.index < l2; applyContext.index++) {
        token = applyContext.sourceTokens[applyContext.index];
        source = findTokenSource(token);
        if (source != lastSource) {
          singleSourceTokens = [];
          lastSource = source;
        }
        singleSourceTokens.push(token);
        applyContext.processedTokens.push(token);
        if (token[0] == Token.COMMENT && MAP_MARKER_PATTERN.test(token[1])) {
          return fetchAndApplySourceMap(token[1], source, singleSourceTokens, applyContext);
        }
      }
      return applyContext.callback(applyContext.processedTokens);
    }
    function findTokenSource(token) {
      var scope;
      var metadata;
      if (token[0] == Token.AT_RULE || token[0] == Token.COMMENT || token[0] == Token.RAW) {
        metadata = token[2][0];
      } else {
        scope = token[1][0];
        metadata = scope[2][0];
      }
      return metadata[2];
    }
    function fetchAndApplySourceMap(sourceMapComment, source, singleSourceTokens, applyContext) {
      return extractInputSourceMapFrom(sourceMapComment, applyContext, function(inputSourceMap) {
        if (inputSourceMap) {
          applyContext.inputSourceMapTracker.track(source, inputSourceMap);
          applySourceMapRecursively(singleSourceTokens, applyContext.inputSourceMapTracker);
        }
        applyContext.index++;
        return doApplySourceMaps(applyContext);
      });
    }
    function extractInputSourceMapFrom(sourceMapComment, applyContext, whenSourceMapReady) {
      var uri = MAP_MARKER_PATTERN.exec(sourceMapComment)[1];
      var absoluteUri;
      var sourceMap;
      var rebasedMap;
      if (isDataUriResource(uri)) {
        sourceMap = extractInputSourceMapFromDataUri(uri);
        return whenSourceMapReady(sourceMap);
      }
      if (isRemoteResource(uri)) {
        return loadInputSourceMapFromRemoteUri(uri, applyContext, function(sourceMap2) {
          var parsedMap;
          if (sourceMap2) {
            parsedMap = JSON.parse(sourceMap2);
            rebasedMap = rebaseRemoteMap(parsedMap, uri);
            whenSourceMapReady(rebasedMap);
          } else {
            whenSourceMapReady(null);
          }
        });
      }
      absoluteUri = path.resolve(applyContext.rebaseTo, uri);
      sourceMap = loadInputSourceMapFromLocalUri(absoluteUri, applyContext);
      if (sourceMap) {
        rebasedMap = rebaseLocalMap(sourceMap, absoluteUri, applyContext.rebaseTo);
        return whenSourceMapReady(rebasedMap);
      }
      return whenSourceMapReady(null);
    }
    function extractInputSourceMapFromDataUri(uri) {
      var dataUriMatch = matchDataUri(uri);
      var charset = dataUriMatch[2] ? dataUriMatch[2].split(/[=;]/)[2] : "us-ascii";
      var encoding = dataUriMatch[3] ? dataUriMatch[3].split(";")[1] : "utf8";
      var data = encoding == "utf8" ? global.unescape(dataUriMatch[4]) : dataUriMatch[4];
      var buffer = Buffer.from(data, encoding);
      buffer.charset = charset;
      return JSON.parse(buffer.toString());
    }
    function loadInputSourceMapFromRemoteUri(uri, applyContext, whenLoaded) {
      var isAllowed = isAllowedResource(uri, true, applyContext.inline);
      var isRuntimeResource = !hasProtocol(uri);
      if (applyContext.localOnly) {
        applyContext.warnings.push('Cannot fetch remote resource from "' + uri + '" as no callback given.');
        return whenLoaded(null);
      }
      if (isRuntimeResource) {
        applyContext.warnings.push('Cannot fetch "' + uri + '" as no protocol given.');
        return whenLoaded(null);
      }
      if (!isAllowed) {
        applyContext.warnings.push('Cannot fetch "' + uri + '" as resource is not allowed.');
        return whenLoaded(null);
      }
      applyContext.fetch(uri, applyContext.inlineRequest, applyContext.inlineTimeout, function(error, body) {
        if (error) {
          applyContext.warnings.push('Missing source map at "' + uri + '" - ' + error);
          return whenLoaded(null);
        }
        whenLoaded(body);
      });
    }
    function loadInputSourceMapFromLocalUri(uri, applyContext) {
      var isAllowed = isAllowedResource(uri, false, applyContext.inline);
      var sourceMap;
      if (!fs.existsSync(uri) || !fs.statSync(uri).isFile()) {
        applyContext.warnings.push('Ignoring local source map at "' + uri + '" as resource is missing.');
        return null;
      }
      if (!isAllowed) {
        applyContext.warnings.push('Cannot fetch "' + uri + '" as resource is not allowed.');
        return null;
      }
      if (!fs.statSync(uri).size) {
        applyContext.warnings.push('Cannot fetch "' + uri + '" as resource is empty.');
        return null;
      }
      sourceMap = fs.readFileSync(uri, "utf-8");
      return JSON.parse(sourceMap);
    }
    function applySourceMapRecursively(tokens, inputSourceMapTracker) {
      var token;
      var i, l2;
      for (i = 0, l2 = tokens.length; i < l2; i++) {
        token = tokens[i];
        switch (token[0]) {
          case Token.AT_RULE:
            applySourceMapTo(token, inputSourceMapTracker);
            break;
          case Token.AT_RULE_BLOCK:
            applySourceMapRecursively(token[1], inputSourceMapTracker);
            applySourceMapRecursively(token[2], inputSourceMapTracker);
            break;
          case Token.AT_RULE_BLOCK_SCOPE:
            applySourceMapTo(token, inputSourceMapTracker);
            break;
          case Token.NESTED_BLOCK:
            applySourceMapRecursively(token[1], inputSourceMapTracker);
            applySourceMapRecursively(token[2], inputSourceMapTracker);
            break;
          case Token.NESTED_BLOCK_SCOPE:
            applySourceMapTo(token, inputSourceMapTracker);
            break;
          case Token.COMMENT:
            applySourceMapTo(token, inputSourceMapTracker);
            break;
          case Token.PROPERTY:
            applySourceMapRecursively(token, inputSourceMapTracker);
            break;
          case Token.PROPERTY_BLOCK:
            applySourceMapRecursively(token[1], inputSourceMapTracker);
            break;
          case Token.PROPERTY_NAME:
            applySourceMapTo(token, inputSourceMapTracker);
            break;
          case Token.PROPERTY_VALUE:
            applySourceMapTo(token, inputSourceMapTracker);
            break;
          case Token.RULE:
            applySourceMapRecursively(token[1], inputSourceMapTracker);
            applySourceMapRecursively(token[2], inputSourceMapTracker);
            break;
          case Token.RULE_SCOPE:
            applySourceMapTo(token, inputSourceMapTracker);
        }
      }
      return tokens;
    }
    function applySourceMapTo(token, inputSourceMapTracker) {
      var value = token[1];
      var metadata = token[2];
      var newMetadata = [];
      var i, l2;
      for (i = 0, l2 = metadata.length; i < l2; i++) {
        newMetadata.push(inputSourceMapTracker.originalPositionFor(metadata[i], value.length));
      }
      token[2] = newMetadata;
    }
    module.exports = applySourceMaps;
  }
});

// node_modules/clean-css/lib/reader/extract-import-url-and-media.js
var require_extract_import_url_and_media = __commonJS({
  "node_modules/clean-css/lib/reader/extract-import-url-and-media.js"(exports, module) {
    var split = require_split();
    var BRACE_PREFIX = /^\(/;
    var BRACE_SUFFIX = /\)$/;
    var IMPORT_PREFIX_PATTERN = /^@import/i;
    var QUOTE_PREFIX_PATTERN = /['"]\s{0,31}/;
    var QUOTE_SUFFIX_PATTERN = /\s{0,31}['"]/;
    var URL_PREFIX_PATTERN = /^url\(\s{0,31}/i;
    var URL_SUFFIX_PATTERN = /\s{0,31}\)/i;
    function extractImportUrlAndMedia(atRuleValue) {
      var uri;
      var mediaQuery;
      var normalized;
      var parts;
      normalized = atRuleValue.replace(IMPORT_PREFIX_PATTERN, "").trim().replace(URL_PREFIX_PATTERN, "(").replace(URL_SUFFIX_PATTERN, ") ").replace(QUOTE_PREFIX_PATTERN, "").replace(QUOTE_SUFFIX_PATTERN, "");
      parts = split(normalized, " ");
      uri = parts[0].replace(BRACE_PREFIX, "").replace(BRACE_SUFFIX, "");
      mediaQuery = parts.slice(1).join(" ");
      return [uri, mediaQuery];
    }
    module.exports = extractImportUrlAndMedia;
  }
});

// node_modules/clean-css/lib/reader/load-original-sources.js
var require_load_original_sources = __commonJS({
  "node_modules/clean-css/lib/reader/load-original-sources.js"(exports, module) {
    var fs = require_fs();
    var path = require_path();
    var isAllowedResource = require_is_allowed_resource();
    var hasProtocol = require_has_protocol();
    var isRemoteResource = require_is_remote_resource();
    function loadOriginalSources(context, callback) {
      var loadContext = {
        callback,
        fetch: context.options.fetch,
        index: 0,
        inline: context.options.inline,
        inlineRequest: context.options.inlineRequest,
        inlineTimeout: context.options.inlineTimeout,
        localOnly: context.localOnly,
        rebaseTo: context.options.rebaseTo,
        sourcesContent: context.sourcesContent,
        uriToSource: uriToSourceMapping(context.inputSourceMapTracker.all()),
        warnings: context.warnings
      };
      return context.options.sourceMap && context.options.sourceMapInlineSources ? doLoadOriginalSources(loadContext) : callback();
    }
    function uriToSourceMapping(allSourceMapConsumers) {
      var mapping = {};
      var consumer;
      var uri;
      var source;
      var i, l2;
      for (source in allSourceMapConsumers) {
        consumer = allSourceMapConsumers[source];
        for (i = 0, l2 = consumer.sources.length; i < l2; i++) {
          uri = consumer.sources[i];
          source = consumer.sourceContentFor(uri, true);
          mapping[uri] = source;
        }
      }
      return mapping;
    }
    function doLoadOriginalSources(loadContext) {
      var uris = Object.keys(loadContext.uriToSource);
      var uri;
      var source;
      var total;
      for (total = uris.length; loadContext.index < total; loadContext.index++) {
        uri = uris[loadContext.index];
        source = loadContext.uriToSource[uri];
        if (source) {
          loadContext.sourcesContent[uri] = source;
        } else {
          return loadOriginalSource(uri, loadContext);
        }
      }
      return loadContext.callback();
    }
    function loadOriginalSource(uri, loadContext) {
      var content;
      if (isRemoteResource(uri)) {
        return loadOriginalSourceFromRemoteUri(uri, loadContext, function(content2) {
          loadContext.index++;
          loadContext.sourcesContent[uri] = content2;
          return doLoadOriginalSources(loadContext);
        });
      }
      content = loadOriginalSourceFromLocalUri(uri, loadContext);
      loadContext.index++;
      loadContext.sourcesContent[uri] = content;
      return doLoadOriginalSources(loadContext);
    }
    function loadOriginalSourceFromRemoteUri(uri, loadContext, whenLoaded) {
      var isAllowed = isAllowedResource(uri, true, loadContext.inline);
      var isRuntimeResource = !hasProtocol(uri);
      if (loadContext.localOnly) {
        loadContext.warnings.push('Cannot fetch remote resource from "' + uri + '" as no callback given.');
        return whenLoaded(null);
      }
      if (isRuntimeResource) {
        loadContext.warnings.push('Cannot fetch "' + uri + '" as no protocol given.');
        return whenLoaded(null);
      }
      if (!isAllowed) {
        loadContext.warnings.push('Cannot fetch "' + uri + '" as resource is not allowed.');
        return whenLoaded(null);
      }
      loadContext.fetch(uri, loadContext.inlineRequest, loadContext.inlineTimeout, function(error, content) {
        if (error) {
          loadContext.warnings.push('Missing original source at "' + uri + '" - ' + error);
        }
        whenLoaded(content);
      });
    }
    function loadOriginalSourceFromLocalUri(relativeUri, loadContext) {
      var isAllowed = isAllowedResource(relativeUri, false, loadContext.inline);
      var absoluteUri = path.resolve(loadContext.rebaseTo, relativeUri);
      if (!fs.existsSync(absoluteUri) || !fs.statSync(absoluteUri).isFile()) {
        loadContext.warnings.push('Ignoring local source map at "' + absoluteUri + '" as resource is missing.');
        return null;
      }
      if (!isAllowed) {
        loadContext.warnings.push('Cannot fetch "' + absoluteUri + '" as resource is not allowed.');
        return null;
      }
      var result = fs.readFileSync(absoluteUri, "utf8");
      if (result.charCodeAt(0) === 65279) {
        result = result.substring(1);
      }
      return result;
    }
    module.exports = loadOriginalSources;
  }
});

// node_modules/clean-css/lib/reader/normalize-path.js
var require_normalize_path = __commonJS({
  "node_modules/clean-css/lib/reader/normalize-path.js"(exports, module) {
    var UNIX_SEPARATOR = "/";
    var WINDOWS_SEPARATOR_PATTERN = /\\/g;
    function normalizePath(path) {
      return path.replace(WINDOWS_SEPARATOR_PATTERN, UNIX_SEPARATOR);
    }
    module.exports = normalizePath;
  }
});

// node_modules/clean-css/lib/reader/restore-import.js
var require_restore_import = __commonJS({
  "node_modules/clean-css/lib/reader/restore-import.js"(exports, module) {
    function restoreImport(uri, mediaQuery) {
      return ("@import " + uri + " " + mediaQuery).trim();
    }
    module.exports = restoreImport;
  }
});

// node_modules/clean-css/lib/reader/rewrite-url.js
var require_rewrite_url = __commonJS({
  "node_modules/clean-css/lib/reader/rewrite-url.js"(exports, module) {
    var path = require_path();
    var url = require_url();
    var isDataUriResource = require_is_data_uri_resource();
    var DOUBLE_QUOTE = '"';
    var SINGLE_QUOTE = "'";
    var URL_PREFIX = "url(";
    var URL_SUFFIX = ")";
    var PROTOCOL_LESS_PREFIX_PATTERN = /^[^\w\d]*\/\//;
    var QUOTE_PREFIX_PATTERN = /^["']/;
    var QUOTE_SUFFIX_PATTERN = /["']$/;
    var ROUND_BRACKETS_PATTERN = /[()]/;
    var URL_PREFIX_PATTERN = /^url\(/i;
    var URL_SUFFIX_PATTERN = /\)$/;
    var WHITESPACE_PATTERN = /\s/;
    var isWindows = process.platform == "win32";
    function rebase(uri, rebaseConfig) {
      if (!rebaseConfig) {
        return uri;
      }
      if (isAbsolute(uri) && !isRemote(rebaseConfig.toBase)) {
        return uri;
      }
      if (isRemote(uri) || isSVGMarker(uri) || isInternal(uri) || isDataUriResource(uri)) {
        return uri;
      }
      if (isRemote(rebaseConfig.toBase)) {
        return url.resolve(rebaseConfig.toBase, uri);
      }
      return rebaseConfig.absolute ? normalize(absolute(uri, rebaseConfig)) : normalize(relative(uri, rebaseConfig));
    }
    function isAbsolute(uri) {
      return path.isAbsolute(uri);
    }
    function isSVGMarker(uri) {
      return uri[0] == "#";
    }
    function isInternal(uri) {
      return /^\w+:\w+/.test(uri);
    }
    function isRemote(uri) {
      return /^[^:]+?:\/\//.test(uri) || PROTOCOL_LESS_PREFIX_PATTERN.test(uri);
    }
    function absolute(uri, rebaseConfig) {
      return path.resolve(path.join(rebaseConfig.fromBase || "", uri)).replace(rebaseConfig.toBase, "");
    }
    function relative(uri, rebaseConfig) {
      return path.relative(rebaseConfig.toBase, path.join(rebaseConfig.fromBase || "", uri));
    }
    function normalize(uri) {
      return isWindows ? uri.replace(/\\/g, "/") : uri;
    }
    function quoteFor(unquotedUrl) {
      if (unquotedUrl.indexOf(SINGLE_QUOTE) > -1) {
        return DOUBLE_QUOTE;
      }
      if (unquotedUrl.indexOf(DOUBLE_QUOTE) > -1) {
        return SINGLE_QUOTE;
      }
      if (hasWhitespace(unquotedUrl) || hasRoundBrackets(unquotedUrl)) {
        return SINGLE_QUOTE;
      }
      return "";
    }
    function hasWhitespace(url2) {
      return WHITESPACE_PATTERN.test(url2);
    }
    function hasRoundBrackets(url2) {
      return ROUND_BRACKETS_PATTERN.test(url2);
    }
    function rewriteUrl(originalUrl, rebaseConfig, pathOnly) {
      var strippedUrl = originalUrl.replace(URL_PREFIX_PATTERN, "").replace(URL_SUFFIX_PATTERN, "").trim();
      var unquotedUrl = strippedUrl.replace(QUOTE_PREFIX_PATTERN, "").replace(QUOTE_SUFFIX_PATTERN, "").trim();
      var quote = strippedUrl[0] == SINGLE_QUOTE || strippedUrl[0] == DOUBLE_QUOTE ? strippedUrl[0] : quoteFor(unquotedUrl);
      return pathOnly ? rebase(unquotedUrl, rebaseConfig) : URL_PREFIX + quote + rebase(unquotedUrl, rebaseConfig) + quote + URL_SUFFIX;
    }
    module.exports = rewriteUrl;
  }
});

// node_modules/clean-css/lib/utils/is-import.js
var require_is_import = __commonJS({
  "node_modules/clean-css/lib/utils/is-import.js"(exports, module) {
    var IMPORT_PREFIX_PATTERN = /^@import/i;
    function isImport(value) {
      return IMPORT_PREFIX_PATTERN.test(value);
    }
    module.exports = isImport;
  }
});

// node_modules/clean-css/lib/reader/rebase.js
var require_rebase2 = __commonJS({
  "node_modules/clean-css/lib/reader/rebase.js"(exports, module) {
    var extractImportUrlAndMedia = require_extract_import_url_and_media();
    var restoreImport = require_restore_import();
    var rewriteUrl = require_rewrite_url();
    var Token = require_token();
    var isImport = require_is_import();
    var SOURCE_MAP_COMMENT_PATTERN = /^\/\*# sourceMappingURL=(\S+) \*\/$/;
    function rebase(tokens, rebaseAll, validator, rebaseConfig) {
      return rebaseAll ? rebaseEverything(tokens, validator, rebaseConfig) : rebaseAtRules(tokens, validator, rebaseConfig);
    }
    function rebaseEverything(tokens, validator, rebaseConfig) {
      var token;
      var i, l2;
      for (i = 0, l2 = tokens.length; i < l2; i++) {
        token = tokens[i];
        switch (token[0]) {
          case Token.AT_RULE:
            rebaseAtRule(token, validator, rebaseConfig);
            break;
          case Token.AT_RULE_BLOCK:
            rebaseProperties(token[2], validator, rebaseConfig);
            break;
          case Token.COMMENT:
            rebaseSourceMapComment(token, rebaseConfig);
            break;
          case Token.NESTED_BLOCK:
            rebaseEverything(token[2], validator, rebaseConfig);
            break;
          case Token.RULE:
            rebaseProperties(token[2], validator, rebaseConfig);
            break;
        }
      }
      return tokens;
    }
    function rebaseAtRules(tokens, validator, rebaseConfig) {
      var token;
      var i, l2;
      for (i = 0, l2 = tokens.length; i < l2; i++) {
        token = tokens[i];
        switch (token[0]) {
          case Token.AT_RULE:
            rebaseAtRule(token, validator, rebaseConfig);
            break;
        }
      }
      return tokens;
    }
    function rebaseAtRule(token, validator, rebaseConfig) {
      if (!isImport(token[1])) {
        return;
      }
      var uriAndMediaQuery = extractImportUrlAndMedia(token[1]);
      var newUrl = rewriteUrl(uriAndMediaQuery[0], rebaseConfig);
      var mediaQuery = uriAndMediaQuery[1];
      token[1] = restoreImport(newUrl, mediaQuery);
    }
    function rebaseSourceMapComment(token, rebaseConfig) {
      var matches = SOURCE_MAP_COMMENT_PATTERN.exec(token[1]);
      if (matches && matches[1].indexOf("data:") === -1) {
        token[1] = token[1].replace(matches[1], rewriteUrl(matches[1], rebaseConfig, true));
      }
    }
    function rebaseProperties(properties, validator, rebaseConfig) {
      var property;
      var value;
      var i, l2;
      var j, m2;
      for (i = 0, l2 = properties.length; i < l2; i++) {
        property = properties[i];
        for (j = 2, m2 = property.length; j < m2; j++) {
          value = property[j][1];
          if (validator.isUrl(value)) {
            property[j][1] = rewriteUrl(value, rebaseConfig);
          }
        }
      }
    }
    module.exports = rebase;
  }
});

// node_modules/clean-css/lib/tokenizer/tokenize.js
var require_tokenize = __commonJS({
  "node_modules/clean-css/lib/tokenizer/tokenize.js"(exports, module) {
    var Marker = require_marker();
    var Token = require_token();
    var formatPosition = require_format_position();
    var Level = {
      BLOCK: "block",
      COMMENT: "comment",
      DOUBLE_QUOTE: "double-quote",
      RULE: "rule",
      SINGLE_QUOTE: "single-quote"
    };
    var AT_RULES = [
      "@charset",
      "@import"
    ];
    var BLOCK_RULES = [
      "@-moz-document",
      "@document",
      "@-moz-keyframes",
      "@-ms-keyframes",
      "@-o-keyframes",
      "@-webkit-keyframes",
      "@keyframes",
      "@media",
      "@supports",
      "@container",
      "@layer"
    ];
    var IGNORE_END_COMMENT_PATTERN = /\/\* clean-css ignore:end \*\/$/;
    var IGNORE_START_COMMENT_PATTERN = /^\/\* clean-css ignore:start \*\//;
    var PAGE_MARGIN_BOXES = [
      "@bottom-center",
      "@bottom-left",
      "@bottom-left-corner",
      "@bottom-right",
      "@bottom-right-corner",
      "@left-bottom",
      "@left-middle",
      "@left-top",
      "@right-bottom",
      "@right-middle",
      "@right-top",
      "@top-center",
      "@top-left",
      "@top-left-corner",
      "@top-right",
      "@top-right-corner"
    ];
    var EXTRA_PAGE_BOXES = [
      "@footnote",
      "@footnotes",
      "@left",
      "@page-float-bottom",
      "@page-float-top",
      "@right"
    ];
    var REPEAT_PATTERN = /^\[\s{0,31}\d+\s{0,31}\]$/;
    var TAIL_BROKEN_VALUE_PATTERN = /([^}])\}*$/;
    var RULE_WORD_SEPARATOR_PATTERN = /[\s(]/;
    function tokenize(source, externalContext) {
      var internalContext = {
        level: Level.BLOCK,
        position: {
          source: externalContext.source || void 0,
          line: 1,
          column: 0,
          index: 0
        }
      };
      return intoTokens(source, externalContext, internalContext, false);
    }
    function intoTokens(source, externalContext, internalContext, isNested) {
      var allTokens = [];
      var newTokens = allTokens;
      var lastToken;
      var ruleToken;
      var ruleTokens = [];
      var propertyToken;
      var metadata;
      var metadatas = [];
      var level = internalContext.level;
      var levels = [];
      var buffer = [];
      var buffers = [];
      var isBufferEmpty = true;
      var serializedBuffer;
      var serializedBufferPart;
      var roundBracketLevel = 0;
      var isQuoted;
      var isSpace;
      var isNewLineNix;
      var isNewLineWin;
      var isCarriageReturn;
      var isCommentStart;
      var wasCommentStart = false;
      var isCommentEnd;
      var wasCommentEnd = false;
      var isCommentEndMarker;
      var isEscaped;
      var wasEscaped = false;
      var characterWithNoSpecialMeaning;
      var isPreviousDash = false;
      var isVariable = false;
      var isRaw = false;
      var seekingValue = false;
      var seekingPropertyBlockClosing = false;
      var position = internalContext.position;
      var lastCommentStartAt;
      for (; position.index < source.length; position.index++) {
        var character = source[position.index];
        isQuoted = level == Level.SINGLE_QUOTE || level == Level.DOUBLE_QUOTE;
        isSpace = character == Marker.SPACE || character == Marker.TAB;
        isNewLineNix = character == Marker.NEW_LINE_NIX;
        isNewLineWin = character == Marker.NEW_LINE_NIX && source[position.index - 1] == Marker.CARRIAGE_RETURN;
        isCarriageReturn = character == Marker.CARRIAGE_RETURN && source[position.index + 1] && source[position.index + 1] != Marker.NEW_LINE_NIX;
        isCommentStart = !wasCommentEnd && level != Level.COMMENT && !isQuoted && character == Marker.ASTERISK && source[position.index - 1] == Marker.FORWARD_SLASH;
        isCommentEndMarker = !wasCommentStart && !isQuoted && character == Marker.FORWARD_SLASH && source[position.index - 1] == Marker.ASTERISK;
        isCommentEnd = level == Level.COMMENT && isCommentEndMarker;
        characterWithNoSpecialMeaning = !isSpace && !isCarriageReturn && (character >= "A" && character <= "Z" || character >= "a" && character <= "z" || character >= "0" && character <= "9" || character == "-");
        isVariable = isVariable || level != Level.COMMENT && !seekingValue && isPreviousDash && character === "-" && buffer.length === 1;
        isPreviousDash = character === "-";
        roundBracketLevel = Math.max(roundBracketLevel, 0);
        metadata = isBufferEmpty ? [position.line, position.column, position.source] : metadata;
        if (isEscaped) {
          buffer.push(character);
          isBufferEmpty = false;
        } else if (characterWithNoSpecialMeaning) {
          buffer.push(character);
          isBufferEmpty = false;
        } else if ((isSpace || isNewLineNix && !isNewLineWin) && (isQuoted || level == Level.COMMENT)) {
          buffer.push(character);
          isBufferEmpty = false;
        } else if ((isSpace || isNewLineNix && !isNewLineWin) && isBufferEmpty) {
        } else if (!isCommentEnd && level == Level.COMMENT) {
          buffer.push(character);
          isBufferEmpty = false;
        } else if (!isCommentStart && !isCommentEnd && isRaw) {
          buffer.push(character);
          isBufferEmpty = false;
        } else if (isCommentStart && isVariable && (level == Level.BLOCK || level == Level.RULE) && buffer.length > 1) {
          buffer.push(character);
          isBufferEmpty = false;
          levels.push(level);
          level = Level.COMMENT;
        } else if (isCommentStart && (level == Level.BLOCK || level == Level.RULE) && buffer.length > 1) {
          metadatas.push(metadata);
          buffer.push(character);
          buffers.push(buffer.slice(0, -2));
          isBufferEmpty = false;
          buffer = buffer.slice(-2);
          metadata = [position.line, position.column - 1, position.source];
          levels.push(level);
          level = Level.COMMENT;
        } else if (isCommentStart) {
          levels.push(level);
          level = Level.COMMENT;
          buffer.push(character);
          isBufferEmpty = false;
        } else if (isCommentEnd && isVariable) {
          buffer.push(character);
          level = levels.pop();
        } else if (isCommentEnd && isIgnoreStartComment(buffer)) {
          serializedBuffer = buffer.join("").trim() + character;
          lastToken = [
            Token.COMMENT,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ];
          newTokens.push(lastToken);
          isRaw = true;
          metadata = metadatas.pop() || null;
          buffer = buffers.pop() || [];
          isBufferEmpty = buffer.length === 0;
        } else if (isCommentEnd && isIgnoreEndComment(buffer)) {
          serializedBuffer = buffer.join("") + character;
          lastCommentStartAt = serializedBuffer.lastIndexOf(Marker.FORWARD_SLASH + Marker.ASTERISK);
          serializedBufferPart = serializedBuffer.substring(0, lastCommentStartAt);
          lastToken = [
            Token.RAW,
            serializedBufferPart,
            [originalMetadata(metadata, serializedBufferPart, externalContext)]
          ];
          newTokens.push(lastToken);
          serializedBufferPart = serializedBuffer.substring(lastCommentStartAt);
          metadata = [position.line, position.column - serializedBufferPart.length + 1, position.source];
          lastToken = [
            Token.COMMENT,
            serializedBufferPart,
            [originalMetadata(metadata, serializedBufferPart, externalContext)]
          ];
          newTokens.push(lastToken);
          isRaw = false;
          level = levels.pop();
          metadata = metadatas.pop() || null;
          buffer = buffers.pop() || [];
          isBufferEmpty = buffer.length === 0;
        } else if (isCommentEnd) {
          serializedBuffer = buffer.join("").trim() + character;
          lastToken = [
            Token.COMMENT,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ];
          newTokens.push(lastToken);
          level = levels.pop();
          metadata = metadatas.pop() || null;
          buffer = buffers.pop() || [];
          isBufferEmpty = buffer.length === 0;
        } else if (isCommentEndMarker && source[position.index + 1] != Marker.ASTERISK) {
          externalContext.warnings.push("Unexpected '*/' at " + formatPosition([position.line, position.column, position.source]) + ".");
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker.SINGLE_QUOTE && !isQuoted) {
          levels.push(level);
          level = Level.SINGLE_QUOTE;
          buffer.push(character);
          isBufferEmpty = false;
        } else if (character == Marker.SINGLE_QUOTE && level == Level.SINGLE_QUOTE) {
          level = levels.pop();
          buffer.push(character);
          isBufferEmpty = false;
        } else if (character == Marker.DOUBLE_QUOTE && !isQuoted) {
          levels.push(level);
          level = Level.DOUBLE_QUOTE;
          buffer.push(character);
          isBufferEmpty = false;
        } else if (character == Marker.DOUBLE_QUOTE && level == Level.DOUBLE_QUOTE) {
          level = levels.pop();
          buffer.push(character);
          isBufferEmpty = false;
        } else if (character != Marker.CLOSE_ROUND_BRACKET && character != Marker.OPEN_ROUND_BRACKET && level != Level.COMMENT && !isQuoted && roundBracketLevel > 0) {
          buffer.push(character);
          isBufferEmpty = false;
        } else if (character == Marker.OPEN_ROUND_BRACKET && !isQuoted && level != Level.COMMENT && !seekingValue) {
          buffer.push(character);
          isBufferEmpty = false;
          roundBracketLevel++;
        } else if (character == Marker.CLOSE_ROUND_BRACKET && !isQuoted && level != Level.COMMENT && !seekingValue) {
          buffer.push(character);
          isBufferEmpty = false;
          roundBracketLevel--;
        } else if (character == Marker.SEMICOLON && level == Level.BLOCK && buffer[0] == Marker.AT) {
          serializedBuffer = buffer.join("").trim();
          allTokens.push([
            Token.AT_RULE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker.COMMA && level == Level.BLOCK && ruleToken) {
          serializedBuffer = buffer.join("").trim();
          ruleToken[1].push([
            tokenScopeFrom(ruleToken[0]),
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext, ruleToken[1].length)]
          ]);
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker.COMMA && level == Level.BLOCK && tokenTypeFrom(buffer) == Token.AT_RULE) {
          buffer.push(character);
          isBufferEmpty = false;
        } else if (character == Marker.COMMA && level == Level.BLOCK) {
          ruleToken = [tokenTypeFrom(buffer), [], []];
          serializedBuffer = buffer.join("").trim();
          ruleToken[1].push([
            tokenScopeFrom(ruleToken[0]),
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext, 0)]
          ]);
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker.OPEN_CURLY_BRACKET && level == Level.BLOCK && ruleToken && ruleToken[0] == Token.NESTED_BLOCK) {
          serializedBuffer = buffer.join("").trim();
          ruleToken[1].push([
            Token.NESTED_BLOCK_SCOPE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          allTokens.push(ruleToken);
          levels.push(level);
          position.column++;
          position.index++;
          buffer = [];
          isBufferEmpty = true;
          ruleToken[2] = intoTokens(source, externalContext, internalContext, true);
          ruleToken = null;
        } else if (character == Marker.OPEN_CURLY_BRACKET && level == Level.BLOCK && tokenTypeFrom(buffer) == Token.NESTED_BLOCK) {
          serializedBuffer = buffer.join("").trim();
          ruleToken = ruleToken || [Token.NESTED_BLOCK, [], []];
          ruleToken[1].push([
            Token.NESTED_BLOCK_SCOPE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          allTokens.push(ruleToken);
          levels.push(level);
          position.column++;
          position.index++;
          buffer = [];
          isBufferEmpty = true;
          isVariable = false;
          ruleToken[2] = intoTokens(source, externalContext, internalContext, true);
          ruleToken = null;
        } else if (character == Marker.OPEN_CURLY_BRACKET && level == Level.BLOCK) {
          serializedBuffer = buffer.join("").trim();
          ruleToken = ruleToken || [tokenTypeFrom(buffer), [], []];
          ruleToken[1].push([
            tokenScopeFrom(ruleToken[0]),
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext, ruleToken[1].length)]
          ]);
          newTokens = ruleToken[2];
          allTokens.push(ruleToken);
          levels.push(level);
          level = Level.RULE;
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker.OPEN_CURLY_BRACKET && level == Level.RULE && seekingValue) {
          ruleTokens.push(ruleToken);
          ruleToken = [Token.PROPERTY_BLOCK, []];
          propertyToken.push(ruleToken);
          newTokens = ruleToken[1];
          levels.push(level);
          level = Level.RULE;
          seekingValue = false;
        } else if (character == Marker.OPEN_CURLY_BRACKET && level == Level.RULE && isPageMarginBox(buffer)) {
          serializedBuffer = buffer.join("").trim();
          ruleTokens.push(ruleToken);
          ruleToken = [Token.AT_RULE_BLOCK, [], []];
          ruleToken[1].push([
            Token.AT_RULE_BLOCK_SCOPE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          newTokens.push(ruleToken);
          newTokens = ruleToken[2];
          levels.push(level);
          level = Level.RULE;
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker.COLON && level == Level.RULE && !seekingValue) {
          serializedBuffer = buffer.join("").trim();
          propertyToken = [
            Token.PROPERTY,
            [
              Token.PROPERTY_NAME,
              serializedBuffer,
              [originalMetadata(metadata, serializedBuffer, externalContext)]
            ]
          ];
          newTokens.push(propertyToken);
          seekingValue = true;
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker.SEMICOLON && level == Level.RULE && propertyToken && ruleTokens.length > 0 && !isBufferEmpty && buffer[0] == Marker.AT) {
          serializedBuffer = buffer.join("").trim();
          ruleToken[1].push([
            Token.AT_RULE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker.SEMICOLON && level == Level.RULE && propertyToken && !isBufferEmpty) {
          serializedBuffer = buffer.join("").trim();
          propertyToken.push([
            Token.PROPERTY_VALUE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          propertyToken = null;
          seekingValue = false;
          buffer = [];
          isBufferEmpty = true;
          isVariable = false;
        } else if (character == Marker.SEMICOLON && level == Level.RULE && propertyToken && isBufferEmpty && isVariable && !propertyToken[2]) {
          propertyToken.push([Token.PROPERTY_VALUE, " ", [originalMetadata(metadata, " ", externalContext)]]);
          isVariable = false;
          propertyToken = null;
          seekingValue = false;
        } else if (character == Marker.SEMICOLON && level == Level.RULE && propertyToken && isBufferEmpty) {
          propertyToken = null;
          seekingValue = false;
        } else if (character == Marker.SEMICOLON && level == Level.RULE && !isBufferEmpty && buffer[0] == Marker.AT) {
          serializedBuffer = buffer.join("");
          newTokens.push([
            Token.AT_RULE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          seekingValue = false;
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker.SEMICOLON && level == Level.RULE && seekingPropertyBlockClosing) {
          seekingPropertyBlockClosing = false;
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker.SEMICOLON && level == Level.RULE && isBufferEmpty) {
        } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && propertyToken && seekingValue && !isBufferEmpty && ruleTokens.length > 0) {
          serializedBuffer = buffer.join("");
          propertyToken.push([
            Token.PROPERTY_VALUE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          propertyToken = null;
          ruleToken = ruleTokens.pop();
          newTokens = ruleToken[2];
          level = levels.pop();
          seekingValue = false;
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && propertyToken && !isBufferEmpty && buffer[0] == Marker.AT && ruleTokens.length > 0) {
          serializedBuffer = buffer.join("");
          ruleToken[1].push([
            Token.AT_RULE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          propertyToken = null;
          ruleToken = ruleTokens.pop();
          newTokens = ruleToken[2];
          level = levels.pop();
          seekingValue = false;
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && propertyToken && ruleTokens.length > 0) {
          propertyToken = null;
          ruleToken = ruleTokens.pop();
          newTokens = ruleToken[2];
          level = levels.pop();
          seekingValue = false;
        } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && propertyToken && !isBufferEmpty) {
          serializedBuffer = buffer.join("");
          propertyToken.push([
            Token.PROPERTY_VALUE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          propertyToken = null;
          ruleToken = ruleTokens.pop();
          newTokens = allTokens;
          level = levels.pop();
          seekingValue = false;
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && !isBufferEmpty && buffer[0] == Marker.AT) {
          propertyToken = null;
          ruleToken = null;
          serializedBuffer = buffer.join("").trim();
          newTokens.push([
            Token.AT_RULE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          newTokens = allTokens;
          level = levels.pop();
          seekingValue = false;
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && levels[levels.length - 1] == Level.RULE) {
          propertyToken = null;
          ruleToken = ruleTokens.pop();
          newTokens = ruleToken[2];
          level = levels.pop();
          seekingValue = false;
          seekingPropertyBlockClosing = true;
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && isVariable && propertyToken && !propertyToken[2]) {
          propertyToken.push([Token.PROPERTY_VALUE, " ", [originalMetadata(metadata, " ", externalContext)]]);
          isVariable = false;
          propertyToken = null;
          ruleToken = null;
          newTokens = allTokens;
          level = levels.pop();
          seekingValue = false;
          isVariable = false;
        } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE) {
          propertyToken = null;
          ruleToken = null;
          newTokens = allTokens;
          level = levels.pop();
          seekingValue = false;
          isVariable = false;
        } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.BLOCK && !isNested && position.index <= source.length - 1) {
          externalContext.warnings.push("Unexpected '}' at " + formatPosition([position.line, position.column, position.source]) + ".");
          buffer.push(character);
          isBufferEmpty = false;
        } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.BLOCK) {
          break;
        } else if (character == Marker.OPEN_ROUND_BRACKET && level == Level.RULE && seekingValue) {
          buffer.push(character);
          isBufferEmpty = false;
          roundBracketLevel++;
        } else if (character == Marker.CLOSE_ROUND_BRACKET && level == Level.RULE && seekingValue && roundBracketLevel == 1) {
          buffer.push(character);
          isBufferEmpty = false;
          serializedBuffer = buffer.join("").trim();
          propertyToken.push([
            Token.PROPERTY_VALUE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          roundBracketLevel--;
          buffer = [];
          isBufferEmpty = true;
          isVariable = false;
        } else if (character == Marker.CLOSE_ROUND_BRACKET && level == Level.RULE && seekingValue) {
          buffer.push(character);
          isBufferEmpty = false;
          isVariable = false;
          roundBracketLevel--;
        } else if (character == Marker.FORWARD_SLASH && source[position.index + 1] != Marker.ASTERISK && level == Level.RULE && seekingValue && !isBufferEmpty) {
          serializedBuffer = buffer.join("").trim();
          propertyToken.push([
            Token.PROPERTY_VALUE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          propertyToken.push([
            Token.PROPERTY_VALUE,
            character,
            [[position.line, position.column, position.source]]
          ]);
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker.FORWARD_SLASH && source[position.index + 1] != Marker.ASTERISK && level == Level.RULE && seekingValue) {
          propertyToken.push([
            Token.PROPERTY_VALUE,
            character,
            [[position.line, position.column, position.source]]
          ]);
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker.COMMA && level == Level.RULE && seekingValue && !isBufferEmpty) {
          serializedBuffer = buffer.join("").trim();
          propertyToken.push([
            Token.PROPERTY_VALUE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          propertyToken.push([
            Token.PROPERTY_VALUE,
            character,
            [[position.line, position.column, position.source]]
          ]);
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker.COMMA && level == Level.RULE && seekingValue) {
          propertyToken.push([
            Token.PROPERTY_VALUE,
            character,
            [[position.line, position.column, position.source]]
          ]);
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker.CLOSE_SQUARE_BRACKET && propertyToken && propertyToken.length > 1 && !isBufferEmpty && isRepeatToken(buffer)) {
          buffer.push(character);
          serializedBuffer = buffer.join("").trim();
          propertyToken[propertyToken.length - 1][1] += serializedBuffer;
          buffer = [];
          isBufferEmpty = true;
        } else if ((isSpace || isNewLineNix && !isNewLineWin) && level == Level.RULE && seekingValue && propertyToken && !isBufferEmpty) {
          serializedBuffer = buffer.join("").trim();
          propertyToken.push([
            Token.PROPERTY_VALUE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          buffer = [];
          isBufferEmpty = true;
        } else if (isNewLineWin && level == Level.RULE && seekingValue && propertyToken && buffer.length > 1) {
          serializedBuffer = buffer.join("").trim();
          propertyToken.push([
            Token.PROPERTY_VALUE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          buffer = [];
          isBufferEmpty = true;
        } else if (isNewLineWin && level == Level.RULE && seekingValue) {
          buffer = [];
          isBufferEmpty = true;
        } else if (isNewLineWin && buffer.length == 1) {
          buffer.pop();
          isBufferEmpty = buffer.length === 0;
        } else if (!isBufferEmpty || !isSpace && !isNewLineNix && !isNewLineWin && !isCarriageReturn) {
          buffer.push(character);
          isBufferEmpty = false;
        }
        wasEscaped = isEscaped;
        isEscaped = !wasEscaped && character == Marker.BACK_SLASH;
        wasCommentStart = isCommentStart;
        wasCommentEnd = isCommentEnd;
        position.line = isNewLineWin || isNewLineNix || isCarriageReturn ? position.line + 1 : position.line;
        position.column = isNewLineWin || isNewLineNix || isCarriageReturn ? 0 : position.column + 1;
      }
      if (seekingValue) {
        externalContext.warnings.push("Missing '}' at " + formatPosition([position.line, position.column, position.source]) + ".");
      }
      if (seekingValue && buffer.length > 0) {
        serializedBuffer = buffer.join("").trimRight().replace(TAIL_BROKEN_VALUE_PATTERN, "$1").trimRight();
        propertyToken.push([
          Token.PROPERTY_VALUE,
          serializedBuffer,
          [originalMetadata(metadata, serializedBuffer, externalContext)]
        ]);
        buffer = [];
      }
      if (buffer.length > 0) {
        externalContext.warnings.push("Invalid character(s) '" + buffer.join("") + "' at " + formatPosition(metadata) + ". Ignoring.");
      }
      return allTokens;
    }
    function isIgnoreStartComment(buffer) {
      return IGNORE_START_COMMENT_PATTERN.test(buffer.join("") + Marker.FORWARD_SLASH);
    }
    function isIgnoreEndComment(buffer) {
      return IGNORE_END_COMMENT_PATTERN.test(buffer.join("") + Marker.FORWARD_SLASH);
    }
    function originalMetadata(metadata, value, externalContext, selectorFallbacks) {
      var source = metadata[2];
      return externalContext.inputSourceMapTracker.isTracking(source) ? externalContext.inputSourceMapTracker.originalPositionFor(metadata, value.length, selectorFallbacks) : metadata;
    }
    function tokenTypeFrom(buffer) {
      var isAtRule = buffer[0] == Marker.AT || buffer[0] == Marker.UNDERSCORE;
      var ruleWord = buffer.join("").split(RULE_WORD_SEPARATOR_PATTERN)[0];
      if (isAtRule && BLOCK_RULES.indexOf(ruleWord) > -1) {
        return Token.NESTED_BLOCK;
      }
      if (isAtRule && AT_RULES.indexOf(ruleWord) > -1) {
        return Token.AT_RULE;
      }
      if (isAtRule) {
        return Token.AT_RULE_BLOCK;
      }
      return Token.RULE;
    }
    function tokenScopeFrom(tokenType) {
      if (tokenType == Token.RULE) {
        return Token.RULE_SCOPE;
      }
      if (tokenType == Token.NESTED_BLOCK) {
        return Token.NESTED_BLOCK_SCOPE;
      }
      if (tokenType == Token.AT_RULE_BLOCK) {
        return Token.AT_RULE_BLOCK_SCOPE;
      }
    }
    function isPageMarginBox(buffer) {
      var serializedBuffer = buffer.join("").trim();
      return PAGE_MARGIN_BOXES.indexOf(serializedBuffer) > -1 || EXTRA_PAGE_BOXES.indexOf(serializedBuffer) > -1;
    }
    function isRepeatToken(buffer) {
      return REPEAT_PATTERN.test(buffer.join("") + Marker.CLOSE_SQUARE_BRACKET);
    }
    module.exports = tokenize;
  }
});

// node_modules/clean-css/lib/reader/read-sources.js
var require_read_sources = __commonJS({
  "node_modules/clean-css/lib/reader/read-sources.js"(exports, module) {
    var fs = require_fs();
    var path = require_path();
    var applySourceMaps = require_apply_source_maps();
    var extractImportUrlAndMedia = require_extract_import_url_and_media();
    var isAllowedResource = require_is_allowed_resource();
    var loadOriginalSources = require_load_original_sources();
    var normalizePath = require_normalize_path();
    var rebase = require_rebase2();
    var rebaseLocalMap = require_rebase_local_map();
    var rebaseRemoteMap = require_rebase_remote_map();
    var restoreImport = require_restore_import();
    var tokenize = require_tokenize();
    var Token = require_token();
    var Marker = require_marker();
    var hasProtocol = require_has_protocol();
    var isImport = require_is_import();
    var isRemoteResource = require_is_remote_resource();
    var UNKNOWN_URI = "uri:unknown";
    var FILE_RESOURCE_PROTOCOL = "file://";
    function readSources(input, context, callback) {
      return doReadSources(input, context, function(tokens) {
        return applySourceMaps(tokens, context, function() {
          return loadOriginalSources(context, function() {
            return callback(tokens);
          });
        });
      });
    }
    function doReadSources(input, context, callback) {
      if (typeof input == "string") {
        return fromString(input, context, callback);
      }
      if (Buffer.isBuffer(input)) {
        return fromString(input.toString(), context, callback);
      }
      if (Array.isArray(input)) {
        return fromArray(input, context, callback);
      }
      if (typeof input == "object") {
        return fromHash(input, context, callback);
      }
    }
    function fromString(input, context, callback) {
      context.source = void 0;
      context.sourcesContent[void 0] = input;
      context.stats.originalSize += input.length;
      return fromStyles(input, context, { inline: context.options.inline }, callback);
    }
    function fromArray(input, context, callback) {
      var inputAsImports = input.reduce(function(accumulator, uriOrHash) {
        if (typeof uriOrHash === "string") {
          return addStringSource(uriOrHash, accumulator);
        }
        return addHashSource(uriOrHash, context, accumulator);
      }, []);
      return fromStyles(inputAsImports.join(""), context, { inline: ["all"] }, callback);
    }
    function fromHash(input, context, callback) {
      var inputAsImports = addHashSource(input, context, []);
      return fromStyles(inputAsImports.join(""), context, { inline: ["all"] }, callback);
    }
    function addStringSource(input, imports) {
      imports.push(restoreAsImport(normalizeUri(input)));
      return imports;
    }
    function addHashSource(input, context, imports) {
      var uri;
      var normalizedUri;
      var source;
      for (uri in input) {
        source = input[uri];
        normalizedUri = normalizeUri(uri);
        imports.push(restoreAsImport(normalizedUri));
        context.sourcesContent[normalizedUri] = source.styles;
        if (source.sourceMap) {
          trackSourceMap(source.sourceMap, normalizedUri, context);
        }
      }
      return imports;
    }
    function normalizeUri(uri) {
      var currentPath = path.resolve("");
      var absoluteUri;
      var relativeToCurrentPath;
      var normalizedUri;
      if (isRemoteResource(uri)) {
        return uri;
      }
      absoluteUri = path.isAbsolute(uri) ? uri : path.resolve(uri);
      relativeToCurrentPath = path.relative(currentPath, absoluteUri);
      normalizedUri = normalizePath(relativeToCurrentPath);
      return normalizedUri;
    }
    function trackSourceMap(sourceMap, uri, context) {
      var parsedMap = typeof sourceMap == "string" ? JSON.parse(sourceMap) : sourceMap;
      var rebasedMap = isRemoteResource(uri) ? rebaseRemoteMap(parsedMap, uri) : rebaseLocalMap(parsedMap, uri || UNKNOWN_URI, context.options.rebaseTo);
      context.inputSourceMapTracker.track(uri, rebasedMap);
    }
    function restoreAsImport(uri) {
      return restoreImport("url(" + uri + ")", "") + Marker.SEMICOLON;
    }
    function fromStyles(styles, context, parentInlinerContext, callback) {
      var tokens;
      var rebaseConfig = {};
      if (!context.source) {
        rebaseConfig.fromBase = path.resolve("");
        rebaseConfig.toBase = context.options.rebaseTo;
      } else if (isRemoteResource(context.source)) {
        rebaseConfig.fromBase = context.source;
        rebaseConfig.toBase = context.source;
      } else if (path.isAbsolute(context.source)) {
        rebaseConfig.fromBase = path.dirname(context.source);
        rebaseConfig.toBase = context.options.rebaseTo;
      } else {
        rebaseConfig.fromBase = path.dirname(path.resolve(context.source));
        rebaseConfig.toBase = context.options.rebaseTo;
      }
      tokens = tokenize(styles, context);
      tokens = rebase(tokens, context.options.rebase, context.validator, rebaseConfig);
      return allowsAnyImports(parentInlinerContext.inline) ? inline(tokens, context, parentInlinerContext, callback) : callback(tokens);
    }
    function allowsAnyImports(inline2) {
      return !(inline2.length == 1 && inline2[0] == "none");
    }
    function inline(tokens, externalContext, parentInlinerContext, callback) {
      var inlinerContext = {
        afterContent: false,
        callback,
        errors: externalContext.errors,
        externalContext,
        fetch: externalContext.options.fetch,
        inlinedStylesheets: parentInlinerContext.inlinedStylesheets || externalContext.inlinedStylesheets,
        inline: parentInlinerContext.inline,
        inlineRequest: externalContext.options.inlineRequest,
        inlineTimeout: externalContext.options.inlineTimeout,
        isRemote: parentInlinerContext.isRemote || false,
        localOnly: externalContext.localOnly,
        outputTokens: [],
        rebaseTo: externalContext.options.rebaseTo,
        sourceTokens: tokens,
        warnings: externalContext.warnings
      };
      return doInlineImports(inlinerContext);
    }
    function doInlineImports(inlinerContext) {
      var token;
      var i, l2;
      for (i = 0, l2 = inlinerContext.sourceTokens.length; i < l2; i++) {
        token = inlinerContext.sourceTokens[i];
        if (token[0] == Token.AT_RULE && isImport(token[1])) {
          inlinerContext.sourceTokens.splice(0, i);
          return inlineStylesheet(token, inlinerContext);
        }
        if (token[0] == Token.AT_RULE || token[0] == Token.COMMENT) {
          inlinerContext.outputTokens.push(token);
        } else {
          inlinerContext.outputTokens.push(token);
          inlinerContext.afterContent = true;
        }
      }
      inlinerContext.sourceTokens = [];
      return inlinerContext.callback(inlinerContext.outputTokens);
    }
    function inlineStylesheet(token, inlinerContext) {
      var uriAndMediaQuery = extractImportUrlAndMedia(token[1]);
      var uri = uriAndMediaQuery[0];
      var mediaQuery = uriAndMediaQuery[1];
      var metadata = token[2];
      return isRemoteResource(uri) ? inlineRemoteStylesheet(uri, mediaQuery, metadata, inlinerContext) : inlineLocalStylesheet(uri, mediaQuery, metadata, inlinerContext);
    }
    function inlineRemoteStylesheet(uri, mediaQuery, metadata, inlinerContext) {
      var isAllowed = isAllowedResource(uri, true, inlinerContext.inline);
      var originalUri = uri;
      var isLoaded = uri in inlinerContext.externalContext.sourcesContent;
      var isRuntimeResource = !hasProtocol(uri);
      if (inlinerContext.inlinedStylesheets.indexOf(uri) > -1) {
        inlinerContext.warnings.push('Ignoring remote @import of "' + uri + '" as it has already been imported.');
        inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
        return doInlineImports(inlinerContext);
      }
      if (inlinerContext.localOnly && inlinerContext.afterContent) {
        inlinerContext.warnings.push('Ignoring remote @import of "' + uri + '" as no callback given and after other content.');
        inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
        return doInlineImports(inlinerContext);
      }
      if (isRuntimeResource) {
        inlinerContext.warnings.push('Skipping remote @import of "' + uri + '" as no protocol given.');
        inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));
        inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
        return doInlineImports(inlinerContext);
      }
      if (inlinerContext.localOnly && !isLoaded) {
        inlinerContext.warnings.push('Skipping remote @import of "' + uri + '" as no callback given.');
        inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));
        inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
        return doInlineImports(inlinerContext);
      }
      if (!isAllowed && inlinerContext.afterContent) {
        inlinerContext.warnings.push('Ignoring remote @import of "' + uri + '" as resource is not allowed and after other content.');
        inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
        return doInlineImports(inlinerContext);
      }
      if (!isAllowed) {
        inlinerContext.warnings.push('Skipping remote @import of "' + uri + '" as resource is not allowed.');
        inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));
        inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
        return doInlineImports(inlinerContext);
      }
      inlinerContext.inlinedStylesheets.push(uri);
      function whenLoaded(error, importedStyles) {
        if (error) {
          inlinerContext.errors.push('Broken @import declaration of "' + uri + '" - ' + error);
          return process.nextTick(function() {
            inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));
            inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
            doInlineImports(inlinerContext);
          });
        }
        inlinerContext.inline = inlinerContext.externalContext.options.inline;
        inlinerContext.isRemote = true;
        inlinerContext.externalContext.source = originalUri;
        inlinerContext.externalContext.sourcesContent[uri] = importedStyles;
        inlinerContext.externalContext.stats.originalSize += importedStyles.length;
        return fromStyles(importedStyles, inlinerContext.externalContext, inlinerContext, function(importedTokens) {
          importedTokens = wrapInMedia(importedTokens, mediaQuery, metadata);
          inlinerContext.outputTokens = inlinerContext.outputTokens.concat(importedTokens);
          inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
          return doInlineImports(inlinerContext);
        });
      }
      return isLoaded ? whenLoaded(null, inlinerContext.externalContext.sourcesContent[uri]) : inlinerContext.fetch(uri, inlinerContext.inlineRequest, inlinerContext.inlineTimeout, whenLoaded);
    }
    function inlineLocalStylesheet(uri, mediaQuery, metadata, inlinerContext) {
      var protocolLessUri = uri.replace(FILE_RESOURCE_PROTOCOL, "");
      var currentPath = path.resolve("");
      var absoluteUri = path.isAbsolute(protocolLessUri) ? path.resolve(currentPath, protocolLessUri[0] == "/" ? protocolLessUri.substring(1) : protocolLessUri) : path.resolve(inlinerContext.rebaseTo, protocolLessUri);
      var relativeToCurrentPath = path.relative(currentPath, absoluteUri);
      var importedStyles;
      var isAllowed = isAllowedResource(protocolLessUri, false, inlinerContext.inline);
      var normalizedPath = normalizePath(relativeToCurrentPath);
      var isLoaded = normalizedPath in inlinerContext.externalContext.sourcesContent;
      if (inlinerContext.inlinedStylesheets.indexOf(absoluteUri) > -1) {
        inlinerContext.warnings.push('Ignoring local @import of "' + protocolLessUri + '" as it has already been imported.');
      } else if (isAllowed && !isLoaded && (!fs.existsSync(absoluteUri) || !fs.statSync(absoluteUri).isFile())) {
        inlinerContext.errors.push('Ignoring local @import of "' + protocolLessUri + '" as resource is missing.');
      } else if (!isAllowed && inlinerContext.afterContent) {
        inlinerContext.warnings.push('Ignoring local @import of "' + protocolLessUri + '" as resource is not allowed and after other content.');
      } else if (inlinerContext.afterContent) {
        inlinerContext.warnings.push('Ignoring local @import of "' + protocolLessUri + '" as after other content.');
      } else if (!isAllowed) {
        inlinerContext.warnings.push('Skipping local @import of "' + protocolLessUri + '" as resource is not allowed.');
        inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));
      } else {
        importedStyles = isLoaded ? inlinerContext.externalContext.sourcesContent[normalizedPath] : fs.readFileSync(absoluteUri, "utf-8");
        if (importedStyles.charCodeAt(0) === 65279) {
          importedStyles = importedStyles.substring(1);
        }
        inlinerContext.inlinedStylesheets.push(absoluteUri);
        inlinerContext.inline = inlinerContext.externalContext.options.inline;
        inlinerContext.externalContext.source = normalizedPath;
        inlinerContext.externalContext.sourcesContent[normalizedPath] = importedStyles;
        inlinerContext.externalContext.stats.originalSize += importedStyles.length;
        return fromStyles(importedStyles, inlinerContext.externalContext, inlinerContext, function(importedTokens) {
          importedTokens = wrapInMedia(importedTokens, mediaQuery, metadata);
          inlinerContext.outputTokens = inlinerContext.outputTokens.concat(importedTokens);
          inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
          return doInlineImports(inlinerContext);
        });
      }
      inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
      return doInlineImports(inlinerContext);
    }
    function wrapInMedia(tokens, mediaQuery, metadata) {
      if (mediaQuery) {
        return [[Token.NESTED_BLOCK, [[Token.NESTED_BLOCK_SCOPE, "@media " + mediaQuery, metadata]], tokens]];
      }
      return tokens;
    }
    module.exports = readSources;
  }
});

// node_modules/clean-css/lib/writer/simple.js
var require_simple = __commonJS({
  "node_modules/clean-css/lib/writer/simple.js"(exports, module) {
    var all = require_helpers().all;
    function store(serializeContext, token) {
      var value = typeof token == "string" ? token : token[1];
      var wrap2 = serializeContext.wrap;
      wrap2(serializeContext, value);
      track(serializeContext, value);
      serializeContext.output.push(value);
    }
    function wrap(serializeContext, value) {
      if (serializeContext.column + value.length > serializeContext.format.wrapAt) {
        track(serializeContext, serializeContext.format.breakWith);
        serializeContext.output.push(serializeContext.format.breakWith);
      }
    }
    function track(serializeContext, value) {
      var parts = value.split("\n");
      serializeContext.line += parts.length - 1;
      serializeContext.column = parts.length > 1 ? 0 : serializeContext.column + parts.pop().length;
    }
    function serializeStyles(tokens, context) {
      var serializeContext = {
        column: 0,
        format: context.options.format,
        indentBy: 0,
        indentWith: "",
        line: 1,
        output: [],
        spaceAfterClosingBrace: context.options.compatibility.properties.spaceAfterClosingBrace,
        store,
        wrap: context.options.format.wrapAt ? wrap : function() {
        }
      };
      all(serializeContext, tokens);
      return { styles: serializeContext.output.join("") };
    }
    module.exports = serializeStyles;
  }
});

// node_modules/clean-css/lib/writer/source-maps.js
var require_source_maps = __commonJS({
  "node_modules/clean-css/lib/writer/source-maps.js"(exports, module) {
    var SourceMapGenerator = require_source_map().SourceMapGenerator;
    var all = require_helpers().all;
    var isRemoteResource = require_is_remote_resource();
    var isWindows = process.platform == "win32";
    var NIX_SEPARATOR_PATTERN = /\//g;
    var UNKNOWN_SOURCE = "$stdin";
    var WINDOWS_SEPARATOR = "\\";
    function store(serializeContext, element) {
      var fromString = typeof element == "string";
      var value = fromString ? element : element[1];
      var mappings = fromString ? null : element[2];
      var wrap2 = serializeContext.wrap;
      wrap2(serializeContext, value);
      track(serializeContext, value, mappings);
      serializeContext.output.push(value);
    }
    function wrap(serializeContext, value) {
      if (serializeContext.column + value.length > serializeContext.format.wrapAt) {
        track(serializeContext, serializeContext.format.breakWith, false);
        serializeContext.output.push(serializeContext.format.breakWith);
      }
    }
    function track(serializeContext, value, mappings) {
      var parts = value.split("\n");
      if (mappings) {
        trackAllMappings(serializeContext, mappings);
      }
      serializeContext.line += parts.length - 1;
      serializeContext.column = parts.length > 1 ? 0 : serializeContext.column + parts.pop().length;
    }
    function trackAllMappings(serializeContext, mappings) {
      for (var i = 0, l2 = mappings.length; i < l2; i++) {
        trackMapping(serializeContext, mappings[i]);
      }
    }
    function trackMapping(serializeContext, mapping) {
      var line = mapping[0];
      var column = mapping[1];
      var originalSource = mapping[2];
      var source = originalSource;
      var storedSource = source || UNKNOWN_SOURCE;
      if (isWindows && source && !isRemoteResource(source)) {
        storedSource = source.replace(NIX_SEPARATOR_PATTERN, WINDOWS_SEPARATOR);
      }
      serializeContext.outputMap.addMapping({
        generated: {
          line: serializeContext.line,
          column: serializeContext.column
        },
        source: storedSource,
        original: {
          line,
          column
        }
      });
      if (serializeContext.inlineSources && originalSource in serializeContext.sourcesContent) {
        serializeContext.outputMap.setSourceContent(
          storedSource,
          serializeContext.sourcesContent[originalSource]
        );
      }
    }
    function serializeStylesAndSourceMap(tokens, context) {
      var serializeContext = {
        column: 0,
        format: context.options.format,
        indentBy: 0,
        indentWith: "",
        inlineSources: context.options.sourceMapInlineSources,
        line: 1,
        output: [],
        outputMap: new SourceMapGenerator(),
        sourcesContent: context.sourcesContent,
        spaceAfterClosingBrace: context.options.compatibility.properties.spaceAfterClosingBrace,
        store,
        wrap: context.options.format.wrapAt ? wrap : function() {
        }
      };
      all(serializeContext, tokens);
      return {
        sourceMap: serializeContext.outputMap,
        styles: serializeContext.output.join("")
      };
    }
    module.exports = serializeStylesAndSourceMap;
  }
});

// node_modules/clean-css/lib/clean.js
var require_clean = __commonJS({
  "node_modules/clean-css/lib/clean.js"(exports, module) {
    var level0Optimize = require_optimize();
    var level1Optimize = require_optimize2();
    var level2Optimize = require_optimize4();
    var validator = require_validator();
    var compatibilityFrom = require_compatibility();
    var fetchFrom = require_fetch();
    var formatFrom = require_format().formatFrom;
    var inlineFrom = require_inline();
    var inlineRequestFrom = require_inline_request();
    var inlineTimeoutFrom = require_inline_timeout();
    var OptimizationLevel = require_optimization_level().OptimizationLevel;
    var optimizationLevelFrom = require_optimization_level().optimizationLevelFrom;
    var pluginsFrom = require_plugins();
    var rebaseFrom = require_rebase();
    var rebaseToFrom = require_rebase_to();
    var inputSourceMapTracker = require_input_source_map_tracker();
    var readSources = require_read_sources();
    var serializeStyles = require_simple();
    var serializeStylesAndSourceMap = require_source_maps();
    var CleanCSS = module.exports = function CleanCSS2(options) {
      options = options || {};
      this.options = {
        batch: !!options.batch,
        compatibility: compatibilityFrom(options.compatibility),
        explicitRebaseTo: "rebaseTo" in options,
        fetch: fetchFrom(options.fetch),
        format: formatFrom(options.format),
        inline: inlineFrom(options.inline),
        inlineRequest: inlineRequestFrom(options.inlineRequest),
        inlineTimeout: inlineTimeoutFrom(options.inlineTimeout),
        level: optimizationLevelFrom(options.level),
        plugins: pluginsFrom(options.plugins),
        rebase: rebaseFrom(options.rebase, options.rebaseTo),
        rebaseTo: rebaseToFrom(options.rebaseTo),
        returnPromise: !!options.returnPromise,
        sourceMap: !!options.sourceMap,
        sourceMapInlineSources: !!options.sourceMapInlineSources
      };
    };
    CleanCSS.process = function(input, opts) {
      var cleanCss;
      var optsTo = opts.to;
      delete opts.to;
      cleanCss = new CleanCSS(Object.assign({
        returnPromise: true,
        rebaseTo: optsTo
      }, opts));
      return cleanCss.minify(input).then(function(output) {
        return { css: output.styles };
      });
    };
    CleanCSS.prototype.minify = function(input, maybeSourceMap, maybeCallback) {
      var options = this.options;
      if (options.returnPromise) {
        return new Promise(function(resolve, reject) {
          minifyAll(input, options, maybeSourceMap, function(errors, output) {
            return errors ? reject(errors) : resolve(output);
          });
        });
      }
      return minifyAll(input, options, maybeSourceMap, maybeCallback);
    };
    function minifyAll(input, options, maybeSourceMap, maybeCallback) {
      if (options.batch && Array.isArray(input)) {
        return minifyInBatchesFromArray(input, options, maybeSourceMap, maybeCallback);
      }
      if (options.batch && typeof input == "object") {
        return minifyInBatchesFromHash(input, options, maybeSourceMap, maybeCallback);
      }
      return minify(input, options, maybeSourceMap, maybeCallback);
    }
    function minifyInBatchesFromArray(input, options, maybeSourceMap, maybeCallback) {
      var callback = typeof maybeCallback == "function" ? maybeCallback : typeof maybeSourceMap == "function" ? maybeSourceMap : null;
      var errors = [];
      var outputAsHash = {};
      var inputValue;
      var i, l2;
      function whenHashBatchDone(innerErrors, output) {
        outputAsHash = Object.assign(outputAsHash, output);
        if (innerErrors !== null) {
          errors = errors.concat(innerErrors);
        }
      }
      for (i = 0, l2 = input.length; i < l2; i++) {
        if (typeof input[i] == "object") {
          minifyInBatchesFromHash(input[i], options, whenHashBatchDone);
        } else {
          inputValue = input[i];
          outputAsHash[inputValue] = minify([inputValue], options);
          errors = errors.concat(outputAsHash[inputValue].errors);
        }
      }
      return callback ? callback(errors.length > 0 ? errors : null, outputAsHash) : outputAsHash;
    }
    function minifyInBatchesFromHash(input, options, maybeSourceMap, maybeCallback) {
      var callback = typeof maybeCallback == "function" ? maybeCallback : typeof maybeSourceMap == "function" ? maybeSourceMap : null;
      var errors = [];
      var outputAsHash = {};
      var inputKey;
      var inputValue;
      for (inputKey in input) {
        inputValue = input[inputKey];
        outputAsHash[inputKey] = minify(inputValue.styles, options, inputValue.sourceMap);
        errors = errors.concat(outputAsHash[inputKey].errors);
      }
      return callback ? callback(errors.length > 0 ? errors : null, outputAsHash) : outputAsHash;
    }
    function minify(input, options, maybeSourceMap, maybeCallback) {
      var sourceMap = typeof maybeSourceMap != "function" ? maybeSourceMap : null;
      var callback = typeof maybeCallback == "function" ? maybeCallback : typeof maybeSourceMap == "function" ? maybeSourceMap : null;
      var context = {
        stats: {
          efficiency: 0,
          minifiedSize: 0,
          originalSize: 0,
          startedAt: Date.now(),
          timeSpent: 0
        },
        cache: { specificity: {} },
        errors: [],
        inlinedStylesheets: [],
        inputSourceMapTracker: inputSourceMapTracker(),
        localOnly: !callback,
        options,
        source: null,
        sourcesContent: {},
        validator: validator(options.compatibility),
        warnings: []
      };
      var implicitRebaseToWarning;
      if (sourceMap) {
        context.inputSourceMapTracker.track(void 0, sourceMap);
      }
      if (options.rebase && !options.explicitRebaseTo) {
        implicitRebaseToWarning = "You have set `rebase: true` without giving `rebaseTo` option, which, in this case, defaults to the current working directory. You are then warned this can lead to unexpected URL rebasing (aka here be dragons)! If you are OK with the clean-css output, then you can get rid of this warning by giving clean-css a `rebaseTo: process.cwd()` option.";
        context.warnings.push(implicitRebaseToWarning);
      }
      return runner(context.localOnly)(function() {
        return readSources(input, context, function(tokens) {
          var serialize = context.options.sourceMap ? serializeStylesAndSourceMap : serializeStyles;
          var optimizedTokens = optimize(tokens, context);
          var optimizedStyles = serialize(optimizedTokens, context);
          var output = withMetadata(optimizedStyles, context);
          return callback ? callback(context.errors.length > 0 ? context.errors : null, output) : output;
        });
      });
    }
    function runner(localOnly) {
      return localOnly ? function(callback) {
        return callback();
      } : process.nextTick;
    }
    function optimize(tokens, context) {
      var optimized = level0Optimize(tokens, context);
      optimized = OptimizationLevel.One in context.options.level ? level1Optimize(tokens, context) : tokens;
      optimized = OptimizationLevel.Two in context.options.level ? level2Optimize(tokens, context, true) : optimized;
      return optimized;
    }
    function withMetadata(output, context) {
      output.stats = calculateStatsFrom(output.styles, context);
      output.errors = context.errors;
      output.inlinedStylesheets = context.inlinedStylesheets;
      output.warnings = context.warnings;
      return output;
    }
    function calculateStatsFrom(styles, context) {
      var finishedAt = Date.now();
      var timeSpent = finishedAt - context.stats.startedAt;
      delete context.stats.startedAt;
      context.stats.timeSpent = timeSpent;
      context.stats.efficiency = 1 - styles.length / context.stats.originalSize;
      context.stats.minifiedSize = styles.length;
      return context.stats;
    }
  }
});

// node_modules/clean-css/index.js
var require_clean_css = __commonJS({
  "node_modules/clean-css/index.js"(exports, module) {
    module.exports = require_clean();
  }
});

// node_modules/he/he.js
var require_he = __commonJS({
  "node_modules/he/he.js"(exports, module) {
    (function(root) {
      var freeExports = typeof exports == "object" && exports;
      var freeModule = typeof module == "object" && module && module.exports == freeExports && module;
      var freeGlobal = typeof global == "object" && global;
      if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
        root = freeGlobal;
      }
      var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
      var regexAsciiWhitelist = /[\x01-\x7F]/g;
      var regexBmpWhitelist = /[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g;
      var regexEncodeNonAscii = /<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g;
      var encodeMap = { "­": "shy", "‌": "zwnj", "‍": "zwj", "‎": "lrm", "⁣": "ic", "⁢": "it", "⁡": "af", "‏": "rlm", "​": "ZeroWidthSpace", "⁠": "NoBreak", "̑": "DownBreve", "⃛": "tdot", "⃜": "DotDot", "	": "Tab", "\n": "NewLine", " ": "puncsp", " ": "MediumSpace", " ": "thinsp", " ": "hairsp", " ": "emsp13", " ": "ensp", " ": "emsp14", " ": "emsp", " ": "numsp", " ": "nbsp", "  ": "ThickSpace", "‾": "oline", "_": "lowbar", "‐": "dash", "–": "ndash", "—": "mdash", "―": "horbar", ",": "comma", ";": "semi", "⁏": "bsemi", ":": "colon", "⩴": "Colone", "!": "excl", "¡": "iexcl", "?": "quest", "¿": "iquest", ".": "period", "‥": "nldr", "…": "mldr", "·": "middot", "'": "apos", "‘": "lsquo", "’": "rsquo", "‚": "sbquo", "‹": "lsaquo", "›": "rsaquo", '"': "quot", "“": "ldquo", "”": "rdquo", "„": "bdquo", "«": "laquo", "»": "raquo", "(": "lpar", ")": "rpar", "[": "lsqb", "]": "rsqb", "{": "lcub", "}": "rcub", "⌈": "lceil", "⌉": "rceil", "⌊": "lfloor", "⌋": "rfloor", "⦅": "lopar", "⦆": "ropar", "⦋": "lbrke", "⦌": "rbrke", "⦍": "lbrkslu", "⦎": "rbrksld", "⦏": "lbrksld", "⦐": "rbrkslu", "⦑": "langd", "⦒": "rangd", "⦓": "lparlt", "⦔": "rpargt", "⦕": "gtlPar", "⦖": "ltrPar", "⟦": "lobrk", "⟧": "robrk", "⟨": "lang", "⟩": "rang", "⟪": "Lang", "⟫": "Rang", "⟬": "loang", "⟭": "roang", "❲": "lbbrk", "❳": "rbbrk", "‖": "Vert", "§": "sect", "¶": "para", "@": "commat", "*": "ast", "/": "sol", "undefined": null, "&": "amp", "#": "num", "%": "percnt", "‰": "permil", "‱": "pertenk", "†": "dagger", "‡": "Dagger", "•": "bull", "⁃": "hybull", "′": "prime", "″": "Prime", "‴": "tprime", "⁗": "qprime", "‵": "bprime", "⁁": "caret", "`": "grave", "´": "acute", "˜": "tilde", "^": "Hat", "¯": "macr", "˘": "breve", "˙": "dot", "¨": "die", "˚": "ring", "˝": "dblac", "¸": "cedil", "˛": "ogon", "ˆ": "circ", "ˇ": "caron", "°": "deg", "©": "copy", "®": "reg", "℗": "copysr", "℘": "wp", "℞": "rx", "℧": "mho", "℩": "iiota", "←": "larr", "↚": "nlarr", "→": "rarr", "↛": "nrarr", "↑": "uarr", "↓": "darr", "↔": "harr", "↮": "nharr", "↕": "varr", "↖": "nwarr", "↗": "nearr", "↘": "searr", "↙": "swarr", "↝": "rarrw", "↝̸": "nrarrw", "↞": "Larr", "↟": "Uarr", "↠": "Rarr", "↡": "Darr", "↢": "larrtl", "↣": "rarrtl", "↤": "mapstoleft", "↥": "mapstoup", "↦": "map", "↧": "mapstodown", "↩": "larrhk", "↪": "rarrhk", "↫": "larrlp", "↬": "rarrlp", "↭": "harrw", "↰": "lsh", "↱": "rsh", "↲": "ldsh", "↳": "rdsh", "↵": "crarr", "↶": "cularr", "↷": "curarr", "↺": "olarr", "↻": "orarr", "↼": "lharu", "↽": "lhard", "↾": "uharr", "↿": "uharl", "⇀": "rharu", "⇁": "rhard", "⇂": "dharr", "⇃": "dharl", "⇄": "rlarr", "⇅": "udarr", "⇆": "lrarr", "⇇": "llarr", "⇈": "uuarr", "⇉": "rrarr", "⇊": "ddarr", "⇋": "lrhar", "⇌": "rlhar", "⇐": "lArr", "⇍": "nlArr", "⇑": "uArr", "⇒": "rArr", "⇏": "nrArr", "⇓": "dArr", "⇔": "iff", "⇎": "nhArr", "⇕": "vArr", "⇖": "nwArr", "⇗": "neArr", "⇘": "seArr", "⇙": "swArr", "⇚": "lAarr", "⇛": "rAarr", "⇝": "zigrarr", "⇤": "larrb", "⇥": "rarrb", "⇵": "duarr", "⇽": "loarr", "⇾": "roarr", "⇿": "hoarr", "∀": "forall", "∁": "comp", "∂": "part", "∂̸": "npart", "∃": "exist", "∄": "nexist", "∅": "empty", "∇": "Del", "∈": "in", "∉": "notin", "∋": "ni", "∌": "notni", "϶": "bepsi", "∏": "prod", "∐": "coprod", "∑": "sum", "+": "plus", "±": "pm", "÷": "div", "×": "times", "<": "lt", "≮": "nlt", "<⃒": "nvlt", "=": "equals", "≠": "ne", "=⃥": "bne", "⩵": "Equal", ">": "gt", "≯": "ngt", ">⃒": "nvgt", "¬": "not", "|": "vert", "¦": "brvbar", "−": "minus", "∓": "mp", "∔": "plusdo", "⁄": "frasl", "∖": "setmn", "∗": "lowast", "∘": "compfn", "√": "Sqrt", "∝": "prop", "∞": "infin", "∟": "angrt", "∠": "ang", "∠⃒": "nang", "∡": "angmsd", "∢": "angsph", "∣": "mid", "∤": "nmid", "∥": "par", "∦": "npar", "∧": "and", "∨": "or", "∩": "cap", "∩︀": "caps", "∪": "cup", "∪︀": "cups", "∫": "int", "∬": "Int", "∭": "tint", "⨌": "qint", "∮": "oint", "∯": "Conint", "∰": "Cconint", "∱": "cwint", "∲": "cwconint", "∳": "awconint", "∴": "there4", "∵": "becaus", "∶": "ratio", "∷": "Colon", "∸": "minusd", "∺": "mDDot", "∻": "homtht", "∼": "sim", "≁": "nsim", "∼⃒": "nvsim", "∽": "bsim", "∽̱": "race", "∾": "ac", "∾̳": "acE", "∿": "acd", "≀": "wr", "≂": "esim", "≂̸": "nesim", "≃": "sime", "≄": "nsime", "≅": "cong", "≇": "ncong", "≆": "simne", "≈": "ap", "≉": "nap", "≊": "ape", "≋": "apid", "≋̸": "napid", "≌": "bcong", "≍": "CupCap", "≭": "NotCupCap", "≍⃒": "nvap", "≎": "bump", "≎̸": "nbump", "≏": "bumpe", "≏̸": "nbumpe", "≐": "doteq", "≐̸": "nedot", "≑": "eDot", "≒": "efDot", "≓": "erDot", "≔": "colone", "≕": "ecolon", "≖": "ecir", "≗": "cire", "≙": "wedgeq", "≚": "veeeq", "≜": "trie", "≟": "equest", "≡": "equiv", "≢": "nequiv", "≡⃥": "bnequiv", "≤": "le", "≰": "nle", "≤⃒": "nvle", "≥": "ge", "≱": "nge", "≥⃒": "nvge", "≦": "lE", "≦̸": "nlE", "≧": "gE", "≧̸": "ngE", "≨︀": "lvnE", "≨": "lnE", "≩": "gnE", "≩︀": "gvnE", "≪": "ll", "≪̸": "nLtv", "≪⃒": "nLt", "≫": "gg", "≫̸": "nGtv", "≫⃒": "nGt", "≬": "twixt", "≲": "lsim", "≴": "nlsim", "≳": "gsim", "≵": "ngsim", "≶": "lg", "≸": "ntlg", "≷": "gl", "≹": "ntgl", "≺": "pr", "⊀": "npr", "≻": "sc", "⊁": "nsc", "≼": "prcue", "⋠": "nprcue", "≽": "sccue", "⋡": "nsccue", "≾": "prsim", "≿": "scsim", "≿̸": "NotSucceedsTilde", "⊂": "sub", "⊄": "nsub", "⊂⃒": "vnsub", "⊃": "sup", "⊅": "nsup", "⊃⃒": "vnsup", "⊆": "sube", "⊈": "nsube", "⊇": "supe", "⊉": "nsupe", "⊊︀": "vsubne", "⊊": "subne", "⊋︀": "vsupne", "⊋": "supne", "⊍": "cupdot", "⊎": "uplus", "⊏": "sqsub", "⊏̸": "NotSquareSubset", "⊐": "sqsup", "⊐̸": "NotSquareSuperset", "⊑": "sqsube", "⋢": "nsqsube", "⊒": "sqsupe", "⋣": "nsqsupe", "⊓": "sqcap", "⊓︀": "sqcaps", "⊔": "sqcup", "⊔︀": "sqcups", "⊕": "oplus", "⊖": "ominus", "⊗": "otimes", "⊘": "osol", "⊙": "odot", "⊚": "ocir", "⊛": "oast", "⊝": "odash", "⊞": "plusb", "⊟": "minusb", "⊠": "timesb", "⊡": "sdotb", "⊢": "vdash", "⊬": "nvdash", "⊣": "dashv", "⊤": "top", "⊥": "bot", "⊧": "models", "⊨": "vDash", "⊭": "nvDash", "⊩": "Vdash", "⊮": "nVdash", "⊪": "Vvdash", "⊫": "VDash", "⊯": "nVDash", "⊰": "prurel", "⊲": "vltri", "⋪": "nltri", "⊳": "vrtri", "⋫": "nrtri", "⊴": "ltrie", "⋬": "nltrie", "⊴⃒": "nvltrie", "⊵": "rtrie", "⋭": "nrtrie", "⊵⃒": "nvrtrie", "⊶": "origof", "⊷": "imof", "⊸": "mumap", "⊹": "hercon", "⊺": "intcal", "⊻": "veebar", "⊽": "barvee", "⊾": "angrtvb", "⊿": "lrtri", "⋀": "Wedge", "⋁": "Vee", "⋂": "xcap", "⋃": "xcup", "⋄": "diam", "⋅": "sdot", "⋆": "Star", "⋇": "divonx", "⋈": "bowtie", "⋉": "ltimes", "⋊": "rtimes", "⋋": "lthree", "⋌": "rthree", "⋍": "bsime", "⋎": "cuvee", "⋏": "cuwed", "⋐": "Sub", "⋑": "Sup", "⋒": "Cap", "⋓": "Cup", "⋔": "fork", "⋕": "epar", "⋖": "ltdot", "⋗": "gtdot", "⋘": "Ll", "⋘̸": "nLl", "⋙": "Gg", "⋙̸": "nGg", "⋚︀": "lesg", "⋚": "leg", "⋛": "gel", "⋛︀": "gesl", "⋞": "cuepr", "⋟": "cuesc", "⋦": "lnsim", "⋧": "gnsim", "⋨": "prnsim", "⋩": "scnsim", "⋮": "vellip", "⋯": "ctdot", "⋰": "utdot", "⋱": "dtdot", "⋲": "disin", "⋳": "isinsv", "⋴": "isins", "⋵": "isindot", "⋵̸": "notindot", "⋶": "notinvc", "⋷": "notinvb", "⋹": "isinE", "⋹̸": "notinE", "⋺": "nisd", "⋻": "xnis", "⋼": "nis", "⋽": "notnivc", "⋾": "notnivb", "⌅": "barwed", "⌆": "Barwed", "⌌": "drcrop", "⌍": "dlcrop", "⌎": "urcrop", "⌏": "ulcrop", "⌐": "bnot", "⌒": "profline", "⌓": "profsurf", "⌕": "telrec", "⌖": "target", "⌜": "ulcorn", "⌝": "urcorn", "⌞": "dlcorn", "⌟": "drcorn", "⌢": "frown", "⌣": "smile", "⌭": "cylcty", "⌮": "profalar", "⌶": "topbot", "⌽": "ovbar", "⌿": "solbar", "⍼": "angzarr", "⎰": "lmoust", "⎱": "rmoust", "⎴": "tbrk", "⎵": "bbrk", "⎶": "bbrktbrk", "⏜": "OverParenthesis", "⏝": "UnderParenthesis", "⏞": "OverBrace", "⏟": "UnderBrace", "⏢": "trpezium", "⏧": "elinters", "␣": "blank", "─": "boxh", "│": "boxv", "┌": "boxdr", "┐": "boxdl", "└": "boxur", "┘": "boxul", "├": "boxvr", "┤": "boxvl", "┬": "boxhd", "┴": "boxhu", "┼": "boxvh", "═": "boxH", "║": "boxV", "╒": "boxdR", "╓": "boxDr", "╔": "boxDR", "╕": "boxdL", "╖": "boxDl", "╗": "boxDL", "╘": "boxuR", "╙": "boxUr", "╚": "boxUR", "╛": "boxuL", "╜": "boxUl", "╝": "boxUL", "╞": "boxvR", "╟": "boxVr", "╠": "boxVR", "╡": "boxvL", "╢": "boxVl", "╣": "boxVL", "╤": "boxHd", "╥": "boxhD", "╦": "boxHD", "╧": "boxHu", "╨": "boxhU", "╩": "boxHU", "╪": "boxvH", "╫": "boxVh", "╬": "boxVH", "▀": "uhblk", "▄": "lhblk", "█": "block", "░": "blk14", "▒": "blk12", "▓": "blk34", "□": "squ", "▪": "squf", "▫": "EmptyVerySmallSquare", "▭": "rect", "▮": "marker", "▱": "fltns", "△": "xutri", "▴": "utrif", "▵": "utri", "▸": "rtrif", "▹": "rtri", "▽": "xdtri", "▾": "dtrif", "▿": "dtri", "◂": "ltrif", "◃": "ltri", "◊": "loz", "○": "cir", "◬": "tridot", "◯": "xcirc", "◸": "ultri", "◹": "urtri", "◺": "lltri", "◻": "EmptySmallSquare", "◼": "FilledSmallSquare", "★": "starf", "☆": "star", "☎": "phone", "♀": "female", "♂": "male", "♠": "spades", "♣": "clubs", "♥": "hearts", "♦": "diams", "♪": "sung", "✓": "check", "✗": "cross", "✠": "malt", "✶": "sext", "❘": "VerticalSeparator", "⟈": "bsolhsub", "⟉": "suphsol", "⟵": "xlarr", "⟶": "xrarr", "⟷": "xharr", "⟸": "xlArr", "⟹": "xrArr", "⟺": "xhArr", "⟼": "xmap", "⟿": "dzigrarr", "⤂": "nvlArr", "⤃": "nvrArr", "⤄": "nvHarr", "⤅": "Map", "⤌": "lbarr", "⤍": "rbarr", "⤎": "lBarr", "⤏": "rBarr", "⤐": "RBarr", "⤑": "DDotrahd", "⤒": "UpArrowBar", "⤓": "DownArrowBar", "⤖": "Rarrtl", "⤙": "latail", "⤚": "ratail", "⤛": "lAtail", "⤜": "rAtail", "⤝": "larrfs", "⤞": "rarrfs", "⤟": "larrbfs", "⤠": "rarrbfs", "⤣": "nwarhk", "⤤": "nearhk", "⤥": "searhk", "⤦": "swarhk", "⤧": "nwnear", "⤨": "toea", "⤩": "tosa", "⤪": "swnwar", "⤳": "rarrc", "⤳̸": "nrarrc", "⤵": "cudarrr", "⤶": "ldca", "⤷": "rdca", "⤸": "cudarrl", "⤹": "larrpl", "⤼": "curarrm", "⤽": "cularrp", "⥅": "rarrpl", "⥈": "harrcir", "⥉": "Uarrocir", "⥊": "lurdshar", "⥋": "ldrushar", "⥎": "LeftRightVector", "⥏": "RightUpDownVector", "⥐": "DownLeftRightVector", "⥑": "LeftUpDownVector", "⥒": "LeftVectorBar", "⥓": "RightVectorBar", "⥔": "RightUpVectorBar", "⥕": "RightDownVectorBar", "⥖": "DownLeftVectorBar", "⥗": "DownRightVectorBar", "⥘": "LeftUpVectorBar", "⥙": "LeftDownVectorBar", "⥚": "LeftTeeVector", "⥛": "RightTeeVector", "⥜": "RightUpTeeVector", "⥝": "RightDownTeeVector", "⥞": "DownLeftTeeVector", "⥟": "DownRightTeeVector", "⥠": "LeftUpTeeVector", "⥡": "LeftDownTeeVector", "⥢": "lHar", "⥣": "uHar", "⥤": "rHar", "⥥": "dHar", "⥦": "luruhar", "⥧": "ldrdhar", "⥨": "ruluhar", "⥩": "rdldhar", "⥪": "lharul", "⥫": "llhard", "⥬": "rharul", "⥭": "lrhard", "⥮": "udhar", "⥯": "duhar", "⥰": "RoundImplies", "⥱": "erarr", "⥲": "simrarr", "⥳": "larrsim", "⥴": "rarrsim", "⥵": "rarrap", "⥶": "ltlarr", "⥸": "gtrarr", "⥹": "subrarr", "⥻": "suplarr", "⥼": "lfisht", "⥽": "rfisht", "⥾": "ufisht", "⥿": "dfisht", "⦚": "vzigzag", "⦜": "vangrt", "⦝": "angrtvbd", "⦤": "ange", "⦥": "range", "⦦": "dwangle", "⦧": "uwangle", "⦨": "angmsdaa", "⦩": "angmsdab", "⦪": "angmsdac", "⦫": "angmsdad", "⦬": "angmsdae", "⦭": "angmsdaf", "⦮": "angmsdag", "⦯": "angmsdah", "⦰": "bemptyv", "⦱": "demptyv", "⦲": "cemptyv", "⦳": "raemptyv", "⦴": "laemptyv", "⦵": "ohbar", "⦶": "omid", "⦷": "opar", "⦹": "operp", "⦻": "olcross", "⦼": "odsold", "⦾": "olcir", "⦿": "ofcir", "⧀": "olt", "⧁": "ogt", "⧂": "cirscir", "⧃": "cirE", "⧄": "solb", "⧅": "bsolb", "⧉": "boxbox", "⧍": "trisb", "⧎": "rtriltri", "⧏": "LeftTriangleBar", "⧏̸": "NotLeftTriangleBar", "⧐": "RightTriangleBar", "⧐̸": "NotRightTriangleBar", "⧜": "iinfin", "⧝": "infintie", "⧞": "nvinfin", "⧣": "eparsl", "⧤": "smeparsl", "⧥": "eqvparsl", "⧫": "lozf", "⧴": "RuleDelayed", "⧶": "dsol", "⨀": "xodot", "⨁": "xoplus", "⨂": "xotime", "⨄": "xuplus", "⨆": "xsqcup", "⨍": "fpartint", "⨐": "cirfnint", "⨑": "awint", "⨒": "rppolint", "⨓": "scpolint", "⨔": "npolint", "⨕": "pointint", "⨖": "quatint", "⨗": "intlarhk", "⨢": "pluscir", "⨣": "plusacir", "⨤": "simplus", "⨥": "plusdu", "⨦": "plussim", "⨧": "plustwo", "⨩": "mcomma", "⨪": "minusdu", "⨭": "loplus", "⨮": "roplus", "⨯": "Cross", "⨰": "timesd", "⨱": "timesbar", "⨳": "smashp", "⨴": "lotimes", "⨵": "rotimes", "⨶": "otimesas", "⨷": "Otimes", "⨸": "odiv", "⨹": "triplus", "⨺": "triminus", "⨻": "tritime", "⨼": "iprod", "⨿": "amalg", "⩀": "capdot", "⩂": "ncup", "⩃": "ncap", "⩄": "capand", "⩅": "cupor", "⩆": "cupcap", "⩇": "capcup", "⩈": "cupbrcap", "⩉": "capbrcup", "⩊": "cupcup", "⩋": "capcap", "⩌": "ccups", "⩍": "ccaps", "⩐": "ccupssm", "⩓": "And", "⩔": "Or", "⩕": "andand", "⩖": "oror", "⩗": "orslope", "⩘": "andslope", "⩚": "andv", "⩛": "orv", "⩜": "andd", "⩝": "ord", "⩟": "wedbar", "⩦": "sdote", "⩪": "simdot", "⩭": "congdot", "⩭̸": "ncongdot", "⩮": "easter", "⩯": "apacir", "⩰": "apE", "⩰̸": "napE", "⩱": "eplus", "⩲": "pluse", "⩳": "Esim", "⩷": "eDDot", "⩸": "equivDD", "⩹": "ltcir", "⩺": "gtcir", "⩻": "ltquest", "⩼": "gtquest", "⩽": "les", "⩽̸": "nles", "⩾": "ges", "⩾̸": "nges", "⩿": "lesdot", "⪀": "gesdot", "⪁": "lesdoto", "⪂": "gesdoto", "⪃": "lesdotor", "⪄": "gesdotol", "⪅": "lap", "⪆": "gap", "⪇": "lne", "⪈": "gne", "⪉": "lnap", "⪊": "gnap", "⪋": "lEg", "⪌": "gEl", "⪍": "lsime", "⪎": "gsime", "⪏": "lsimg", "⪐": "gsiml", "⪑": "lgE", "⪒": "glE", "⪓": "lesges", "⪔": "gesles", "⪕": "els", "⪖": "egs", "⪗": "elsdot", "⪘": "egsdot", "⪙": "el", "⪚": "eg", "⪝": "siml", "⪞": "simg", "⪟": "simlE", "⪠": "simgE", "⪡": "LessLess", "⪡̸": "NotNestedLessLess", "⪢": "GreaterGreater", "⪢̸": "NotNestedGreaterGreater", "⪤": "glj", "⪥": "gla", "⪦": "ltcc", "⪧": "gtcc", "⪨": "lescc", "⪩": "gescc", "⪪": "smt", "⪫": "lat", "⪬": "smte", "⪬︀": "smtes", "⪭": "late", "⪭︀": "lates", "⪮": "bumpE", "⪯": "pre", "⪯̸": "npre", "⪰": "sce", "⪰̸": "nsce", "⪳": "prE", "⪴": "scE", "⪵": "prnE", "⪶": "scnE", "⪷": "prap", "⪸": "scap", "⪹": "prnap", "⪺": "scnap", "⪻": "Pr", "⪼": "Sc", "⪽": "subdot", "⪾": "supdot", "⪿": "subplus", "⫀": "supplus", "⫁": "submult", "⫂": "supmult", "⫃": "subedot", "⫄": "supedot", "⫅": "subE", "⫅̸": "nsubE", "⫆": "supE", "⫆̸": "nsupE", "⫇": "subsim", "⫈": "supsim", "⫋︀": "vsubnE", "⫋": "subnE", "⫌︀": "vsupnE", "⫌": "supnE", "⫏": "csub", "⫐": "csup", "⫑": "csube", "⫒": "csupe", "⫓": "subsup", "⫔": "supsub", "⫕": "subsub", "⫖": "supsup", "⫗": "suphsub", "⫘": "supdsub", "⫙": "forkv", "⫚": "topfork", "⫛": "mlcp", "⫤": "Dashv", "⫦": "Vdashl", "⫧": "Barv", "⫨": "vBar", "⫩": "vBarv", "⫫": "Vbar", "⫬": "Not", "⫭": "bNot", "⫮": "rnmid", "⫯": "cirmid", "⫰": "midcir", "⫱": "topcir", "⫲": "nhpar", "⫳": "parsim", "⫽": "parsl", "⫽⃥": "nparsl", "♭": "flat", "♮": "natur", "♯": "sharp", "¤": "curren", "¢": "cent", "$": "dollar", "£": "pound", "¥": "yen", "€": "euro", "¹": "sup1", "½": "half", "⅓": "frac13", "¼": "frac14", "⅕": "frac15", "⅙": "frac16", "⅛": "frac18", "²": "sup2", "⅔": "frac23", "⅖": "frac25", "³": "sup3", "¾": "frac34", "⅗": "frac35", "⅜": "frac38", "⅘": "frac45", "⅚": "frac56", "⅝": "frac58", "⅞": "frac78", "𝒶": "ascr", "𝕒": "aopf", "𝔞": "afr", "𝔸": "Aopf", "𝔄": "Afr", "𝒜": "Ascr", "ª": "ordf", "á": "aacute", "Á": "Aacute", "à": "agrave", "À": "Agrave", "ă": "abreve", "Ă": "Abreve", "â": "acirc", "Â": "Acirc", "å": "aring", "Å": "angst", "ä": "auml", "Ä": "Auml", "ã": "atilde", "Ã": "Atilde", "ą": "aogon", "Ą": "Aogon", "ā": "amacr", "Ā": "Amacr", "æ": "aelig", "Æ": "AElig", "𝒷": "bscr", "𝕓": "bopf", "𝔟": "bfr", "𝔹": "Bopf", "ℬ": "Bscr", "𝔅": "Bfr", "𝔠": "cfr", "𝒸": "cscr", "𝕔": "copf", "ℭ": "Cfr", "𝒞": "Cscr", "ℂ": "Copf", "ć": "cacute", "Ć": "Cacute", "ĉ": "ccirc", "Ĉ": "Ccirc", "č": "ccaron", "Č": "Ccaron", "ċ": "cdot", "Ċ": "Cdot", "ç": "ccedil", "Ç": "Ccedil", "℅": "incare", "𝔡": "dfr", "ⅆ": "dd", "𝕕": "dopf", "𝒹": "dscr", "𝒟": "Dscr", "𝔇": "Dfr", "ⅅ": "DD", "𝔻": "Dopf", "ď": "dcaron", "Ď": "Dcaron", "đ": "dstrok", "Đ": "Dstrok", "ð": "eth", "Ð": "ETH", "ⅇ": "ee", "ℯ": "escr", "𝔢": "efr", "𝕖": "eopf", "ℰ": "Escr", "𝔈": "Efr", "𝔼": "Eopf", "é": "eacute", "É": "Eacute", "è": "egrave", "È": "Egrave", "ê": "ecirc", "Ê": "Ecirc", "ě": "ecaron", "Ě": "Ecaron", "ë": "euml", "Ë": "Euml", "ė": "edot", "Ė": "Edot", "ę": "eogon", "Ę": "Eogon", "ē": "emacr", "Ē": "Emacr", "𝔣": "ffr", "𝕗": "fopf", "𝒻": "fscr", "𝔉": "Ffr", "𝔽": "Fopf", "ℱ": "Fscr", "ﬀ": "fflig", "ﬃ": "ffilig", "ﬄ": "ffllig", "ﬁ": "filig", "fj": "fjlig", "ﬂ": "fllig", "ƒ": "fnof", "ℊ": "gscr", "𝕘": "gopf", "𝔤": "gfr", "𝒢": "Gscr", "𝔾": "Gopf", "𝔊": "Gfr", "ǵ": "gacute", "ğ": "gbreve", "Ğ": "Gbreve", "ĝ": "gcirc", "Ĝ": "Gcirc", "ġ": "gdot", "Ġ": "Gdot", "Ģ": "Gcedil", "𝔥": "hfr", "ℎ": "planckh", "𝒽": "hscr", "𝕙": "hopf", "ℋ": "Hscr", "ℌ": "Hfr", "ℍ": "Hopf", "ĥ": "hcirc", "Ĥ": "Hcirc", "ℏ": "hbar", "ħ": "hstrok", "Ħ": "Hstrok", "𝕚": "iopf", "𝔦": "ifr", "𝒾": "iscr", "ⅈ": "ii", "𝕀": "Iopf", "ℐ": "Iscr", "ℑ": "Im", "í": "iacute", "Í": "Iacute", "ì": "igrave", "Ì": "Igrave", "î": "icirc", "Î": "Icirc", "ï": "iuml", "Ï": "Iuml", "ĩ": "itilde", "Ĩ": "Itilde", "İ": "Idot", "į": "iogon", "Į": "Iogon", "ī": "imacr", "Ī": "Imacr", "ĳ": "ijlig", "Ĳ": "IJlig", "ı": "imath", "𝒿": "jscr", "𝕛": "jopf", "𝔧": "jfr", "𝒥": "Jscr", "𝔍": "Jfr", "𝕁": "Jopf", "ĵ": "jcirc", "Ĵ": "Jcirc", "ȷ": "jmath", "𝕜": "kopf", "𝓀": "kscr", "𝔨": "kfr", "𝒦": "Kscr", "𝕂": "Kopf", "𝔎": "Kfr", "ķ": "kcedil", "Ķ": "Kcedil", "𝔩": "lfr", "𝓁": "lscr", "ℓ": "ell", "𝕝": "lopf", "ℒ": "Lscr", "𝔏": "Lfr", "𝕃": "Lopf", "ĺ": "lacute", "Ĺ": "Lacute", "ľ": "lcaron", "Ľ": "Lcaron", "ļ": "lcedil", "Ļ": "Lcedil", "ł": "lstrok", "Ł": "Lstrok", "ŀ": "lmidot", "Ŀ": "Lmidot", "𝔪": "mfr", "𝕞": "mopf", "𝓂": "mscr", "𝔐": "Mfr", "𝕄": "Mopf", "ℳ": "Mscr", "𝔫": "nfr", "𝕟": "nopf", "𝓃": "nscr", "ℕ": "Nopf", "𝒩": "Nscr", "𝔑": "Nfr", "ń": "nacute", "Ń": "Nacute", "ň": "ncaron", "Ň": "Ncaron", "ñ": "ntilde", "Ñ": "Ntilde", "ņ": "ncedil", "Ņ": "Ncedil", "№": "numero", "ŋ": "eng", "Ŋ": "ENG", "𝕠": "oopf", "𝔬": "ofr", "ℴ": "oscr", "𝒪": "Oscr", "𝔒": "Ofr", "𝕆": "Oopf", "º": "ordm", "ó": "oacute", "Ó": "Oacute", "ò": "ograve", "Ò": "Ograve", "ô": "ocirc", "Ô": "Ocirc", "ö": "ouml", "Ö": "Ouml", "ő": "odblac", "Ő": "Odblac", "õ": "otilde", "Õ": "Otilde", "ø": "oslash", "Ø": "Oslash", "ō": "omacr", "Ō": "Omacr", "œ": "oelig", "Œ": "OElig", "𝔭": "pfr", "𝓅": "pscr", "𝕡": "popf", "ℙ": "Popf", "𝔓": "Pfr", "𝒫": "Pscr", "𝕢": "qopf", "𝔮": "qfr", "𝓆": "qscr", "𝒬": "Qscr", "𝔔": "Qfr", "ℚ": "Qopf", "ĸ": "kgreen", "𝔯": "rfr", "𝕣": "ropf", "𝓇": "rscr", "ℛ": "Rscr", "ℜ": "Re", "ℝ": "Ropf", "ŕ": "racute", "Ŕ": "Racute", "ř": "rcaron", "Ř": "Rcaron", "ŗ": "rcedil", "Ŗ": "Rcedil", "𝕤": "sopf", "𝓈": "sscr", "𝔰": "sfr", "𝕊": "Sopf", "𝔖": "Sfr", "𝒮": "Sscr", "Ⓢ": "oS", "ś": "sacute", "Ś": "Sacute", "ŝ": "scirc", "Ŝ": "Scirc", "š": "scaron", "Š": "Scaron", "ş": "scedil", "Ş": "Scedil", "ß": "szlig", "𝔱": "tfr", "𝓉": "tscr", "𝕥": "topf", "𝒯": "Tscr", "𝔗": "Tfr", "𝕋": "Topf", "ť": "tcaron", "Ť": "Tcaron", "ţ": "tcedil", "Ţ": "Tcedil", "™": "trade", "ŧ": "tstrok", "Ŧ": "Tstrok", "𝓊": "uscr", "𝕦": "uopf", "𝔲": "ufr", "𝕌": "Uopf", "𝔘": "Ufr", "𝒰": "Uscr", "ú": "uacute", "Ú": "Uacute", "ù": "ugrave", "Ù": "Ugrave", "ŭ": "ubreve", "Ŭ": "Ubreve", "û": "ucirc", "Û": "Ucirc", "ů": "uring", "Ů": "Uring", "ü": "uuml", "Ü": "Uuml", "ű": "udblac", "Ű": "Udblac", "ũ": "utilde", "Ũ": "Utilde", "ų": "uogon", "Ų": "Uogon", "ū": "umacr", "Ū": "Umacr", "𝔳": "vfr", "𝕧": "vopf", "𝓋": "vscr", "𝔙": "Vfr", "𝕍": "Vopf", "𝒱": "Vscr", "𝕨": "wopf", "𝓌": "wscr", "𝔴": "wfr", "𝒲": "Wscr", "𝕎": "Wopf", "𝔚": "Wfr", "ŵ": "wcirc", "Ŵ": "Wcirc", "𝔵": "xfr", "𝓍": "xscr", "𝕩": "xopf", "𝕏": "Xopf", "𝔛": "Xfr", "𝒳": "Xscr", "𝔶": "yfr", "𝓎": "yscr", "𝕪": "yopf", "𝒴": "Yscr", "𝔜": "Yfr", "𝕐": "Yopf", "ý": "yacute", "Ý": "Yacute", "ŷ": "ycirc", "Ŷ": "Ycirc", "ÿ": "yuml", "Ÿ": "Yuml", "𝓏": "zscr", "𝔷": "zfr", "𝕫": "zopf", "ℨ": "Zfr", "ℤ": "Zopf", "𝒵": "Zscr", "ź": "zacute", "Ź": "Zacute", "ž": "zcaron", "Ž": "Zcaron", "ż": "zdot", "Ż": "Zdot", "Ƶ": "imped", "þ": "thorn", "Þ": "THORN", "ŉ": "napos", "α": "alpha", "Α": "Alpha", "β": "beta", "Β": "Beta", "γ": "gamma", "Γ": "Gamma", "δ": "delta", "Δ": "Delta", "ε": "epsi", "ϵ": "epsiv", "Ε": "Epsilon", "ϝ": "gammad", "Ϝ": "Gammad", "ζ": "zeta", "Ζ": "Zeta", "η": "eta", "Η": "Eta", "θ": "theta", "ϑ": "thetav", "Θ": "Theta", "ι": "iota", "Ι": "Iota", "κ": "kappa", "ϰ": "kappav", "Κ": "Kappa", "λ": "lambda", "Λ": "Lambda", "μ": "mu", "µ": "micro", "Μ": "Mu", "ν": "nu", "Ν": "Nu", "ξ": "xi", "Ξ": "Xi", "ο": "omicron", "Ο": "Omicron", "π": "pi", "ϖ": "piv", "Π": "Pi", "ρ": "rho", "ϱ": "rhov", "Ρ": "Rho", "σ": "sigma", "Σ": "Sigma", "ς": "sigmaf", "τ": "tau", "Τ": "Tau", "υ": "upsi", "Υ": "Upsilon", "ϒ": "Upsi", "φ": "phi", "ϕ": "phiv", "Φ": "Phi", "χ": "chi", "Χ": "Chi", "ψ": "psi", "Ψ": "Psi", "ω": "omega", "Ω": "ohm", "а": "acy", "А": "Acy", "б": "bcy", "Б": "Bcy", "в": "vcy", "В": "Vcy", "г": "gcy", "Г": "Gcy", "ѓ": "gjcy", "Ѓ": "GJcy", "д": "dcy", "Д": "Dcy", "ђ": "djcy", "Ђ": "DJcy", "е": "iecy", "Е": "IEcy", "ё": "iocy", "Ё": "IOcy", "є": "jukcy", "Є": "Jukcy", "ж": "zhcy", "Ж": "ZHcy", "з": "zcy", "З": "Zcy", "ѕ": "dscy", "Ѕ": "DScy", "и": "icy", "И": "Icy", "і": "iukcy", "І": "Iukcy", "ї": "yicy", "Ї": "YIcy", "й": "jcy", "Й": "Jcy", "ј": "jsercy", "Ј": "Jsercy", "к": "kcy", "К": "Kcy", "ќ": "kjcy", "Ќ": "KJcy", "л": "lcy", "Л": "Lcy", "љ": "ljcy", "Љ": "LJcy", "м": "mcy", "М": "Mcy", "н": "ncy", "Н": "Ncy", "њ": "njcy", "Њ": "NJcy", "о": "ocy", "О": "Ocy", "п": "pcy", "П": "Pcy", "р": "rcy", "Р": "Rcy", "с": "scy", "С": "Scy", "т": "tcy", "Т": "Tcy", "ћ": "tshcy", "Ћ": "TSHcy", "у": "ucy", "У": "Ucy", "ў": "ubrcy", "Ў": "Ubrcy", "ф": "fcy", "Ф": "Fcy", "х": "khcy", "Х": "KHcy", "ц": "tscy", "Ц": "TScy", "ч": "chcy", "Ч": "CHcy", "џ": "dzcy", "Џ": "DZcy", "ш": "shcy", "Ш": "SHcy", "щ": "shchcy", "Щ": "SHCHcy", "ъ": "hardcy", "Ъ": "HARDcy", "ы": "ycy", "Ы": "Ycy", "ь": "softcy", "Ь": "SOFTcy", "э": "ecy", "Э": "Ecy", "ю": "yucy", "Ю": "YUcy", "я": "yacy", "Я": "YAcy", "ℵ": "aleph", "ℶ": "beth", "ℷ": "gimel", "ℸ": "daleth" };
      var regexEscape = /["&'<>`]/g;
      var escapeMap = {
        '"': "&quot;",
        "&": "&amp;",
        "'": "&#x27;",
        "<": "&lt;",
        // See https://mathiasbynens.be/notes/ambiguous-ampersands: in HTML, the
        // following is not strictly necessary unless it’s part of a tag or an
        // unquoted attribute value. We’re only escaping it to support those
        // situations, and for XML support.
        ">": "&gt;",
        // In Internet Explorer ≤ 8, the backtick character can be used
        // to break out of (un)quoted attribute values or HTML comments.
        // See http://html5sec.org/#102, http://html5sec.org/#108, and
        // http://html5sec.org/#133.
        "`": "&#x60;"
      };
      var regexInvalidEntity = /&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/;
      var regexInvalidRawCodePoint = /[\0-\x08\x0B\x0E-\x1F\x7F-\x9F\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
      var regexDecode = /&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g;
      var decodeMap = { "aacute": "á", "Aacute": "Á", "abreve": "ă", "Abreve": "Ă", "ac": "∾", "acd": "∿", "acE": "∾̳", "acirc": "â", "Acirc": "Â", "acute": "´", "acy": "а", "Acy": "А", "aelig": "æ", "AElig": "Æ", "af": "⁡", "afr": "𝔞", "Afr": "𝔄", "agrave": "à", "Agrave": "À", "alefsym": "ℵ", "aleph": "ℵ", "alpha": "α", "Alpha": "Α", "amacr": "ā", "Amacr": "Ā", "amalg": "⨿", "amp": "&", "AMP": "&", "and": "∧", "And": "⩓", "andand": "⩕", "andd": "⩜", "andslope": "⩘", "andv": "⩚", "ang": "∠", "ange": "⦤", "angle": "∠", "angmsd": "∡", "angmsdaa": "⦨", "angmsdab": "⦩", "angmsdac": "⦪", "angmsdad": "⦫", "angmsdae": "⦬", "angmsdaf": "⦭", "angmsdag": "⦮", "angmsdah": "⦯", "angrt": "∟", "angrtvb": "⊾", "angrtvbd": "⦝", "angsph": "∢", "angst": "Å", "angzarr": "⍼", "aogon": "ą", "Aogon": "Ą", "aopf": "𝕒", "Aopf": "𝔸", "ap": "≈", "apacir": "⩯", "ape": "≊", "apE": "⩰", "apid": "≋", "apos": "'", "ApplyFunction": "⁡", "approx": "≈", "approxeq": "≊", "aring": "å", "Aring": "Å", "ascr": "𝒶", "Ascr": "𝒜", "Assign": "≔", "ast": "*", "asymp": "≈", "asympeq": "≍", "atilde": "ã", "Atilde": "Ã", "auml": "ä", "Auml": "Ä", "awconint": "∳", "awint": "⨑", "backcong": "≌", "backepsilon": "϶", "backprime": "‵", "backsim": "∽", "backsimeq": "⋍", "Backslash": "∖", "Barv": "⫧", "barvee": "⊽", "barwed": "⌅", "Barwed": "⌆", "barwedge": "⌅", "bbrk": "⎵", "bbrktbrk": "⎶", "bcong": "≌", "bcy": "б", "Bcy": "Б", "bdquo": "„", "becaus": "∵", "because": "∵", "Because": "∵", "bemptyv": "⦰", "bepsi": "϶", "bernou": "ℬ", "Bernoullis": "ℬ", "beta": "β", "Beta": "Β", "beth": "ℶ", "between": "≬", "bfr": "𝔟", "Bfr": "𝔅", "bigcap": "⋂", "bigcirc": "◯", "bigcup": "⋃", "bigodot": "⨀", "bigoplus": "⨁", "bigotimes": "⨂", "bigsqcup": "⨆", "bigstar": "★", "bigtriangledown": "▽", "bigtriangleup": "△", "biguplus": "⨄", "bigvee": "⋁", "bigwedge": "⋀", "bkarow": "⤍", "blacklozenge": "⧫", "blacksquare": "▪", "blacktriangle": "▴", "blacktriangledown": "▾", "blacktriangleleft": "◂", "blacktriangleright": "▸", "blank": "␣", "blk12": "▒", "blk14": "░", "blk34": "▓", "block": "█", "bne": "=⃥", "bnequiv": "≡⃥", "bnot": "⌐", "bNot": "⫭", "bopf": "𝕓", "Bopf": "𝔹", "bot": "⊥", "bottom": "⊥", "bowtie": "⋈", "boxbox": "⧉", "boxdl": "┐", "boxdL": "╕", "boxDl": "╖", "boxDL": "╗", "boxdr": "┌", "boxdR": "╒", "boxDr": "╓", "boxDR": "╔", "boxh": "─", "boxH": "═", "boxhd": "┬", "boxhD": "╥", "boxHd": "╤", "boxHD": "╦", "boxhu": "┴", "boxhU": "╨", "boxHu": "╧", "boxHU": "╩", "boxminus": "⊟", "boxplus": "⊞", "boxtimes": "⊠", "boxul": "┘", "boxuL": "╛", "boxUl": "╜", "boxUL": "╝", "boxur": "└", "boxuR": "╘", "boxUr": "╙", "boxUR": "╚", "boxv": "│", "boxV": "║", "boxvh": "┼", "boxvH": "╪", "boxVh": "╫", "boxVH": "╬", "boxvl": "┤", "boxvL": "╡", "boxVl": "╢", "boxVL": "╣", "boxvr": "├", "boxvR": "╞", "boxVr": "╟", "boxVR": "╠", "bprime": "‵", "breve": "˘", "Breve": "˘", "brvbar": "¦", "bscr": "𝒷", "Bscr": "ℬ", "bsemi": "⁏", "bsim": "∽", "bsime": "⋍", "bsol": "\\", "bsolb": "⧅", "bsolhsub": "⟈", "bull": "•", "bullet": "•", "bump": "≎", "bumpe": "≏", "bumpE": "⪮", "bumpeq": "≏", "Bumpeq": "≎", "cacute": "ć", "Cacute": "Ć", "cap": "∩", "Cap": "⋒", "capand": "⩄", "capbrcup": "⩉", "capcap": "⩋", "capcup": "⩇", "capdot": "⩀", "CapitalDifferentialD": "ⅅ", "caps": "∩︀", "caret": "⁁", "caron": "ˇ", "Cayleys": "ℭ", "ccaps": "⩍", "ccaron": "č", "Ccaron": "Č", "ccedil": "ç", "Ccedil": "Ç", "ccirc": "ĉ", "Ccirc": "Ĉ", "Cconint": "∰", "ccups": "⩌", "ccupssm": "⩐", "cdot": "ċ", "Cdot": "Ċ", "cedil": "¸", "Cedilla": "¸", "cemptyv": "⦲", "cent": "¢", "centerdot": "·", "CenterDot": "·", "cfr": "𝔠", "Cfr": "ℭ", "chcy": "ч", "CHcy": "Ч", "check": "✓", "checkmark": "✓", "chi": "χ", "Chi": "Χ", "cir": "○", "circ": "ˆ", "circeq": "≗", "circlearrowleft": "↺", "circlearrowright": "↻", "circledast": "⊛", "circledcirc": "⊚", "circleddash": "⊝", "CircleDot": "⊙", "circledR": "®", "circledS": "Ⓢ", "CircleMinus": "⊖", "CirclePlus": "⊕", "CircleTimes": "⊗", "cire": "≗", "cirE": "⧃", "cirfnint": "⨐", "cirmid": "⫯", "cirscir": "⧂", "ClockwiseContourIntegral": "∲", "CloseCurlyDoubleQuote": "”", "CloseCurlyQuote": "’", "clubs": "♣", "clubsuit": "♣", "colon": ":", "Colon": "∷", "colone": "≔", "Colone": "⩴", "coloneq": "≔", "comma": ",", "commat": "@", "comp": "∁", "compfn": "∘", "complement": "∁", "complexes": "ℂ", "cong": "≅", "congdot": "⩭", "Congruent": "≡", "conint": "∮", "Conint": "∯", "ContourIntegral": "∮", "copf": "𝕔", "Copf": "ℂ", "coprod": "∐", "Coproduct": "∐", "copy": "©", "COPY": "©", "copysr": "℗", "CounterClockwiseContourIntegral": "∳", "crarr": "↵", "cross": "✗", "Cross": "⨯", "cscr": "𝒸", "Cscr": "𝒞", "csub": "⫏", "csube": "⫑", "csup": "⫐", "csupe": "⫒", "ctdot": "⋯", "cudarrl": "⤸", "cudarrr": "⤵", "cuepr": "⋞", "cuesc": "⋟", "cularr": "↶", "cularrp": "⤽", "cup": "∪", "Cup": "⋓", "cupbrcap": "⩈", "cupcap": "⩆", "CupCap": "≍", "cupcup": "⩊", "cupdot": "⊍", "cupor": "⩅", "cups": "∪︀", "curarr": "↷", "curarrm": "⤼", "curlyeqprec": "⋞", "curlyeqsucc": "⋟", "curlyvee": "⋎", "curlywedge": "⋏", "curren": "¤", "curvearrowleft": "↶", "curvearrowright": "↷", "cuvee": "⋎", "cuwed": "⋏", "cwconint": "∲", "cwint": "∱", "cylcty": "⌭", "dagger": "†", "Dagger": "‡", "daleth": "ℸ", "darr": "↓", "dArr": "⇓", "Darr": "↡", "dash": "‐", "dashv": "⊣", "Dashv": "⫤", "dbkarow": "⤏", "dblac": "˝", "dcaron": "ď", "Dcaron": "Ď", "dcy": "д", "Dcy": "Д", "dd": "ⅆ", "DD": "ⅅ", "ddagger": "‡", "ddarr": "⇊", "DDotrahd": "⤑", "ddotseq": "⩷", "deg": "°", "Del": "∇", "delta": "δ", "Delta": "Δ", "demptyv": "⦱", "dfisht": "⥿", "dfr": "𝔡", "Dfr": "𝔇", "dHar": "⥥", "dharl": "⇃", "dharr": "⇂", "DiacriticalAcute": "´", "DiacriticalDot": "˙", "DiacriticalDoubleAcute": "˝", "DiacriticalGrave": "`", "DiacriticalTilde": "˜", "diam": "⋄", "diamond": "⋄", "Diamond": "⋄", "diamondsuit": "♦", "diams": "♦", "die": "¨", "DifferentialD": "ⅆ", "digamma": "ϝ", "disin": "⋲", "div": "÷", "divide": "÷", "divideontimes": "⋇", "divonx": "⋇", "djcy": "ђ", "DJcy": "Ђ", "dlcorn": "⌞", "dlcrop": "⌍", "dollar": "$", "dopf": "𝕕", "Dopf": "𝔻", "dot": "˙", "Dot": "¨", "DotDot": "⃜", "doteq": "≐", "doteqdot": "≑", "DotEqual": "≐", "dotminus": "∸", "dotplus": "∔", "dotsquare": "⊡", "doublebarwedge": "⌆", "DoubleContourIntegral": "∯", "DoubleDot": "¨", "DoubleDownArrow": "⇓", "DoubleLeftArrow": "⇐", "DoubleLeftRightArrow": "⇔", "DoubleLeftTee": "⫤", "DoubleLongLeftArrow": "⟸", "DoubleLongLeftRightArrow": "⟺", "DoubleLongRightArrow": "⟹", "DoubleRightArrow": "⇒", "DoubleRightTee": "⊨", "DoubleUpArrow": "⇑", "DoubleUpDownArrow": "⇕", "DoubleVerticalBar": "∥", "downarrow": "↓", "Downarrow": "⇓", "DownArrow": "↓", "DownArrowBar": "⤓", "DownArrowUpArrow": "⇵", "DownBreve": "̑", "downdownarrows": "⇊", "downharpoonleft": "⇃", "downharpoonright": "⇂", "DownLeftRightVector": "⥐", "DownLeftTeeVector": "⥞", "DownLeftVector": "↽", "DownLeftVectorBar": "⥖", "DownRightTeeVector": "⥟", "DownRightVector": "⇁", "DownRightVectorBar": "⥗", "DownTee": "⊤", "DownTeeArrow": "↧", "drbkarow": "⤐", "drcorn": "⌟", "drcrop": "⌌", "dscr": "𝒹", "Dscr": "𝒟", "dscy": "ѕ", "DScy": "Ѕ", "dsol": "⧶", "dstrok": "đ", "Dstrok": "Đ", "dtdot": "⋱", "dtri": "▿", "dtrif": "▾", "duarr": "⇵", "duhar": "⥯", "dwangle": "⦦", "dzcy": "џ", "DZcy": "Џ", "dzigrarr": "⟿", "eacute": "é", "Eacute": "É", "easter": "⩮", "ecaron": "ě", "Ecaron": "Ě", "ecir": "≖", "ecirc": "ê", "Ecirc": "Ê", "ecolon": "≕", "ecy": "э", "Ecy": "Э", "eDDot": "⩷", "edot": "ė", "eDot": "≑", "Edot": "Ė", "ee": "ⅇ", "efDot": "≒", "efr": "𝔢", "Efr": "𝔈", "eg": "⪚", "egrave": "è", "Egrave": "È", "egs": "⪖", "egsdot": "⪘", "el": "⪙", "Element": "∈", "elinters": "⏧", "ell": "ℓ", "els": "⪕", "elsdot": "⪗", "emacr": "ē", "Emacr": "Ē", "empty": "∅", "emptyset": "∅", "EmptySmallSquare": "◻", "emptyv": "∅", "EmptyVerySmallSquare": "▫", "emsp": " ", "emsp13": " ", "emsp14": " ", "eng": "ŋ", "ENG": "Ŋ", "ensp": " ", "eogon": "ę", "Eogon": "Ę", "eopf": "𝕖", "Eopf": "𝔼", "epar": "⋕", "eparsl": "⧣", "eplus": "⩱", "epsi": "ε", "epsilon": "ε", "Epsilon": "Ε", "epsiv": "ϵ", "eqcirc": "≖", "eqcolon": "≕", "eqsim": "≂", "eqslantgtr": "⪖", "eqslantless": "⪕", "Equal": "⩵", "equals": "=", "EqualTilde": "≂", "equest": "≟", "Equilibrium": "⇌", "equiv": "≡", "equivDD": "⩸", "eqvparsl": "⧥", "erarr": "⥱", "erDot": "≓", "escr": "ℯ", "Escr": "ℰ", "esdot": "≐", "esim": "≂", "Esim": "⩳", "eta": "η", "Eta": "Η", "eth": "ð", "ETH": "Ð", "euml": "ë", "Euml": "Ë", "euro": "€", "excl": "!", "exist": "∃", "Exists": "∃", "expectation": "ℰ", "exponentiale": "ⅇ", "ExponentialE": "ⅇ", "fallingdotseq": "≒", "fcy": "ф", "Fcy": "Ф", "female": "♀", "ffilig": "ﬃ", "fflig": "ﬀ", "ffllig": "ﬄ", "ffr": "𝔣", "Ffr": "𝔉", "filig": "ﬁ", "FilledSmallSquare": "◼", "FilledVerySmallSquare": "▪", "fjlig": "fj", "flat": "♭", "fllig": "ﬂ", "fltns": "▱", "fnof": "ƒ", "fopf": "𝕗", "Fopf": "𝔽", "forall": "∀", "ForAll": "∀", "fork": "⋔", "forkv": "⫙", "Fouriertrf": "ℱ", "fpartint": "⨍", "frac12": "½", "frac13": "⅓", "frac14": "¼", "frac15": "⅕", "frac16": "⅙", "frac18": "⅛", "frac23": "⅔", "frac25": "⅖", "frac34": "¾", "frac35": "⅗", "frac38": "⅜", "frac45": "⅘", "frac56": "⅚", "frac58": "⅝", "frac78": "⅞", "frasl": "⁄", "frown": "⌢", "fscr": "𝒻", "Fscr": "ℱ", "gacute": "ǵ", "gamma": "γ", "Gamma": "Γ", "gammad": "ϝ", "Gammad": "Ϝ", "gap": "⪆", "gbreve": "ğ", "Gbreve": "Ğ", "Gcedil": "Ģ", "gcirc": "ĝ", "Gcirc": "Ĝ", "gcy": "г", "Gcy": "Г", "gdot": "ġ", "Gdot": "Ġ", "ge": "≥", "gE": "≧", "gel": "⋛", "gEl": "⪌", "geq": "≥", "geqq": "≧", "geqslant": "⩾", "ges": "⩾", "gescc": "⪩", "gesdot": "⪀", "gesdoto": "⪂", "gesdotol": "⪄", "gesl": "⋛︀", "gesles": "⪔", "gfr": "𝔤", "Gfr": "𝔊", "gg": "≫", "Gg": "⋙", "ggg": "⋙", "gimel": "ℷ", "gjcy": "ѓ", "GJcy": "Ѓ", "gl": "≷", "gla": "⪥", "glE": "⪒", "glj": "⪤", "gnap": "⪊", "gnapprox": "⪊", "gne": "⪈", "gnE": "≩", "gneq": "⪈", "gneqq": "≩", "gnsim": "⋧", "gopf": "𝕘", "Gopf": "𝔾", "grave": "`", "GreaterEqual": "≥", "GreaterEqualLess": "⋛", "GreaterFullEqual": "≧", "GreaterGreater": "⪢", "GreaterLess": "≷", "GreaterSlantEqual": "⩾", "GreaterTilde": "≳", "gscr": "ℊ", "Gscr": "𝒢", "gsim": "≳", "gsime": "⪎", "gsiml": "⪐", "gt": ">", "Gt": "≫", "GT": ">", "gtcc": "⪧", "gtcir": "⩺", "gtdot": "⋗", "gtlPar": "⦕", "gtquest": "⩼", "gtrapprox": "⪆", "gtrarr": "⥸", "gtrdot": "⋗", "gtreqless": "⋛", "gtreqqless": "⪌", "gtrless": "≷", "gtrsim": "≳", "gvertneqq": "≩︀", "gvnE": "≩︀", "Hacek": "ˇ", "hairsp": " ", "half": "½", "hamilt": "ℋ", "hardcy": "ъ", "HARDcy": "Ъ", "harr": "↔", "hArr": "⇔", "harrcir": "⥈", "harrw": "↭", "Hat": "^", "hbar": "ℏ", "hcirc": "ĥ", "Hcirc": "Ĥ", "hearts": "♥", "heartsuit": "♥", "hellip": "…", "hercon": "⊹", "hfr": "𝔥", "Hfr": "ℌ", "HilbertSpace": "ℋ", "hksearow": "⤥", "hkswarow": "⤦", "hoarr": "⇿", "homtht": "∻", "hookleftarrow": "↩", "hookrightarrow": "↪", "hopf": "𝕙", "Hopf": "ℍ", "horbar": "―", "HorizontalLine": "─", "hscr": "𝒽", "Hscr": "ℋ", "hslash": "ℏ", "hstrok": "ħ", "Hstrok": "Ħ", "HumpDownHump": "≎", "HumpEqual": "≏", "hybull": "⁃", "hyphen": "‐", "iacute": "í", "Iacute": "Í", "ic": "⁣", "icirc": "î", "Icirc": "Î", "icy": "и", "Icy": "И", "Idot": "İ", "iecy": "е", "IEcy": "Е", "iexcl": "¡", "iff": "⇔", "ifr": "𝔦", "Ifr": "ℑ", "igrave": "ì", "Igrave": "Ì", "ii": "ⅈ", "iiiint": "⨌", "iiint": "∭", "iinfin": "⧜", "iiota": "℩", "ijlig": "ĳ", "IJlig": "Ĳ", "Im": "ℑ", "imacr": "ī", "Imacr": "Ī", "image": "ℑ", "ImaginaryI": "ⅈ", "imagline": "ℐ", "imagpart": "ℑ", "imath": "ı", "imof": "⊷", "imped": "Ƶ", "Implies": "⇒", "in": "∈", "incare": "℅", "infin": "∞", "infintie": "⧝", "inodot": "ı", "int": "∫", "Int": "∬", "intcal": "⊺", "integers": "ℤ", "Integral": "∫", "intercal": "⊺", "Intersection": "⋂", "intlarhk": "⨗", "intprod": "⨼", "InvisibleComma": "⁣", "InvisibleTimes": "⁢", "iocy": "ё", "IOcy": "Ё", "iogon": "į", "Iogon": "Į", "iopf": "𝕚", "Iopf": "𝕀", "iota": "ι", "Iota": "Ι", "iprod": "⨼", "iquest": "¿", "iscr": "𝒾", "Iscr": "ℐ", "isin": "∈", "isindot": "⋵", "isinE": "⋹", "isins": "⋴", "isinsv": "⋳", "isinv": "∈", "it": "⁢", "itilde": "ĩ", "Itilde": "Ĩ", "iukcy": "і", "Iukcy": "І", "iuml": "ï", "Iuml": "Ï", "jcirc": "ĵ", "Jcirc": "Ĵ", "jcy": "й", "Jcy": "Й", "jfr": "𝔧", "Jfr": "𝔍", "jmath": "ȷ", "jopf": "𝕛", "Jopf": "𝕁", "jscr": "𝒿", "Jscr": "𝒥", "jsercy": "ј", "Jsercy": "Ј", "jukcy": "є", "Jukcy": "Є", "kappa": "κ", "Kappa": "Κ", "kappav": "ϰ", "kcedil": "ķ", "Kcedil": "Ķ", "kcy": "к", "Kcy": "К", "kfr": "𝔨", "Kfr": "𝔎", "kgreen": "ĸ", "khcy": "х", "KHcy": "Х", "kjcy": "ќ", "KJcy": "Ќ", "kopf": "𝕜", "Kopf": "𝕂", "kscr": "𝓀", "Kscr": "𝒦", "lAarr": "⇚", "lacute": "ĺ", "Lacute": "Ĺ", "laemptyv": "⦴", "lagran": "ℒ", "lambda": "λ", "Lambda": "Λ", "lang": "⟨", "Lang": "⟪", "langd": "⦑", "langle": "⟨", "lap": "⪅", "Laplacetrf": "ℒ", "laquo": "«", "larr": "←", "lArr": "⇐", "Larr": "↞", "larrb": "⇤", "larrbfs": "⤟", "larrfs": "⤝", "larrhk": "↩", "larrlp": "↫", "larrpl": "⤹", "larrsim": "⥳", "larrtl": "↢", "lat": "⪫", "latail": "⤙", "lAtail": "⤛", "late": "⪭", "lates": "⪭︀", "lbarr": "⤌", "lBarr": "⤎", "lbbrk": "❲", "lbrace": "{", "lbrack": "[", "lbrke": "⦋", "lbrksld": "⦏", "lbrkslu": "⦍", "lcaron": "ľ", "Lcaron": "Ľ", "lcedil": "ļ", "Lcedil": "Ļ", "lceil": "⌈", "lcub": "{", "lcy": "л", "Lcy": "Л", "ldca": "⤶", "ldquo": "“", "ldquor": "„", "ldrdhar": "⥧", "ldrushar": "⥋", "ldsh": "↲", "le": "≤", "lE": "≦", "LeftAngleBracket": "⟨", "leftarrow": "←", "Leftarrow": "⇐", "LeftArrow": "←", "LeftArrowBar": "⇤", "LeftArrowRightArrow": "⇆", "leftarrowtail": "↢", "LeftCeiling": "⌈", "LeftDoubleBracket": "⟦", "LeftDownTeeVector": "⥡", "LeftDownVector": "⇃", "LeftDownVectorBar": "⥙", "LeftFloor": "⌊", "leftharpoondown": "↽", "leftharpoonup": "↼", "leftleftarrows": "⇇", "leftrightarrow": "↔", "Leftrightarrow": "⇔", "LeftRightArrow": "↔", "leftrightarrows": "⇆", "leftrightharpoons": "⇋", "leftrightsquigarrow": "↭", "LeftRightVector": "⥎", "LeftTee": "⊣", "LeftTeeArrow": "↤", "LeftTeeVector": "⥚", "leftthreetimes": "⋋", "LeftTriangle": "⊲", "LeftTriangleBar": "⧏", "LeftTriangleEqual": "⊴", "LeftUpDownVector": "⥑", "LeftUpTeeVector": "⥠", "LeftUpVector": "↿", "LeftUpVectorBar": "⥘", "LeftVector": "↼", "LeftVectorBar": "⥒", "leg": "⋚", "lEg": "⪋", "leq": "≤", "leqq": "≦", "leqslant": "⩽", "les": "⩽", "lescc": "⪨", "lesdot": "⩿", "lesdoto": "⪁", "lesdotor": "⪃", "lesg": "⋚︀", "lesges": "⪓", "lessapprox": "⪅", "lessdot": "⋖", "lesseqgtr": "⋚", "lesseqqgtr": "⪋", "LessEqualGreater": "⋚", "LessFullEqual": "≦", "LessGreater": "≶", "lessgtr": "≶", "LessLess": "⪡", "lesssim": "≲", "LessSlantEqual": "⩽", "LessTilde": "≲", "lfisht": "⥼", "lfloor": "⌊", "lfr": "𝔩", "Lfr": "𝔏", "lg": "≶", "lgE": "⪑", "lHar": "⥢", "lhard": "↽", "lharu": "↼", "lharul": "⥪", "lhblk": "▄", "ljcy": "љ", "LJcy": "Љ", "ll": "≪", "Ll": "⋘", "llarr": "⇇", "llcorner": "⌞", "Lleftarrow": "⇚", "llhard": "⥫", "lltri": "◺", "lmidot": "ŀ", "Lmidot": "Ŀ", "lmoust": "⎰", "lmoustache": "⎰", "lnap": "⪉", "lnapprox": "⪉", "lne": "⪇", "lnE": "≨", "lneq": "⪇", "lneqq": "≨", "lnsim": "⋦", "loang": "⟬", "loarr": "⇽", "lobrk": "⟦", "longleftarrow": "⟵", "Longleftarrow": "⟸", "LongLeftArrow": "⟵", "longleftrightarrow": "⟷", "Longleftrightarrow": "⟺", "LongLeftRightArrow": "⟷", "longmapsto": "⟼", "longrightarrow": "⟶", "Longrightarrow": "⟹", "LongRightArrow": "⟶", "looparrowleft": "↫", "looparrowright": "↬", "lopar": "⦅", "lopf": "𝕝", "Lopf": "𝕃", "loplus": "⨭", "lotimes": "⨴", "lowast": "∗", "lowbar": "_", "LowerLeftArrow": "↙", "LowerRightArrow": "↘", "loz": "◊", "lozenge": "◊", "lozf": "⧫", "lpar": "(", "lparlt": "⦓", "lrarr": "⇆", "lrcorner": "⌟", "lrhar": "⇋", "lrhard": "⥭", "lrm": "‎", "lrtri": "⊿", "lsaquo": "‹", "lscr": "𝓁", "Lscr": "ℒ", "lsh": "↰", "Lsh": "↰", "lsim": "≲", "lsime": "⪍", "lsimg": "⪏", "lsqb": "[", "lsquo": "‘", "lsquor": "‚", "lstrok": "ł", "Lstrok": "Ł", "lt": "<", "Lt": "≪", "LT": "<", "ltcc": "⪦", "ltcir": "⩹", "ltdot": "⋖", "lthree": "⋋", "ltimes": "⋉", "ltlarr": "⥶", "ltquest": "⩻", "ltri": "◃", "ltrie": "⊴", "ltrif": "◂", "ltrPar": "⦖", "lurdshar": "⥊", "luruhar": "⥦", "lvertneqq": "≨︀", "lvnE": "≨︀", "macr": "¯", "male": "♂", "malt": "✠", "maltese": "✠", "map": "↦", "Map": "⤅", "mapsto": "↦", "mapstodown": "↧", "mapstoleft": "↤", "mapstoup": "↥", "marker": "▮", "mcomma": "⨩", "mcy": "м", "Mcy": "М", "mdash": "—", "mDDot": "∺", "measuredangle": "∡", "MediumSpace": " ", "Mellintrf": "ℳ", "mfr": "𝔪", "Mfr": "𝔐", "mho": "℧", "micro": "µ", "mid": "∣", "midast": "*", "midcir": "⫰", "middot": "·", "minus": "−", "minusb": "⊟", "minusd": "∸", "minusdu": "⨪", "MinusPlus": "∓", "mlcp": "⫛", "mldr": "…", "mnplus": "∓", "models": "⊧", "mopf": "𝕞", "Mopf": "𝕄", "mp": "∓", "mscr": "𝓂", "Mscr": "ℳ", "mstpos": "∾", "mu": "μ", "Mu": "Μ", "multimap": "⊸", "mumap": "⊸", "nabla": "∇", "nacute": "ń", "Nacute": "Ń", "nang": "∠⃒", "nap": "≉", "napE": "⩰̸", "napid": "≋̸", "napos": "ŉ", "napprox": "≉", "natur": "♮", "natural": "♮", "naturals": "ℕ", "nbsp": " ", "nbump": "≎̸", "nbumpe": "≏̸", "ncap": "⩃", "ncaron": "ň", "Ncaron": "Ň", "ncedil": "ņ", "Ncedil": "Ņ", "ncong": "≇", "ncongdot": "⩭̸", "ncup": "⩂", "ncy": "н", "Ncy": "Н", "ndash": "–", "ne": "≠", "nearhk": "⤤", "nearr": "↗", "neArr": "⇗", "nearrow": "↗", "nedot": "≐̸", "NegativeMediumSpace": "​", "NegativeThickSpace": "​", "NegativeThinSpace": "​", "NegativeVeryThinSpace": "​", "nequiv": "≢", "nesear": "⤨", "nesim": "≂̸", "NestedGreaterGreater": "≫", "NestedLessLess": "≪", "NewLine": "\n", "nexist": "∄", "nexists": "∄", "nfr": "𝔫", "Nfr": "𝔑", "nge": "≱", "ngE": "≧̸", "ngeq": "≱", "ngeqq": "≧̸", "ngeqslant": "⩾̸", "nges": "⩾̸", "nGg": "⋙̸", "ngsim": "≵", "ngt": "≯", "nGt": "≫⃒", "ngtr": "≯", "nGtv": "≫̸", "nharr": "↮", "nhArr": "⇎", "nhpar": "⫲", "ni": "∋", "nis": "⋼", "nisd": "⋺", "niv": "∋", "njcy": "њ", "NJcy": "Њ", "nlarr": "↚", "nlArr": "⇍", "nldr": "‥", "nle": "≰", "nlE": "≦̸", "nleftarrow": "↚", "nLeftarrow": "⇍", "nleftrightarrow": "↮", "nLeftrightarrow": "⇎", "nleq": "≰", "nleqq": "≦̸", "nleqslant": "⩽̸", "nles": "⩽̸", "nless": "≮", "nLl": "⋘̸", "nlsim": "≴", "nlt": "≮", "nLt": "≪⃒", "nltri": "⋪", "nltrie": "⋬", "nLtv": "≪̸", "nmid": "∤", "NoBreak": "⁠", "NonBreakingSpace": " ", "nopf": "𝕟", "Nopf": "ℕ", "not": "¬", "Not": "⫬", "NotCongruent": "≢", "NotCupCap": "≭", "NotDoubleVerticalBar": "∦", "NotElement": "∉", "NotEqual": "≠", "NotEqualTilde": "≂̸", "NotExists": "∄", "NotGreater": "≯", "NotGreaterEqual": "≱", "NotGreaterFullEqual": "≧̸", "NotGreaterGreater": "≫̸", "NotGreaterLess": "≹", "NotGreaterSlantEqual": "⩾̸", "NotGreaterTilde": "≵", "NotHumpDownHump": "≎̸", "NotHumpEqual": "≏̸", "notin": "∉", "notindot": "⋵̸", "notinE": "⋹̸", "notinva": "∉", "notinvb": "⋷", "notinvc": "⋶", "NotLeftTriangle": "⋪", "NotLeftTriangleBar": "⧏̸", "NotLeftTriangleEqual": "⋬", "NotLess": "≮", "NotLessEqual": "≰", "NotLessGreater": "≸", "NotLessLess": "≪̸", "NotLessSlantEqual": "⩽̸", "NotLessTilde": "≴", "NotNestedGreaterGreater": "⪢̸", "NotNestedLessLess": "⪡̸", "notni": "∌", "notniva": "∌", "notnivb": "⋾", "notnivc": "⋽", "NotPrecedes": "⊀", "NotPrecedesEqual": "⪯̸", "NotPrecedesSlantEqual": "⋠", "NotReverseElement": "∌", "NotRightTriangle": "⋫", "NotRightTriangleBar": "⧐̸", "NotRightTriangleEqual": "⋭", "NotSquareSubset": "⊏̸", "NotSquareSubsetEqual": "⋢", "NotSquareSuperset": "⊐̸", "NotSquareSupersetEqual": "⋣", "NotSubset": "⊂⃒", "NotSubsetEqual": "⊈", "NotSucceeds": "⊁", "NotSucceedsEqual": "⪰̸", "NotSucceedsSlantEqual": "⋡", "NotSucceedsTilde": "≿̸", "NotSuperset": "⊃⃒", "NotSupersetEqual": "⊉", "NotTilde": "≁", "NotTildeEqual": "≄", "NotTildeFullEqual": "≇", "NotTildeTilde": "≉", "NotVerticalBar": "∤", "npar": "∦", "nparallel": "∦", "nparsl": "⫽⃥", "npart": "∂̸", "npolint": "⨔", "npr": "⊀", "nprcue": "⋠", "npre": "⪯̸", "nprec": "⊀", "npreceq": "⪯̸", "nrarr": "↛", "nrArr": "⇏", "nrarrc": "⤳̸", "nrarrw": "↝̸", "nrightarrow": "↛", "nRightarrow": "⇏", "nrtri": "⋫", "nrtrie": "⋭", "nsc": "⊁", "nsccue": "⋡", "nsce": "⪰̸", "nscr": "𝓃", "Nscr": "𝒩", "nshortmid": "∤", "nshortparallel": "∦", "nsim": "≁", "nsime": "≄", "nsimeq": "≄", "nsmid": "∤", "nspar": "∦", "nsqsube": "⋢", "nsqsupe": "⋣", "nsub": "⊄", "nsube": "⊈", "nsubE": "⫅̸", "nsubset": "⊂⃒", "nsubseteq": "⊈", "nsubseteqq": "⫅̸", "nsucc": "⊁", "nsucceq": "⪰̸", "nsup": "⊅", "nsupe": "⊉", "nsupE": "⫆̸", "nsupset": "⊃⃒", "nsupseteq": "⊉", "nsupseteqq": "⫆̸", "ntgl": "≹", "ntilde": "ñ", "Ntilde": "Ñ", "ntlg": "≸", "ntriangleleft": "⋪", "ntrianglelefteq": "⋬", "ntriangleright": "⋫", "ntrianglerighteq": "⋭", "nu": "ν", "Nu": "Ν", "num": "#", "numero": "№", "numsp": " ", "nvap": "≍⃒", "nvdash": "⊬", "nvDash": "⊭", "nVdash": "⊮", "nVDash": "⊯", "nvge": "≥⃒", "nvgt": ">⃒", "nvHarr": "⤄", "nvinfin": "⧞", "nvlArr": "⤂", "nvle": "≤⃒", "nvlt": "<⃒", "nvltrie": "⊴⃒", "nvrArr": "⤃", "nvrtrie": "⊵⃒", "nvsim": "∼⃒", "nwarhk": "⤣", "nwarr": "↖", "nwArr": "⇖", "nwarrow": "↖", "nwnear": "⤧", "oacute": "ó", "Oacute": "Ó", "oast": "⊛", "ocir": "⊚", "ocirc": "ô", "Ocirc": "Ô", "ocy": "о", "Ocy": "О", "odash": "⊝", "odblac": "ő", "Odblac": "Ő", "odiv": "⨸", "odot": "⊙", "odsold": "⦼", "oelig": "œ", "OElig": "Œ", "ofcir": "⦿", "ofr": "𝔬", "Ofr": "𝔒", "ogon": "˛", "ograve": "ò", "Ograve": "Ò", "ogt": "⧁", "ohbar": "⦵", "ohm": "Ω", "oint": "∮", "olarr": "↺", "olcir": "⦾", "olcross": "⦻", "oline": "‾", "olt": "⧀", "omacr": "ō", "Omacr": "Ō", "omega": "ω", "Omega": "Ω", "omicron": "ο", "Omicron": "Ο", "omid": "⦶", "ominus": "⊖", "oopf": "𝕠", "Oopf": "𝕆", "opar": "⦷", "OpenCurlyDoubleQuote": "“", "OpenCurlyQuote": "‘", "operp": "⦹", "oplus": "⊕", "or": "∨", "Or": "⩔", "orarr": "↻", "ord": "⩝", "order": "ℴ", "orderof": "ℴ", "ordf": "ª", "ordm": "º", "origof": "⊶", "oror": "⩖", "orslope": "⩗", "orv": "⩛", "oS": "Ⓢ", "oscr": "ℴ", "Oscr": "𝒪", "oslash": "ø", "Oslash": "Ø", "osol": "⊘", "otilde": "õ", "Otilde": "Õ", "otimes": "⊗", "Otimes": "⨷", "otimesas": "⨶", "ouml": "ö", "Ouml": "Ö", "ovbar": "⌽", "OverBar": "‾", "OverBrace": "⏞", "OverBracket": "⎴", "OverParenthesis": "⏜", "par": "∥", "para": "¶", "parallel": "∥", "parsim": "⫳", "parsl": "⫽", "part": "∂", "PartialD": "∂", "pcy": "п", "Pcy": "П", "percnt": "%", "period": ".", "permil": "‰", "perp": "⊥", "pertenk": "‱", "pfr": "𝔭", "Pfr": "𝔓", "phi": "φ", "Phi": "Φ", "phiv": "ϕ", "phmmat": "ℳ", "phone": "☎", "pi": "π", "Pi": "Π", "pitchfork": "⋔", "piv": "ϖ", "planck": "ℏ", "planckh": "ℎ", "plankv": "ℏ", "plus": "+", "plusacir": "⨣", "plusb": "⊞", "pluscir": "⨢", "plusdo": "∔", "plusdu": "⨥", "pluse": "⩲", "PlusMinus": "±", "plusmn": "±", "plussim": "⨦", "plustwo": "⨧", "pm": "±", "Poincareplane": "ℌ", "pointint": "⨕", "popf": "𝕡", "Popf": "ℙ", "pound": "£", "pr": "≺", "Pr": "⪻", "prap": "⪷", "prcue": "≼", "pre": "⪯", "prE": "⪳", "prec": "≺", "precapprox": "⪷", "preccurlyeq": "≼", "Precedes": "≺", "PrecedesEqual": "⪯", "PrecedesSlantEqual": "≼", "PrecedesTilde": "≾", "preceq": "⪯", "precnapprox": "⪹", "precneqq": "⪵", "precnsim": "⋨", "precsim": "≾", "prime": "′", "Prime": "″", "primes": "ℙ", "prnap": "⪹", "prnE": "⪵", "prnsim": "⋨", "prod": "∏", "Product": "∏", "profalar": "⌮", "profline": "⌒", "profsurf": "⌓", "prop": "∝", "Proportion": "∷", "Proportional": "∝", "propto": "∝", "prsim": "≾", "prurel": "⊰", "pscr": "𝓅", "Pscr": "𝒫", "psi": "ψ", "Psi": "Ψ", "puncsp": " ", "qfr": "𝔮", "Qfr": "𝔔", "qint": "⨌", "qopf": "𝕢", "Qopf": "ℚ", "qprime": "⁗", "qscr": "𝓆", "Qscr": "𝒬", "quaternions": "ℍ", "quatint": "⨖", "quest": "?", "questeq": "≟", "quot": '"', "QUOT": '"', "rAarr": "⇛", "race": "∽̱", "racute": "ŕ", "Racute": "Ŕ", "radic": "√", "raemptyv": "⦳", "rang": "⟩", "Rang": "⟫", "rangd": "⦒", "range": "⦥", "rangle": "⟩", "raquo": "»", "rarr": "→", "rArr": "⇒", "Rarr": "↠", "rarrap": "⥵", "rarrb": "⇥", "rarrbfs": "⤠", "rarrc": "⤳", "rarrfs": "⤞", "rarrhk": "↪", "rarrlp": "↬", "rarrpl": "⥅", "rarrsim": "⥴", "rarrtl": "↣", "Rarrtl": "⤖", "rarrw": "↝", "ratail": "⤚", "rAtail": "⤜", "ratio": "∶", "rationals": "ℚ", "rbarr": "⤍", "rBarr": "⤏", "RBarr": "⤐", "rbbrk": "❳", "rbrace": "}", "rbrack": "]", "rbrke": "⦌", "rbrksld": "⦎", "rbrkslu": "⦐", "rcaron": "ř", "Rcaron": "Ř", "rcedil": "ŗ", "Rcedil": "Ŗ", "rceil": "⌉", "rcub": "}", "rcy": "р", "Rcy": "Р", "rdca": "⤷", "rdldhar": "⥩", "rdquo": "”", "rdquor": "”", "rdsh": "↳", "Re": "ℜ", "real": "ℜ", "realine": "ℛ", "realpart": "ℜ", "reals": "ℝ", "rect": "▭", "reg": "®", "REG": "®", "ReverseElement": "∋", "ReverseEquilibrium": "⇋", "ReverseUpEquilibrium": "⥯", "rfisht": "⥽", "rfloor": "⌋", "rfr": "𝔯", "Rfr": "ℜ", "rHar": "⥤", "rhard": "⇁", "rharu": "⇀", "rharul": "⥬", "rho": "ρ", "Rho": "Ρ", "rhov": "ϱ", "RightAngleBracket": "⟩", "rightarrow": "→", "Rightarrow": "⇒", "RightArrow": "→", "RightArrowBar": "⇥", "RightArrowLeftArrow": "⇄", "rightarrowtail": "↣", "RightCeiling": "⌉", "RightDoubleBracket": "⟧", "RightDownTeeVector": "⥝", "RightDownVector": "⇂", "RightDownVectorBar": "⥕", "RightFloor": "⌋", "rightharpoondown": "⇁", "rightharpoonup": "⇀", "rightleftarrows": "⇄", "rightleftharpoons": "⇌", "rightrightarrows": "⇉", "rightsquigarrow": "↝", "RightTee": "⊢", "RightTeeArrow": "↦", "RightTeeVector": "⥛", "rightthreetimes": "⋌", "RightTriangle": "⊳", "RightTriangleBar": "⧐", "RightTriangleEqual": "⊵", "RightUpDownVector": "⥏", "RightUpTeeVector": "⥜", "RightUpVector": "↾", "RightUpVectorBar": "⥔", "RightVector": "⇀", "RightVectorBar": "⥓", "ring": "˚", "risingdotseq": "≓", "rlarr": "⇄", "rlhar": "⇌", "rlm": "‏", "rmoust": "⎱", "rmoustache": "⎱", "rnmid": "⫮", "roang": "⟭", "roarr": "⇾", "robrk": "⟧", "ropar": "⦆", "ropf": "𝕣", "Ropf": "ℝ", "roplus": "⨮", "rotimes": "⨵", "RoundImplies": "⥰", "rpar": ")", "rpargt": "⦔", "rppolint": "⨒", "rrarr": "⇉", "Rrightarrow": "⇛", "rsaquo": "›", "rscr": "𝓇", "Rscr": "ℛ", "rsh": "↱", "Rsh": "↱", "rsqb": "]", "rsquo": "’", "rsquor": "’", "rthree": "⋌", "rtimes": "⋊", "rtri": "▹", "rtrie": "⊵", "rtrif": "▸", "rtriltri": "⧎", "RuleDelayed": "⧴", "ruluhar": "⥨", "rx": "℞", "sacute": "ś", "Sacute": "Ś", "sbquo": "‚", "sc": "≻", "Sc": "⪼", "scap": "⪸", "scaron": "š", "Scaron": "Š", "sccue": "≽", "sce": "⪰", "scE": "⪴", "scedil": "ş", "Scedil": "Ş", "scirc": "ŝ", "Scirc": "Ŝ", "scnap": "⪺", "scnE": "⪶", "scnsim": "⋩", "scpolint": "⨓", "scsim": "≿", "scy": "с", "Scy": "С", "sdot": "⋅", "sdotb": "⊡", "sdote": "⩦", "searhk": "⤥", "searr": "↘", "seArr": "⇘", "searrow": "↘", "sect": "§", "semi": ";", "seswar": "⤩", "setminus": "∖", "setmn": "∖", "sext": "✶", "sfr": "𝔰", "Sfr": "𝔖", "sfrown": "⌢", "sharp": "♯", "shchcy": "щ", "SHCHcy": "Щ", "shcy": "ш", "SHcy": "Ш", "ShortDownArrow": "↓", "ShortLeftArrow": "←", "shortmid": "∣", "shortparallel": "∥", "ShortRightArrow": "→", "ShortUpArrow": "↑", "shy": "­", "sigma": "σ", "Sigma": "Σ", "sigmaf": "ς", "sigmav": "ς", "sim": "∼", "simdot": "⩪", "sime": "≃", "simeq": "≃", "simg": "⪞", "simgE": "⪠", "siml": "⪝", "simlE": "⪟", "simne": "≆", "simplus": "⨤", "simrarr": "⥲", "slarr": "←", "SmallCircle": "∘", "smallsetminus": "∖", "smashp": "⨳", "smeparsl": "⧤", "smid": "∣", "smile": "⌣", "smt": "⪪", "smte": "⪬", "smtes": "⪬︀", "softcy": "ь", "SOFTcy": "Ь", "sol": "/", "solb": "⧄", "solbar": "⌿", "sopf": "𝕤", "Sopf": "𝕊", "spades": "♠", "spadesuit": "♠", "spar": "∥", "sqcap": "⊓", "sqcaps": "⊓︀", "sqcup": "⊔", "sqcups": "⊔︀", "Sqrt": "√", "sqsub": "⊏", "sqsube": "⊑", "sqsubset": "⊏", "sqsubseteq": "⊑", "sqsup": "⊐", "sqsupe": "⊒", "sqsupset": "⊐", "sqsupseteq": "⊒", "squ": "□", "square": "□", "Square": "□", "SquareIntersection": "⊓", "SquareSubset": "⊏", "SquareSubsetEqual": "⊑", "SquareSuperset": "⊐", "SquareSupersetEqual": "⊒", "SquareUnion": "⊔", "squarf": "▪", "squf": "▪", "srarr": "→", "sscr": "𝓈", "Sscr": "𝒮", "ssetmn": "∖", "ssmile": "⌣", "sstarf": "⋆", "star": "☆", "Star": "⋆", "starf": "★", "straightepsilon": "ϵ", "straightphi": "ϕ", "strns": "¯", "sub": "⊂", "Sub": "⋐", "subdot": "⪽", "sube": "⊆", "subE": "⫅", "subedot": "⫃", "submult": "⫁", "subne": "⊊", "subnE": "⫋", "subplus": "⪿", "subrarr": "⥹", "subset": "⊂", "Subset": "⋐", "subseteq": "⊆", "subseteqq": "⫅", "SubsetEqual": "⊆", "subsetneq": "⊊", "subsetneqq": "⫋", "subsim": "⫇", "subsub": "⫕", "subsup": "⫓", "succ": "≻", "succapprox": "⪸", "succcurlyeq": "≽", "Succeeds": "≻", "SucceedsEqual": "⪰", "SucceedsSlantEqual": "≽", "SucceedsTilde": "≿", "succeq": "⪰", "succnapprox": "⪺", "succneqq": "⪶", "succnsim": "⋩", "succsim": "≿", "SuchThat": "∋", "sum": "∑", "Sum": "∑", "sung": "♪", "sup": "⊃", "Sup": "⋑", "sup1": "¹", "sup2": "²", "sup3": "³", "supdot": "⪾", "supdsub": "⫘", "supe": "⊇", "supE": "⫆", "supedot": "⫄", "Superset": "⊃", "SupersetEqual": "⊇", "suphsol": "⟉", "suphsub": "⫗", "suplarr": "⥻", "supmult": "⫂", "supne": "⊋", "supnE": "⫌", "supplus": "⫀", "supset": "⊃", "Supset": "⋑", "supseteq": "⊇", "supseteqq": "⫆", "supsetneq": "⊋", "supsetneqq": "⫌", "supsim": "⫈", "supsub": "⫔", "supsup": "⫖", "swarhk": "⤦", "swarr": "↙", "swArr": "⇙", "swarrow": "↙", "swnwar": "⤪", "szlig": "ß", "Tab": "	", "target": "⌖", "tau": "τ", "Tau": "Τ", "tbrk": "⎴", "tcaron": "ť", "Tcaron": "Ť", "tcedil": "ţ", "Tcedil": "Ţ", "tcy": "т", "Tcy": "Т", "tdot": "⃛", "telrec": "⌕", "tfr": "𝔱", "Tfr": "𝔗", "there4": "∴", "therefore": "∴", "Therefore": "∴", "theta": "θ", "Theta": "Θ", "thetasym": "ϑ", "thetav": "ϑ", "thickapprox": "≈", "thicksim": "∼", "ThickSpace": "  ", "thinsp": " ", "ThinSpace": " ", "thkap": "≈", "thksim": "∼", "thorn": "þ", "THORN": "Þ", "tilde": "˜", "Tilde": "∼", "TildeEqual": "≃", "TildeFullEqual": "≅", "TildeTilde": "≈", "times": "×", "timesb": "⊠", "timesbar": "⨱", "timesd": "⨰", "tint": "∭", "toea": "⤨", "top": "⊤", "topbot": "⌶", "topcir": "⫱", "topf": "𝕥", "Topf": "𝕋", "topfork": "⫚", "tosa": "⤩", "tprime": "‴", "trade": "™", "TRADE": "™", "triangle": "▵", "triangledown": "▿", "triangleleft": "◃", "trianglelefteq": "⊴", "triangleq": "≜", "triangleright": "▹", "trianglerighteq": "⊵", "tridot": "◬", "trie": "≜", "triminus": "⨺", "TripleDot": "⃛", "triplus": "⨹", "trisb": "⧍", "tritime": "⨻", "trpezium": "⏢", "tscr": "𝓉", "Tscr": "𝒯", "tscy": "ц", "TScy": "Ц", "tshcy": "ћ", "TSHcy": "Ћ", "tstrok": "ŧ", "Tstrok": "Ŧ", "twixt": "≬", "twoheadleftarrow": "↞", "twoheadrightarrow": "↠", "uacute": "ú", "Uacute": "Ú", "uarr": "↑", "uArr": "⇑", "Uarr": "↟", "Uarrocir": "⥉", "ubrcy": "ў", "Ubrcy": "Ў", "ubreve": "ŭ", "Ubreve": "Ŭ", "ucirc": "û", "Ucirc": "Û", "ucy": "у", "Ucy": "У", "udarr": "⇅", "udblac": "ű", "Udblac": "Ű", "udhar": "⥮", "ufisht": "⥾", "ufr": "𝔲", "Ufr": "𝔘", "ugrave": "ù", "Ugrave": "Ù", "uHar": "⥣", "uharl": "↿", "uharr": "↾", "uhblk": "▀", "ulcorn": "⌜", "ulcorner": "⌜", "ulcrop": "⌏", "ultri": "◸", "umacr": "ū", "Umacr": "Ū", "uml": "¨", "UnderBar": "_", "UnderBrace": "⏟", "UnderBracket": "⎵", "UnderParenthesis": "⏝", "Union": "⋃", "UnionPlus": "⊎", "uogon": "ų", "Uogon": "Ų", "uopf": "𝕦", "Uopf": "𝕌", "uparrow": "↑", "Uparrow": "⇑", "UpArrow": "↑", "UpArrowBar": "⤒", "UpArrowDownArrow": "⇅", "updownarrow": "↕", "Updownarrow": "⇕", "UpDownArrow": "↕", "UpEquilibrium": "⥮", "upharpoonleft": "↿", "upharpoonright": "↾", "uplus": "⊎", "UpperLeftArrow": "↖", "UpperRightArrow": "↗", "upsi": "υ", "Upsi": "ϒ", "upsih": "ϒ", "upsilon": "υ", "Upsilon": "Υ", "UpTee": "⊥", "UpTeeArrow": "↥", "upuparrows": "⇈", "urcorn": "⌝", "urcorner": "⌝", "urcrop": "⌎", "uring": "ů", "Uring": "Ů", "urtri": "◹", "uscr": "𝓊", "Uscr": "𝒰", "utdot": "⋰", "utilde": "ũ", "Utilde": "Ũ", "utri": "▵", "utrif": "▴", "uuarr": "⇈", "uuml": "ü", "Uuml": "Ü", "uwangle": "⦧", "vangrt": "⦜", "varepsilon": "ϵ", "varkappa": "ϰ", "varnothing": "∅", "varphi": "ϕ", "varpi": "ϖ", "varpropto": "∝", "varr": "↕", "vArr": "⇕", "varrho": "ϱ", "varsigma": "ς", "varsubsetneq": "⊊︀", "varsubsetneqq": "⫋︀", "varsupsetneq": "⊋︀", "varsupsetneqq": "⫌︀", "vartheta": "ϑ", "vartriangleleft": "⊲", "vartriangleright": "⊳", "vBar": "⫨", "Vbar": "⫫", "vBarv": "⫩", "vcy": "в", "Vcy": "В", "vdash": "⊢", "vDash": "⊨", "Vdash": "⊩", "VDash": "⊫", "Vdashl": "⫦", "vee": "∨", "Vee": "⋁", "veebar": "⊻", "veeeq": "≚", "vellip": "⋮", "verbar": "|", "Verbar": "‖", "vert": "|", "Vert": "‖", "VerticalBar": "∣", "VerticalLine": "|", "VerticalSeparator": "❘", "VerticalTilde": "≀", "VeryThinSpace": " ", "vfr": "𝔳", "Vfr": "𝔙", "vltri": "⊲", "vnsub": "⊂⃒", "vnsup": "⊃⃒", "vopf": "𝕧", "Vopf": "𝕍", "vprop": "∝", "vrtri": "⊳", "vscr": "𝓋", "Vscr": "𝒱", "vsubne": "⊊︀", "vsubnE": "⫋︀", "vsupne": "⊋︀", "vsupnE": "⫌︀", "Vvdash": "⊪", "vzigzag": "⦚", "wcirc": "ŵ", "Wcirc": "Ŵ", "wedbar": "⩟", "wedge": "∧", "Wedge": "⋀", "wedgeq": "≙", "weierp": "℘", "wfr": "𝔴", "Wfr": "𝔚", "wopf": "𝕨", "Wopf": "𝕎", "wp": "℘", "wr": "≀", "wreath": "≀", "wscr": "𝓌", "Wscr": "𝒲", "xcap": "⋂", "xcirc": "◯", "xcup": "⋃", "xdtri": "▽", "xfr": "𝔵", "Xfr": "𝔛", "xharr": "⟷", "xhArr": "⟺", "xi": "ξ", "Xi": "Ξ", "xlarr": "⟵", "xlArr": "⟸", "xmap": "⟼", "xnis": "⋻", "xodot": "⨀", "xopf": "𝕩", "Xopf": "𝕏", "xoplus": "⨁", "xotime": "⨂", "xrarr": "⟶", "xrArr": "⟹", "xscr": "𝓍", "Xscr": "𝒳", "xsqcup": "⨆", "xuplus": "⨄", "xutri": "△", "xvee": "⋁", "xwedge": "⋀", "yacute": "ý", "Yacute": "Ý", "yacy": "я", "YAcy": "Я", "ycirc": "ŷ", "Ycirc": "Ŷ", "ycy": "ы", "Ycy": "Ы", "yen": "¥", "yfr": "𝔶", "Yfr": "𝔜", "yicy": "ї", "YIcy": "Ї", "yopf": "𝕪", "Yopf": "𝕐", "yscr": "𝓎", "Yscr": "𝒴", "yucy": "ю", "YUcy": "Ю", "yuml": "ÿ", "Yuml": "Ÿ", "zacute": "ź", "Zacute": "Ź", "zcaron": "ž", "Zcaron": "Ž", "zcy": "з", "Zcy": "З", "zdot": "ż", "Zdot": "Ż", "zeetrf": "ℨ", "ZeroWidthSpace": "​", "zeta": "ζ", "Zeta": "Ζ", "zfr": "𝔷", "Zfr": "ℨ", "zhcy": "ж", "ZHcy": "Ж", "zigrarr": "⇝", "zopf": "𝕫", "Zopf": "ℤ", "zscr": "𝓏", "Zscr": "𝒵", "zwj": "‍", "zwnj": "‌" };
      var decodeMapLegacy = { "aacute": "á", "Aacute": "Á", "acirc": "â", "Acirc": "Â", "acute": "´", "aelig": "æ", "AElig": "Æ", "agrave": "à", "Agrave": "À", "amp": "&", "AMP": "&", "aring": "å", "Aring": "Å", "atilde": "ã", "Atilde": "Ã", "auml": "ä", "Auml": "Ä", "brvbar": "¦", "ccedil": "ç", "Ccedil": "Ç", "cedil": "¸", "cent": "¢", "copy": "©", "COPY": "©", "curren": "¤", "deg": "°", "divide": "÷", "eacute": "é", "Eacute": "É", "ecirc": "ê", "Ecirc": "Ê", "egrave": "è", "Egrave": "È", "eth": "ð", "ETH": "Ð", "euml": "ë", "Euml": "Ë", "frac12": "½", "frac14": "¼", "frac34": "¾", "gt": ">", "GT": ">", "iacute": "í", "Iacute": "Í", "icirc": "î", "Icirc": "Î", "iexcl": "¡", "igrave": "ì", "Igrave": "Ì", "iquest": "¿", "iuml": "ï", "Iuml": "Ï", "laquo": "«", "lt": "<", "LT": "<", "macr": "¯", "micro": "µ", "middot": "·", "nbsp": " ", "not": "¬", "ntilde": "ñ", "Ntilde": "Ñ", "oacute": "ó", "Oacute": "Ó", "ocirc": "ô", "Ocirc": "Ô", "ograve": "ò", "Ograve": "Ò", "ordf": "ª", "ordm": "º", "oslash": "ø", "Oslash": "Ø", "otilde": "õ", "Otilde": "Õ", "ouml": "ö", "Ouml": "Ö", "para": "¶", "plusmn": "±", "pound": "£", "quot": '"', "QUOT": '"', "raquo": "»", "reg": "®", "REG": "®", "sect": "§", "shy": "­", "sup1": "¹", "sup2": "²", "sup3": "³", "szlig": "ß", "thorn": "þ", "THORN": "Þ", "times": "×", "uacute": "ú", "Uacute": "Ú", "ucirc": "û", "Ucirc": "Û", "ugrave": "ù", "Ugrave": "Ù", "uml": "¨", "uuml": "ü", "Uuml": "Ü", "yacute": "ý", "Yacute": "Ý", "yen": "¥", "yuml": "ÿ" };
      var decodeMapNumeric = { "0": "�", "128": "€", "130": "‚", "131": "ƒ", "132": "„", "133": "…", "134": "†", "135": "‡", "136": "ˆ", "137": "‰", "138": "Š", "139": "‹", "140": "Œ", "142": "Ž", "145": "‘", "146": "’", "147": "“", "148": "”", "149": "•", "150": "–", "151": "—", "152": "˜", "153": "™", "154": "š", "155": "›", "156": "œ", "158": "ž", "159": "Ÿ" };
      var invalidReferenceCodePoints = [1, 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 64976, 64977, 64978, 64979, 64980, 64981, 64982, 64983, 64984, 64985, 64986, 64987, 64988, 64989, 64990, 64991, 64992, 64993, 64994, 64995, 64996, 64997, 64998, 64999, 65e3, 65001, 65002, 65003, 65004, 65005, 65006, 65007, 65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214, 393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894, 720895, 786430, 786431, 851966, 851967, 917502, 917503, 983038, 983039, 1048574, 1048575, 1114110, 1114111];
      var stringFromCharCode = String.fromCharCode;
      var object = {};
      var hasOwnProperty = object.hasOwnProperty;
      var has = function(object2, propertyName) {
        return hasOwnProperty.call(object2, propertyName);
      };
      var contains = function(array, value) {
        var index = -1;
        var length = array.length;
        while (++index < length) {
          if (array[index] == value) {
            return true;
          }
        }
        return false;
      };
      var merge = function(options, defaults) {
        if (!options) {
          return defaults;
        }
        var result = {};
        var key2;
        for (key2 in defaults) {
          result[key2] = has(options, key2) ? options[key2] : defaults[key2];
        }
        return result;
      };
      var codePointToSymbol = function(codePoint, strict) {
        var output = "";
        if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
          if (strict) {
            parseError("character reference outside the permissible Unicode range");
          }
          return "�";
        }
        if (has(decodeMapNumeric, codePoint)) {
          if (strict) {
            parseError("disallowed character reference");
          }
          return decodeMapNumeric[codePoint];
        }
        if (strict && contains(invalidReferenceCodePoints, codePoint)) {
          parseError("disallowed character reference");
        }
        if (codePoint > 65535) {
          codePoint -= 65536;
          output += stringFromCharCode(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        output += stringFromCharCode(codePoint);
        return output;
      };
      var hexEscape = function(codePoint) {
        return "&#x" + codePoint.toString(16).toUpperCase() + ";";
      };
      var decEscape = function(codePoint) {
        return "&#" + codePoint + ";";
      };
      var parseError = function(message) {
        throw Error("Parse error: " + message);
      };
      var encode = function(string, options) {
        options = merge(options, encode.options);
        var strict = options.strict;
        if (strict && regexInvalidRawCodePoint.test(string)) {
          parseError("forbidden code point");
        }
        var encodeEverything = options.encodeEverything;
        var useNamedReferences = options.useNamedReferences;
        var allowUnsafeSymbols = options.allowUnsafeSymbols;
        var escapeCodePoint = options.decimal ? decEscape : hexEscape;
        var escapeBmpSymbol = function(symbol) {
          return escapeCodePoint(symbol.charCodeAt(0));
        };
        if (encodeEverything) {
          string = string.replace(regexAsciiWhitelist, function(symbol) {
            if (useNamedReferences && has(encodeMap, symbol)) {
              return "&" + encodeMap[symbol] + ";";
            }
            return escapeBmpSymbol(symbol);
          });
          if (useNamedReferences) {
            string = string.replace(/&gt;\u20D2/g, "&nvgt;").replace(/&lt;\u20D2/g, "&nvlt;").replace(/&#x66;&#x6A;/g, "&fjlig;");
          }
          if (useNamedReferences) {
            string = string.replace(regexEncodeNonAscii, function(string2) {
              return "&" + encodeMap[string2] + ";";
            });
          }
        } else if (useNamedReferences) {
          if (!allowUnsafeSymbols) {
            string = string.replace(regexEscape, function(string2) {
              return "&" + encodeMap[string2] + ";";
            });
          }
          string = string.replace(/&gt;\u20D2/g, "&nvgt;").replace(/&lt;\u20D2/g, "&nvlt;");
          string = string.replace(regexEncodeNonAscii, function(string2) {
            return "&" + encodeMap[string2] + ";";
          });
        } else if (!allowUnsafeSymbols) {
          string = string.replace(regexEscape, escapeBmpSymbol);
        }
        return string.replace(regexAstralSymbols, function($0) {
          var high = $0.charCodeAt(0);
          var low = $0.charCodeAt(1);
          var codePoint = (high - 55296) * 1024 + low - 56320 + 65536;
          return escapeCodePoint(codePoint);
        }).replace(regexBmpWhitelist, escapeBmpSymbol);
      };
      encode.options = {
        "allowUnsafeSymbols": false,
        "encodeEverything": false,
        "strict": false,
        "useNamedReferences": false,
        "decimal": false
      };
      var decode = function(html, options) {
        options = merge(options, decode.options);
        var strict = options.strict;
        if (strict && regexInvalidEntity.test(html)) {
          parseError("malformed character reference");
        }
        return html.replace(regexDecode, function($0, $1, $2, $3, $4, $5, $6, $7, $8) {
          var codePoint;
          var semicolon;
          var decDigits;
          var hexDigits;
          var reference;
          var next;
          if ($1) {
            reference = $1;
            return decodeMap[reference];
          }
          if ($2) {
            reference = $2;
            next = $3;
            if (next && options.isAttributeValue) {
              if (strict && next == "=") {
                parseError("`&` did not start a character reference");
              }
              return $0;
            } else {
              if (strict) {
                parseError(
                  "named character reference was not terminated by a semicolon"
                );
              }
              return decodeMapLegacy[reference] + (next || "");
            }
          }
          if ($4) {
            decDigits = $4;
            semicolon = $5;
            if (strict && !semicolon) {
              parseError("character reference was not terminated by a semicolon");
            }
            codePoint = parseInt(decDigits, 10);
            return codePointToSymbol(codePoint, strict);
          }
          if ($6) {
            hexDigits = $6;
            semicolon = $7;
            if (strict && !semicolon) {
              parseError("character reference was not terminated by a semicolon");
            }
            codePoint = parseInt(hexDigits, 16);
            return codePointToSymbol(codePoint, strict);
          }
          if (strict) {
            parseError(
              "named character reference was not terminated by a semicolon"
            );
          }
          return $0;
        });
      };
      decode.options = {
        "isAttributeValue": false,
        "strict": false
      };
      var escape2 = function(string) {
        return string.replace(regexEscape, function($0) {
          return escapeMap[$0];
        });
      };
      var he = {
        "version": "1.2.0",
        "encode": encode,
        "decode": decode,
        "escape": escape2,
        "unescape": decode
      };
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        define(function() {
          return he;
        });
      } else if (freeExports && !freeExports.nodeType) {
        if (freeModule) {
          freeModule.exports = he;
        } else {
          for (var key in he) {
            has(he, key) && (freeExports[key] = he[key]);
          }
        }
      } else {
        root.he = he;
      }
    })(exports);
  }
});

// node_modules/html-minifier-terser/src/utils.js
var require_utils = __commonJS({
  "node_modules/html-minifier-terser/src/utils.js"(exports) {
    "use strict";
    function createMap(values, ignoreCase) {
      var map = {};
      values.forEach(function(value) {
        map[value] = 1;
      });
      return ignoreCase ? function(value) {
        return map[value.toLowerCase()] === 1;
      } : function(value) {
        return map[value] === 1;
      };
    }
    async function replaceAsync(str, regex, asyncFn) {
      const promises = [];
      str.replace(regex, (match, ...args) => {
        const promise = asyncFn(match, ...args);
        promises.push(promise);
      });
      const data = await Promise.all(promises);
      return str.replace(regex, () => data.shift());
    }
    exports.createMap = createMap;
    exports.createMapFromString = function(values, ignoreCase) {
      return createMap(values.split(/,/), ignoreCase);
    };
    exports.replaceAsync = replaceAsync;
  }
});

// node_modules/html-minifier-terser/src/htmlparser.js
var require_htmlparser = __commonJS({
  "node_modules/html-minifier-terser/src/htmlparser.js"(exports) {
    "use strict";
    var createMapFromString = require_utils().createMapFromString;
    var replaceAsync = require_utils().replaceAsync;
    function makeMap(values) {
      return createMapFromString(values, true);
    }
    var singleAttrIdentifier = /([^\s"'<>/=]+)/;
    var singleAttrAssigns = [/=/];
    var singleAttrValues = [
      // attr value double quotes
      /"([^"]*)"+/.source,
      // attr value, single quotes
      /'([^']*)'+/.source,
      // attr value, no quotes
      /([^ \t\n\f\r"'`=<>]+)/.source
    ];
    var qnameCapture = function() {
      var combiningChar = "\\u0300-\\u0345\\u0360\\u0361\\u0483-\\u0486\\u0591-\\u05A1\\u05A3-\\u05B9\\u05BB-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u064B-\\u0652\\u0670\\u06D6-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0901-\\u0903\\u093C\\u093E-\\u094D\\u0951-\\u0954\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u0A02\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A70\\u0A71\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B43\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B82\\u0B83\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C01-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C82\\u0C83\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E-\\u0D43\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86-\\u0F8B\\u0F90-\\u0F95\\u0F97\\u0F99-\\u0FAD\\u0FB1-\\u0FB7\\u0FB9\\u20D0-\\u20DC\\u20E1\\u302A-\\u302F\\u3099\\u309A";
      var digit = "0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE7-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29";
      var extender = "\\xB7\\u02D0\\u02D1\\u0387\\u0640\\u0E46\\u0EC6\\u3005\\u3031-\\u3035\\u309D\\u309E\\u30FC-\\u30FE";
      var letter = "A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u0131\\u0134-\\u013E\\u0141-\\u0148\\u014A-\\u017E\\u0180-\\u01C3\\u01CD-\\u01F0\\u01F4\\u01F5\\u01FA-\\u0217\\u0250-\\u02A8\\u02BB-\\u02C1\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03CE\\u03D0-\\u03D6\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2-\\u03F3\\u0401-\\u040C\\u040E-\\u044F\\u0451-\\u045C\\u045E-\\u0481\\u0490-\\u04C4\\u04C7\\u04C8\\u04CB\\u04CC\\u04D0-\\u04EB\\u04EE-\\u04F5\\u04F8\\u04F9\\u0531-\\u0556\\u0559\\u0561-\\u0586\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0621-\\u063A\\u0641-\\u064A\\u0671-\\u06B7\\u06BA-\\u06BE\\u06C0-\\u06CE\\u06D0-\\u06D3\\u06D5\\u06E5\\u06E6\\u0905-\\u0939\\u093D\\u0958-\\u0961\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8B\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AE0\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B36-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB5\\u0BB7-\\u0BB9\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CDE\\u0CE0\\u0CE1\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D28\\u0D2A-\\u0D39\\u0D60\\u0D61\\u0E01-\\u0E2E\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD\\u0EAE\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0F40-\\u0F47\\u0F49-\\u0F69\\u10A0-\\u10C5\\u10D0-\\u10F6\\u1100\\u1102\\u1103\\u1105-\\u1107\\u1109\\u110B\\u110C\\u110E-\\u1112\\u113C\\u113E\\u1140\\u114C\\u114E\\u1150\\u1154\\u1155\\u1159\\u115F-\\u1161\\u1163\\u1165\\u1167\\u1169\\u116D\\u116E\\u1172\\u1173\\u1175\\u119E\\u11A8\\u11AB\\u11AE\\u11AF\\u11B7\\u11B8\\u11BA\\u11BC-\\u11C2\\u11EB\\u11F0\\u11F9\\u1E00-\\u1E9B\\u1EA0-\\u1EF9\\u1F00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2126\\u212A\\u212B\\u212E\\u2180-\\u2182\\u3007\\u3021-\\u3029\\u3041-\\u3094\\u30A1-\\u30FA\\u3105-\\u312C\\u4E00-\\u9FA5\\uAC00-\\uD7A3";
      var ncname = "[" + letter + "_][" + letter + digit + "\\.\\-_" + combiningChar + extender + "]*";
      return "((?:" + ncname + "\\:)?" + ncname + ")";
    }();
    var startTagOpen = new RegExp("^<" + qnameCapture);
    var startTagClose = /^\s*(\/?)>/;
    var endTag = new RegExp("^<\\/" + qnameCapture + "[^>]*>");
    var doctype = /^<!DOCTYPE\s?[^>]+>/i;
    var IS_REGEX_CAPTURING_BROKEN = false;
    "x".replace(/x(.)?/g, function(m2, g) {
      IS_REGEX_CAPTURING_BROKEN = g === "";
    });
    var empty = makeMap("area,base,basefont,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr");
    var inline = makeMap("a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,noscript,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,svg,textarea,tt,u,var");
    var closeSelf = makeMap("colgroup,dd,dt,li,option,p,td,tfoot,th,thead,tr,source");
    var fillAttrs = makeMap("checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected");
    var special = makeMap("script,style");
    var nonPhrasing = makeMap("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,ol,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track,ul");
    var reCache = {};
    function attrForHandler(handler) {
      var pattern = singleAttrIdentifier.source + "(?:\\s*(" + joinSingleAttrAssigns(handler) + ")[ \\t\\n\\f\\r]*(?:" + singleAttrValues.join("|") + "))?";
      if (handler.customAttrSurround) {
        var attrClauses = [];
        for (var i = handler.customAttrSurround.length - 1; i >= 0; i--) {
          attrClauses[i] = "(?:(" + handler.customAttrSurround[i][0].source + ")\\s*" + pattern + "\\s*(" + handler.customAttrSurround[i][1].source + "))";
        }
        attrClauses.push("(?:" + pattern + ")");
        pattern = "(?:" + attrClauses.join("|") + ")";
      }
      return new RegExp("^\\s*" + pattern);
    }
    function joinSingleAttrAssigns(handler) {
      return singleAttrAssigns.concat(
        handler.customAttrAssign || []
      ).map(function(assign) {
        return "(?:" + assign.source + ")";
      }).join("|");
    }
    var HTMLParser = class {
      constructor(html, handler) {
        this.html = html;
        this.handler = handler;
      }
      async parse() {
        let html = this.html;
        const handler = this.handler;
        var stack = [], lastTag;
        var attribute = attrForHandler(handler);
        var last, prevTag, nextTag;
        while (html) {
          last = html;
          if (!lastTag || !special(lastTag)) {
            var textEnd = html.indexOf("<");
            if (textEnd === 0) {
              if (/^<!--/.test(html)) {
                var commentEnd = html.indexOf("-->");
                if (commentEnd >= 0) {
                  if (handler.comment) {
                    await handler.comment(html.substring(4, commentEnd));
                  }
                  html = html.substring(commentEnd + 3);
                  prevTag = "";
                  continue;
                }
              }
              if (/^<!\[/.test(html)) {
                var conditionalEnd = html.indexOf("]>");
                if (conditionalEnd >= 0) {
                  if (handler.comment) {
                    await handler.comment(
                      html.substring(2, conditionalEnd + 1),
                      true
                      /* non-standard */
                    );
                  }
                  html = html.substring(conditionalEnd + 2);
                  prevTag = "";
                  continue;
                }
              }
              var doctypeMatch = html.match(doctype);
              if (doctypeMatch) {
                if (handler.doctype) {
                  handler.doctype(doctypeMatch[0]);
                }
                html = html.substring(doctypeMatch[0].length);
                prevTag = "";
                continue;
              }
              var endTagMatch = html.match(endTag);
              if (endTagMatch) {
                html = html.substring(endTagMatch[0].length);
                await replaceAsync(endTagMatch[0], endTag, parseEndTag);
                prevTag = "/" + endTagMatch[1].toLowerCase();
                continue;
              }
              var startTagMatch = parseStartTag(html);
              if (startTagMatch) {
                html = startTagMatch.rest;
                await handleStartTag(startTagMatch);
                prevTag = startTagMatch.tagName.toLowerCase();
                continue;
              }
              if (handler.continueOnParseError) {
                textEnd = html.indexOf("<", 1);
              }
            }
            var text;
            if (textEnd >= 0) {
              text = html.substring(0, textEnd);
              html = html.substring(textEnd);
            } else {
              text = html;
              html = "";
            }
            var nextTagMatch = parseStartTag(html);
            if (nextTagMatch) {
              nextTag = nextTagMatch.tagName;
            } else {
              nextTagMatch = html.match(endTag);
              if (nextTagMatch) {
                nextTag = "/" + nextTagMatch[1];
              } else {
                nextTag = "";
              }
            }
            if (handler.chars) {
              await handler.chars(text, prevTag, nextTag);
            }
            prevTag = "";
          } else {
            var stackedTag = lastTag.toLowerCase();
            var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp("([\\s\\S]*?)</" + stackedTag + "[^>]*>", "i"));
            html = await replaceAsync(html, reStackedTag, async (_, text2) => {
              if (stackedTag !== "script" && stackedTag !== "style" && stackedTag !== "noscript") {
                text2 = text2.replace(/<!--([\s\S]*?)-->/g, "$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g, "$1");
              }
              if (handler.chars) {
                await handler.chars(text2);
              }
              return "";
            });
            await parseEndTag("</" + stackedTag + ">", stackedTag);
          }
          if (html === last) {
            throw new Error("Parse Error: " + html);
          }
        }
        if (!handler.partialMarkup) {
          await parseEndTag();
        }
        function parseStartTag(input) {
          var start = input.match(startTagOpen);
          if (start) {
            var match = {
              tagName: start[1],
              attrs: []
            };
            input = input.slice(start[0].length);
            var end, attr;
            while (!(end = input.match(startTagClose)) && (attr = input.match(attribute))) {
              input = input.slice(attr[0].length);
              match.attrs.push(attr);
            }
            if (end) {
              match.unarySlash = end[1];
              match.rest = input.slice(end[0].length);
              return match;
            }
          }
        }
        async function closeIfFound(tagName) {
          if (findTag(tagName) >= 0) {
            await parseEndTag("", tagName);
            return true;
          }
        }
        async function handleStartTag(match) {
          var tagName = match.tagName;
          var unarySlash = match.unarySlash;
          if (handler.html5) {
            if (lastTag === "p" && nonPhrasing(tagName)) {
              await parseEndTag("", lastTag);
            } else if (tagName === "tbody") {
              await closeIfFound("thead");
            } else if (tagName === "tfoot") {
              if (!await closeIfFound("tbody")) {
                await closeIfFound("thead");
              }
            }
            if (tagName === "col" && findTag("colgroup") < 0) {
              lastTag = "colgroup";
              stack.push({ tag: lastTag, attrs: [] });
              if (handler.start) {
                await handler.start(lastTag, [], false, "");
              }
            }
          }
          if (!handler.html5 && !inline(tagName)) {
            while (lastTag && inline(lastTag)) {
              await parseEndTag("", lastTag);
            }
          }
          if (closeSelf(tagName) && lastTag === tagName) {
            await parseEndTag("", tagName);
          }
          var unary = empty(tagName) || tagName === "html" && lastTag === "head" || !!unarySlash;
          var attrs = match.attrs.map(function(args) {
            var name, value, customOpen, customClose, customAssign, quote;
            var ncp = 7;
            if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('""') === -1) {
              if (args[3] === "") {
                delete args[3];
              }
              if (args[4] === "") {
                delete args[4];
              }
              if (args[5] === "") {
                delete args[5];
              }
            }
            function populate(index) {
              customAssign = args[index];
              value = args[index + 1];
              if (typeof value !== "undefined") {
                return '"';
              }
              value = args[index + 2];
              if (typeof value !== "undefined") {
                return "'";
              }
              value = args[index + 3];
              if (typeof value === "undefined" && fillAttrs(name)) {
                value = name;
              }
              return "";
            }
            var j = 1;
            if (handler.customAttrSurround) {
              for (var i = 0, l2 = handler.customAttrSurround.length; i < l2; i++, j += ncp) {
                name = args[j + 1];
                if (name) {
                  quote = populate(j + 2);
                  customOpen = args[j];
                  customClose = args[j + 6];
                  break;
                }
              }
            }
            if (!name && (name = args[j])) {
              quote = populate(j + 1);
            }
            return {
              name,
              value,
              customAssign: customAssign || "=",
              customOpen: customOpen || "",
              customClose: customClose || "",
              quote: quote || ""
            };
          });
          if (!unary) {
            stack.push({ tag: tagName, attrs });
            lastTag = tagName;
            unarySlash = "";
          }
          if (handler.start) {
            await handler.start(tagName, attrs, unary, unarySlash);
          }
        }
        function findTag(tagName) {
          var pos;
          var needle = tagName.toLowerCase();
          for (pos = stack.length - 1; pos >= 0; pos--) {
            if (stack[pos].tag.toLowerCase() === needle) {
              break;
            }
          }
          return pos;
        }
        async function parseEndTag(tag, tagName) {
          var pos;
          if (tagName) {
            pos = findTag(tagName);
          } else {
            pos = 0;
          }
          if (pos >= 0) {
            for (var i = stack.length - 1; i >= pos; i--) {
              if (handler.end) {
                handler.end(stack[i].tag, stack[i].attrs, i > pos || !tag);
              }
            }
            stack.length = pos;
            lastTag = pos && stack[pos - 1].tag;
          } else if (tagName.toLowerCase() === "br") {
            if (handler.start) {
              await handler.start(tagName, [], true, "");
            }
          } else if (tagName.toLowerCase() === "p") {
            if (handler.start) {
              await handler.start(tagName, [], false, "", true);
            }
            if (handler.end) {
              handler.end(tagName, []);
            }
          }
        }
      }
    };
    exports.HTMLParser = HTMLParser;
    exports.HTMLtoXML = function(html) {
      var results = "";
      new HTMLParser(html, {
        start: function(tag, attrs, unary) {
          results += "<" + tag;
          for (var i = 0, len = attrs.length; i < len; i++) {
            results += " " + attrs[i].name + '="' + (attrs[i].value || "").replace(/"/g, "&#34;") + '"';
          }
          results += (unary ? "/" : "") + ">";
        },
        end: function(tag) {
          results += "</" + tag + ">";
        },
        chars: function(text) {
          results += text;
        },
        comment: function(text) {
          results += "<!--" + text + "-->";
        },
        ignore: function(text) {
          results += text;
        }
      });
      return results;
    };
    exports.HTMLtoDOM = function(html, doc) {
      var one = {
        html: true,
        head: true,
        body: true,
        title: true
      };
      var structure = {
        link: "head",
        base: "head"
      };
      if (doc) {
        doc = doc.ownerDocument || doc.getOwnerDocument && doc.getOwnerDocument() || doc;
      } else if (typeof DOMDocument !== "undefined") {
        doc = new DOMDocument();
      } else if (typeof document !== "undefined" && document.implementation && document.implementation.createDocument) {
        doc = document.implementation.createDocument("", "", null);
      } else if (typeof ActiveX !== "undefined") {
        doc = new ActiveXObject("Msxml.DOMDocument");
      }
      var elems = [], documentElement = doc.documentElement || doc.getDocumentElement && doc.getDocumentElement();
      if (!documentElement && doc.createElement) {
        (function() {
          var html2 = doc.createElement("html");
          var head = doc.createElement("head");
          head.appendChild(doc.createElement("title"));
          html2.appendChild(head);
          html2.appendChild(doc.createElement("body"));
          doc.appendChild(html2);
        })();
      }
      if (doc.getElementsByTagName) {
        for (var i in one) {
          one[i] = doc.getElementsByTagName(i)[0];
        }
      }
      var curParentNode = one.body;
      new HTMLParser(html, {
        start: function(tagName, attrs, unary) {
          if (one[tagName]) {
            curParentNode = one[tagName];
            return;
          }
          var elem = doc.createElement(tagName);
          for (var attr in attrs) {
            elem.setAttribute(attrs[attr].name, attrs[attr].value);
          }
          if (structure[tagName] && typeof one[structure[tagName]] !== "boolean") {
            one[structure[tagName]].appendChild(elem);
          } else if (curParentNode && curParentNode.appendChild) {
            curParentNode.appendChild(elem);
          }
          if (!unary) {
            elems.push(elem);
            curParentNode = elem;
          }
        },
        end: function() {
          elems.length -= 1;
          curParentNode = elems[elems.length - 1];
        },
        chars: function(text) {
          curParentNode.appendChild(doc.createTextNode(text));
        },
        comment: function() {
        },
        ignore: function() {
        }
      });
      return doc;
    };
    exports.endTag = endTag;
  }
});

// node_modules/relateurl/lib/constants.js
var require_constants = __commonJS({
  "node_modules/relateurl/lib/constants.js"(exports, module) {
    "use strict";
    module.exports = {
      // Output
      ABSOLUTE: "absolute",
      PATH_RELATIVE: "pathRelative",
      ROOT_RELATIVE: "rootRelative",
      SHORTEST: "shortest"
    };
  }
});

// node_modules/relateurl/lib/format.js
var require_format2 = __commonJS({
  "node_modules/relateurl/lib/format.js"(exports, module) {
    "use strict";
    var constants = require_constants();
    function formatAuth(urlObj, options) {
      if (urlObj.auth && !options.removeAuth && (urlObj.extra.relation.maximumHost || options.output === constants.ABSOLUTE)) {
        return urlObj.auth + "@";
      }
      return "";
    }
    function formatHash(urlObj, options) {
      return urlObj.hash ? urlObj.hash : "";
    }
    function formatHost(urlObj, options) {
      if (urlObj.host.full && (urlObj.extra.relation.maximumAuth || options.output === constants.ABSOLUTE)) {
        return urlObj.host.full;
      }
      return "";
    }
    function formatPath(urlObj, options) {
      var str = "";
      var absolutePath = urlObj.path.absolute.string;
      var relativePath = urlObj.path.relative.string;
      var resource = showResource(urlObj, options);
      if (urlObj.extra.relation.maximumHost || options.output === constants.ABSOLUTE || options.output === constants.ROOT_RELATIVE) {
        str = absolutePath;
      } else if (relativePath.length <= absolutePath.length && options.output === constants.SHORTEST || options.output === constants.PATH_RELATIVE) {
        str = relativePath;
        if (str === "") {
          var query = showQuery(urlObj, options) && !!getQuery(urlObj, options);
          if (urlObj.extra.relation.maximumPath && !resource) {
            str = "./";
          } else if (urlObj.extra.relation.overridesQuery && !resource && !query) {
            str = "./";
          }
        }
      } else {
        str = absolutePath;
      }
      if (str === "/" && !resource && options.removeRootTrailingSlash && (!urlObj.extra.relation.minimumPort || options.output === constants.ABSOLUTE)) {
        str = "";
      }
      return str;
    }
    function formatPort(urlObj, options) {
      if (urlObj.port && !urlObj.extra.portIsDefault && urlObj.extra.relation.maximumHost) {
        return ":" + urlObj.port;
      }
      return "";
    }
    function formatQuery(urlObj, options) {
      return showQuery(urlObj, options) ? getQuery(urlObj, options) : "";
    }
    function formatResource(urlObj, options) {
      return showResource(urlObj, options) ? urlObj.resource : "";
    }
    function formatScheme(urlObj, options) {
      var str = "";
      if (urlObj.extra.relation.maximumHost || options.output === constants.ABSOLUTE) {
        if (!urlObj.extra.relation.minimumScheme || !options.schemeRelative || options.output === constants.ABSOLUTE) {
          str += urlObj.scheme + "://";
        } else {
          str += "//";
        }
      }
      return str;
    }
    function formatUrl(urlObj, options) {
      var url = "";
      url += formatScheme(urlObj, options);
      url += formatAuth(urlObj, options);
      url += formatHost(urlObj, options);
      url += formatPort(urlObj, options);
      url += formatPath(urlObj, options);
      url += formatResource(urlObj, options);
      url += formatQuery(urlObj, options);
      url += formatHash(urlObj, options);
      return url;
    }
    function getQuery(urlObj, options) {
      var stripQuery = options.removeEmptyQueries && urlObj.extra.relation.minimumPort;
      return urlObj.query.string[stripQuery ? "stripped" : "full"];
    }
    function showQuery(urlObj, options) {
      return !urlObj.extra.relation.minimumQuery || options.output === constants.ABSOLUTE || options.output === constants.ROOT_RELATIVE;
    }
    function showResource(urlObj, options) {
      var removeIndex = options.removeDirectoryIndexes && urlObj.extra.resourceIsIndex;
      var removeMatchingResource = urlObj.extra.relation.minimumResource && options.output !== constants.ABSOLUTE && options.output !== constants.ROOT_RELATIVE;
      return !!urlObj.resource && !removeMatchingResource && !removeIndex;
    }
    module.exports = formatUrl;
  }
});

// node_modules/relateurl/lib/util/object.js
var require_object = __commonJS({
  "node_modules/relateurl/lib/util/object.js"(exports, module) {
    "use strict";
    function clone(obj) {
      if (obj instanceof Object) {
        var clonedObj = obj instanceof Array ? [] : {};
        for (var i in obj) {
          if (obj.hasOwnProperty(i)) {
            clonedObj[i] = clone(obj[i]);
          }
        }
        return clonedObj;
      }
      return obj;
    }
    function isPlainObject(obj) {
      return !!obj && typeof obj === "object" && obj.constructor === Object;
    }
    function shallowMerge(target, source) {
      if (target instanceof Object && source instanceof Object) {
        for (var i in source) {
          if (source.hasOwnProperty(i)) {
            target[i] = source[i];
          }
        }
      }
      return target;
    }
    module.exports = {
      clone,
      isPlainObject,
      shallowMerge
    };
  }
});

// node_modules/relateurl/lib/options.js
var require_options = __commonJS({
  "node_modules/relateurl/lib/options.js"(exports, module) {
    "use strict";
    var objUtils = require_object();
    function getOptions(options, defaults) {
      if (objUtils.isPlainObject(options)) {
        var newOptions = {};
        for (var i in defaults) {
          if (defaults.hasOwnProperty(i)) {
            if (options[i] !== void 0) {
              newOptions[i] = mergeOption(options[i], defaults[i]);
            } else {
              newOptions[i] = defaults[i];
            }
          }
        }
        return newOptions;
      } else {
        return defaults;
      }
    }
    function mergeOption(newValues, defaultValues) {
      if (defaultValues instanceof Object && newValues instanceof Object) {
        if (defaultValues instanceof Array && newValues instanceof Array) {
          return defaultValues.concat(newValues);
        } else {
          return objUtils.shallowMerge(newValues, defaultValues);
        }
      }
      return newValues;
    }
    module.exports = getOptions;
  }
});

// node_modules/relateurl/lib/parse/hrefInfo.js
var require_hrefInfo = __commonJS({
  "node_modules/relateurl/lib/parse/hrefInfo.js"(exports, module) {
    "use strict";
    function hrefInfo(urlObj) {
      var minimumPathOnly = !urlObj.scheme && !urlObj.auth && !urlObj.host.full && !urlObj.port;
      var minimumResourceOnly = minimumPathOnly && !urlObj.path.absolute.string;
      var minimumQueryOnly = minimumResourceOnly && !urlObj.resource;
      var minimumHashOnly = minimumQueryOnly && !urlObj.query.string.full.length;
      var empty = minimumHashOnly && !urlObj.hash;
      urlObj.extra.hrefInfo.minimumPathOnly = minimumPathOnly;
      urlObj.extra.hrefInfo.minimumResourceOnly = minimumResourceOnly;
      urlObj.extra.hrefInfo.minimumQueryOnly = minimumQueryOnly;
      urlObj.extra.hrefInfo.minimumHashOnly = minimumHashOnly;
      urlObj.extra.hrefInfo.empty = empty;
    }
    module.exports = hrefInfo;
  }
});

// node_modules/relateurl/lib/parse/host.js
var require_host = __commonJS({
  "node_modules/relateurl/lib/parse/host.js"(exports, module) {
    "use strict";
    function parseHost(urlObj, options) {
      if (options.ignore_www) {
        var host = urlObj.host.full;
        if (host) {
          var stripped = host;
          if (host.indexOf("www.") === 0) {
            stripped = host.substr(4);
          }
          urlObj.host.stripped = stripped;
        }
      }
    }
    module.exports = parseHost;
  }
});

// node_modules/relateurl/lib/parse/path.js
var require_path2 = __commonJS({
  "node_modules/relateurl/lib/parse/path.js"(exports, module) {
    "use strict";
    function isDirectoryIndex(resource, options) {
      var verdict = false;
      options.directoryIndexes.every(function(index) {
        if (index === resource) {
          verdict = true;
          return false;
        }
        return true;
      });
      return verdict;
    }
    function parsePath(urlObj, options) {
      var path = urlObj.path.absolute.string;
      if (path) {
        var lastSlash = path.lastIndexOf("/");
        if (lastSlash > -1) {
          if (++lastSlash < path.length) {
            var resource = path.substr(lastSlash);
            if (resource !== "." && resource !== "..") {
              urlObj.resource = resource;
              path = path.substr(0, lastSlash);
            } else {
              path += "/";
            }
          }
          urlObj.path.absolute.string = path;
          urlObj.path.absolute.array = splitPath(path);
        } else if (path === "." || path === "..") {
          path += "/";
          urlObj.path.absolute.string = path;
          urlObj.path.absolute.array = splitPath(path);
        } else {
          urlObj.resource = path;
          urlObj.path.absolute.string = null;
        }
        urlObj.extra.resourceIsIndex = isDirectoryIndex(urlObj.resource, options);
      }
    }
    function splitPath(path) {
      if (path !== "/") {
        var cleaned = [];
        path.split("/").forEach(function(dir) {
          if (dir !== "") {
            cleaned.push(dir);
          }
        });
        return cleaned;
      } else {
        return [];
      }
    }
    module.exports = parsePath;
  }
});

// node_modules/relateurl/lib/parse/port.js
var require_port = __commonJS({
  "node_modules/relateurl/lib/parse/port.js"(exports, module) {
    "use strict";
    function parsePort(urlObj, options) {
      var defaultPort = -1;
      for (var i in options.defaultPorts) {
        if (i === urlObj.scheme && options.defaultPorts.hasOwnProperty(i)) {
          defaultPort = options.defaultPorts[i];
          break;
        }
      }
      if (defaultPort > -1) {
        defaultPort = defaultPort.toString();
        if (urlObj.port === null) {
          urlObj.port = defaultPort;
        }
        urlObj.extra.portIsDefault = urlObj.port === defaultPort;
      }
    }
    module.exports = parsePort;
  }
});

// node_modules/relateurl/lib/parse/query.js
var require_query = __commonJS({
  "node_modules/relateurl/lib/parse/query.js"(exports, module) {
    "use strict";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function parseQuery(urlObj, options) {
      urlObj.query.string.full = stringify(urlObj.query.object, false);
      if (options.removeEmptyQueries) {
        urlObj.query.string.stripped = stringify(urlObj.query.object, true);
      }
    }
    function stringify(queryObj, removeEmptyQueries) {
      var count = 0;
      var str = "";
      for (var i in queryObj) {
        if (i !== "" && hasOwnProperty.call(queryObj, i) === true) {
          var value = queryObj[i];
          if (value !== "" || !removeEmptyQueries) {
            str += ++count === 1 ? "?" : "&";
            i = encodeURIComponent(i);
            if (value !== "") {
              str += i + "=" + encodeURIComponent(value).replace(/%20/g, "+");
            } else {
              str += i;
            }
          }
        }
      }
      return str;
    }
    module.exports = parseQuery;
  }
});

// node_modules/relateurl/lib/parse/urlstring.js
var require_urlstring = __commonJS({
  "node_modules/relateurl/lib/parse/urlstring.js"(exports, module) {
    "use strict";
    var _parseUrl = require_url().parse;
    function clean(urlObj) {
      var scheme = urlObj.protocol;
      if (scheme) {
        if (scheme.indexOf(":") === scheme.length - 1) {
          scheme = scheme.substr(0, scheme.length - 1);
        }
      }
      urlObj.host = {
        // TODO :: unescape(encodeURIComponent(s)) ? ... http://ecmanaut.blogspot.ca/2006/07/encoding-decoding-utf8-in-javascript.html
        full: urlObj.hostname,
        stripped: null
      };
      urlObj.path = {
        absolute: {
          array: null,
          string: urlObj.pathname
        },
        relative: {
          array: null,
          string: null
        }
      };
      urlObj.query = {
        object: urlObj.query,
        string: {
          full: null,
          stripped: null
        }
      };
      urlObj.extra = {
        hrefInfo: {
          minimumPathOnly: null,
          minimumResourceOnly: null,
          minimumQueryOnly: null,
          minimumHashOnly: null,
          empty: null,
          separatorOnlyQuery: urlObj.search === "?"
        },
        portIsDefault: null,
        relation: {
          maximumScheme: null,
          maximumAuth: null,
          maximumHost: null,
          maximumPort: null,
          maximumPath: null,
          maximumResource: null,
          maximumQuery: null,
          maximumHash: null,
          minimumScheme: null,
          minimumAuth: null,
          minimumHost: null,
          minimumPort: null,
          minimumPath: null,
          minimumResource: null,
          minimumQuery: null,
          minimumHash: null,
          overridesQuery: null
        },
        resourceIsIndex: null,
        slashes: urlObj.slashes
      };
      urlObj.resource = null;
      urlObj.scheme = scheme;
      delete urlObj.hostname;
      delete urlObj.pathname;
      delete urlObj.protocol;
      delete urlObj.search;
      delete urlObj.slashes;
      return urlObj;
    }
    function validScheme(url, options) {
      var valid = true;
      options.rejectedSchemes.every(function(rejectedScheme) {
        valid = !(url.indexOf(rejectedScheme + ":") === 0);
        return valid;
      });
      return valid;
    }
    function parseUrlString(url, options) {
      if (validScheme(url, options)) {
        return clean(_parseUrl(url, true, options.slashesDenoteHost));
      } else {
        return { href: url, valid: false };
      }
    }
    module.exports = parseUrlString;
  }
});

// node_modules/relateurl/lib/util/path.js
var require_path3 = __commonJS({
  "node_modules/relateurl/lib/util/path.js"(exports, module) {
    "use strict";
    function joinPath(pathArray) {
      if (pathArray.length > 0) {
        return pathArray.join("/") + "/";
      } else {
        return "";
      }
    }
    function resolveDotSegments(pathArray) {
      var pathAbsolute = [];
      pathArray.forEach(function(dir) {
        if (dir !== "..") {
          if (dir !== ".") {
            pathAbsolute.push(dir);
          }
        } else {
          if (pathAbsolute.length > 0) {
            pathAbsolute.splice(pathAbsolute.length - 1, 1);
          }
        }
      });
      return pathAbsolute;
    }
    module.exports = {
      join: joinPath,
      resolveDotSegments
    };
  }
});

// node_modules/relateurl/lib/parse/index.js
var require_parse = __commonJS({
  "node_modules/relateurl/lib/parse/index.js"(exports, module) {
    "use strict";
    var hrefInfo = require_hrefInfo();
    var parseHost = require_host();
    var parsePath = require_path2();
    var parsePort = require_port();
    var parseQuery = require_query();
    var parseUrlString = require_urlstring();
    var pathUtils = require_path3();
    function parseFromUrl(url, options, fallback) {
      if (url) {
        var urlObj = parseUrl(url, options);
        var pathArray = pathUtils.resolveDotSegments(urlObj.path.absolute.array);
        urlObj.path.absolute.array = pathArray;
        urlObj.path.absolute.string = "/" + pathUtils.join(pathArray);
        return urlObj;
      } else {
        return fallback;
      }
    }
    function parseUrl(url, options) {
      var urlObj = parseUrlString(url, options);
      if (urlObj.valid === false)
        return urlObj;
      parseHost(urlObj, options);
      parsePort(urlObj, options);
      parsePath(urlObj, options);
      parseQuery(urlObj, options);
      hrefInfo(urlObj);
      return urlObj;
    }
    module.exports = {
      from: parseFromUrl,
      to: parseUrl
    };
  }
});

// node_modules/relateurl/lib/relate/findRelation.js
var require_findRelation = __commonJS({
  "node_modules/relateurl/lib/relate/findRelation.js"(exports, module) {
    "use strict";
    function findRelation_upToPath(urlObj, siteUrlObj, options) {
      var pathOnly = urlObj.extra.hrefInfo.minimumPathOnly;
      var minimumScheme = urlObj.scheme === siteUrlObj.scheme || !urlObj.scheme;
      var minimumAuth = minimumScheme && (urlObj.auth === siteUrlObj.auth || options.removeAuth || pathOnly);
      var www = options.ignore_www ? "stripped" : "full";
      var minimumHost = minimumAuth && (urlObj.host[www] === siteUrlObj.host[www] || pathOnly);
      var minimumPort = minimumHost && (urlObj.port === siteUrlObj.port || pathOnly);
      urlObj.extra.relation.minimumScheme = minimumScheme;
      urlObj.extra.relation.minimumAuth = minimumAuth;
      urlObj.extra.relation.minimumHost = minimumHost;
      urlObj.extra.relation.minimumPort = minimumPort;
      urlObj.extra.relation.maximumScheme = !minimumScheme || minimumScheme && !minimumAuth;
      urlObj.extra.relation.maximumAuth = !minimumScheme || minimumScheme && !minimumHost;
      urlObj.extra.relation.maximumHost = !minimumScheme || minimumScheme && !minimumPort;
    }
    function findRelation_pathOn(urlObj, siteUrlObj, options) {
      var queryOnly = urlObj.extra.hrefInfo.minimumQueryOnly;
      var hashOnly = urlObj.extra.hrefInfo.minimumHashOnly;
      var empty = urlObj.extra.hrefInfo.empty;
      var minimumPort = urlObj.extra.relation.minimumPort;
      var minimumScheme = urlObj.extra.relation.minimumScheme;
      var minimumPath = minimumPort && urlObj.path.absolute.string === siteUrlObj.path.absolute.string;
      var matchingResource = urlObj.resource === siteUrlObj.resource || !urlObj.resource && siteUrlObj.extra.resourceIsIndex || options.removeDirectoryIndexes && urlObj.extra.resourceIsIndex && !siteUrlObj.resource;
      var minimumResource = minimumPath && (matchingResource || queryOnly || hashOnly || empty);
      var query = options.removeEmptyQueries ? "stripped" : "full";
      var urlQuery = urlObj.query.string[query];
      var siteUrlQuery = siteUrlObj.query.string[query];
      var minimumQuery = minimumResource && !!urlQuery && urlQuery === siteUrlQuery || (hashOnly || empty) && !urlObj.extra.hrefInfo.separatorOnlyQuery;
      var minimumHash = minimumQuery && urlObj.hash === siteUrlObj.hash;
      urlObj.extra.relation.minimumPath = minimumPath;
      urlObj.extra.relation.minimumResource = minimumResource;
      urlObj.extra.relation.minimumQuery = minimumQuery;
      urlObj.extra.relation.minimumHash = minimumHash;
      urlObj.extra.relation.maximumPort = !minimumScheme || minimumScheme && !minimumPath;
      urlObj.extra.relation.maximumPath = !minimumScheme || minimumScheme && !minimumResource;
      urlObj.extra.relation.maximumResource = !minimumScheme || minimumScheme && !minimumQuery;
      urlObj.extra.relation.maximumQuery = !minimumScheme || minimumScheme && !minimumHash;
      urlObj.extra.relation.maximumHash = !minimumScheme || minimumScheme && !minimumHash;
      urlObj.extra.relation.overridesQuery = minimumPath && urlObj.extra.relation.maximumResource && !minimumQuery && !!siteUrlQuery;
    }
    module.exports = {
      pathOn: findRelation_pathOn,
      upToPath: findRelation_upToPath
    };
  }
});

// node_modules/relateurl/lib/relate/absolutize.js
var require_absolutize = __commonJS({
  "node_modules/relateurl/lib/relate/absolutize.js"(exports, module) {
    "use strict";
    var findRelation = require_findRelation();
    var objUtils = require_object();
    var pathUtils = require_path3();
    function absolutize(urlObj, siteUrlObj, options) {
      findRelation.upToPath(urlObj, siteUrlObj, options);
      if (urlObj.extra.relation.minimumScheme)
        urlObj.scheme = siteUrlObj.scheme;
      if (urlObj.extra.relation.minimumAuth)
        urlObj.auth = siteUrlObj.auth;
      if (urlObj.extra.relation.minimumHost)
        urlObj.host = objUtils.clone(siteUrlObj.host);
      if (urlObj.extra.relation.minimumPort)
        copyPort(urlObj, siteUrlObj);
      if (urlObj.extra.relation.minimumScheme)
        copyPath(urlObj, siteUrlObj);
      findRelation.pathOn(urlObj, siteUrlObj, options);
      if (urlObj.extra.relation.minimumResource)
        copyResource(urlObj, siteUrlObj);
      if (urlObj.extra.relation.minimumQuery)
        urlObj.query = objUtils.clone(siteUrlObj.query);
      if (urlObj.extra.relation.minimumHash)
        urlObj.hash = siteUrlObj.hash;
    }
    function copyPath(urlObj, siteUrlObj) {
      if (urlObj.extra.relation.maximumHost || !urlObj.extra.hrefInfo.minimumResourceOnly) {
        var pathArray = urlObj.path.absolute.array;
        var pathString = "/";
        if (pathArray) {
          if (urlObj.extra.hrefInfo.minimumPathOnly && urlObj.path.absolute.string.indexOf("/") !== 0) {
            pathArray = siteUrlObj.path.absolute.array.concat(pathArray);
          }
          pathArray = pathUtils.resolveDotSegments(pathArray);
          pathString += pathUtils.join(pathArray);
        } else {
          pathArray = [];
        }
        urlObj.path.absolute.array = pathArray;
        urlObj.path.absolute.string = pathString;
      } else {
        urlObj.path = objUtils.clone(siteUrlObj.path);
      }
    }
    function copyPort(urlObj, siteUrlObj) {
      urlObj.port = siteUrlObj.port;
      urlObj.extra.portIsDefault = siteUrlObj.extra.portIsDefault;
    }
    function copyResource(urlObj, siteUrlObj) {
      urlObj.resource = siteUrlObj.resource;
      urlObj.extra.resourceIsIndex = siteUrlObj.extra.resourceIsIndex;
    }
    module.exports = absolutize;
  }
});

// node_modules/relateurl/lib/relate/relativize.js
var require_relativize = __commonJS({
  "node_modules/relateurl/lib/relate/relativize.js"(exports, module) {
    "use strict";
    var pathUtils = require_path3();
    function relatePath(absolutePath, siteAbsolutePath) {
      var relativePath = [];
      var related = true;
      var parentIndex = -1;
      siteAbsolutePath.forEach(function(siteAbsoluteDir, i) {
        if (related) {
          if (absolutePath[i] !== siteAbsoluteDir) {
            related = false;
          } else {
            parentIndex = i;
          }
        }
        if (!related) {
          relativePath.push("..");
        }
      });
      absolutePath.forEach(function(dir, i) {
        if (i > parentIndex) {
          relativePath.push(dir);
        }
      });
      return relativePath;
    }
    function relativize(urlObj, siteUrlObj, options) {
      if (urlObj.extra.relation.minimumScheme) {
        var pathArray = relatePath(urlObj.path.absolute.array, siteUrlObj.path.absolute.array);
        urlObj.path.relative.array = pathArray;
        urlObj.path.relative.string = pathUtils.join(pathArray);
      }
    }
    module.exports = relativize;
  }
});

// node_modules/relateurl/lib/relate/index.js
var require_relate = __commonJS({
  "node_modules/relateurl/lib/relate/index.js"(exports, module) {
    "use strict";
    var absolutize = require_absolutize();
    var relativize = require_relativize();
    function relateUrl(siteUrlObj, urlObj, options) {
      absolutize(urlObj, siteUrlObj, options);
      relativize(urlObj, siteUrlObj, options);
      return urlObj;
    }
    module.exports = relateUrl;
  }
});

// node_modules/relateurl/lib/index.js
var require_lib = __commonJS({
  "node_modules/relateurl/lib/index.js"(exports, module) {
    "use strict";
    var constants = require_constants();
    var formatUrl = require_format2();
    var getOptions = require_options();
    var objUtils = require_object();
    var parseUrl = require_parse();
    var relateUrl = require_relate();
    function RelateUrl(from, options) {
      this.options = getOptions(
        options,
        {
          defaultPorts: { ftp: 21, http: 80, https: 443 },
          directoryIndexes: ["index.html"],
          ignore_www: false,
          output: RelateUrl.SHORTEST,
          rejectedSchemes: ["data", "javascript", "mailto"],
          removeAuth: false,
          removeDirectoryIndexes: true,
          removeEmptyQueries: false,
          removeRootTrailingSlash: true,
          schemeRelative: true,
          site: void 0,
          slashesDenoteHost: true
        }
      );
      this.from = parseUrl.from(from, this.options, null);
    }
    RelateUrl.prototype.relate = function(from, to, options) {
      if (objUtils.isPlainObject(to)) {
        options = to;
        to = from;
        from = null;
      } else if (!to) {
        to = from;
        from = null;
      }
      options = getOptions(options, this.options);
      from = from || options.site;
      from = parseUrl.from(from, options, this.from);
      if (!from || !from.href) {
        throw new Error("from value not defined.");
      } else if (from.extra.hrefInfo.minimumPathOnly) {
        throw new Error("from value supplied is not absolute: " + from.href);
      }
      to = parseUrl.to(to, options);
      if (to.valid === false)
        return to.href;
      to = relateUrl(from, to, options);
      to = formatUrl(to, options);
      return to;
    };
    RelateUrl.relate = function(from, to, options) {
      return new RelateUrl().relate(from, to, options);
    };
    objUtils.shallowMerge(RelateUrl, constants);
    module.exports = RelateUrl;
  }
});

// node_modules/html-minifier-terser/src/tokenchain.js
var require_tokenchain = __commonJS({
  "node_modules/html-minifier-terser/src/tokenchain.js"(exports, module) {
    "use strict";
    function Sorter() {
    }
    Sorter.prototype.sort = function(tokens, fromIndex) {
      fromIndex = fromIndex || 0;
      for (var i = 0, len = this.keys.length; i < len; i++) {
        var key = this.keys[i];
        var token = key.slice(1);
        var index = tokens.indexOf(token, fromIndex);
        if (index !== -1) {
          do {
            if (index !== fromIndex) {
              tokens.splice(index, 1);
              tokens.splice(fromIndex, 0, token);
            }
            fromIndex++;
          } while ((index = tokens.indexOf(token, fromIndex)) !== -1);
          return this[key].sort(tokens, fromIndex);
        }
      }
      return tokens;
    };
    function TokenChain() {
    }
    TokenChain.prototype = {
      add: function(tokens) {
        var self2 = this;
        tokens.forEach(function(token) {
          var key = "$" + token;
          if (!self2[key]) {
            self2[key] = [];
            self2[key].processed = 0;
          }
          self2[key].push(tokens);
        });
      },
      createSorter: function() {
        var self2 = this;
        var sorter = new Sorter();
        sorter.keys = Object.keys(self2).sort(function(j, k) {
          var m2 = self2[j].length;
          var n2 = self2[k].length;
          return m2 < n2 ? 1 : m2 > n2 ? -1 : j < k ? -1 : j > k ? 1 : 0;
        }).filter(function(key) {
          if (self2[key].processed < self2[key].length) {
            var token = key.slice(1);
            var chain = new TokenChain();
            self2[key].forEach(function(tokens) {
              var index;
              while ((index = tokens.indexOf(token)) !== -1) {
                tokens.splice(index, 1);
              }
              tokens.forEach(function(token2) {
                self2["$" + token2].processed++;
              });
              chain.add(tokens.slice(0));
            });
            sorter[key] = chain.createSorter();
            return true;
          }
          return false;
        });
        return sorter;
      }
    };
    module.exports = TokenChain;
  }
});

// node_modules/@jridgewell/source-map/dist/source-map.umd.js
var require_source_map_umd = __commonJS({
  "node_modules/@jridgewell/source-map/dist/source-map.umd.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.sourceMap = {}));
    })(exports, function(exports2) {
      "use strict";
      const comma = ",".charCodeAt(0);
      const semicolon = ";".charCodeAt(0);
      const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      const intToChar = new Uint8Array(64);
      const charToInteger = new Uint8Array(128);
      for (let i = 0; i < chars.length; i++) {
        const c2 = chars.charCodeAt(i);
        charToInteger[c2] = i;
        intToChar[i] = c2;
      }
      const td = typeof TextDecoder !== "undefined" ? new TextDecoder() : typeof Buffer !== "undefined" ? {
        decode(buf) {
          const out = Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength);
          return out.toString();
        }
      } : {
        decode(buf) {
          let out = "";
          for (let i = 0; i < buf.length; i++) {
            out += String.fromCharCode(buf[i]);
          }
          return out;
        }
      };
      function decode(mappings) {
        const state = new Int32Array(5);
        const decoded = [];
        let line = [];
        let sorted = true;
        let lastCol = 0;
        for (let i = 0; i < mappings.length; ) {
          const c2 = mappings.charCodeAt(i);
          if (c2 === comma) {
            i++;
          } else if (c2 === semicolon) {
            state[0] = lastCol = 0;
            if (!sorted)
              sort(line);
            sorted = true;
            decoded.push(line);
            line = [];
            i++;
          } else {
            i = decodeInteger(mappings, i, state, 0);
            const col = state[0];
            if (col < lastCol)
              sorted = false;
            lastCol = col;
            if (!hasMoreSegments(mappings, i)) {
              line.push([col]);
              continue;
            }
            i = decodeInteger(mappings, i, state, 1);
            i = decodeInteger(mappings, i, state, 2);
            i = decodeInteger(mappings, i, state, 3);
            if (!hasMoreSegments(mappings, i)) {
              line.push([col, state[1], state[2], state[3]]);
              continue;
            }
            i = decodeInteger(mappings, i, state, 4);
            line.push([col, state[1], state[2], state[3], state[4]]);
          }
        }
        if (!sorted)
          sort(line);
        decoded.push(line);
        return decoded;
      }
      function decodeInteger(mappings, pos, state, j) {
        let value = 0;
        let shift = 0;
        let integer = 0;
        do {
          const c2 = mappings.charCodeAt(pos++);
          integer = charToInteger[c2];
          value |= (integer & 31) << shift;
          shift += 5;
        } while (integer & 32);
        const shouldNegate = value & 1;
        value >>>= 1;
        if (shouldNegate) {
          value = -2147483648 | -value;
        }
        state[j] += value;
        return pos;
      }
      function hasMoreSegments(mappings, i) {
        if (i >= mappings.length)
          return false;
        const c2 = mappings.charCodeAt(i);
        if (c2 === comma || c2 === semicolon)
          return false;
        return true;
      }
      function sort(line) {
        line.sort(sortComparator$1);
      }
      function sortComparator$1(a, b) {
        return a[0] - b[0];
      }
      function encode(decoded) {
        const state = new Int32Array(5);
        let buf = new Uint8Array(1024);
        let pos = 0;
        for (let i = 0; i < decoded.length; i++) {
          const line = decoded[i];
          if (i > 0) {
            buf = reserve(buf, pos, 1);
            buf[pos++] = semicolon;
          }
          if (line.length === 0)
            continue;
          state[0] = 0;
          for (let j = 0; j < line.length; j++) {
            const segment = line[j];
            buf = reserve(buf, pos, 36);
            if (j > 0)
              buf[pos++] = comma;
            pos = encodeInteger(buf, pos, state, segment, 0);
            if (segment.length === 1)
              continue;
            pos = encodeInteger(buf, pos, state, segment, 1);
            pos = encodeInteger(buf, pos, state, segment, 2);
            pos = encodeInteger(buf, pos, state, segment, 3);
            if (segment.length === 4)
              continue;
            pos = encodeInteger(buf, pos, state, segment, 4);
          }
        }
        return td.decode(buf.subarray(0, pos));
      }
      function reserve(buf, pos, count) {
        if (buf.length > pos + count)
          return buf;
        const swap = new Uint8Array(buf.length * 2);
        swap.set(buf);
        return swap;
      }
      function encodeInteger(buf, pos, state, segment, j) {
        const next = segment[j];
        let num = next - state[j];
        state[j] = next;
        num = num < 0 ? -num << 1 | 1 : num << 1;
        do {
          let clamped = num & 31;
          num >>>= 5;
          if (num > 0)
            clamped |= 32;
          buf[pos++] = intToChar[clamped];
        } while (num > 0);
        return pos;
      }
      const schemeRegex = /^[\w+.-]+:\/\//;
      const urlRegex = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?/;
      const fileRegex = /^file:(?:\/\/((?![a-z]:)[^/]*)?)?(\/?.*)/i;
      function isAbsoluteUrl(input) {
        return schemeRegex.test(input);
      }
      function isSchemeRelativeUrl(input) {
        return input.startsWith("//");
      }
      function isAbsolutePath(input) {
        return input.startsWith("/");
      }
      function isFileUrl(input) {
        return input.startsWith("file:");
      }
      function parseAbsoluteUrl(input) {
        const match = urlRegex.exec(input);
        return makeUrl(match[1], match[2] || "", match[3], match[4] || "", match[5] || "/");
      }
      function parseFileUrl(input) {
        const match = fileRegex.exec(input);
        const path = match[2];
        return makeUrl("file:", "", match[1] || "", "", isAbsolutePath(path) ? path : "/" + path);
      }
      function makeUrl(scheme, user, host, port, path) {
        return {
          scheme,
          user,
          host,
          port,
          path,
          relativePath: false
        };
      }
      function parseUrl(input) {
        if (isSchemeRelativeUrl(input)) {
          const url2 = parseAbsoluteUrl("http:" + input);
          url2.scheme = "";
          return url2;
        }
        if (isAbsolutePath(input)) {
          const url2 = parseAbsoluteUrl("http://foo.com" + input);
          url2.scheme = "";
          url2.host = "";
          return url2;
        }
        if (isFileUrl(input))
          return parseFileUrl(input);
        if (isAbsoluteUrl(input))
          return parseAbsoluteUrl(input);
        const url = parseAbsoluteUrl("http://foo.com/" + input);
        url.scheme = "";
        url.host = "";
        url.relativePath = true;
        return url;
      }
      function stripPathFilename(path) {
        if (path.endsWith("/.."))
          return path;
        const index = path.lastIndexOf("/");
        return path.slice(0, index + 1);
      }
      function mergePaths(url, base) {
        if (!url.relativePath)
          return;
        normalizePath(base);
        if (url.path === "/") {
          url.path = base.path;
        } else {
          url.path = stripPathFilename(base.path) + url.path;
        }
        url.relativePath = base.relativePath;
      }
      function normalizePath(url) {
        const { relativePath } = url;
        const pieces = url.path.split("/");
        let pointer = 1;
        let positive = 0;
        let addTrailingSlash = false;
        for (let i = 1; i < pieces.length; i++) {
          const piece = pieces[i];
          if (!piece) {
            addTrailingSlash = true;
            continue;
          }
          addTrailingSlash = false;
          if (piece === ".")
            continue;
          if (piece === "..") {
            if (positive) {
              addTrailingSlash = true;
              positive--;
              pointer--;
            } else if (relativePath) {
              pieces[pointer++] = piece;
            }
            continue;
          }
          pieces[pointer++] = piece;
          positive++;
        }
        let path = "";
        for (let i = 1; i < pointer; i++) {
          path += "/" + pieces[i];
        }
        if (!path || addTrailingSlash && !path.endsWith("/..")) {
          path += "/";
        }
        url.path = path;
      }
      function resolve$1(input, base) {
        if (!input && !base)
          return "";
        const url = parseUrl(input);
        if (base && !url.scheme) {
          const baseUrl = parseUrl(base);
          url.scheme = baseUrl.scheme;
          if (!url.host) {
            url.user = baseUrl.user;
            url.host = baseUrl.host;
            url.port = baseUrl.port;
          }
          mergePaths(url, baseUrl);
        }
        normalizePath(url);
        if (url.relativePath) {
          const path = url.path.slice(1);
          if (!path)
            return ".";
          const keepRelative = (base || input).startsWith(".");
          return !keepRelative || path.startsWith(".") ? path : "./" + path;
        }
        if (!url.scheme && !url.host)
          return url.path;
        return `${url.scheme}//${url.user}${url.host}${url.port}${url.path}`;
      }
      function resolve(input, base) {
        if (base && !base.endsWith("/"))
          base += "/";
        return resolve$1(input, base);
      }
      function stripFilename(path) {
        if (!path)
          return "";
        const index = path.lastIndexOf("/");
        return path.slice(0, index + 1);
      }
      const COLUMN$1 = 0;
      const SOURCES_INDEX$1 = 1;
      const SOURCE_LINE$1 = 2;
      const SOURCE_COLUMN$1 = 3;
      const NAMES_INDEX$1 = 4;
      function maybeSort(mappings, owned) {
        const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);
        if (unsortedIndex === mappings.length)
          return mappings;
        if (!owned)
          mappings = mappings.slice();
        for (let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1)) {
          mappings[i] = sortSegments(mappings[i], owned);
        }
        return mappings;
      }
      function nextUnsortedSegmentLine(mappings, start) {
        for (let i = start; i < mappings.length; i++) {
          if (!isSorted(mappings[i]))
            return i;
        }
        return mappings.length;
      }
      function isSorted(line) {
        for (let j = 1; j < line.length; j++) {
          if (line[j][COLUMN$1] < line[j - 1][COLUMN$1]) {
            return false;
          }
        }
        return true;
      }
      function sortSegments(line, owned) {
        if (!owned)
          line = line.slice();
        return line.sort(sortComparator);
      }
      function sortComparator(a, b) {
        return a[COLUMN$1] - b[COLUMN$1];
      }
      let found = false;
      function binarySearch(haystack, needle, low, high) {
        while (low <= high) {
          const mid = low + (high - low >> 1);
          const cmp = haystack[mid][COLUMN$1] - needle;
          if (cmp === 0) {
            found = true;
            return mid;
          }
          if (cmp < 0) {
            low = mid + 1;
          } else {
            high = mid - 1;
          }
        }
        found = false;
        return low - 1;
      }
      function upperBound(haystack, needle, index) {
        for (let i = index + 1; i < haystack.length; i++, index++) {
          if (haystack[i][COLUMN$1] !== needle)
            break;
        }
        return index;
      }
      function lowerBound(haystack, needle, index) {
        for (let i = index - 1; i >= 0; i--, index--) {
          if (haystack[i][COLUMN$1] !== needle)
            break;
        }
        return index;
      }
      function memoizedState() {
        return {
          lastKey: -1,
          lastNeedle: -1,
          lastIndex: -1
        };
      }
      function memoizedBinarySearch(haystack, needle, state, key) {
        const { lastKey, lastNeedle, lastIndex } = state;
        let low = 0;
        let high = haystack.length - 1;
        if (key === lastKey) {
          if (needle === lastNeedle) {
            found = lastIndex !== -1 && haystack[lastIndex][COLUMN$1] === needle;
            return lastIndex;
          }
          if (needle >= lastNeedle) {
            low = lastIndex === -1 ? 0 : lastIndex;
          } else {
            high = lastIndex;
          }
        }
        state.lastKey = key;
        state.lastNeedle = needle;
        return state.lastIndex = binarySearch(haystack, needle, low, high);
      }
      const AnyMap = function(map, mapUrl) {
        const parsed = typeof map === "string" ? JSON.parse(map) : map;
        if (!("sections" in parsed))
          return new TraceMap(parsed, mapUrl);
        const mappings = [];
        const sources = [];
        const sourcesContent = [];
        const names = [];
        const { sections } = parsed;
        let i = 0;
        for (; i < sections.length - 1; i++) {
          const no = sections[i + 1].offset;
          addSection(sections[i], mapUrl, mappings, sources, sourcesContent, names, no.line, no.column);
        }
        if (sections.length > 0) {
          addSection(sections[i], mapUrl, mappings, sources, sourcesContent, names, Infinity, Infinity);
        }
        const joined = {
          version: 3,
          file: parsed.file,
          names,
          sources,
          sourcesContent,
          mappings
        };
        return presortedDecodedMap(joined);
      };
      function addSection(section, mapUrl, mappings, sources, sourcesContent, names, stopLine, stopColumn) {
        const map = AnyMap(section.map, mapUrl);
        const { line: lineOffset, column: columnOffset } = section.offset;
        const sourcesOffset = sources.length;
        const namesOffset = names.length;
        const decoded = decodedMappings(map);
        const { resolvedSources } = map;
        append(sources, resolvedSources);
        append(sourcesContent, map.sourcesContent || fillSourcesContent(resolvedSources.length));
        append(names, map.names);
        for (let i = mappings.length; i <= lineOffset; i++)
          mappings.push([]);
        const stopI = stopLine - lineOffset;
        const len = Math.min(decoded.length, stopI + 1);
        for (let i = 0; i < len; i++) {
          const line = decoded[i];
          const out = i === 0 ? mappings[lineOffset] : mappings[lineOffset + i] = [];
          const cOffset = i === 0 ? columnOffset : 0;
          for (let j = 0; j < line.length; j++) {
            const seg = line[j];
            const column = cOffset + seg[COLUMN$1];
            if (i === stopI && column >= stopColumn)
              break;
            if (seg.length === 1) {
              out.push([column]);
              continue;
            }
            const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX$1];
            const sourceLine = seg[SOURCE_LINE$1];
            const sourceColumn = seg[SOURCE_COLUMN$1];
            if (seg.length === 4) {
              out.push([column, sourcesIndex, sourceLine, sourceColumn]);
              continue;
            }
            out.push([column, sourcesIndex, sourceLine, sourceColumn, namesOffset + seg[NAMES_INDEX$1]]);
          }
        }
      }
      function append(arr, other) {
        for (let i = 0; i < other.length; i++)
          arr.push(other[i]);
      }
      function fillSourcesContent(len) {
        const sourcesContent = [];
        for (let i = 0; i < len; i++)
          sourcesContent[i] = null;
        return sourcesContent;
      }
      const INVALID_ORIGINAL_MAPPING = Object.freeze({
        source: null,
        line: null,
        column: null,
        name: null
      });
      Object.freeze({
        line: null,
        column: null
      });
      const LINE_GTR_ZERO = "`line` must be greater than 0 (lines start at line 1)";
      const COL_GTR_EQ_ZERO = "`column` must be greater than or equal to 0 (columns start at column 0)";
      const LEAST_UPPER_BOUND = -1;
      const GREATEST_LOWER_BOUND = 1;
      let decodedMappings;
      let originalPositionFor;
      let presortedDecodedMap;
      class TraceMap {
        constructor(map, mapUrl) {
          this._decodedMemo = memoizedState();
          this._bySources = void 0;
          this._bySourceMemos = void 0;
          const isString = typeof map === "string";
          if (!isString && map.constructor === TraceMap)
            return map;
          const parsed = isString ? JSON.parse(map) : map;
          const { version, file, names, sourceRoot, sources, sourcesContent } = parsed;
          this.version = version;
          this.file = file;
          this.names = names;
          this.sourceRoot = sourceRoot;
          this.sources = sources;
          this.sourcesContent = sourcesContent;
          if (sourceRoot || mapUrl) {
            const from = resolve(sourceRoot || "", stripFilename(mapUrl));
            this.resolvedSources = sources.map((s) => resolve(s || "", from));
          } else {
            this.resolvedSources = sources.map((s) => s || "");
          }
          const { mappings } = parsed;
          if (typeof mappings === "string") {
            this._encoded = mappings;
            this._decoded = void 0;
          } else {
            this._encoded = void 0;
            this._decoded = maybeSort(mappings, isString);
          }
        }
      }
      (() => {
        decodedMappings = (map) => {
          return map._decoded || (map._decoded = decode(map._encoded));
        };
        originalPositionFor = (map, { line, column, bias }) => {
          line--;
          if (line < 0)
            throw new Error(LINE_GTR_ZERO);
          if (column < 0)
            throw new Error(COL_GTR_EQ_ZERO);
          const decoded = decodedMappings(map);
          if (line >= decoded.length)
            return INVALID_ORIGINAL_MAPPING;
          const segment = traceSegmentInternal(decoded[line], map._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND);
          if (segment == null)
            return INVALID_ORIGINAL_MAPPING;
          if (segment.length == 1)
            return INVALID_ORIGINAL_MAPPING;
          const { names, resolvedSources } = map;
          return {
            source: resolvedSources[segment[SOURCES_INDEX$1]],
            line: segment[SOURCE_LINE$1] + 1,
            column: segment[SOURCE_COLUMN$1],
            name: segment.length === 5 ? names[segment[NAMES_INDEX$1]] : null
          };
        };
        presortedDecodedMap = (map, mapUrl) => {
          const clone = Object.assign({}, map);
          clone.mappings = [];
          const tracer = new TraceMap(clone, mapUrl);
          tracer._decoded = map.mappings;
          return tracer;
        };
      })();
      function traceSegmentInternal(segments, memo, line, column, bias) {
        let index = memoizedBinarySearch(segments, column, memo, line);
        if (found) {
          index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index);
        } else if (bias === LEAST_UPPER_BOUND)
          index++;
        if (index === -1 || index === segments.length)
          return null;
        return segments[index];
      }
      let get;
      let put;
      class SetArray {
        constructor() {
          this._indexes = { __proto__: null };
          this.array = [];
        }
      }
      (() => {
        get = (strarr, key) => strarr._indexes[key];
        put = (strarr, key) => {
          const index = get(strarr, key);
          if (index !== void 0)
            return index;
          const { array, _indexes: indexes } = strarr;
          return indexes[key] = array.push(key) - 1;
        };
      })();
      const COLUMN = 0;
      const SOURCES_INDEX = 1;
      const SOURCE_LINE = 2;
      const SOURCE_COLUMN = 3;
      const NAMES_INDEX = 4;
      const NO_NAME = -1;
      let maybeAddMapping;
      let setSourceContent;
      let toDecodedMap;
      let toEncodedMap;
      let addSegmentInternal;
      class GenMapping {
        constructor({ file, sourceRoot } = {}) {
          this._names = new SetArray();
          this._sources = new SetArray();
          this._sourcesContent = [];
          this._mappings = [];
          this.file = file;
          this.sourceRoot = sourceRoot;
        }
      }
      (() => {
        maybeAddMapping = (map, mapping) => {
          return addMappingInternal(true, map, mapping);
        };
        setSourceContent = (map, source, content) => {
          const { _sources: sources, _sourcesContent: sourcesContent } = map;
          sourcesContent[put(sources, source)] = content;
        };
        toDecodedMap = (map) => {
          const { file, sourceRoot, _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = map;
          removeEmptyFinalLines(mappings);
          return {
            version: 3,
            file: file || void 0,
            names: names.array,
            sourceRoot: sourceRoot || void 0,
            sources: sources.array,
            sourcesContent,
            mappings
          };
        };
        toEncodedMap = (map) => {
          const decoded = toDecodedMap(map);
          return Object.assign(Object.assign({}, decoded), { mappings: encode(decoded.mappings) });
        };
        addSegmentInternal = (skipable, map, genLine, genColumn, source, sourceLine, sourceColumn, name) => {
          const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = map;
          const line = getLine(mappings, genLine);
          const index = getColumnIndex(line, genColumn);
          if (!source) {
            if (skipable && skipSourceless(line, index))
              return;
            return insert(line, index, [genColumn]);
          }
          const sourcesIndex = put(sources, source);
          const namesIndex = name ? put(names, name) : NO_NAME;
          if (sourcesIndex === sourcesContent.length)
            sourcesContent[sourcesIndex] = null;
          if (skipable && skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) {
            return;
          }
          return insert(line, index, name ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex] : [genColumn, sourcesIndex, sourceLine, sourceColumn]);
        };
      })();
      function getLine(mappings, index) {
        for (let i = mappings.length; i <= index; i++) {
          mappings[i] = [];
        }
        return mappings[index];
      }
      function getColumnIndex(line, genColumn) {
        let index = line.length;
        for (let i = index - 1; i >= 0; index = i--) {
          const current = line[i];
          if (genColumn >= current[COLUMN])
            break;
        }
        return index;
      }
      function insert(array, index, value) {
        for (let i = array.length; i > index; i--) {
          array[i] = array[i - 1];
        }
        array[index] = value;
      }
      function removeEmptyFinalLines(mappings) {
        const { length } = mappings;
        let len = length;
        for (let i = len - 1; i >= 0; len = i, i--) {
          if (mappings[i].length > 0)
            break;
        }
        if (len < length)
          mappings.length = len;
      }
      function skipSourceless(line, index) {
        if (index === 0)
          return true;
        const prev = line[index - 1];
        return prev.length === 1;
      }
      function skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex) {
        if (index === 0)
          return false;
        const prev = line[index - 1];
        if (prev.length === 1)
          return false;
        return sourcesIndex === prev[SOURCES_INDEX] && sourceLine === prev[SOURCE_LINE] && sourceColumn === prev[SOURCE_COLUMN] && namesIndex === (prev.length === 5 ? prev[NAMES_INDEX] : NO_NAME);
      }
      function addMappingInternal(skipable, map, mapping) {
        const { generated, source, original, name } = mapping;
        if (!source) {
          return addSegmentInternal(skipable, map, generated.line - 1, generated.column, null, null, null, null);
        }
        const s = source;
        return addSegmentInternal(skipable, map, generated.line - 1, generated.column, s, original.line - 1, original.column, name);
      }
      class SourceMapConsumer {
        constructor(map, mapUrl) {
          const trace = this._map = new AnyMap(map, mapUrl);
          this.file = trace.file;
          this.names = trace.names;
          this.sourceRoot = trace.sourceRoot;
          this.sources = trace.resolvedSources;
          this.sourcesContent = trace.sourcesContent;
        }
        originalPositionFor(needle) {
          return originalPositionFor(this._map, needle);
        }
        destroy() {
        }
      }
      class SourceMapGenerator {
        constructor(opts) {
          this._map = new GenMapping(opts);
        }
        addMapping(mapping) {
          maybeAddMapping(this._map, mapping);
        }
        setSourceContent(source, content) {
          setSourceContent(this._map, source, content);
        }
        toJSON() {
          return toEncodedMap(this._map);
        }
        toDecodedMap() {
          return toDecodedMap(this._map);
        }
      }
      exports2.SourceMapConsumer = SourceMapConsumer;
      exports2.SourceMapGenerator = SourceMapGenerator;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// node_modules/acorn/dist/acorn.js
var require_acorn = __commonJS({
  "node_modules/acorn/dist/acorn.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.acorn = {}));
    })(exports, function(exports2) {
      "use strict";
      var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
      var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];
      var nonASCIIidentifierChars = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࢘-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‌‍‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯・꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿･";
      var nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟊꟐꟑꟓꟕ-ꟙꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
      var reservedWords = {
        3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
        5: "class enum extends super const export import",
        6: "enum",
        strict: "implements interface let package private protected public static yield",
        strictBind: "eval arguments"
      };
      var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
      var keywords$1 = {
        5: ecma5AndLessKeywords,
        "5module": ecma5AndLessKeywords + " export import",
        6: ecma5AndLessKeywords + " const class extends export import super"
      };
      var keywordRelationalOperator = /^in(stanceof)?$/;
      var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
      var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
      function isInAstralSet(code, set) {
        var pos = 65536;
        for (var i2 = 0; i2 < set.length; i2 += 2) {
          pos += set[i2];
          if (pos > code) {
            return false;
          }
          pos += set[i2 + 1];
          if (pos >= code) {
            return true;
          }
        }
        return false;
      }
      function isIdentifierStart(code, astral) {
        if (code < 65) {
          return code === 36;
        }
        if (code < 91) {
          return true;
        }
        if (code < 97) {
          return code === 95;
        }
        if (code < 123) {
          return true;
        }
        if (code <= 65535) {
          return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
        }
        if (astral === false) {
          return false;
        }
        return isInAstralSet(code, astralIdentifierStartCodes);
      }
      function isIdentifierChar(code, astral) {
        if (code < 48) {
          return code === 36;
        }
        if (code < 58) {
          return true;
        }
        if (code < 65) {
          return false;
        }
        if (code < 91) {
          return true;
        }
        if (code < 97) {
          return code === 95;
        }
        if (code < 123) {
          return true;
        }
        if (code <= 65535) {
          return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
        }
        if (astral === false) {
          return false;
        }
        return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
      }
      var TokenType = function TokenType2(label, conf) {
        if (conf === void 0)
          conf = {};
        this.label = label;
        this.keyword = conf.keyword;
        this.beforeExpr = !!conf.beforeExpr;
        this.startsExpr = !!conf.startsExpr;
        this.isLoop = !!conf.isLoop;
        this.isAssign = !!conf.isAssign;
        this.prefix = !!conf.prefix;
        this.postfix = !!conf.postfix;
        this.binop = conf.binop || null;
        this.updateContext = null;
      };
      function binop(name, prec) {
        return new TokenType(name, { beforeExpr: true, binop: prec });
      }
      var beforeExpr = { beforeExpr: true }, startsExpr = { startsExpr: true };
      var keywords = {};
      function kw(name, options) {
        if (options === void 0)
          options = {};
        options.keyword = name;
        return keywords[name] = new TokenType(name, options);
      }
      var types$1 = {
        num: new TokenType("num", startsExpr),
        regexp: new TokenType("regexp", startsExpr),
        string: new TokenType("string", startsExpr),
        name: new TokenType("name", startsExpr),
        privateId: new TokenType("privateId", startsExpr),
        eof: new TokenType("eof"),
        // Punctuation token types.
        bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
        bracketR: new TokenType("]"),
        braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
        braceR: new TokenType("}"),
        parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
        parenR: new TokenType(")"),
        comma: new TokenType(",", beforeExpr),
        semi: new TokenType(";", beforeExpr),
        colon: new TokenType(":", beforeExpr),
        dot: new TokenType("."),
        question: new TokenType("?", beforeExpr),
        questionDot: new TokenType("?."),
        arrow: new TokenType("=>", beforeExpr),
        template: new TokenType("template"),
        invalidTemplate: new TokenType("invalidTemplate"),
        ellipsis: new TokenType("...", beforeExpr),
        backQuote: new TokenType("`", startsExpr),
        dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),
        // Operators. These carry several kinds of properties to help the
        // parser use them properly (the presence of these properties is
        // what categorizes them as operators).
        //
        // `binop`, when present, specifies that this operator is a binary
        // operator, and will refer to its precedence.
        //
        // `prefix` and `postfix` mark the operator as a prefix or postfix
        // unary operator.
        //
        // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
        // binary operators with a very low precedence, that should result
        // in AssignmentExpression nodes.
        eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
        assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
        incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
        prefix: new TokenType("!/~", { beforeExpr: true, prefix: true, startsExpr: true }),
        logicalOR: binop("||", 1),
        logicalAND: binop("&&", 2),
        bitwiseOR: binop("|", 3),
        bitwiseXOR: binop("^", 4),
        bitwiseAND: binop("&", 5),
        equality: binop("==/!=/===/!==", 6),
        relational: binop("</>/<=/>=", 7),
        bitShift: binop("<</>>/>>>", 8),
        plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
        modulo: binop("%", 10),
        star: binop("*", 10),
        slash: binop("/", 10),
        starstar: new TokenType("**", { beforeExpr: true }),
        coalesce: binop("??", 1),
        // Keyword token types.
        _break: kw("break"),
        _case: kw("case", beforeExpr),
        _catch: kw("catch"),
        _continue: kw("continue"),
        _debugger: kw("debugger"),
        _default: kw("default", beforeExpr),
        _do: kw("do", { isLoop: true, beforeExpr: true }),
        _else: kw("else", beforeExpr),
        _finally: kw("finally"),
        _for: kw("for", { isLoop: true }),
        _function: kw("function", startsExpr),
        _if: kw("if"),
        _return: kw("return", beforeExpr),
        _switch: kw("switch"),
        _throw: kw("throw", beforeExpr),
        _try: kw("try"),
        _var: kw("var"),
        _const: kw("const"),
        _while: kw("while", { isLoop: true }),
        _with: kw("with"),
        _new: kw("new", { beforeExpr: true, startsExpr: true }),
        _this: kw("this", startsExpr),
        _super: kw("super", startsExpr),
        _class: kw("class", startsExpr),
        _extends: kw("extends", beforeExpr),
        _export: kw("export"),
        _import: kw("import", startsExpr),
        _null: kw("null", startsExpr),
        _true: kw("true", startsExpr),
        _false: kw("false", startsExpr),
        _in: kw("in", { beforeExpr: true, binop: 7 }),
        _instanceof: kw("instanceof", { beforeExpr: true, binop: 7 }),
        _typeof: kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true }),
        _void: kw("void", { beforeExpr: true, prefix: true, startsExpr: true }),
        _delete: kw("delete", { beforeExpr: true, prefix: true, startsExpr: true })
      };
      var lineBreak = /\r\n?|\n|\u2028|\u2029/;
      var lineBreakG = new RegExp(lineBreak.source, "g");
      function isNewLine(code) {
        return code === 10 || code === 13 || code === 8232 || code === 8233;
      }
      function nextLineBreak(code, from, end) {
        if (end === void 0)
          end = code.length;
        for (var i2 = from; i2 < end; i2++) {
          var next = code.charCodeAt(i2);
          if (isNewLine(next)) {
            return i2 < end - 1 && next === 13 && code.charCodeAt(i2 + 1) === 10 ? i2 + 2 : i2 + 1;
          }
        }
        return -1;
      }
      var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
      var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
      var ref = Object.prototype;
      var hasOwnProperty = ref.hasOwnProperty;
      var toString = ref.toString;
      var hasOwn = Object.hasOwn || function(obj, propName) {
        return hasOwnProperty.call(obj, propName);
      };
      var isArray = Array.isArray || function(obj) {
        return toString.call(obj) === "[object Array]";
      };
      var regexpCache = /* @__PURE__ */ Object.create(null);
      function wordsRegexp(words) {
        return regexpCache[words] || (regexpCache[words] = new RegExp("^(?:" + words.replace(/ /g, "|") + ")$"));
      }
      function codePointToString(code) {
        if (code <= 65535) {
          return String.fromCharCode(code);
        }
        code -= 65536;
        return String.fromCharCode((code >> 10) + 55296, (code & 1023) + 56320);
      }
      var loneSurrogate = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/;
      var Position = function Position2(line, col) {
        this.line = line;
        this.column = col;
      };
      Position.prototype.offset = function offset(n2) {
        return new Position(this.line, this.column + n2);
      };
      var SourceLocation = function SourceLocation2(p2, start, end) {
        this.start = start;
        this.end = end;
        if (p2.sourceFile !== null) {
          this.source = p2.sourceFile;
        }
      };
      function getLineInfo(input, offset) {
        for (var line = 1, cur = 0; ; ) {
          var nextBreak = nextLineBreak(input, cur, offset);
          if (nextBreak < 0) {
            return new Position(line, offset - cur);
          }
          ++line;
          cur = nextBreak;
        }
      }
      var defaultOptions = {
        // `ecmaVersion` indicates the ECMAScript version to parse. Must be
        // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10
        // (2019), 11 (2020), 12 (2021), 13 (2022), 14 (2023), or `"latest"`
        // (the latest version the library supports). This influences
        // support for strict mode, the set of reserved words, and support
        // for new syntax features.
        ecmaVersion: null,
        // `sourceType` indicates the mode the code should be parsed in.
        // Can be either `"script"` or `"module"`. This influences global
        // strict mode and parsing of `import` and `export` declarations.
        sourceType: "script",
        // `onInsertedSemicolon` can be a callback that will be called when
        // a semicolon is automatically inserted. It will be passed the
        // position of the inserted semicolon as an offset, and if
        // `locations` is enabled, it is given the location as a `{line,
        // column}` object as second argument.
        onInsertedSemicolon: null,
        // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
        // trailing commas.
        onTrailingComma: null,
        // By default, reserved words are only enforced if ecmaVersion >= 5.
        // Set `allowReserved` to a boolean value to explicitly turn this on
        // an off. When this option has the value "never", reserved words
        // and keywords can also not be used as property names.
        allowReserved: null,
        // When enabled, a return at the top level is not considered an
        // error.
        allowReturnOutsideFunction: false,
        // When enabled, import/export statements are not constrained to
        // appearing at the top of the program, and an import.meta expression
        // in a script isn't considered an error.
        allowImportExportEverywhere: false,
        // By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.
        // When enabled, await identifiers are allowed to appear at the top-level scope,
        // but they are still not allowed in non-async functions.
        allowAwaitOutsideFunction: null,
        // When enabled, super identifiers are not constrained to
        // appearing in methods and do not raise an error when they appear elsewhere.
        allowSuperOutsideMethod: null,
        // When enabled, hashbang directive in the beginning of file is
        // allowed and treated as a line comment. Enabled by default when
        // `ecmaVersion` >= 2023.
        allowHashBang: false,
        // By default, the parser will verify that private properties are
        // only used in places where they are valid and have been declared.
        // Set this to false to turn such checks off.
        checkPrivateFields: true,
        // When `locations` is on, `loc` properties holding objects with
        // `start` and `end` properties in `{line, column}` form (with
        // line being 1-based and column 0-based) will be attached to the
        // nodes.
        locations: false,
        // A function can be passed as `onToken` option, which will
        // cause Acorn to call that function with object in the same
        // format as tokens returned from `tokenizer().getToken()`. Note
        // that you are not allowed to call the parser from the
        // callback—that will corrupt its internal state.
        onToken: null,
        // A function can be passed as `onComment` option, which will
        // cause Acorn to call that function with `(block, text, start,
        // end)` parameters whenever a comment is skipped. `block` is a
        // boolean indicating whether this is a block (`/* */`) comment,
        // `text` is the content of the comment, and `start` and `end` are
        // character offsets that denote the start and end of the comment.
        // When the `locations` option is on, two more parameters are
        // passed, the full `{line, column}` locations of the start and
        // end of the comments. Note that you are not allowed to call the
        // parser from the callback—that will corrupt its internal state.
        // When this option has an array as value, objects representing the
        // comments are pushed to it.
        onComment: null,
        // Nodes have their start and end characters offsets recorded in
        // `start` and `end` properties (directly on the node, rather than
        // the `loc` object, which holds line/column data. To also add a
        // [semi-standardized][range] `range` property holding a `[start,
        // end]` array with the same numbers, set the `ranges` option to
        // `true`.
        //
        // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
        ranges: false,
        // It is possible to parse multiple files into a single AST by
        // passing the tree produced by parsing the first file as
        // `program` option in subsequent parses. This will add the
        // toplevel forms of the parsed file to the `Program` (top) node
        // of an existing parse tree.
        program: null,
        // When `locations` is on, you can pass this to record the source
        // file in every node's `loc` object.
        sourceFile: null,
        // This value, if given, is stored in every node, whether
        // `locations` is on or off.
        directSourceFile: null,
        // When enabled, parenthesized expressions are represented by
        // (non-standard) ParenthesizedExpression nodes
        preserveParens: false
      };
      var warnedAboutEcmaVersion = false;
      function getOptions(opts) {
        var options = {};
        for (var opt in defaultOptions) {
          options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt];
        }
        if (options.ecmaVersion === "latest") {
          options.ecmaVersion = 1e8;
        } else if (options.ecmaVersion == null) {
          if (!warnedAboutEcmaVersion && typeof console === "object" && console.warn) {
            warnedAboutEcmaVersion = true;
            console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.");
          }
          options.ecmaVersion = 11;
        } else if (options.ecmaVersion >= 2015) {
          options.ecmaVersion -= 2009;
        }
        if (options.allowReserved == null) {
          options.allowReserved = options.ecmaVersion < 5;
        }
        if (!opts || opts.allowHashBang == null) {
          options.allowHashBang = options.ecmaVersion >= 14;
        }
        if (isArray(options.onToken)) {
          var tokens = options.onToken;
          options.onToken = function(token) {
            return tokens.push(token);
          };
        }
        if (isArray(options.onComment)) {
          options.onComment = pushComment(options, options.onComment);
        }
        return options;
      }
      function pushComment(options, array) {
        return function(block, text, start, end, startLoc, endLoc) {
          var comment = {
            type: block ? "Block" : "Line",
            value: text,
            start,
            end
          };
          if (options.locations) {
            comment.loc = new SourceLocation(this, startLoc, endLoc);
          }
          if (options.ranges) {
            comment.range = [start, end];
          }
          array.push(comment);
        };
      }
      var SCOPE_TOP = 1, SCOPE_FUNCTION = 2, SCOPE_ASYNC = 4, SCOPE_GENERATOR = 8, SCOPE_ARROW = 16, SCOPE_SIMPLE_CATCH = 32, SCOPE_SUPER = 64, SCOPE_DIRECT_SUPER = 128, SCOPE_CLASS_STATIC_BLOCK = 256, SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK;
      function functionFlags(async, generator) {
        return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0);
      }
      var BIND_NONE = 0, BIND_VAR = 1, BIND_LEXICAL = 2, BIND_FUNCTION = 3, BIND_SIMPLE_CATCH = 4, BIND_OUTSIDE = 5;
      var Parser = function Parser2(options, input, startPos) {
        this.options = options = getOptions(options);
        this.sourceFile = options.sourceFile;
        this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
        var reserved = "";
        if (options.allowReserved !== true) {
          reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];
          if (options.sourceType === "module") {
            reserved += " await";
          }
        }
        this.reservedWords = wordsRegexp(reserved);
        var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
        this.reservedWordsStrict = wordsRegexp(reservedStrict);
        this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind);
        this.input = String(input);
        this.containsEsc = false;
        if (startPos) {
          this.pos = startPos;
          this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
          this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
        } else {
          this.pos = this.lineStart = 0;
          this.curLine = 1;
        }
        this.type = types$1.eof;
        this.value = null;
        this.start = this.end = this.pos;
        this.startLoc = this.endLoc = this.curPosition();
        this.lastTokEndLoc = this.lastTokStartLoc = null;
        this.lastTokStart = this.lastTokEnd = this.pos;
        this.context = this.initialContext();
        this.exprAllowed = true;
        this.inModule = options.sourceType === "module";
        this.strict = this.inModule || this.strictDirective(this.pos);
        this.potentialArrowAt = -1;
        this.potentialArrowInForAwait = false;
        this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;
        this.labels = [];
        this.undefinedExports = /* @__PURE__ */ Object.create(null);
        if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") {
          this.skipLineComment(2);
        }
        this.scopeStack = [];
        this.enterScope(SCOPE_TOP);
        this.regexpState = null;
        this.privateNameStack = [];
      };
      var prototypeAccessors = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, canAwait: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true }, allowNewDotTarget: { configurable: true }, inClassStaticBlock: { configurable: true } };
      Parser.prototype.parse = function parse2() {
        var node = this.options.program || this.startNode();
        this.nextToken();
        return this.parseTopLevel(node);
      };
      prototypeAccessors.inFunction.get = function() {
        return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;
      };
      prototypeAccessors.inGenerator.get = function() {
        return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit;
      };
      prototypeAccessors.inAsync.get = function() {
        return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit;
      };
      prototypeAccessors.canAwait.get = function() {
        for (var i2 = this.scopeStack.length - 1; i2 >= 0; i2--) {
          var scope = this.scopeStack[i2];
          if (scope.inClassFieldInit || scope.flags & SCOPE_CLASS_STATIC_BLOCK) {
            return false;
          }
          if (scope.flags & SCOPE_FUNCTION) {
            return (scope.flags & SCOPE_ASYNC) > 0;
          }
        }
        return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;
      };
      prototypeAccessors.allowSuper.get = function() {
        var ref2 = this.currentThisScope();
        var flags = ref2.flags;
        var inClassFieldInit = ref2.inClassFieldInit;
        return (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod;
      };
      prototypeAccessors.allowDirectSuper.get = function() {
        return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;
      };
      prototypeAccessors.treatFunctionsAsVar.get = function() {
        return this.treatFunctionsAsVarInScope(this.currentScope());
      };
      prototypeAccessors.allowNewDotTarget.get = function() {
        var ref2 = this.currentThisScope();
        var flags = ref2.flags;
        var inClassFieldInit = ref2.inClassFieldInit;
        return (flags & (SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK)) > 0 || inClassFieldInit;
      };
      prototypeAccessors.inClassStaticBlock.get = function() {
        return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK) > 0;
      };
      Parser.extend = function extend() {
        var plugins = [], len = arguments.length;
        while (len--)
          plugins[len] = arguments[len];
        var cls = this;
        for (var i2 = 0; i2 < plugins.length; i2++) {
          cls = plugins[i2](cls);
        }
        return cls;
      };
      Parser.parse = function parse2(input, options) {
        return new this(options, input).parse();
      };
      Parser.parseExpressionAt = function parseExpressionAt2(input, pos, options) {
        var parser = new this(options, input, pos);
        parser.nextToken();
        return parser.parseExpression();
      };
      Parser.tokenizer = function tokenizer2(input, options) {
        return new this(options, input);
      };
      Object.defineProperties(Parser.prototype, prototypeAccessors);
      var pp$9 = Parser.prototype;
      var literal = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;
      pp$9.strictDirective = function(start) {
        if (this.options.ecmaVersion < 5) {
          return false;
        }
        for (; ; ) {
          skipWhiteSpace.lastIndex = start;
          start += skipWhiteSpace.exec(this.input)[0].length;
          var match = literal.exec(this.input.slice(start));
          if (!match) {
            return false;
          }
          if ((match[1] || match[2]) === "use strict") {
            skipWhiteSpace.lastIndex = start + match[0].length;
            var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;
            var next = this.input.charAt(end);
            return next === ";" || next === "}" || lineBreak.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || next === "!" && this.input.charAt(end + 1) === "=");
          }
          start += match[0].length;
          skipWhiteSpace.lastIndex = start;
          start += skipWhiteSpace.exec(this.input)[0].length;
          if (this.input[start] === ";") {
            start++;
          }
        }
      };
      pp$9.eat = function(type) {
        if (this.type === type) {
          this.next();
          return true;
        } else {
          return false;
        }
      };
      pp$9.isContextual = function(name) {
        return this.type === types$1.name && this.value === name && !this.containsEsc;
      };
      pp$9.eatContextual = function(name) {
        if (!this.isContextual(name)) {
          return false;
        }
        this.next();
        return true;
      };
      pp$9.expectContextual = function(name) {
        if (!this.eatContextual(name)) {
          this.unexpected();
        }
      };
      pp$9.canInsertSemicolon = function() {
        return this.type === types$1.eof || this.type === types$1.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
      };
      pp$9.insertSemicolon = function() {
        if (this.canInsertSemicolon()) {
          if (this.options.onInsertedSemicolon) {
            this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
          }
          return true;
        }
      };
      pp$9.semicolon = function() {
        if (!this.eat(types$1.semi) && !this.insertSemicolon()) {
          this.unexpected();
        }
      };
      pp$9.afterTrailingComma = function(tokType, notNext) {
        if (this.type === tokType) {
          if (this.options.onTrailingComma) {
            this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
          }
          if (!notNext) {
            this.next();
          }
          return true;
        }
      };
      pp$9.expect = function(type) {
        this.eat(type) || this.unexpected();
      };
      pp$9.unexpected = function(pos) {
        this.raise(pos != null ? pos : this.start, "Unexpected token");
      };
      var DestructuringErrors = function DestructuringErrors2() {
        this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
      };
      pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {
        if (!refDestructuringErrors) {
          return;
        }
        if (refDestructuringErrors.trailingComma > -1) {
          this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
        }
        var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
        if (parens > -1) {
          this.raiseRecoverable(parens, isAssign ? "Assigning to rvalue" : "Parenthesized pattern");
        }
      };
      pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
        if (!refDestructuringErrors) {
          return false;
        }
        var shorthandAssign = refDestructuringErrors.shorthandAssign;
        var doubleProto = refDestructuringErrors.doubleProto;
        if (!andThrow) {
          return shorthandAssign >= 0 || doubleProto >= 0;
        }
        if (shorthandAssign >= 0) {
          this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns");
        }
        if (doubleProto >= 0) {
          this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
        }
      };
      pp$9.checkYieldAwaitInDefaultParams = function() {
        if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {
          this.raise(this.yieldPos, "Yield expression cannot be a default value");
        }
        if (this.awaitPos) {
          this.raise(this.awaitPos, "Await expression cannot be a default value");
        }
      };
      pp$9.isSimpleAssignTarget = function(expr) {
        if (expr.type === "ParenthesizedExpression") {
          return this.isSimpleAssignTarget(expr.expression);
        }
        return expr.type === "Identifier" || expr.type === "MemberExpression";
      };
      var pp$8 = Parser.prototype;
      pp$8.parseTopLevel = function(node) {
        var exports3 = /* @__PURE__ */ Object.create(null);
        if (!node.body) {
          node.body = [];
        }
        while (this.type !== types$1.eof) {
          var stmt = this.parseStatement(null, true, exports3);
          node.body.push(stmt);
        }
        if (this.inModule) {
          for (var i2 = 0, list2 = Object.keys(this.undefinedExports); i2 < list2.length; i2 += 1) {
            var name = list2[i2];
            this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
          }
        }
        this.adaptDirectivePrologue(node.body);
        this.next();
        node.sourceType = this.options.sourceType;
        return this.finishNode(node, "Program");
      };
      var loopLabel = { kind: "loop" }, switchLabel = { kind: "switch" };
      pp$8.isLet = function(context) {
        if (this.options.ecmaVersion < 6 || !this.isContextual("let")) {
          return false;
        }
        skipWhiteSpace.lastIndex = this.pos;
        var skip = skipWhiteSpace.exec(this.input);
        var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
        if (nextCh === 91 || nextCh === 92) {
          return true;
        }
        if (context) {
          return false;
        }
        if (nextCh === 123 || nextCh > 55295 && nextCh < 56320) {
          return true;
        }
        if (isIdentifierStart(nextCh, true)) {
          var pos = next + 1;
          while (isIdentifierChar(nextCh = this.input.charCodeAt(pos), true)) {
            ++pos;
          }
          if (nextCh === 92 || nextCh > 55295 && nextCh < 56320) {
            return true;
          }
          var ident = this.input.slice(next, pos);
          if (!keywordRelationalOperator.test(ident)) {
            return true;
          }
        }
        return false;
      };
      pp$8.isAsyncFunction = function() {
        if (this.options.ecmaVersion < 8 || !this.isContextual("async")) {
          return false;
        }
        skipWhiteSpace.lastIndex = this.pos;
        var skip = skipWhiteSpace.exec(this.input);
        var next = this.pos + skip[0].length, after;
        return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === "function" && (next + 8 === this.input.length || !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 55295 && after < 56320));
      };
      pp$8.parseStatement = function(context, topLevel, exports3) {
        var starttype = this.type, node = this.startNode(), kind;
        if (this.isLet(context)) {
          starttype = types$1._var;
          kind = "let";
        }
        switch (starttype) {
          case types$1._break:
          case types$1._continue:
            return this.parseBreakContinueStatement(node, starttype.keyword);
          case types$1._debugger:
            return this.parseDebuggerStatement(node);
          case types$1._do:
            return this.parseDoStatement(node);
          case types$1._for:
            return this.parseForStatement(node);
          case types$1._function:
            if (context && (this.strict || context !== "if" && context !== "label") && this.options.ecmaVersion >= 6) {
              this.unexpected();
            }
            return this.parseFunctionStatement(node, false, !context);
          case types$1._class:
            if (context) {
              this.unexpected();
            }
            return this.parseClass(node, true);
          case types$1._if:
            return this.parseIfStatement(node);
          case types$1._return:
            return this.parseReturnStatement(node);
          case types$1._switch:
            return this.parseSwitchStatement(node);
          case types$1._throw:
            return this.parseThrowStatement(node);
          case types$1._try:
            return this.parseTryStatement(node);
          case types$1._const:
          case types$1._var:
            kind = kind || this.value;
            if (context && kind !== "var") {
              this.unexpected();
            }
            return this.parseVarStatement(node, kind);
          case types$1._while:
            return this.parseWhileStatement(node);
          case types$1._with:
            return this.parseWithStatement(node);
          case types$1.braceL:
            return this.parseBlock(true, node);
          case types$1.semi:
            return this.parseEmptyStatement(node);
          case types$1._export:
          case types$1._import:
            if (this.options.ecmaVersion > 10 && starttype === types$1._import) {
              skipWhiteSpace.lastIndex = this.pos;
              var skip = skipWhiteSpace.exec(this.input);
              var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
              if (nextCh === 40 || nextCh === 46) {
                return this.parseExpressionStatement(node, this.parseExpression());
              }
            }
            if (!this.options.allowImportExportEverywhere) {
              if (!topLevel) {
                this.raise(this.start, "'import' and 'export' may only appear at the top level");
              }
              if (!this.inModule) {
                this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
              }
            }
            return starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports3);
          default:
            if (this.isAsyncFunction()) {
              if (context) {
                this.unexpected();
              }
              this.next();
              return this.parseFunctionStatement(node, true, !context);
            }
            var maybeName = this.value, expr = this.parseExpression();
            if (starttype === types$1.name && expr.type === "Identifier" && this.eat(types$1.colon)) {
              return this.parseLabeledStatement(node, maybeName, expr, context);
            } else {
              return this.parseExpressionStatement(node, expr);
            }
        }
      };
      pp$8.parseBreakContinueStatement = function(node, keyword) {
        var isBreak = keyword === "break";
        this.next();
        if (this.eat(types$1.semi) || this.insertSemicolon()) {
          node.label = null;
        } else if (this.type !== types$1.name) {
          this.unexpected();
        } else {
          node.label = this.parseIdent();
          this.semicolon();
        }
        var i2 = 0;
        for (; i2 < this.labels.length; ++i2) {
          var lab = this.labels[i2];
          if (node.label == null || lab.name === node.label.name) {
            if (lab.kind != null && (isBreak || lab.kind === "loop")) {
              break;
            }
            if (node.label && isBreak) {
              break;
            }
          }
        }
        if (i2 === this.labels.length) {
          this.raise(node.start, "Unsyntactic " + keyword);
        }
        return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
      };
      pp$8.parseDebuggerStatement = function(node) {
        this.next();
        this.semicolon();
        return this.finishNode(node, "DebuggerStatement");
      };
      pp$8.parseDoStatement = function(node) {
        this.next();
        this.labels.push(loopLabel);
        node.body = this.parseStatement("do");
        this.labels.pop();
        this.expect(types$1._while);
        node.test = this.parseParenExpression();
        if (this.options.ecmaVersion >= 6) {
          this.eat(types$1.semi);
        } else {
          this.semicolon();
        }
        return this.finishNode(node, "DoWhileStatement");
      };
      pp$8.parseForStatement = function(node) {
        this.next();
        var awaitAt = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await") ? this.lastTokStart : -1;
        this.labels.push(loopLabel);
        this.enterScope(0);
        this.expect(types$1.parenL);
        if (this.type === types$1.semi) {
          if (awaitAt > -1) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node, null);
        }
        var isLet = this.isLet();
        if (this.type === types$1._var || this.type === types$1._const || isLet) {
          var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
          this.next();
          this.parseVar(init$1, true, kind);
          this.finishNode(init$1, "VariableDeclaration");
          if ((this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && init$1.declarations.length === 1) {
            if (this.options.ecmaVersion >= 9) {
              if (this.type === types$1._in) {
                if (awaitAt > -1) {
                  this.unexpected(awaitAt);
                }
              } else {
                node.await = awaitAt > -1;
              }
            }
            return this.parseForIn(node, init$1);
          }
          if (awaitAt > -1) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node, init$1);
        }
        var startsWithLet = this.isContextual("let"), isForOf = false;
        var refDestructuringErrors = new DestructuringErrors();
        var init = this.parseExpression(awaitAt > -1 ? "await" : true, refDestructuringErrors);
        if (this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
          if (this.options.ecmaVersion >= 9) {
            if (this.type === types$1._in) {
              if (awaitAt > -1) {
                this.unexpected(awaitAt);
              }
            } else {
              node.await = awaitAt > -1;
            }
          }
          if (startsWithLet && isForOf) {
            this.raise(init.start, "The left-hand side of a for-of loop may not start with 'let'.");
          }
          this.toAssignable(init, false, refDestructuringErrors);
          this.checkLValPattern(init);
          return this.parseForIn(node, init);
        } else {
          this.checkExpressionErrors(refDestructuringErrors, true);
        }
        if (awaitAt > -1) {
          this.unexpected(awaitAt);
        }
        return this.parseFor(node, init);
      };
      pp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {
        this.next();
        return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
      };
      pp$8.parseIfStatement = function(node) {
        this.next();
        node.test = this.parseParenExpression();
        node.consequent = this.parseStatement("if");
        node.alternate = this.eat(types$1._else) ? this.parseStatement("if") : null;
        return this.finishNode(node, "IfStatement");
      };
      pp$8.parseReturnStatement = function(node) {
        if (!this.inFunction && !this.options.allowReturnOutsideFunction) {
          this.raise(this.start, "'return' outside of function");
        }
        this.next();
        if (this.eat(types$1.semi) || this.insertSemicolon()) {
          node.argument = null;
        } else {
          node.argument = this.parseExpression();
          this.semicolon();
        }
        return this.finishNode(node, "ReturnStatement");
      };
      pp$8.parseSwitchStatement = function(node) {
        this.next();
        node.discriminant = this.parseParenExpression();
        node.cases = [];
        this.expect(types$1.braceL);
        this.labels.push(switchLabel);
        this.enterScope(0);
        var cur;
        for (var sawDefault = false; this.type !== types$1.braceR; ) {
          if (this.type === types$1._case || this.type === types$1._default) {
            var isCase = this.type === types$1._case;
            if (cur) {
              this.finishNode(cur, "SwitchCase");
            }
            node.cases.push(cur = this.startNode());
            cur.consequent = [];
            this.next();
            if (isCase) {
              cur.test = this.parseExpression();
            } else {
              if (sawDefault) {
                this.raiseRecoverable(this.lastTokStart, "Multiple default clauses");
              }
              sawDefault = true;
              cur.test = null;
            }
            this.expect(types$1.colon);
          } else {
            if (!cur) {
              this.unexpected();
            }
            cur.consequent.push(this.parseStatement(null));
          }
        }
        this.exitScope();
        if (cur) {
          this.finishNode(cur, "SwitchCase");
        }
        this.next();
        this.labels.pop();
        return this.finishNode(node, "SwitchStatement");
      };
      pp$8.parseThrowStatement = function(node) {
        this.next();
        if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {
          this.raise(this.lastTokEnd, "Illegal newline after throw");
        }
        node.argument = this.parseExpression();
        this.semicolon();
        return this.finishNode(node, "ThrowStatement");
      };
      var empty$1 = [];
      pp$8.parseCatchClauseParam = function() {
        var param = this.parseBindingAtom();
        var simple = param.type === "Identifier";
        this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);
        this.checkLValPattern(param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);
        this.expect(types$1.parenR);
        return param;
      };
      pp$8.parseTryStatement = function(node) {
        this.next();
        node.block = this.parseBlock();
        node.handler = null;
        if (this.type === types$1._catch) {
          var clause = this.startNode();
          this.next();
          if (this.eat(types$1.parenL)) {
            clause.param = this.parseCatchClauseParam();
          } else {
            if (this.options.ecmaVersion < 10) {
              this.unexpected();
            }
            clause.param = null;
            this.enterScope(0);
          }
          clause.body = this.parseBlock(false);
          this.exitScope();
          node.handler = this.finishNode(clause, "CatchClause");
        }
        node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;
        if (!node.handler && !node.finalizer) {
          this.raise(node.start, "Missing catch or finally clause");
        }
        return this.finishNode(node, "TryStatement");
      };
      pp$8.parseVarStatement = function(node, kind, allowMissingInitializer) {
        this.next();
        this.parseVar(node, false, kind, allowMissingInitializer);
        this.semicolon();
        return this.finishNode(node, "VariableDeclaration");
      };
      pp$8.parseWhileStatement = function(node) {
        this.next();
        node.test = this.parseParenExpression();
        this.labels.push(loopLabel);
        node.body = this.parseStatement("while");
        this.labels.pop();
        return this.finishNode(node, "WhileStatement");
      };
      pp$8.parseWithStatement = function(node) {
        if (this.strict) {
          this.raise(this.start, "'with' in strict mode");
        }
        this.next();
        node.object = this.parseParenExpression();
        node.body = this.parseStatement("with");
        return this.finishNode(node, "WithStatement");
      };
      pp$8.parseEmptyStatement = function(node) {
        this.next();
        return this.finishNode(node, "EmptyStatement");
      };
      pp$8.parseLabeledStatement = function(node, maybeName, expr, context) {
        for (var i$1 = 0, list2 = this.labels; i$1 < list2.length; i$1 += 1) {
          var label = list2[i$1];
          if (label.name === maybeName) {
            this.raise(expr.start, "Label '" + maybeName + "' is already declared");
          }
        }
        var kind = this.type.isLoop ? "loop" : this.type === types$1._switch ? "switch" : null;
        for (var i2 = this.labels.length - 1; i2 >= 0; i2--) {
          var label$1 = this.labels[i2];
          if (label$1.statementStart === node.start) {
            label$1.statementStart = this.start;
            label$1.kind = kind;
          } else {
            break;
          }
        }
        this.labels.push({ name: maybeName, kind, statementStart: this.start });
        node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
        this.labels.pop();
        node.label = expr;
        return this.finishNode(node, "LabeledStatement");
      };
      pp$8.parseExpressionStatement = function(node, expr) {
        node.expression = expr;
        this.semicolon();
        return this.finishNode(node, "ExpressionStatement");
      };
      pp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {
        if (createNewLexicalScope === void 0)
          createNewLexicalScope = true;
        if (node === void 0)
          node = this.startNode();
        node.body = [];
        this.expect(types$1.braceL);
        if (createNewLexicalScope) {
          this.enterScope(0);
        }
        while (this.type !== types$1.braceR) {
          var stmt = this.parseStatement(null);
          node.body.push(stmt);
        }
        if (exitStrict) {
          this.strict = false;
        }
        this.next();
        if (createNewLexicalScope) {
          this.exitScope();
        }
        return this.finishNode(node, "BlockStatement");
      };
      pp$8.parseFor = function(node, init) {
        node.init = init;
        this.expect(types$1.semi);
        node.test = this.type === types$1.semi ? null : this.parseExpression();
        this.expect(types$1.semi);
        node.update = this.type === types$1.parenR ? null : this.parseExpression();
        this.expect(types$1.parenR);
        node.body = this.parseStatement("for");
        this.exitScope();
        this.labels.pop();
        return this.finishNode(node, "ForStatement");
      };
      pp$8.parseForIn = function(node, init) {
        var isForIn = this.type === types$1._in;
        this.next();
        if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
          this.raise(
            init.start,
            (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"
          );
        }
        node.left = init;
        node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
        this.expect(types$1.parenR);
        node.body = this.parseStatement("for");
        this.exitScope();
        this.labels.pop();
        return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
      };
      pp$8.parseVar = function(node, isFor, kind, allowMissingInitializer) {
        node.declarations = [];
        node.kind = kind;
        for (; ; ) {
          var decl = this.startNode();
          this.parseVarId(decl, kind);
          if (this.eat(types$1.eq)) {
            decl.init = this.parseMaybeAssign(isFor);
          } else if (!allowMissingInitializer && kind === "const" && !(this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
            this.unexpected();
          } else if (!allowMissingInitializer && decl.id.type !== "Identifier" && !(isFor && (this.type === types$1._in || this.isContextual("of")))) {
            this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
          } else {
            decl.init = null;
          }
          node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
          if (!this.eat(types$1.comma)) {
            break;
          }
        }
        return node;
      };
      pp$8.parseVarId = function(decl, kind) {
        decl.id = this.parseBindingAtom();
        this.checkLValPattern(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false);
      };
      var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;
      pp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {
        this.initFunction(node);
        if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
          if (this.type === types$1.star && statement & FUNC_HANGING_STATEMENT) {
            this.unexpected();
          }
          node.generator = this.eat(types$1.star);
        }
        if (this.options.ecmaVersion >= 8) {
          node.async = !!isAsync;
        }
        if (statement & FUNC_STATEMENT) {
          node.id = statement & FUNC_NULLABLE_ID && this.type !== types$1.name ? null : this.parseIdent();
          if (node.id && !(statement & FUNC_HANGING_STATEMENT)) {
            this.checkLValSimple(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION);
          }
        }
        var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        this.yieldPos = 0;
        this.awaitPos = 0;
        this.awaitIdentPos = 0;
        this.enterScope(functionFlags(node.async, node.generator));
        if (!(statement & FUNC_STATEMENT)) {
          node.id = this.type === types$1.name ? this.parseIdent() : null;
        }
        this.parseFunctionParams(node);
        this.parseFunctionBody(node, allowExpressionBody, false, forInit);
        this.yieldPos = oldYieldPos;
        this.awaitPos = oldAwaitPos;
        this.awaitIdentPos = oldAwaitIdentPos;
        return this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
      };
      pp$8.parseFunctionParams = function(node) {
        this.expect(types$1.parenL);
        node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);
        this.checkYieldAwaitInDefaultParams();
      };
      pp$8.parseClass = function(node, isStatement) {
        this.next();
        var oldStrict = this.strict;
        this.strict = true;
        this.parseClassId(node, isStatement);
        this.parseClassSuper(node);
        var privateNameMap = this.enterClassBody();
        var classBody = this.startNode();
        var hadConstructor = false;
        classBody.body = [];
        this.expect(types$1.braceL);
        while (this.type !== types$1.braceR) {
          var element = this.parseClassElement(node.superClass !== null);
          if (element) {
            classBody.body.push(element);
            if (element.type === "MethodDefinition" && element.kind === "constructor") {
              if (hadConstructor) {
                this.raiseRecoverable(element.start, "Duplicate constructor in the same class");
              }
              hadConstructor = true;
            } else if (element.key && element.key.type === "PrivateIdentifier" && isPrivateNameConflicted(privateNameMap, element)) {
              this.raiseRecoverable(element.key.start, "Identifier '#" + element.key.name + "' has already been declared");
            }
          }
        }
        this.strict = oldStrict;
        this.next();
        node.body = this.finishNode(classBody, "ClassBody");
        this.exitClassBody();
        return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
      };
      pp$8.parseClassElement = function(constructorAllowsSuper) {
        if (this.eat(types$1.semi)) {
          return null;
        }
        var ecmaVersion2 = this.options.ecmaVersion;
        var node = this.startNode();
        var keyName = "";
        var isGenerator = false;
        var isAsync = false;
        var kind = "method";
        var isStatic = false;
        if (this.eatContextual("static")) {
          if (ecmaVersion2 >= 13 && this.eat(types$1.braceL)) {
            this.parseClassStaticBlock(node);
            return node;
          }
          if (this.isClassElementNameStart() || this.type === types$1.star) {
            isStatic = true;
          } else {
            keyName = "static";
          }
        }
        node.static = isStatic;
        if (!keyName && ecmaVersion2 >= 8 && this.eatContextual("async")) {
          if ((this.isClassElementNameStart() || this.type === types$1.star) && !this.canInsertSemicolon()) {
            isAsync = true;
          } else {
            keyName = "async";
          }
        }
        if (!keyName && (ecmaVersion2 >= 9 || !isAsync) && this.eat(types$1.star)) {
          isGenerator = true;
        }
        if (!keyName && !isAsync && !isGenerator) {
          var lastValue = this.value;
          if (this.eatContextual("get") || this.eatContextual("set")) {
            if (this.isClassElementNameStart()) {
              kind = lastValue;
            } else {
              keyName = lastValue;
            }
          }
        }
        if (keyName) {
          node.computed = false;
          node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);
          node.key.name = keyName;
          this.finishNode(node.key, "Identifier");
        } else {
          this.parseClassElementName(node);
        }
        if (ecmaVersion2 < 13 || this.type === types$1.parenL || kind !== "method" || isGenerator || isAsync) {
          var isConstructor = !node.static && checkKeyName(node, "constructor");
          var allowsDirectSuper = isConstructor && constructorAllowsSuper;
          if (isConstructor && kind !== "method") {
            this.raise(node.key.start, "Constructor can't have get/set modifier");
          }
          node.kind = isConstructor ? "constructor" : kind;
          this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);
        } else {
          this.parseClassField(node);
        }
        return node;
      };
      pp$8.isClassElementNameStart = function() {
        return this.type === types$1.name || this.type === types$1.privateId || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword;
      };
      pp$8.parseClassElementName = function(element) {
        if (this.type === types$1.privateId) {
          if (this.value === "constructor") {
            this.raise(this.start, "Classes can't have an element named '#constructor'");
          }
          element.computed = false;
          element.key = this.parsePrivateIdent();
        } else {
          this.parsePropertyName(element);
        }
      };
      pp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
        var key = method.key;
        if (method.kind === "constructor") {
          if (isGenerator) {
            this.raise(key.start, "Constructor can't be a generator");
          }
          if (isAsync) {
            this.raise(key.start, "Constructor can't be an async method");
          }
        } else if (method.static && checkKeyName(method, "prototype")) {
          this.raise(key.start, "Classes may not have a static property named prototype");
        }
        var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
        if (method.kind === "get" && value.params.length !== 0) {
          this.raiseRecoverable(value.start, "getter should have no params");
        }
        if (method.kind === "set" && value.params.length !== 1) {
          this.raiseRecoverable(value.start, "setter should have exactly one param");
        }
        if (method.kind === "set" && value.params[0].type === "RestElement") {
          this.raiseRecoverable(value.params[0].start, "Setter cannot use rest params");
        }
        return this.finishNode(method, "MethodDefinition");
      };
      pp$8.parseClassField = function(field) {
        if (checkKeyName(field, "constructor")) {
          this.raise(field.key.start, "Classes can't have a field named 'constructor'");
        } else if (field.static && checkKeyName(field, "prototype")) {
          this.raise(field.key.start, "Classes can't have a static field named 'prototype'");
        }
        if (this.eat(types$1.eq)) {
          var scope = this.currentThisScope();
          var inClassFieldInit = scope.inClassFieldInit;
          scope.inClassFieldInit = true;
          field.value = this.parseMaybeAssign();
          scope.inClassFieldInit = inClassFieldInit;
        } else {
          field.value = null;
        }
        this.semicolon();
        return this.finishNode(field, "PropertyDefinition");
      };
      pp$8.parseClassStaticBlock = function(node) {
        node.body = [];
        var oldLabels = this.labels;
        this.labels = [];
        this.enterScope(SCOPE_CLASS_STATIC_BLOCK | SCOPE_SUPER);
        while (this.type !== types$1.braceR) {
          var stmt = this.parseStatement(null);
          node.body.push(stmt);
        }
        this.next();
        this.exitScope();
        this.labels = oldLabels;
        return this.finishNode(node, "StaticBlock");
      };
      pp$8.parseClassId = function(node, isStatement) {
        if (this.type === types$1.name) {
          node.id = this.parseIdent();
          if (isStatement) {
            this.checkLValSimple(node.id, BIND_LEXICAL, false);
          }
        } else {
          if (isStatement === true) {
            this.unexpected();
          }
          node.id = null;
        }
      };
      pp$8.parseClassSuper = function(node) {
        node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(null, false) : null;
      };
      pp$8.enterClassBody = function() {
        var element = { declared: /* @__PURE__ */ Object.create(null), used: [] };
        this.privateNameStack.push(element);
        return element.declared;
      };
      pp$8.exitClassBody = function() {
        var ref2 = this.privateNameStack.pop();
        var declared = ref2.declared;
        var used = ref2.used;
        if (!this.options.checkPrivateFields) {
          return;
        }
        var len = this.privateNameStack.length;
        var parent = len === 0 ? null : this.privateNameStack[len - 1];
        for (var i2 = 0; i2 < used.length; ++i2) {
          var id = used[i2];
          if (!hasOwn(declared, id.name)) {
            if (parent) {
              parent.used.push(id);
            } else {
              this.raiseRecoverable(id.start, "Private field '#" + id.name + "' must be declared in an enclosing class");
            }
          }
        }
      };
      function isPrivateNameConflicted(privateNameMap, element) {
        var name = element.key.name;
        var curr = privateNameMap[name];
        var next = "true";
        if (element.type === "MethodDefinition" && (element.kind === "get" || element.kind === "set")) {
          next = (element.static ? "s" : "i") + element.kind;
        }
        if (curr === "iget" && next === "iset" || curr === "iset" && next === "iget" || curr === "sget" && next === "sset" || curr === "sset" && next === "sget") {
          privateNameMap[name] = "true";
          return false;
        } else if (!curr) {
          privateNameMap[name] = next;
          return false;
        } else {
          return true;
        }
      }
      function checkKeyName(node, name) {
        var computed = node.computed;
        var key = node.key;
        return !computed && (key.type === "Identifier" && key.name === name || key.type === "Literal" && key.value === name);
      }
      pp$8.parseExportAllDeclaration = function(node, exports3) {
        if (this.options.ecmaVersion >= 11) {
          if (this.eatContextual("as")) {
            node.exported = this.parseModuleExportName();
            this.checkExport(exports3, node.exported, this.lastTokStart);
          } else {
            node.exported = null;
          }
        }
        this.expectContextual("from");
        if (this.type !== types$1.string) {
          this.unexpected();
        }
        node.source = this.parseExprAtom();
        this.semicolon();
        return this.finishNode(node, "ExportAllDeclaration");
      };
      pp$8.parseExport = function(node, exports3) {
        this.next();
        if (this.eat(types$1.star)) {
          return this.parseExportAllDeclaration(node, exports3);
        }
        if (this.eat(types$1._default)) {
          this.checkExport(exports3, "default", this.lastTokStart);
          node.declaration = this.parseExportDefaultDeclaration();
          return this.finishNode(node, "ExportDefaultDeclaration");
        }
        if (this.shouldParseExportStatement()) {
          node.declaration = this.parseExportDeclaration(node);
          if (node.declaration.type === "VariableDeclaration") {
            this.checkVariableExport(exports3, node.declaration.declarations);
          } else {
            this.checkExport(exports3, node.declaration.id, node.declaration.id.start);
          }
          node.specifiers = [];
          node.source = null;
        } else {
          node.declaration = null;
          node.specifiers = this.parseExportSpecifiers(exports3);
          if (this.eatContextual("from")) {
            if (this.type !== types$1.string) {
              this.unexpected();
            }
            node.source = this.parseExprAtom();
          } else {
            for (var i2 = 0, list2 = node.specifiers; i2 < list2.length; i2 += 1) {
              var spec = list2[i2];
              this.checkUnreserved(spec.local);
              this.checkLocalExport(spec.local);
              if (spec.local.type === "Literal") {
                this.raise(spec.local.start, "A string literal cannot be used as an exported binding without `from`.");
              }
            }
            node.source = null;
          }
          this.semicolon();
        }
        return this.finishNode(node, "ExportNamedDeclaration");
      };
      pp$8.parseExportDeclaration = function(node) {
        return this.parseStatement(null);
      };
      pp$8.parseExportDefaultDeclaration = function() {
        var isAsync;
        if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {
          var fNode = this.startNode();
          this.next();
          if (isAsync) {
            this.next();
          }
          return this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
        } else if (this.type === types$1._class) {
          var cNode = this.startNode();
          return this.parseClass(cNode, "nullableID");
        } else {
          var declaration = this.parseMaybeAssign();
          this.semicolon();
          return declaration;
        }
      };
      pp$8.checkExport = function(exports3, name, pos) {
        if (!exports3) {
          return;
        }
        if (typeof name !== "string") {
          name = name.type === "Identifier" ? name.name : name.value;
        }
        if (hasOwn(exports3, name)) {
          this.raiseRecoverable(pos, "Duplicate export '" + name + "'");
        }
        exports3[name] = true;
      };
      pp$8.checkPatternExport = function(exports3, pat) {
        var type = pat.type;
        if (type === "Identifier") {
          this.checkExport(exports3, pat, pat.start);
        } else if (type === "ObjectPattern") {
          for (var i2 = 0, list2 = pat.properties; i2 < list2.length; i2 += 1) {
            var prop = list2[i2];
            this.checkPatternExport(exports3, prop);
          }
        } else if (type === "ArrayPattern") {
          for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
            var elt = list$1[i$1];
            if (elt) {
              this.checkPatternExport(exports3, elt);
            }
          }
        } else if (type === "Property") {
          this.checkPatternExport(exports3, pat.value);
        } else if (type === "AssignmentPattern") {
          this.checkPatternExport(exports3, pat.left);
        } else if (type === "RestElement") {
          this.checkPatternExport(exports3, pat.argument);
        }
      };
      pp$8.checkVariableExport = function(exports3, decls) {
        if (!exports3) {
          return;
        }
        for (var i2 = 0, list2 = decls; i2 < list2.length; i2 += 1) {
          var decl = list2[i2];
          this.checkPatternExport(exports3, decl.id);
        }
      };
      pp$8.shouldParseExportStatement = function() {
        return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
      };
      pp$8.parseExportSpecifier = function(exports3) {
        var node = this.startNode();
        node.local = this.parseModuleExportName();
        node.exported = this.eatContextual("as") ? this.parseModuleExportName() : node.local;
        this.checkExport(
          exports3,
          node.exported,
          node.exported.start
        );
        return this.finishNode(node, "ExportSpecifier");
      };
      pp$8.parseExportSpecifiers = function(exports3) {
        var nodes = [], first = true;
        this.expect(types$1.braceL);
        while (!this.eat(types$1.braceR)) {
          if (!first) {
            this.expect(types$1.comma);
            if (this.afterTrailingComma(types$1.braceR)) {
              break;
            }
          } else {
            first = false;
          }
          nodes.push(this.parseExportSpecifier(exports3));
        }
        return nodes;
      };
      pp$8.parseImport = function(node) {
        this.next();
        if (this.type === types$1.string) {
          node.specifiers = empty$1;
          node.source = this.parseExprAtom();
        } else {
          node.specifiers = this.parseImportSpecifiers();
          this.expectContextual("from");
          node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected();
        }
        this.semicolon();
        return this.finishNode(node, "ImportDeclaration");
      };
      pp$8.parseImportSpecifier = function() {
        var node = this.startNode();
        node.imported = this.parseModuleExportName();
        if (this.eatContextual("as")) {
          node.local = this.parseIdent();
        } else {
          this.checkUnreserved(node.imported);
          node.local = node.imported;
        }
        this.checkLValSimple(node.local, BIND_LEXICAL);
        return this.finishNode(node, "ImportSpecifier");
      };
      pp$8.parseImportDefaultSpecifier = function() {
        var node = this.startNode();
        node.local = this.parseIdent();
        this.checkLValSimple(node.local, BIND_LEXICAL);
        return this.finishNode(node, "ImportDefaultSpecifier");
      };
      pp$8.parseImportNamespaceSpecifier = function() {
        var node = this.startNode();
        this.next();
        this.expectContextual("as");
        node.local = this.parseIdent();
        this.checkLValSimple(node.local, BIND_LEXICAL);
        return this.finishNode(node, "ImportNamespaceSpecifier");
      };
      pp$8.parseImportSpecifiers = function() {
        var nodes = [], first = true;
        if (this.type === types$1.name) {
          nodes.push(this.parseImportDefaultSpecifier());
          if (!this.eat(types$1.comma)) {
            return nodes;
          }
        }
        if (this.type === types$1.star) {
          nodes.push(this.parseImportNamespaceSpecifier());
          return nodes;
        }
        this.expect(types$1.braceL);
        while (!this.eat(types$1.braceR)) {
          if (!first) {
            this.expect(types$1.comma);
            if (this.afterTrailingComma(types$1.braceR)) {
              break;
            }
          } else {
            first = false;
          }
          nodes.push(this.parseImportSpecifier());
        }
        return nodes;
      };
      pp$8.parseModuleExportName = function() {
        if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {
          var stringLiteral = this.parseLiteral(this.value);
          if (loneSurrogate.test(stringLiteral.value)) {
            this.raise(stringLiteral.start, "An export name cannot include a lone surrogate.");
          }
          return stringLiteral;
        }
        return this.parseIdent(true);
      };
      pp$8.adaptDirectivePrologue = function(statements) {
        for (var i2 = 0; i2 < statements.length && this.isDirectiveCandidate(statements[i2]); ++i2) {
          statements[i2].directive = statements[i2].expression.raw.slice(1, -1);
        }
      };
      pp$8.isDirectiveCandidate = function(statement) {
        return this.options.ecmaVersion >= 5 && statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && typeof statement.expression.value === "string" && // Reject parenthesized strings.
        (this.input[statement.start] === '"' || this.input[statement.start] === "'");
      };
      var pp$7 = Parser.prototype;
      pp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {
        if (this.options.ecmaVersion >= 6 && node) {
          switch (node.type) {
            case "Identifier":
              if (this.inAsync && node.name === "await") {
                this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
              }
              break;
            case "ObjectPattern":
            case "ArrayPattern":
            case "AssignmentPattern":
            case "RestElement":
              break;
            case "ObjectExpression":
              node.type = "ObjectPattern";
              if (refDestructuringErrors) {
                this.checkPatternErrors(refDestructuringErrors, true);
              }
              for (var i2 = 0, list2 = node.properties; i2 < list2.length; i2 += 1) {
                var prop = list2[i2];
                this.toAssignable(prop, isBinding);
                if (prop.type === "RestElement" && (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")) {
                  this.raise(prop.argument.start, "Unexpected token");
                }
              }
              break;
            case "Property":
              if (node.kind !== "init") {
                this.raise(node.key.start, "Object pattern can't contain getter or setter");
              }
              this.toAssignable(node.value, isBinding);
              break;
            case "ArrayExpression":
              node.type = "ArrayPattern";
              if (refDestructuringErrors) {
                this.checkPatternErrors(refDestructuringErrors, true);
              }
              this.toAssignableList(node.elements, isBinding);
              break;
            case "SpreadElement":
              node.type = "RestElement";
              this.toAssignable(node.argument, isBinding);
              if (node.argument.type === "AssignmentPattern") {
                this.raise(node.argument.start, "Rest elements cannot have a default value");
              }
              break;
            case "AssignmentExpression":
              if (node.operator !== "=") {
                this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
              }
              node.type = "AssignmentPattern";
              delete node.operator;
              this.toAssignable(node.left, isBinding);
              break;
            case "ParenthesizedExpression":
              this.toAssignable(node.expression, isBinding, refDestructuringErrors);
              break;
            case "ChainExpression":
              this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
              break;
            case "MemberExpression":
              if (!isBinding) {
                break;
              }
            default:
              this.raise(node.start, "Assigning to rvalue");
          }
        } else if (refDestructuringErrors) {
          this.checkPatternErrors(refDestructuringErrors, true);
        }
        return node;
      };
      pp$7.toAssignableList = function(exprList, isBinding) {
        var end = exprList.length;
        for (var i2 = 0; i2 < end; i2++) {
          var elt = exprList[i2];
          if (elt) {
            this.toAssignable(elt, isBinding);
          }
        }
        if (end) {
          var last = exprList[end - 1];
          if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier") {
            this.unexpected(last.argument.start);
          }
        }
        return exprList;
      };
      pp$7.parseSpread = function(refDestructuringErrors) {
        var node = this.startNode();
        this.next();
        node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
        return this.finishNode(node, "SpreadElement");
      };
      pp$7.parseRestBinding = function() {
        var node = this.startNode();
        this.next();
        if (this.options.ecmaVersion === 6 && this.type !== types$1.name) {
          this.unexpected();
        }
        node.argument = this.parseBindingAtom();
        return this.finishNode(node, "RestElement");
      };
      pp$7.parseBindingAtom = function() {
        if (this.options.ecmaVersion >= 6) {
          switch (this.type) {
            case types$1.bracketL:
              var node = this.startNode();
              this.next();
              node.elements = this.parseBindingList(types$1.bracketR, true, true);
              return this.finishNode(node, "ArrayPattern");
            case types$1.braceL:
              return this.parseObj(true);
          }
        }
        return this.parseIdent();
      };
      pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowModifiers) {
        var elts = [], first = true;
        while (!this.eat(close)) {
          if (first) {
            first = false;
          } else {
            this.expect(types$1.comma);
          }
          if (allowEmpty && this.type === types$1.comma) {
            elts.push(null);
          } else if (allowTrailingComma && this.afterTrailingComma(close)) {
            break;
          } else if (this.type === types$1.ellipsis) {
            var rest = this.parseRestBinding();
            this.parseBindingListItem(rest);
            elts.push(rest);
            if (this.type === types$1.comma) {
              this.raiseRecoverable(this.start, "Comma is not permitted after the rest element");
            }
            this.expect(close);
            break;
          } else {
            elts.push(this.parseAssignableListItem(allowModifiers));
          }
        }
        return elts;
      };
      pp$7.parseAssignableListItem = function(allowModifiers) {
        var elem = this.parseMaybeDefault(this.start, this.startLoc);
        this.parseBindingListItem(elem);
        return elem;
      };
      pp$7.parseBindingListItem = function(param) {
        return param;
      };
      pp$7.parseMaybeDefault = function(startPos, startLoc, left) {
        left = left || this.parseBindingAtom();
        if (this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) {
          return left;
        }
        var node = this.startNodeAt(startPos, startLoc);
        node.left = left;
        node.right = this.parseMaybeAssign();
        return this.finishNode(node, "AssignmentPattern");
      };
      pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {
        if (bindingType === void 0)
          bindingType = BIND_NONE;
        var isBind = bindingType !== BIND_NONE;
        switch (expr.type) {
          case "Identifier":
            if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {
              this.raiseRecoverable(expr.start, (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
            }
            if (isBind) {
              if (bindingType === BIND_LEXICAL && expr.name === "let") {
                this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name");
              }
              if (checkClashes) {
                if (hasOwn(checkClashes, expr.name)) {
                  this.raiseRecoverable(expr.start, "Argument name clash");
                }
                checkClashes[expr.name] = true;
              }
              if (bindingType !== BIND_OUTSIDE) {
                this.declareName(expr.name, bindingType, expr.start);
              }
            }
            break;
          case "ChainExpression":
            this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
            break;
          case "MemberExpression":
            if (isBind) {
              this.raiseRecoverable(expr.start, "Binding member expression");
            }
            break;
          case "ParenthesizedExpression":
            if (isBind) {
              this.raiseRecoverable(expr.start, "Binding parenthesized expression");
            }
            return this.checkLValSimple(expr.expression, bindingType, checkClashes);
          default:
            this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue");
        }
      };
      pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {
        if (bindingType === void 0)
          bindingType = BIND_NONE;
        switch (expr.type) {
          case "ObjectPattern":
            for (var i2 = 0, list2 = expr.properties; i2 < list2.length; i2 += 1) {
              var prop = list2[i2];
              this.checkLValInnerPattern(prop, bindingType, checkClashes);
            }
            break;
          case "ArrayPattern":
            for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
              var elem = list$1[i$1];
              if (elem) {
                this.checkLValInnerPattern(elem, bindingType, checkClashes);
              }
            }
            break;
          default:
            this.checkLValSimple(expr, bindingType, checkClashes);
        }
      };
      pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {
        if (bindingType === void 0)
          bindingType = BIND_NONE;
        switch (expr.type) {
          case "Property":
            this.checkLValInnerPattern(expr.value, bindingType, checkClashes);
            break;
          case "AssignmentPattern":
            this.checkLValPattern(expr.left, bindingType, checkClashes);
            break;
          case "RestElement":
            this.checkLValPattern(expr.argument, bindingType, checkClashes);
            break;
          default:
            this.checkLValPattern(expr, bindingType, checkClashes);
        }
      };
      var TokContext = function TokContext2(token, isExpr, preserveSpace, override, generator) {
        this.token = token;
        this.isExpr = !!isExpr;
        this.preserveSpace = !!preserveSpace;
        this.override = override;
        this.generator = !!generator;
      };
      var types = {
        b_stat: new TokContext("{", false),
        b_expr: new TokContext("{", true),
        b_tmpl: new TokContext("${", false),
        p_stat: new TokContext("(", false),
        p_expr: new TokContext("(", true),
        q_tmpl: new TokContext("`", true, true, function(p2) {
          return p2.tryReadTemplateToken();
        }),
        f_stat: new TokContext("function", false),
        f_expr: new TokContext("function", true),
        f_expr_gen: new TokContext("function", true, false, null, true),
        f_gen: new TokContext("function", false, false, null, true)
      };
      var pp$6 = Parser.prototype;
      pp$6.initialContext = function() {
        return [types.b_stat];
      };
      pp$6.curContext = function() {
        return this.context[this.context.length - 1];
      };
      pp$6.braceIsBlock = function(prevType) {
        var parent = this.curContext();
        if (parent === types.f_expr || parent === types.f_stat) {
          return true;
        }
        if (prevType === types$1.colon && (parent === types.b_stat || parent === types.b_expr)) {
          return !parent.isExpr;
        }
        if (prevType === types$1._return || prevType === types$1.name && this.exprAllowed) {
          return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
        }
        if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow) {
          return true;
        }
        if (prevType === types$1.braceL) {
          return parent === types.b_stat;
        }
        if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name) {
          return false;
        }
        return !this.exprAllowed;
      };
      pp$6.inGeneratorContext = function() {
        for (var i2 = this.context.length - 1; i2 >= 1; i2--) {
          var context = this.context[i2];
          if (context.token === "function") {
            return context.generator;
          }
        }
        return false;
      };
      pp$6.updateContext = function(prevType) {
        var update, type = this.type;
        if (type.keyword && prevType === types$1.dot) {
          this.exprAllowed = false;
        } else if (update = type.updateContext) {
          update.call(this, prevType);
        } else {
          this.exprAllowed = type.beforeExpr;
        }
      };
      pp$6.overrideContext = function(tokenCtx) {
        if (this.curContext() !== tokenCtx) {
          this.context[this.context.length - 1] = tokenCtx;
        }
      };
      types$1.parenR.updateContext = types$1.braceR.updateContext = function() {
        if (this.context.length === 1) {
          this.exprAllowed = true;
          return;
        }
        var out = this.context.pop();
        if (out === types.b_stat && this.curContext().token === "function") {
          out = this.context.pop();
        }
        this.exprAllowed = !out.isExpr;
      };
      types$1.braceL.updateContext = function(prevType) {
        this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
        this.exprAllowed = true;
      };
      types$1.dollarBraceL.updateContext = function() {
        this.context.push(types.b_tmpl);
        this.exprAllowed = true;
      };
      types$1.parenL.updateContext = function(prevType) {
        var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;
        this.context.push(statementParens ? types.p_stat : types.p_expr);
        this.exprAllowed = true;
      };
      types$1.incDec.updateContext = function() {
      };
      types$1._function.updateContext = types$1._class.updateContext = function(prevType) {
        if (prevType.beforeExpr && prevType !== types$1._else && !(prevType === types$1.semi && this.curContext() !== types.p_stat) && !(prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat)) {
          this.context.push(types.f_expr);
        } else {
          this.context.push(types.f_stat);
        }
        this.exprAllowed = false;
      };
      types$1.colon.updateContext = function() {
        if (this.curContext().token === "function") {
          this.context.pop();
        }
        this.exprAllowed = true;
      };
      types$1.backQuote.updateContext = function() {
        if (this.curContext() === types.q_tmpl) {
          this.context.pop();
        } else {
          this.context.push(types.q_tmpl);
        }
        this.exprAllowed = false;
      };
      types$1.star.updateContext = function(prevType) {
        if (prevType === types$1._function) {
          var index = this.context.length - 1;
          if (this.context[index] === types.f_expr) {
            this.context[index] = types.f_expr_gen;
          } else {
            this.context[index] = types.f_gen;
          }
        }
        this.exprAllowed = true;
      };
      types$1.name.updateContext = function(prevType) {
        var allowed = false;
        if (this.options.ecmaVersion >= 6 && prevType !== types$1.dot) {
          if (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) {
            allowed = true;
          }
        }
        this.exprAllowed = allowed;
      };
      var pp$5 = Parser.prototype;
      pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {
        if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement") {
          return;
        }
        if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {
          return;
        }
        var key = prop.key;
        var name;
        switch (key.type) {
          case "Identifier":
            name = key.name;
            break;
          case "Literal":
            name = String(key.value);
            break;
          default:
            return;
        }
        var kind = prop.kind;
        if (this.options.ecmaVersion >= 6) {
          if (name === "__proto__" && kind === "init") {
            if (propHash.proto) {
              if (refDestructuringErrors) {
                if (refDestructuringErrors.doubleProto < 0) {
                  refDestructuringErrors.doubleProto = key.start;
                }
              } else {
                this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
              }
            }
            propHash.proto = true;
          }
          return;
        }
        name = "$" + name;
        var other = propHash[name];
        if (other) {
          var redefinition;
          if (kind === "init") {
            redefinition = this.strict && other.init || other.get || other.set;
          } else {
            redefinition = other.init || other[kind];
          }
          if (redefinition) {
            this.raiseRecoverable(key.start, "Redefinition of property");
          }
        } else {
          other = propHash[name] = {
            init: false,
            get: false,
            set: false
          };
        }
        other[kind] = true;
      };
      pp$5.parseExpression = function(forInit, refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc;
        var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);
        if (this.type === types$1.comma) {
          var node = this.startNodeAt(startPos, startLoc);
          node.expressions = [expr];
          while (this.eat(types$1.comma)) {
            node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors));
          }
          return this.finishNode(node, "SequenceExpression");
        }
        return expr;
      };
      pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {
        if (this.isContextual("yield")) {
          if (this.inGenerator) {
            return this.parseYield(forInit);
          } else {
            this.exprAllowed = false;
          }
        }
        var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;
        if (refDestructuringErrors) {
          oldParenAssign = refDestructuringErrors.parenthesizedAssign;
          oldTrailingComma = refDestructuringErrors.trailingComma;
          oldDoubleProto = refDestructuringErrors.doubleProto;
          refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
        } else {
          refDestructuringErrors = new DestructuringErrors();
          ownDestructuringErrors = true;
        }
        var startPos = this.start, startLoc = this.startLoc;
        if (this.type === types$1.parenL || this.type === types$1.name) {
          this.potentialArrowAt = this.start;
          this.potentialArrowInForAwait = forInit === "await";
        }
        var left = this.parseMaybeConditional(forInit, refDestructuringErrors);
        if (afterLeftParse) {
          left = afterLeftParse.call(this, left, startPos, startLoc);
        }
        if (this.type.isAssign) {
          var node = this.startNodeAt(startPos, startLoc);
          node.operator = this.value;
          if (this.type === types$1.eq) {
            left = this.toAssignable(left, false, refDestructuringErrors);
          }
          if (!ownDestructuringErrors) {
            refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;
          }
          if (refDestructuringErrors.shorthandAssign >= left.start) {
            refDestructuringErrors.shorthandAssign = -1;
          }
          if (this.type === types$1.eq) {
            this.checkLValPattern(left);
          } else {
            this.checkLValSimple(left);
          }
          node.left = left;
          this.next();
          node.right = this.parseMaybeAssign(forInit);
          if (oldDoubleProto > -1) {
            refDestructuringErrors.doubleProto = oldDoubleProto;
          }
          return this.finishNode(node, "AssignmentExpression");
        } else {
          if (ownDestructuringErrors) {
            this.checkExpressionErrors(refDestructuringErrors, true);
          }
        }
        if (oldParenAssign > -1) {
          refDestructuringErrors.parenthesizedAssign = oldParenAssign;
        }
        if (oldTrailingComma > -1) {
          refDestructuringErrors.trailingComma = oldTrailingComma;
        }
        return left;
      };
      pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc;
        var expr = this.parseExprOps(forInit, refDestructuringErrors);
        if (this.checkExpressionErrors(refDestructuringErrors)) {
          return expr;
        }
        if (this.eat(types$1.question)) {
          var node = this.startNodeAt(startPos, startLoc);
          node.test = expr;
          node.consequent = this.parseMaybeAssign();
          this.expect(types$1.colon);
          node.alternate = this.parseMaybeAssign(forInit);
          return this.finishNode(node, "ConditionalExpression");
        }
        return expr;
      };
      pp$5.parseExprOps = function(forInit, refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc;
        var expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);
        if (this.checkExpressionErrors(refDestructuringErrors)) {
          return expr;
        }
        return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit);
      };
      pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {
        var prec = this.type.binop;
        if (prec != null && (!forInit || this.type !== types$1._in)) {
          if (prec > minPrec) {
            var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND;
            var coalesce = this.type === types$1.coalesce;
            if (coalesce) {
              prec = types$1.logicalAND.binop;
            }
            var op = this.value;
            this.next();
            var startPos = this.start, startLoc = this.startLoc;
            var right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit);
            var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
            if (logical && this.type === types$1.coalesce || coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND)) {
              this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses");
            }
            return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit);
          }
        }
        return left;
      };
      pp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {
        if (right.type === "PrivateIdentifier") {
          this.raise(right.start, "Private identifier can only be left side of binary expression");
        }
        var node = this.startNodeAt(startPos, startLoc);
        node.left = left;
        node.operator = op;
        node.right = right;
        return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
      };
      pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {
        var startPos = this.start, startLoc = this.startLoc, expr;
        if (this.isContextual("await") && this.canAwait) {
          expr = this.parseAwait(forInit);
          sawUnary = true;
        } else if (this.type.prefix) {
          var node = this.startNode(), update = this.type === types$1.incDec;
          node.operator = this.value;
          node.prefix = true;
          this.next();
          node.argument = this.parseMaybeUnary(null, true, update, forInit);
          this.checkExpressionErrors(refDestructuringErrors, true);
          if (update) {
            this.checkLValSimple(node.argument);
          } else if (this.strict && node.operator === "delete" && node.argument.type === "Identifier") {
            this.raiseRecoverable(node.start, "Deleting local variable in strict mode");
          } else if (node.operator === "delete" && isPrivateFieldAccess(node.argument)) {
            this.raiseRecoverable(node.start, "Private fields can not be deleted");
          } else {
            sawUnary = true;
          }
          expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
        } else if (!sawUnary && this.type === types$1.privateId) {
          if ((forInit || this.privateNameStack.length === 0) && this.options.checkPrivateFields) {
            this.unexpected();
          }
          expr = this.parsePrivateIdent();
          if (this.type !== types$1._in) {
            this.unexpected();
          }
        } else {
          expr = this.parseExprSubscripts(refDestructuringErrors, forInit);
          if (this.checkExpressionErrors(refDestructuringErrors)) {
            return expr;
          }
          while (this.type.postfix && !this.canInsertSemicolon()) {
            var node$1 = this.startNodeAt(startPos, startLoc);
            node$1.operator = this.value;
            node$1.prefix = false;
            node$1.argument = expr;
            this.checkLValSimple(expr);
            this.next();
            expr = this.finishNode(node$1, "UpdateExpression");
          }
        }
        if (!incDec && this.eat(types$1.starstar)) {
          if (sawUnary) {
            this.unexpected(this.lastTokStart);
          } else {
            return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), "**", false);
          }
        } else {
          return expr;
        }
      };
      function isPrivateFieldAccess(node) {
        return node.type === "MemberExpression" && node.property.type === "PrivateIdentifier" || node.type === "ChainExpression" && isPrivateFieldAccess(node.expression);
      }
      pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {
        var startPos = this.start, startLoc = this.startLoc;
        var expr = this.parseExprAtom(refDestructuringErrors, forInit);
        if (expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")") {
          return expr;
        }
        var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);
        if (refDestructuringErrors && result.type === "MemberExpression") {
          if (refDestructuringErrors.parenthesizedAssign >= result.start) {
            refDestructuringErrors.parenthesizedAssign = -1;
          }
          if (refDestructuringErrors.parenthesizedBind >= result.start) {
            refDestructuringErrors.parenthesizedBind = -1;
          }
          if (refDestructuringErrors.trailingComma >= result.start) {
            refDestructuringErrors.trailingComma = -1;
          }
        }
        return result;
      };
      pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {
        var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && this.potentialArrowAt === base.start;
        var optionalChained = false;
        while (true) {
          var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);
          if (element.optional) {
            optionalChained = true;
          }
          if (element === base || element.type === "ArrowFunctionExpression") {
            if (optionalChained) {
              var chainNode = this.startNodeAt(startPos, startLoc);
              chainNode.expression = element;
              element = this.finishNode(chainNode, "ChainExpression");
            }
            return element;
          }
          base = element;
        }
      };
      pp$5.shouldParseAsyncArrow = function() {
        return !this.canInsertSemicolon() && this.eat(types$1.arrow);
      };
      pp$5.parseSubscriptAsyncArrow = function(startPos, startLoc, exprList, forInit) {
        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit);
      };
      pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {
        var optionalSupported = this.options.ecmaVersion >= 11;
        var optional = optionalSupported && this.eat(types$1.questionDot);
        if (noCalls && optional) {
          this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
        }
        var computed = this.eat(types$1.bracketL);
        if (computed || optional && this.type !== types$1.parenL && this.type !== types$1.backQuote || this.eat(types$1.dot)) {
          var node = this.startNodeAt(startPos, startLoc);
          node.object = base;
          if (computed) {
            node.property = this.parseExpression();
            this.expect(types$1.bracketR);
          } else if (this.type === types$1.privateId && base.type !== "Super") {
            node.property = this.parsePrivateIdent();
          } else {
            node.property = this.parseIdent(this.options.allowReserved !== "never");
          }
          node.computed = !!computed;
          if (optionalSupported) {
            node.optional = optional;
          }
          base = this.finishNode(node, "MemberExpression");
        } else if (!noCalls && this.eat(types$1.parenL)) {
          var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          this.yieldPos = 0;
          this.awaitPos = 0;
          this.awaitIdentPos = 0;
          var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
          if (maybeAsyncArrow && !optional && this.shouldParseAsyncArrow()) {
            this.checkPatternErrors(refDestructuringErrors, false);
            this.checkYieldAwaitInDefaultParams();
            if (this.awaitIdentPos > 0) {
              this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function");
            }
            this.yieldPos = oldYieldPos;
            this.awaitPos = oldAwaitPos;
            this.awaitIdentPos = oldAwaitIdentPos;
            return this.parseSubscriptAsyncArrow(startPos, startLoc, exprList, forInit);
          }
          this.checkExpressionErrors(refDestructuringErrors, true);
          this.yieldPos = oldYieldPos || this.yieldPos;
          this.awaitPos = oldAwaitPos || this.awaitPos;
          this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
          var node$1 = this.startNodeAt(startPos, startLoc);
          node$1.callee = base;
          node$1.arguments = exprList;
          if (optionalSupported) {
            node$1.optional = optional;
          }
          base = this.finishNode(node$1, "CallExpression");
        } else if (this.type === types$1.backQuote) {
          if (optional || optionalChained) {
            this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
          }
          var node$2 = this.startNodeAt(startPos, startLoc);
          node$2.tag = base;
          node$2.quasi = this.parseTemplate({ isTagged: true });
          base = this.finishNode(node$2, "TaggedTemplateExpression");
        }
        return base;
      };
      pp$5.parseExprAtom = function(refDestructuringErrors, forInit, forNew) {
        if (this.type === types$1.slash) {
          this.readRegexp();
        }
        var node, canBeArrow = this.potentialArrowAt === this.start;
        switch (this.type) {
          case types$1._super:
            if (!this.allowSuper) {
              this.raise(this.start, "'super' keyword outside a method");
            }
            node = this.startNode();
            this.next();
            if (this.type === types$1.parenL && !this.allowDirectSuper) {
              this.raise(node.start, "super() call outside constructor of a subclass");
            }
            if (this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL) {
              this.unexpected();
            }
            return this.finishNode(node, "Super");
          case types$1._this:
            node = this.startNode();
            this.next();
            return this.finishNode(node, "ThisExpression");
          case types$1.name:
            var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;
            var id = this.parseIdent(false);
            if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types$1._function)) {
              this.overrideContext(types.f_expr);
              return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit);
            }
            if (canBeArrow && !this.canInsertSemicolon()) {
              if (this.eat(types$1.arrow)) {
                return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit);
              }
              if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types$1.name && !containsEsc && (!this.potentialArrowInForAwait || this.value !== "of" || this.containsEsc)) {
                id = this.parseIdent(false);
                if (this.canInsertSemicolon() || !this.eat(types$1.arrow)) {
                  this.unexpected();
                }
                return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit);
              }
            }
            return id;
          case types$1.regexp:
            var value = this.value;
            node = this.parseLiteral(value.value);
            node.regex = { pattern: value.pattern, flags: value.flags };
            return node;
          case types$1.num:
          case types$1.string:
            return this.parseLiteral(this.value);
          case types$1._null:
          case types$1._true:
          case types$1._false:
            node = this.startNode();
            node.value = this.type === types$1._null ? null : this.type === types$1._true;
            node.raw = this.type.keyword;
            this.next();
            return this.finishNode(node, "Literal");
          case types$1.parenL:
            var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);
            if (refDestructuringErrors) {
              if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {
                refDestructuringErrors.parenthesizedAssign = start;
              }
              if (refDestructuringErrors.parenthesizedBind < 0) {
                refDestructuringErrors.parenthesizedBind = start;
              }
            }
            return expr;
          case types$1.bracketL:
            node = this.startNode();
            this.next();
            node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors);
            return this.finishNode(node, "ArrayExpression");
          case types$1.braceL:
            this.overrideContext(types.b_expr);
            return this.parseObj(false, refDestructuringErrors);
          case types$1._function:
            node = this.startNode();
            this.next();
            return this.parseFunction(node, 0);
          case types$1._class:
            return this.parseClass(this.startNode(), false);
          case types$1._new:
            return this.parseNew();
          case types$1.backQuote:
            return this.parseTemplate();
          case types$1._import:
            if (this.options.ecmaVersion >= 11) {
              return this.parseExprImport(forNew);
            } else {
              return this.unexpected();
            }
          default:
            return this.parseExprAtomDefault();
        }
      };
      pp$5.parseExprAtomDefault = function() {
        this.unexpected();
      };
      pp$5.parseExprImport = function(forNew) {
        var node = this.startNode();
        if (this.containsEsc) {
          this.raiseRecoverable(this.start, "Escape sequence in keyword import");
        }
        this.next();
        if (this.type === types$1.parenL && !forNew) {
          return this.parseDynamicImport(node);
        } else if (this.type === types$1.dot) {
          var meta = this.startNodeAt(node.start, node.loc && node.loc.start);
          meta.name = "import";
          node.meta = this.finishNode(meta, "Identifier");
          return this.parseImportMeta(node);
        } else {
          this.unexpected();
        }
      };
      pp$5.parseDynamicImport = function(node) {
        this.next();
        node.source = this.parseMaybeAssign();
        if (!this.eat(types$1.parenR)) {
          var errorPos = this.start;
          if (this.eat(types$1.comma) && this.eat(types$1.parenR)) {
            this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()");
          } else {
            this.unexpected(errorPos);
          }
        }
        return this.finishNode(node, "ImportExpression");
      };
      pp$5.parseImportMeta = function(node) {
        this.next();
        var containsEsc = this.containsEsc;
        node.property = this.parseIdent(true);
        if (node.property.name !== "meta") {
          this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'");
        }
        if (containsEsc) {
          this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters");
        }
        if (this.options.sourceType !== "module" && !this.options.allowImportExportEverywhere) {
          this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module");
        }
        return this.finishNode(node, "MetaProperty");
      };
      pp$5.parseLiteral = function(value) {
        var node = this.startNode();
        node.value = value;
        node.raw = this.input.slice(this.start, this.end);
        if (node.raw.charCodeAt(node.raw.length - 1) === 110) {
          node.bigint = node.raw.slice(0, -1).replace(/_/g, "");
        }
        this.next();
        return this.finishNode(node, "Literal");
      };
      pp$5.parseParenExpression = function() {
        this.expect(types$1.parenL);
        var val = this.parseExpression();
        this.expect(types$1.parenR);
        return val;
      };
      pp$5.shouldParseArrow = function(exprList) {
        return !this.canInsertSemicolon();
      };
      pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {
        var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;
        if (this.options.ecmaVersion >= 6) {
          this.next();
          var innerStartPos = this.start, innerStartLoc = this.startLoc;
          var exprList = [], first = true, lastIsComma = false;
          var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;
          this.yieldPos = 0;
          this.awaitPos = 0;
          while (this.type !== types$1.parenR) {
            first ? first = false : this.expect(types$1.comma);
            if (allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {
              lastIsComma = true;
              break;
            } else if (this.type === types$1.ellipsis) {
              spreadStart = this.start;
              exprList.push(this.parseParenItem(this.parseRestBinding()));
              if (this.type === types$1.comma) {
                this.raiseRecoverable(
                  this.start,
                  "Comma is not permitted after the rest element"
                );
              }
              break;
            } else {
              exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
            }
          }
          var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;
          this.expect(types$1.parenR);
          if (canBeArrow && this.shouldParseArrow(exprList) && this.eat(types$1.arrow)) {
            this.checkPatternErrors(refDestructuringErrors, false);
            this.checkYieldAwaitInDefaultParams();
            this.yieldPos = oldYieldPos;
            this.awaitPos = oldAwaitPos;
            return this.parseParenArrowList(startPos, startLoc, exprList, forInit);
          }
          if (!exprList.length || lastIsComma) {
            this.unexpected(this.lastTokStart);
          }
          if (spreadStart) {
            this.unexpected(spreadStart);
          }
          this.checkExpressionErrors(refDestructuringErrors, true);
          this.yieldPos = oldYieldPos || this.yieldPos;
          this.awaitPos = oldAwaitPos || this.awaitPos;
          if (exprList.length > 1) {
            val = this.startNodeAt(innerStartPos, innerStartLoc);
            val.expressions = exprList;
            this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
          } else {
            val = exprList[0];
          }
        } else {
          val = this.parseParenExpression();
        }
        if (this.options.preserveParens) {
          var par = this.startNodeAt(startPos, startLoc);
          par.expression = val;
          return this.finishNode(par, "ParenthesizedExpression");
        } else {
          return val;
        }
      };
      pp$5.parseParenItem = function(item) {
        return item;
      };
      pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {
        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit);
      };
      var empty = [];
      pp$5.parseNew = function() {
        if (this.containsEsc) {
          this.raiseRecoverable(this.start, "Escape sequence in keyword new");
        }
        var node = this.startNode();
        this.next();
        if (this.options.ecmaVersion >= 6 && this.type === types$1.dot) {
          var meta = this.startNodeAt(node.start, node.loc && node.loc.start);
          meta.name = "new";
          node.meta = this.finishNode(meta, "Identifier");
          this.next();
          var containsEsc = this.containsEsc;
          node.property = this.parseIdent(true);
          if (node.property.name !== "target") {
            this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'");
          }
          if (containsEsc) {
            this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters");
          }
          if (!this.allowNewDotTarget) {
            this.raiseRecoverable(node.start, "'new.target' can only be used in functions and class static block");
          }
          return this.finishNode(node, "MetaProperty");
        }
        var startPos = this.start, startLoc = this.startLoc;
        node.callee = this.parseSubscripts(this.parseExprAtom(null, false, true), startPos, startLoc, true, false);
        if (this.eat(types$1.parenL)) {
          node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false);
        } else {
          node.arguments = empty;
        }
        return this.finishNode(node, "NewExpression");
      };
      pp$5.parseTemplateElement = function(ref2) {
        var isTagged = ref2.isTagged;
        var elem = this.startNode();
        if (this.type === types$1.invalidTemplate) {
          if (!isTagged) {
            this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
          }
          elem.value = {
            raw: this.value,
            cooked: null
          };
        } else {
          elem.value = {
            raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
            cooked: this.value
          };
        }
        this.next();
        elem.tail = this.type === types$1.backQuote;
        return this.finishNode(elem, "TemplateElement");
      };
      pp$5.parseTemplate = function(ref2) {
        if (ref2 === void 0)
          ref2 = {};
        var isTagged = ref2.isTagged;
        if (isTagged === void 0)
          isTagged = false;
        var node = this.startNode();
        this.next();
        node.expressions = [];
        var curElt = this.parseTemplateElement({ isTagged });
        node.quasis = [curElt];
        while (!curElt.tail) {
          if (this.type === types$1.eof) {
            this.raise(this.pos, "Unterminated template literal");
          }
          this.expect(types$1.dollarBraceL);
          node.expressions.push(this.parseExpression());
          this.expect(types$1.braceR);
          node.quasis.push(curElt = this.parseTemplateElement({ isTagged }));
        }
        this.next();
        return this.finishNode(node, "TemplateLiteral");
      };
      pp$5.isAsyncProp = function(prop) {
        return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types$1.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
      };
      pp$5.parseObj = function(isPattern, refDestructuringErrors) {
        var node = this.startNode(), first = true, propHash = {};
        node.properties = [];
        this.next();
        while (!this.eat(types$1.braceR)) {
          if (!first) {
            this.expect(types$1.comma);
            if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) {
              break;
            }
          } else {
            first = false;
          }
          var prop = this.parseProperty(isPattern, refDestructuringErrors);
          if (!isPattern) {
            this.checkPropClash(prop, propHash, refDestructuringErrors);
          }
          node.properties.push(prop);
        }
        return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
      };
      pp$5.parseProperty = function(isPattern, refDestructuringErrors) {
        var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;
        if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) {
          if (isPattern) {
            prop.argument = this.parseIdent(false);
            if (this.type === types$1.comma) {
              this.raiseRecoverable(this.start, "Comma is not permitted after the rest element");
            }
            return this.finishNode(prop, "RestElement");
          }
          prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);
          if (this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
            refDestructuringErrors.trailingComma = this.start;
          }
          return this.finishNode(prop, "SpreadElement");
        }
        if (this.options.ecmaVersion >= 6) {
          prop.method = false;
          prop.shorthand = false;
          if (isPattern || refDestructuringErrors) {
            startPos = this.start;
            startLoc = this.startLoc;
          }
          if (!isPattern) {
            isGenerator = this.eat(types$1.star);
          }
        }
        var containsEsc = this.containsEsc;
        this.parsePropertyName(prop);
        if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
          isAsync = true;
          isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star);
          this.parsePropertyName(prop);
        } else {
          isAsync = false;
        }
        this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
        return this.finishNode(prop, "Property");
      };
      pp$5.parseGetterSetter = function(prop) {
        prop.kind = prop.key.name;
        this.parsePropertyName(prop);
        prop.value = this.parseMethod(false);
        var paramCount = prop.kind === "get" ? 0 : 1;
        if (prop.value.params.length !== paramCount) {
          var start = prop.value.start;
          if (prop.kind === "get") {
            this.raiseRecoverable(start, "getter should have no params");
          } else {
            this.raiseRecoverable(start, "setter should have exactly one param");
          }
        } else {
          if (prop.kind === "set" && prop.value.params[0].type === "RestElement") {
            this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
          }
        }
      };
      pp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
        if ((isGenerator || isAsync) && this.type === types$1.colon) {
          this.unexpected();
        }
        if (this.eat(types$1.colon)) {
          prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
          prop.kind = "init";
        } else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL) {
          if (isPattern) {
            this.unexpected();
          }
          prop.kind = "init";
          prop.method = true;
          prop.value = this.parseMethod(isGenerator, isAsync);
        } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && (this.type !== types$1.comma && this.type !== types$1.braceR && this.type !== types$1.eq)) {
          if (isGenerator || isAsync) {
            this.unexpected();
          }
          this.parseGetterSetter(prop);
        } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
          if (isGenerator || isAsync) {
            this.unexpected();
          }
          this.checkUnreserved(prop.key);
          if (prop.key.name === "await" && !this.awaitIdentPos) {
            this.awaitIdentPos = startPos;
          }
          prop.kind = "init";
          if (isPattern) {
            prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
          } else if (this.type === types$1.eq && refDestructuringErrors) {
            if (refDestructuringErrors.shorthandAssign < 0) {
              refDestructuringErrors.shorthandAssign = this.start;
            }
            prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
          } else {
            prop.value = this.copyNode(prop.key);
          }
          prop.shorthand = true;
        } else {
          this.unexpected();
        }
      };
      pp$5.parsePropertyName = function(prop) {
        if (this.options.ecmaVersion >= 6) {
          if (this.eat(types$1.bracketL)) {
            prop.computed = true;
            prop.key = this.parseMaybeAssign();
            this.expect(types$1.bracketR);
            return prop.key;
          } else {
            prop.computed = false;
          }
        }
        return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
      };
      pp$5.initFunction = function(node) {
        node.id = null;
        if (this.options.ecmaVersion >= 6) {
          node.generator = node.expression = false;
        }
        if (this.options.ecmaVersion >= 8) {
          node.async = false;
        }
      };
      pp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
        var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        this.initFunction(node);
        if (this.options.ecmaVersion >= 6) {
          node.generator = isGenerator;
        }
        if (this.options.ecmaVersion >= 8) {
          node.async = !!isAsync;
        }
        this.yieldPos = 0;
        this.awaitPos = 0;
        this.awaitIdentPos = 0;
        this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
        this.expect(types$1.parenL);
        node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);
        this.checkYieldAwaitInDefaultParams();
        this.parseFunctionBody(node, false, true, false);
        this.yieldPos = oldYieldPos;
        this.awaitPos = oldAwaitPos;
        this.awaitIdentPos = oldAwaitIdentPos;
        return this.finishNode(node, "FunctionExpression");
      };
      pp$5.parseArrowExpression = function(node, params, isAsync, forInit) {
        var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);
        this.initFunction(node);
        if (this.options.ecmaVersion >= 8) {
          node.async = !!isAsync;
        }
        this.yieldPos = 0;
        this.awaitPos = 0;
        this.awaitIdentPos = 0;
        node.params = this.toAssignableList(params, true);
        this.parseFunctionBody(node, true, false, forInit);
        this.yieldPos = oldYieldPos;
        this.awaitPos = oldAwaitPos;
        this.awaitIdentPos = oldAwaitIdentPos;
        return this.finishNode(node, "ArrowFunctionExpression");
      };
      pp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {
        var isExpression = isArrowFunction && this.type !== types$1.braceL;
        var oldStrict = this.strict, useStrict = false;
        if (isExpression) {
          node.body = this.parseMaybeAssign(forInit);
          node.expression = true;
          this.checkParams(node, false);
        } else {
          var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
          if (!oldStrict || nonSimple) {
            useStrict = this.strictDirective(this.end);
            if (useStrict && nonSimple) {
              this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
            }
          }
          var oldLabels = this.labels;
          this.labels = [];
          if (useStrict) {
            this.strict = true;
          }
          this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));
          if (this.strict && node.id) {
            this.checkLValSimple(node.id, BIND_OUTSIDE);
          }
          node.body = this.parseBlock(false, void 0, useStrict && !oldStrict);
          node.expression = false;
          this.adaptDirectivePrologue(node.body.body);
          this.labels = oldLabels;
        }
        this.exitScope();
      };
      pp$5.isSimpleParamList = function(params) {
        for (var i2 = 0, list2 = params; i2 < list2.length; i2 += 1) {
          var param = list2[i2];
          if (param.type !== "Identifier") {
            return false;
          }
        }
        return true;
      };
      pp$5.checkParams = function(node, allowDuplicates) {
        var nameHash = /* @__PURE__ */ Object.create(null);
        for (var i2 = 0, list2 = node.params; i2 < list2.length; i2 += 1) {
          var param = list2[i2];
          this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);
        }
      };
      pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
        var elts = [], first = true;
        while (!this.eat(close)) {
          if (!first) {
            this.expect(types$1.comma);
            if (allowTrailingComma && this.afterTrailingComma(close)) {
              break;
            }
          } else {
            first = false;
          }
          var elt = void 0;
          if (allowEmpty && this.type === types$1.comma) {
            elt = null;
          } else if (this.type === types$1.ellipsis) {
            elt = this.parseSpread(refDestructuringErrors);
            if (refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0) {
              refDestructuringErrors.trailingComma = this.start;
            }
          } else {
            elt = this.parseMaybeAssign(false, refDestructuringErrors);
          }
          elts.push(elt);
        }
        return elts;
      };
      pp$5.checkUnreserved = function(ref2) {
        var start = ref2.start;
        var end = ref2.end;
        var name = ref2.name;
        if (this.inGenerator && name === "yield") {
          this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator");
        }
        if (this.inAsync && name === "await") {
          this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function");
        }
        if (this.currentThisScope().inClassFieldInit && name === "arguments") {
          this.raiseRecoverable(start, "Cannot use 'arguments' in class field initializer");
        }
        if (this.inClassStaticBlock && (name === "arguments" || name === "await")) {
          this.raise(start, "Cannot use " + name + " in class static initialization block");
        }
        if (this.keywords.test(name)) {
          this.raise(start, "Unexpected keyword '" + name + "'");
        }
        if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf("\\") !== -1) {
          return;
        }
        var re = this.strict ? this.reservedWordsStrict : this.reservedWords;
        if (re.test(name)) {
          if (!this.inAsync && name === "await") {
            this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function");
          }
          this.raiseRecoverable(start, "The keyword '" + name + "' is reserved");
        }
      };
      pp$5.parseIdent = function(liberal) {
        var node = this.parseIdentNode();
        this.next(!!liberal);
        this.finishNode(node, "Identifier");
        if (!liberal) {
          this.checkUnreserved(node);
          if (node.name === "await" && !this.awaitIdentPos) {
            this.awaitIdentPos = node.start;
          }
        }
        return node;
      };
      pp$5.parseIdentNode = function() {
        var node = this.startNode();
        if (this.type === types$1.name) {
          node.name = this.value;
        } else if (this.type.keyword) {
          node.name = this.type.keyword;
          if ((node.name === "class" || node.name === "function") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
            this.context.pop();
          }
          this.type = types$1.name;
        } else {
          this.unexpected();
        }
        return node;
      };
      pp$5.parsePrivateIdent = function() {
        var node = this.startNode();
        if (this.type === types$1.privateId) {
          node.name = this.value;
        } else {
          this.unexpected();
        }
        this.next();
        this.finishNode(node, "PrivateIdentifier");
        if (this.options.checkPrivateFields) {
          if (this.privateNameStack.length === 0) {
            this.raise(node.start, "Private field '#" + node.name + "' must be declared in an enclosing class");
          } else {
            this.privateNameStack[this.privateNameStack.length - 1].used.push(node);
          }
        }
        return node;
      };
      pp$5.parseYield = function(forInit) {
        if (!this.yieldPos) {
          this.yieldPos = this.start;
        }
        var node = this.startNode();
        this.next();
        if (this.type === types$1.semi || this.canInsertSemicolon() || this.type !== types$1.star && !this.type.startsExpr) {
          node.delegate = false;
          node.argument = null;
        } else {
          node.delegate = this.eat(types$1.star);
          node.argument = this.parseMaybeAssign(forInit);
        }
        return this.finishNode(node, "YieldExpression");
      };
      pp$5.parseAwait = function(forInit) {
        if (!this.awaitPos) {
          this.awaitPos = this.start;
        }
        var node = this.startNode();
        this.next();
        node.argument = this.parseMaybeUnary(null, true, false, forInit);
        return this.finishNode(node, "AwaitExpression");
      };
      var pp$4 = Parser.prototype;
      pp$4.raise = function(pos, message) {
        var loc = getLineInfo(this.input, pos);
        message += " (" + loc.line + ":" + loc.column + ")";
        var err = new SyntaxError(message);
        err.pos = pos;
        err.loc = loc;
        err.raisedAt = this.pos;
        throw err;
      };
      pp$4.raiseRecoverable = pp$4.raise;
      pp$4.curPosition = function() {
        if (this.options.locations) {
          return new Position(this.curLine, this.pos - this.lineStart);
        }
      };
      var pp$3 = Parser.prototype;
      var Scope = function Scope2(flags) {
        this.flags = flags;
        this.var = [];
        this.lexical = [];
        this.functions = [];
        this.inClassFieldInit = false;
      };
      pp$3.enterScope = function(flags) {
        this.scopeStack.push(new Scope(flags));
      };
      pp$3.exitScope = function() {
        this.scopeStack.pop();
      };
      pp$3.treatFunctionsAsVarInScope = function(scope) {
        return scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_TOP;
      };
      pp$3.declareName = function(name, bindingType, pos) {
        var redeclared = false;
        if (bindingType === BIND_LEXICAL) {
          var scope = this.currentScope();
          redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;
          scope.lexical.push(name);
          if (this.inModule && scope.flags & SCOPE_TOP) {
            delete this.undefinedExports[name];
          }
        } else if (bindingType === BIND_SIMPLE_CATCH) {
          var scope$1 = this.currentScope();
          scope$1.lexical.push(name);
        } else if (bindingType === BIND_FUNCTION) {
          var scope$2 = this.currentScope();
          if (this.treatFunctionsAsVar) {
            redeclared = scope$2.lexical.indexOf(name) > -1;
          } else {
            redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1;
          }
          scope$2.functions.push(name);
        } else {
          for (var i2 = this.scopeStack.length - 1; i2 >= 0; --i2) {
            var scope$3 = this.scopeStack[i2];
            if (scope$3.lexical.indexOf(name) > -1 && !(scope$3.flags & SCOPE_SIMPLE_CATCH && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
              redeclared = true;
              break;
            }
            scope$3.var.push(name);
            if (this.inModule && scope$3.flags & SCOPE_TOP) {
              delete this.undefinedExports[name];
            }
            if (scope$3.flags & SCOPE_VAR) {
              break;
            }
          }
        }
        if (redeclared) {
          this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
        }
      };
      pp$3.checkLocalExport = function(id) {
        if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1) {
          this.undefinedExports[id.name] = id;
        }
      };
      pp$3.currentScope = function() {
        return this.scopeStack[this.scopeStack.length - 1];
      };
      pp$3.currentVarScope = function() {
        for (var i2 = this.scopeStack.length - 1; ; i2--) {
          var scope = this.scopeStack[i2];
          if (scope.flags & SCOPE_VAR) {
            return scope;
          }
        }
      };
      pp$3.currentThisScope = function() {
        for (var i2 = this.scopeStack.length - 1; ; i2--) {
          var scope = this.scopeStack[i2];
          if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) {
            return scope;
          }
        }
      };
      var Node = function Node2(parser, pos, loc) {
        this.type = "";
        this.start = pos;
        this.end = 0;
        if (parser.options.locations) {
          this.loc = new SourceLocation(parser, loc);
        }
        if (parser.options.directSourceFile) {
          this.sourceFile = parser.options.directSourceFile;
        }
        if (parser.options.ranges) {
          this.range = [pos, 0];
        }
      };
      var pp$2 = Parser.prototype;
      pp$2.startNode = function() {
        return new Node(this, this.start, this.startLoc);
      };
      pp$2.startNodeAt = function(pos, loc) {
        return new Node(this, pos, loc);
      };
      function finishNodeAt(node, type, pos, loc) {
        node.type = type;
        node.end = pos;
        if (this.options.locations) {
          node.loc.end = loc;
        }
        if (this.options.ranges) {
          node.range[1] = pos;
        }
        return node;
      }
      pp$2.finishNode = function(node, type) {
        return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
      };
      pp$2.finishNodeAt = function(node, type, pos, loc) {
        return finishNodeAt.call(this, node, type, pos, loc);
      };
      pp$2.copyNode = function(node) {
        var newNode = new Node(this, node.start, this.startLoc);
        for (var prop in node) {
          newNode[prop] = node[prop];
        }
        return newNode;
      };
      var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
      var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";
      var ecma11BinaryProperties = ecma10BinaryProperties;
      var ecma12BinaryProperties = ecma11BinaryProperties + " EBase EComp EMod EPres ExtPict";
      var ecma13BinaryProperties = ecma12BinaryProperties;
      var ecma14BinaryProperties = ecma13BinaryProperties;
      var unicodeBinaryProperties = {
        9: ecma9BinaryProperties,
        10: ecma10BinaryProperties,
        11: ecma11BinaryProperties,
        12: ecma12BinaryProperties,
        13: ecma13BinaryProperties,
        14: ecma14BinaryProperties
      };
      var ecma14BinaryPropertiesOfStrings = "Basic_Emoji Emoji_Keycap_Sequence RGI_Emoji_Modifier_Sequence RGI_Emoji_Flag_Sequence RGI_Emoji_Tag_Sequence RGI_Emoji_ZWJ_Sequence RGI_Emoji";
      var unicodeBinaryPropertiesOfStrings = {
        9: "",
        10: "",
        11: "",
        12: "",
        13: "",
        14: ecma14BinaryPropertiesOfStrings
      };
      var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";
      var ecma9ScriptValues = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
      var ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
      var ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
      var ecma12ScriptValues = ecma11ScriptValues + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi";
      var ecma13ScriptValues = ecma12ScriptValues + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith";
      var ecma14ScriptValues = ecma13ScriptValues + " Hrkt Katakana_Or_Hiragana Kawi Nag_Mundari Nagm Unknown Zzzz";
      var unicodeScriptValues = {
        9: ecma9ScriptValues,
        10: ecma10ScriptValues,
        11: ecma11ScriptValues,
        12: ecma12ScriptValues,
        13: ecma13ScriptValues,
        14: ecma14ScriptValues
      };
      var data = {};
      function buildUnicodeData(ecmaVersion2) {
        var d = data[ecmaVersion2] = {
          binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion2] + " " + unicodeGeneralCategoryValues),
          binaryOfStrings: wordsRegexp(unicodeBinaryPropertiesOfStrings[ecmaVersion2]),
          nonBinary: {
            General_Category: wordsRegexp(unicodeGeneralCategoryValues),
            Script: wordsRegexp(unicodeScriptValues[ecmaVersion2])
          }
        };
        d.nonBinary.Script_Extensions = d.nonBinary.Script;
        d.nonBinary.gc = d.nonBinary.General_Category;
        d.nonBinary.sc = d.nonBinary.Script;
        d.nonBinary.scx = d.nonBinary.Script_Extensions;
      }
      for (var i = 0, list = [9, 10, 11, 12, 13, 14]; i < list.length; i += 1) {
        var ecmaVersion = list[i];
        buildUnicodeData(ecmaVersion);
      }
      var pp$1 = Parser.prototype;
      var RegExpValidationState = function RegExpValidationState2(parser) {
        this.parser = parser;
        this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : "") + (parser.options.ecmaVersion >= 15 ? "v" : "");
        this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion];
        this.source = "";
        this.flags = "";
        this.start = 0;
        this.switchU = false;
        this.switchV = false;
        this.switchN = false;
        this.pos = 0;
        this.lastIntValue = 0;
        this.lastStringValue = "";
        this.lastAssertionIsQuantifiable = false;
        this.numCapturingParens = 0;
        this.maxBackReference = 0;
        this.groupNames = [];
        this.backReferenceNames = [];
      };
      RegExpValidationState.prototype.reset = function reset(start, pattern, flags) {
        var unicodeSets = flags.indexOf("v") !== -1;
        var unicode = flags.indexOf("u") !== -1;
        this.start = start | 0;
        this.source = pattern + "";
        this.flags = flags;
        if (unicodeSets && this.parser.options.ecmaVersion >= 15) {
          this.switchU = true;
          this.switchV = true;
          this.switchN = true;
        } else {
          this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
          this.switchV = false;
          this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
        }
      };
      RegExpValidationState.prototype.raise = function raise(message) {
        this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
      };
      RegExpValidationState.prototype.at = function at(i2, forceU) {
        if (forceU === void 0)
          forceU = false;
        var s = this.source;
        var l2 = s.length;
        if (i2 >= l2) {
          return -1;
        }
        var c2 = s.charCodeAt(i2);
        if (!(forceU || this.switchU) || c2 <= 55295 || c2 >= 57344 || i2 + 1 >= l2) {
          return c2;
        }
        var next = s.charCodeAt(i2 + 1);
        return next >= 56320 && next <= 57343 ? (c2 << 10) + next - 56613888 : c2;
      };
      RegExpValidationState.prototype.nextIndex = function nextIndex(i2, forceU) {
        if (forceU === void 0)
          forceU = false;
        var s = this.source;
        var l2 = s.length;
        if (i2 >= l2) {
          return l2;
        }
        var c2 = s.charCodeAt(i2), next;
        if (!(forceU || this.switchU) || c2 <= 55295 || c2 >= 57344 || i2 + 1 >= l2 || (next = s.charCodeAt(i2 + 1)) < 56320 || next > 57343) {
          return i2 + 1;
        }
        return i2 + 2;
      };
      RegExpValidationState.prototype.current = function current(forceU) {
        if (forceU === void 0)
          forceU = false;
        return this.at(this.pos, forceU);
      };
      RegExpValidationState.prototype.lookahead = function lookahead(forceU) {
        if (forceU === void 0)
          forceU = false;
        return this.at(this.nextIndex(this.pos, forceU), forceU);
      };
      RegExpValidationState.prototype.advance = function advance(forceU) {
        if (forceU === void 0)
          forceU = false;
        this.pos = this.nextIndex(this.pos, forceU);
      };
      RegExpValidationState.prototype.eat = function eat(ch, forceU) {
        if (forceU === void 0)
          forceU = false;
        if (this.current(forceU) === ch) {
          this.advance(forceU);
          return true;
        }
        return false;
      };
      RegExpValidationState.prototype.eatChars = function eatChars(chs, forceU) {
        if (forceU === void 0)
          forceU = false;
        var pos = this.pos;
        for (var i2 = 0, list2 = chs; i2 < list2.length; i2 += 1) {
          var ch = list2[i2];
          var current = this.at(pos, forceU);
          if (current === -1 || current !== ch) {
            return false;
          }
          pos = this.nextIndex(pos, forceU);
        }
        this.pos = pos;
        return true;
      };
      pp$1.validateRegExpFlags = function(state) {
        var validFlags = state.validFlags;
        var flags = state.flags;
        var u2 = false;
        var v = false;
        for (var i2 = 0; i2 < flags.length; i2++) {
          var flag = flags.charAt(i2);
          if (validFlags.indexOf(flag) === -1) {
            this.raise(state.start, "Invalid regular expression flag");
          }
          if (flags.indexOf(flag, i2 + 1) > -1) {
            this.raise(state.start, "Duplicate regular expression flag");
          }
          if (flag === "u") {
            u2 = true;
          }
          if (flag === "v") {
            v = true;
          }
        }
        if (this.options.ecmaVersion >= 15 && u2 && v) {
          this.raise(state.start, "Invalid regular expression flag");
        }
      };
      pp$1.validateRegExpPattern = function(state) {
        this.regexp_pattern(state);
        if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {
          state.switchN = true;
          this.regexp_pattern(state);
        }
      };
      pp$1.regexp_pattern = function(state) {
        state.pos = 0;
        state.lastIntValue = 0;
        state.lastStringValue = "";
        state.lastAssertionIsQuantifiable = false;
        state.numCapturingParens = 0;
        state.maxBackReference = 0;
        state.groupNames.length = 0;
        state.backReferenceNames.length = 0;
        this.regexp_disjunction(state);
        if (state.pos !== state.source.length) {
          if (state.eat(
            41
            /* ) */
          )) {
            state.raise("Unmatched ')'");
          }
          if (state.eat(
            93
            /* ] */
          ) || state.eat(
            125
            /* } */
          )) {
            state.raise("Lone quantifier brackets");
          }
        }
        if (state.maxBackReference > state.numCapturingParens) {
          state.raise("Invalid escape");
        }
        for (var i2 = 0, list2 = state.backReferenceNames; i2 < list2.length; i2 += 1) {
          var name = list2[i2];
          if (state.groupNames.indexOf(name) === -1) {
            state.raise("Invalid named capture referenced");
          }
        }
      };
      pp$1.regexp_disjunction = function(state) {
        this.regexp_alternative(state);
        while (state.eat(
          124
          /* | */
        )) {
          this.regexp_alternative(state);
        }
        if (this.regexp_eatQuantifier(state, true)) {
          state.raise("Nothing to repeat");
        }
        if (state.eat(
          123
          /* { */
        )) {
          state.raise("Lone quantifier brackets");
        }
      };
      pp$1.regexp_alternative = function(state) {
        while (state.pos < state.source.length && this.regexp_eatTerm(state)) {
        }
      };
      pp$1.regexp_eatTerm = function(state) {
        if (this.regexp_eatAssertion(state)) {
          if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
            if (state.switchU) {
              state.raise("Invalid quantifier");
            }
          }
          return true;
        }
        if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
          this.regexp_eatQuantifier(state);
          return true;
        }
        return false;
      };
      pp$1.regexp_eatAssertion = function(state) {
        var start = state.pos;
        state.lastAssertionIsQuantifiable = false;
        if (state.eat(
          94
          /* ^ */
        ) || state.eat(
          36
          /* $ */
        )) {
          return true;
        }
        if (state.eat(
          92
          /* \ */
        )) {
          if (state.eat(
            66
            /* B */
          ) || state.eat(
            98
            /* b */
          )) {
            return true;
          }
          state.pos = start;
        }
        if (state.eat(
          40
          /* ( */
        ) && state.eat(
          63
          /* ? */
        )) {
          var lookbehind = false;
          if (this.options.ecmaVersion >= 9) {
            lookbehind = state.eat(
              60
              /* < */
            );
          }
          if (state.eat(
            61
            /* = */
          ) || state.eat(
            33
            /* ! */
          )) {
            this.regexp_disjunction(state);
            if (!state.eat(
              41
              /* ) */
            )) {
              state.raise("Unterminated group");
            }
            state.lastAssertionIsQuantifiable = !lookbehind;
            return true;
          }
        }
        state.pos = start;
        return false;
      };
      pp$1.regexp_eatQuantifier = function(state, noError) {
        if (noError === void 0)
          noError = false;
        if (this.regexp_eatQuantifierPrefix(state, noError)) {
          state.eat(
            63
            /* ? */
          );
          return true;
        }
        return false;
      };
      pp$1.regexp_eatQuantifierPrefix = function(state, noError) {
        return state.eat(
          42
          /* * */
        ) || state.eat(
          43
          /* + */
        ) || state.eat(
          63
          /* ? */
        ) || this.regexp_eatBracedQuantifier(state, noError);
      };
      pp$1.regexp_eatBracedQuantifier = function(state, noError) {
        var start = state.pos;
        if (state.eat(
          123
          /* { */
        )) {
          var min = 0, max = -1;
          if (this.regexp_eatDecimalDigits(state)) {
            min = state.lastIntValue;
            if (state.eat(
              44
              /* , */
            ) && this.regexp_eatDecimalDigits(state)) {
              max = state.lastIntValue;
            }
            if (state.eat(
              125
              /* } */
            )) {
              if (max !== -1 && max < min && !noError) {
                state.raise("numbers out of order in {} quantifier");
              }
              return true;
            }
          }
          if (state.switchU && !noError) {
            state.raise("Incomplete quantifier");
          }
          state.pos = start;
        }
        return false;
      };
      pp$1.regexp_eatAtom = function(state) {
        return this.regexp_eatPatternCharacters(state) || state.eat(
          46
          /* . */
        ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
      };
      pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {
        var start = state.pos;
        if (state.eat(
          92
          /* \ */
        )) {
          if (this.regexp_eatAtomEscape(state)) {
            return true;
          }
          state.pos = start;
        }
        return false;
      };
      pp$1.regexp_eatUncapturingGroup = function(state) {
        var start = state.pos;
        if (state.eat(
          40
          /* ( */
        )) {
          if (state.eat(
            63
            /* ? */
          ) && state.eat(
            58
            /* : */
          )) {
            this.regexp_disjunction(state);
            if (state.eat(
              41
              /* ) */
            )) {
              return true;
            }
            state.raise("Unterminated group");
          }
          state.pos = start;
        }
        return false;
      };
      pp$1.regexp_eatCapturingGroup = function(state) {
        if (state.eat(
          40
          /* ( */
        )) {
          if (this.options.ecmaVersion >= 9) {
            this.regexp_groupSpecifier(state);
          } else if (state.current() === 63) {
            state.raise("Invalid group");
          }
          this.regexp_disjunction(state);
          if (state.eat(
            41
            /* ) */
          )) {
            state.numCapturingParens += 1;
            return true;
          }
          state.raise("Unterminated group");
        }
        return false;
      };
      pp$1.regexp_eatExtendedAtom = function(state) {
        return state.eat(
          46
          /* . */
        ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
      };
      pp$1.regexp_eatInvalidBracedQuantifier = function(state) {
        if (this.regexp_eatBracedQuantifier(state, true)) {
          state.raise("Nothing to repeat");
        }
        return false;
      };
      pp$1.regexp_eatSyntaxCharacter = function(state) {
        var ch = state.current();
        if (isSyntaxCharacter(ch)) {
          state.lastIntValue = ch;
          state.advance();
          return true;
        }
        return false;
      };
      function isSyntaxCharacter(ch) {
        return ch === 36 || ch >= 40 && ch <= 43 || ch === 46 || ch === 63 || ch >= 91 && ch <= 94 || ch >= 123 && ch <= 125;
      }
      pp$1.regexp_eatPatternCharacters = function(state) {
        var start = state.pos;
        var ch = 0;
        while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
          state.advance();
        }
        return state.pos !== start;
      };
      pp$1.regexp_eatExtendedPatternCharacter = function(state) {
        var ch = state.current();
        if (ch !== -1 && ch !== 36 && !(ch >= 40 && ch <= 43) && ch !== 46 && ch !== 63 && ch !== 91 && ch !== 94 && ch !== 124) {
          state.advance();
          return true;
        }
        return false;
      };
      pp$1.regexp_groupSpecifier = function(state) {
        if (state.eat(
          63
          /* ? */
        )) {
          if (this.regexp_eatGroupName(state)) {
            if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
              state.raise("Duplicate capture group name");
            }
            state.groupNames.push(state.lastStringValue);
            return;
          }
          state.raise("Invalid group");
        }
      };
      pp$1.regexp_eatGroupName = function(state) {
        state.lastStringValue = "";
        if (state.eat(
          60
          /* < */
        )) {
          if (this.regexp_eatRegExpIdentifierName(state) && state.eat(
            62
            /* > */
          )) {
            return true;
          }
          state.raise("Invalid capture group name");
        }
        return false;
      };
      pp$1.regexp_eatRegExpIdentifierName = function(state) {
        state.lastStringValue = "";
        if (this.regexp_eatRegExpIdentifierStart(state)) {
          state.lastStringValue += codePointToString(state.lastIntValue);
          while (this.regexp_eatRegExpIdentifierPart(state)) {
            state.lastStringValue += codePointToString(state.lastIntValue);
          }
          return true;
        }
        return false;
      };
      pp$1.regexp_eatRegExpIdentifierStart = function(state) {
        var start = state.pos;
        var forceU = this.options.ecmaVersion >= 11;
        var ch = state.current(forceU);
        state.advance(forceU);
        if (ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
          ch = state.lastIntValue;
        }
        if (isRegExpIdentifierStart(ch)) {
          state.lastIntValue = ch;
          return true;
        }
        state.pos = start;
        return false;
      };
      function isRegExpIdentifierStart(ch) {
        return isIdentifierStart(ch, true) || ch === 36 || ch === 95;
      }
      pp$1.regexp_eatRegExpIdentifierPart = function(state) {
        var start = state.pos;
        var forceU = this.options.ecmaVersion >= 11;
        var ch = state.current(forceU);
        state.advance(forceU);
        if (ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
          ch = state.lastIntValue;
        }
        if (isRegExpIdentifierPart(ch)) {
          state.lastIntValue = ch;
          return true;
        }
        state.pos = start;
        return false;
      };
      function isRegExpIdentifierPart(ch) {
        return isIdentifierChar(ch, true) || ch === 36 || ch === 95 || ch === 8204 || ch === 8205;
      }
      pp$1.regexp_eatAtomEscape = function(state) {
        if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) {
          return true;
        }
        if (state.switchU) {
          if (state.current() === 99) {
            state.raise("Invalid unicode escape");
          }
          state.raise("Invalid escape");
        }
        return false;
      };
      pp$1.regexp_eatBackReference = function(state) {
        var start = state.pos;
        if (this.regexp_eatDecimalEscape(state)) {
          var n2 = state.lastIntValue;
          if (state.switchU) {
            if (n2 > state.maxBackReference) {
              state.maxBackReference = n2;
            }
            return true;
          }
          if (n2 <= state.numCapturingParens) {
            return true;
          }
          state.pos = start;
        }
        return false;
      };
      pp$1.regexp_eatKGroupName = function(state) {
        if (state.eat(
          107
          /* k */
        )) {
          if (this.regexp_eatGroupName(state)) {
            state.backReferenceNames.push(state.lastStringValue);
            return true;
          }
          state.raise("Invalid named reference");
        }
        return false;
      };
      pp$1.regexp_eatCharacterEscape = function(state) {
        return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
      };
      pp$1.regexp_eatCControlLetter = function(state) {
        var start = state.pos;
        if (state.eat(
          99
          /* c */
        )) {
          if (this.regexp_eatControlLetter(state)) {
            return true;
          }
          state.pos = start;
        }
        return false;
      };
      pp$1.regexp_eatZero = function(state) {
        if (state.current() === 48 && !isDecimalDigit(state.lookahead())) {
          state.lastIntValue = 0;
          state.advance();
          return true;
        }
        return false;
      };
      pp$1.regexp_eatControlEscape = function(state) {
        var ch = state.current();
        if (ch === 116) {
          state.lastIntValue = 9;
          state.advance();
          return true;
        }
        if (ch === 110) {
          state.lastIntValue = 10;
          state.advance();
          return true;
        }
        if (ch === 118) {
          state.lastIntValue = 11;
          state.advance();
          return true;
        }
        if (ch === 102) {
          state.lastIntValue = 12;
          state.advance();
          return true;
        }
        if (ch === 114) {
          state.lastIntValue = 13;
          state.advance();
          return true;
        }
        return false;
      };
      pp$1.regexp_eatControlLetter = function(state) {
        var ch = state.current();
        if (isControlLetter(ch)) {
          state.lastIntValue = ch % 32;
          state.advance();
          return true;
        }
        return false;
      };
      function isControlLetter(ch) {
        return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
      }
      pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
        if (forceU === void 0)
          forceU = false;
        var start = state.pos;
        var switchU = forceU || state.switchU;
        if (state.eat(
          117
          /* u */
        )) {
          if (this.regexp_eatFixedHexDigits(state, 4)) {
            var lead = state.lastIntValue;
            if (switchU && lead >= 55296 && lead <= 56319) {
              var leadSurrogateEnd = state.pos;
              if (state.eat(
                92
                /* \ */
              ) && state.eat(
                117
                /* u */
              ) && this.regexp_eatFixedHexDigits(state, 4)) {
                var trail = state.lastIntValue;
                if (trail >= 56320 && trail <= 57343) {
                  state.lastIntValue = (lead - 55296) * 1024 + (trail - 56320) + 65536;
                  return true;
                }
              }
              state.pos = leadSurrogateEnd;
              state.lastIntValue = lead;
            }
            return true;
          }
          if (switchU && state.eat(
            123
            /* { */
          ) && this.regexp_eatHexDigits(state) && state.eat(
            125
            /* } */
          ) && isValidUnicode(state.lastIntValue)) {
            return true;
          }
          if (switchU) {
            state.raise("Invalid unicode escape");
          }
          state.pos = start;
        }
        return false;
      };
      function isValidUnicode(ch) {
        return ch >= 0 && ch <= 1114111;
      }
      pp$1.regexp_eatIdentityEscape = function(state) {
        if (state.switchU) {
          if (this.regexp_eatSyntaxCharacter(state)) {
            return true;
          }
          if (state.eat(
            47
            /* / */
          )) {
            state.lastIntValue = 47;
            return true;
          }
          return false;
        }
        var ch = state.current();
        if (ch !== 99 && (!state.switchN || ch !== 107)) {
          state.lastIntValue = ch;
          state.advance();
          return true;
        }
        return false;
      };
      pp$1.regexp_eatDecimalEscape = function(state) {
        state.lastIntValue = 0;
        var ch = state.current();
        if (ch >= 49 && ch <= 57) {
          do {
            state.lastIntValue = 10 * state.lastIntValue + (ch - 48);
            state.advance();
          } while ((ch = state.current()) >= 48 && ch <= 57);
          return true;
        }
        return false;
      };
      var CharSetNone = 0;
      var CharSetOk = 1;
      var CharSetString = 2;
      pp$1.regexp_eatCharacterClassEscape = function(state) {
        var ch = state.current();
        if (isCharacterClassEscape(ch)) {
          state.lastIntValue = -1;
          state.advance();
          return CharSetOk;
        }
        var negate = false;
        if (state.switchU && this.options.ecmaVersion >= 9 && ((negate = ch === 80) || ch === 112)) {
          state.lastIntValue = -1;
          state.advance();
          var result;
          if (state.eat(
            123
            /* { */
          ) && (result = this.regexp_eatUnicodePropertyValueExpression(state)) && state.eat(
            125
            /* } */
          )) {
            if (negate && result === CharSetString) {
              state.raise("Invalid property name");
            }
            return result;
          }
          state.raise("Invalid property name");
        }
        return CharSetNone;
      };
      function isCharacterClassEscape(ch) {
        return ch === 100 || ch === 68 || ch === 115 || ch === 83 || ch === 119 || ch === 87;
      }
      pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {
        var start = state.pos;
        if (this.regexp_eatUnicodePropertyName(state) && state.eat(
          61
          /* = */
        )) {
          var name = state.lastStringValue;
          if (this.regexp_eatUnicodePropertyValue(state)) {
            var value = state.lastStringValue;
            this.regexp_validateUnicodePropertyNameAndValue(state, name, value);
            return CharSetOk;
          }
        }
        state.pos = start;
        if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
          var nameOrValue = state.lastStringValue;
          return this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
        }
        return CharSetNone;
      };
      pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {
        if (!hasOwn(state.unicodeProperties.nonBinary, name)) {
          state.raise("Invalid property name");
        }
        if (!state.unicodeProperties.nonBinary[name].test(value)) {
          state.raise("Invalid property value");
        }
      };
      pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
        if (state.unicodeProperties.binary.test(nameOrValue)) {
          return CharSetOk;
        }
        if (state.switchV && state.unicodeProperties.binaryOfStrings.test(nameOrValue)) {
          return CharSetString;
        }
        state.raise("Invalid property name");
      };
      pp$1.regexp_eatUnicodePropertyName = function(state) {
        var ch = 0;
        state.lastStringValue = "";
        while (isUnicodePropertyNameCharacter(ch = state.current())) {
          state.lastStringValue += codePointToString(ch);
          state.advance();
        }
        return state.lastStringValue !== "";
      };
      function isUnicodePropertyNameCharacter(ch) {
        return isControlLetter(ch) || ch === 95;
      }
      pp$1.regexp_eatUnicodePropertyValue = function(state) {
        var ch = 0;
        state.lastStringValue = "";
        while (isUnicodePropertyValueCharacter(ch = state.current())) {
          state.lastStringValue += codePointToString(ch);
          state.advance();
        }
        return state.lastStringValue !== "";
      };
      function isUnicodePropertyValueCharacter(ch) {
        return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
      }
      pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
        return this.regexp_eatUnicodePropertyValue(state);
      };
      pp$1.regexp_eatCharacterClass = function(state) {
        if (state.eat(
          91
          /* [ */
        )) {
          var negate = state.eat(
            94
            /* ^ */
          );
          var result = this.regexp_classContents(state);
          if (!state.eat(
            93
            /* ] */
          )) {
            state.raise("Unterminated character class");
          }
          if (negate && result === CharSetString) {
            state.raise("Negated character class may contain strings");
          }
          return true;
        }
        return false;
      };
      pp$1.regexp_classContents = function(state) {
        if (state.current() === 93) {
          return CharSetOk;
        }
        if (state.switchV) {
          return this.regexp_classSetExpression(state);
        }
        this.regexp_nonEmptyClassRanges(state);
        return CharSetOk;
      };
      pp$1.regexp_nonEmptyClassRanges = function(state) {
        while (this.regexp_eatClassAtom(state)) {
          var left = state.lastIntValue;
          if (state.eat(
            45
            /* - */
          ) && this.regexp_eatClassAtom(state)) {
            var right = state.lastIntValue;
            if (state.switchU && (left === -1 || right === -1)) {
              state.raise("Invalid character class");
            }
            if (left !== -1 && right !== -1 && left > right) {
              state.raise("Range out of order in character class");
            }
          }
        }
      };
      pp$1.regexp_eatClassAtom = function(state) {
        var start = state.pos;
        if (state.eat(
          92
          /* \ */
        )) {
          if (this.regexp_eatClassEscape(state)) {
            return true;
          }
          if (state.switchU) {
            var ch$1 = state.current();
            if (ch$1 === 99 || isOctalDigit(ch$1)) {
              state.raise("Invalid class escape");
            }
            state.raise("Invalid escape");
          }
          state.pos = start;
        }
        var ch = state.current();
        if (ch !== 93) {
          state.lastIntValue = ch;
          state.advance();
          return true;
        }
        return false;
      };
      pp$1.regexp_eatClassEscape = function(state) {
        var start = state.pos;
        if (state.eat(
          98
          /* b */
        )) {
          state.lastIntValue = 8;
          return true;
        }
        if (state.switchU && state.eat(
          45
          /* - */
        )) {
          state.lastIntValue = 45;
          return true;
        }
        if (!state.switchU && state.eat(
          99
          /* c */
        )) {
          if (this.regexp_eatClassControlLetter(state)) {
            return true;
          }
          state.pos = start;
        }
        return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
      };
      pp$1.regexp_classSetExpression = function(state) {
        var result = CharSetOk, subResult;
        if (this.regexp_eatClassSetRange(state))
          ;
        else if (subResult = this.regexp_eatClassSetOperand(state)) {
          if (subResult === CharSetString) {
            result = CharSetString;
          }
          var start = state.pos;
          while (state.eatChars(
            [38, 38]
            /* && */
          )) {
            if (state.current() !== 38 && (subResult = this.regexp_eatClassSetOperand(state))) {
              if (subResult !== CharSetString) {
                result = CharSetOk;
              }
              continue;
            }
            state.raise("Invalid character in character class");
          }
          if (start !== state.pos) {
            return result;
          }
          while (state.eatChars(
            [45, 45]
            /* -- */
          )) {
            if (this.regexp_eatClassSetOperand(state)) {
              continue;
            }
            state.raise("Invalid character in character class");
          }
          if (start !== state.pos) {
            return result;
          }
        } else {
          state.raise("Invalid character in character class");
        }
        for (; ; ) {
          if (this.regexp_eatClassSetRange(state)) {
            continue;
          }
          subResult = this.regexp_eatClassSetOperand(state);
          if (!subResult) {
            return result;
          }
          if (subResult === CharSetString) {
            result = CharSetString;
          }
        }
      };
      pp$1.regexp_eatClassSetRange = function(state) {
        var start = state.pos;
        if (this.regexp_eatClassSetCharacter(state)) {
          var left = state.lastIntValue;
          if (state.eat(
            45
            /* - */
          ) && this.regexp_eatClassSetCharacter(state)) {
            var right = state.lastIntValue;
            if (left !== -1 && right !== -1 && left > right) {
              state.raise("Range out of order in character class");
            }
            return true;
          }
          state.pos = start;
        }
        return false;
      };
      pp$1.regexp_eatClassSetOperand = function(state) {
        if (this.regexp_eatClassSetCharacter(state)) {
          return CharSetOk;
        }
        return this.regexp_eatClassStringDisjunction(state) || this.regexp_eatNestedClass(state);
      };
      pp$1.regexp_eatNestedClass = function(state) {
        var start = state.pos;
        if (state.eat(
          91
          /* [ */
        )) {
          var negate = state.eat(
            94
            /* ^ */
          );
          var result = this.regexp_classContents(state);
          if (state.eat(
            93
            /* ] */
          )) {
            if (negate && result === CharSetString) {
              state.raise("Negated character class may contain strings");
            }
            return result;
          }
          state.pos = start;
        }
        if (state.eat(
          92
          /* \ */
        )) {
          var result$1 = this.regexp_eatCharacterClassEscape(state);
          if (result$1) {
            return result$1;
          }
          state.pos = start;
        }
        return null;
      };
      pp$1.regexp_eatClassStringDisjunction = function(state) {
        var start = state.pos;
        if (state.eatChars(
          [92, 113]
          /* \q */
        )) {
          if (state.eat(
            123
            /* { */
          )) {
            var result = this.regexp_classStringDisjunctionContents(state);
            if (state.eat(
              125
              /* } */
            )) {
              return result;
            }
          } else {
            state.raise("Invalid escape");
          }
          state.pos = start;
        }
        return null;
      };
      pp$1.regexp_classStringDisjunctionContents = function(state) {
        var result = this.regexp_classString(state);
        while (state.eat(
          124
          /* | */
        )) {
          if (this.regexp_classString(state) === CharSetString) {
            result = CharSetString;
          }
        }
        return result;
      };
      pp$1.regexp_classString = function(state) {
        var count = 0;
        while (this.regexp_eatClassSetCharacter(state)) {
          count++;
        }
        return count === 1 ? CharSetOk : CharSetString;
      };
      pp$1.regexp_eatClassSetCharacter = function(state) {
        var start = state.pos;
        if (state.eat(
          92
          /* \ */
        )) {
          if (this.regexp_eatCharacterEscape(state) || this.regexp_eatClassSetReservedPunctuator(state)) {
            return true;
          }
          if (state.eat(
            98
            /* b */
          )) {
            state.lastIntValue = 8;
            return true;
          }
          state.pos = start;
          return false;
        }
        var ch = state.current();
        if (ch < 0 || ch === state.lookahead() && isClassSetReservedDoublePunctuatorCharacter(ch)) {
          return false;
        }
        if (isClassSetSyntaxCharacter(ch)) {
          return false;
        }
        state.advance();
        state.lastIntValue = ch;
        return true;
      };
      function isClassSetReservedDoublePunctuatorCharacter(ch) {
        return ch === 33 || ch >= 35 && ch <= 38 || ch >= 42 && ch <= 44 || ch === 46 || ch >= 58 && ch <= 64 || ch === 94 || ch === 96 || ch === 126;
      }
      function isClassSetSyntaxCharacter(ch) {
        return ch === 40 || ch === 41 || ch === 45 || ch === 47 || ch >= 91 && ch <= 93 || ch >= 123 && ch <= 125;
      }
      pp$1.regexp_eatClassSetReservedPunctuator = function(state) {
        var ch = state.current();
        if (isClassSetReservedPunctuator(ch)) {
          state.lastIntValue = ch;
          state.advance();
          return true;
        }
        return false;
      };
      function isClassSetReservedPunctuator(ch) {
        return ch === 33 || ch === 35 || ch === 37 || ch === 38 || ch === 44 || ch === 45 || ch >= 58 && ch <= 62 || ch === 64 || ch === 96 || ch === 126;
      }
      pp$1.regexp_eatClassControlLetter = function(state) {
        var ch = state.current();
        if (isDecimalDigit(ch) || ch === 95) {
          state.lastIntValue = ch % 32;
          state.advance();
          return true;
        }
        return false;
      };
      pp$1.regexp_eatHexEscapeSequence = function(state) {
        var start = state.pos;
        if (state.eat(
          120
          /* x */
        )) {
          if (this.regexp_eatFixedHexDigits(state, 2)) {
            return true;
          }
          if (state.switchU) {
            state.raise("Invalid escape");
          }
          state.pos = start;
        }
        return false;
      };
      pp$1.regexp_eatDecimalDigits = function(state) {
        var start = state.pos;
        var ch = 0;
        state.lastIntValue = 0;
        while (isDecimalDigit(ch = state.current())) {
          state.lastIntValue = 10 * state.lastIntValue + (ch - 48);
          state.advance();
        }
        return state.pos !== start;
      };
      function isDecimalDigit(ch) {
        return ch >= 48 && ch <= 57;
      }
      pp$1.regexp_eatHexDigits = function(state) {
        var start = state.pos;
        var ch = 0;
        state.lastIntValue = 0;
        while (isHexDigit(ch = state.current())) {
          state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
          state.advance();
        }
        return state.pos !== start;
      };
      function isHexDigit(ch) {
        return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;
      }
      function hexToInt(ch) {
        if (ch >= 65 && ch <= 70) {
          return 10 + (ch - 65);
        }
        if (ch >= 97 && ch <= 102) {
          return 10 + (ch - 97);
        }
        return ch - 48;
      }
      pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {
        if (this.regexp_eatOctalDigit(state)) {
          var n1 = state.lastIntValue;
          if (this.regexp_eatOctalDigit(state)) {
            var n2 = state.lastIntValue;
            if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
              state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
            } else {
              state.lastIntValue = n1 * 8 + n2;
            }
          } else {
            state.lastIntValue = n1;
          }
          return true;
        }
        return false;
      };
      pp$1.regexp_eatOctalDigit = function(state) {
        var ch = state.current();
        if (isOctalDigit(ch)) {
          state.lastIntValue = ch - 48;
          state.advance();
          return true;
        }
        state.lastIntValue = 0;
        return false;
      };
      function isOctalDigit(ch) {
        return ch >= 48 && ch <= 55;
      }
      pp$1.regexp_eatFixedHexDigits = function(state, length) {
        var start = state.pos;
        state.lastIntValue = 0;
        for (var i2 = 0; i2 < length; ++i2) {
          var ch = state.current();
          if (!isHexDigit(ch)) {
            state.pos = start;
            return false;
          }
          state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
          state.advance();
        }
        return true;
      };
      var Token = function Token2(p2) {
        this.type = p2.type;
        this.value = p2.value;
        this.start = p2.start;
        this.end = p2.end;
        if (p2.options.locations) {
          this.loc = new SourceLocation(p2, p2.startLoc, p2.endLoc);
        }
        if (p2.options.ranges) {
          this.range = [p2.start, p2.end];
        }
      };
      var pp = Parser.prototype;
      pp.next = function(ignoreEscapeSequenceInKeyword) {
        if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc) {
          this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword);
        }
        if (this.options.onToken) {
          this.options.onToken(new Token(this));
        }
        this.lastTokEnd = this.end;
        this.lastTokStart = this.start;
        this.lastTokEndLoc = this.endLoc;
        this.lastTokStartLoc = this.startLoc;
        this.nextToken();
      };
      pp.getToken = function() {
        this.next();
        return new Token(this);
      };
      if (typeof Symbol !== "undefined") {
        pp[Symbol.iterator] = function() {
          var this$1$1 = this;
          return {
            next: function() {
              var token = this$1$1.getToken();
              return {
                done: token.type === types$1.eof,
                value: token
              };
            }
          };
        };
      }
      pp.nextToken = function() {
        var curContext = this.curContext();
        if (!curContext || !curContext.preserveSpace) {
          this.skipSpace();
        }
        this.start = this.pos;
        if (this.options.locations) {
          this.startLoc = this.curPosition();
        }
        if (this.pos >= this.input.length) {
          return this.finishToken(types$1.eof);
        }
        if (curContext.override) {
          return curContext.override(this);
        } else {
          this.readToken(this.fullCharCodeAtPos());
        }
      };
      pp.readToken = function(code) {
        if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92) {
          return this.readWord();
        }
        return this.getTokenFromCode(code);
      };
      pp.fullCharCodeAtPos = function() {
        var code = this.input.charCodeAt(this.pos);
        if (code <= 55295 || code >= 56320) {
          return code;
        }
        var next = this.input.charCodeAt(this.pos + 1);
        return next <= 56319 || next >= 57344 ? code : (code << 10) + next - 56613888;
      };
      pp.skipBlockComment = function() {
        var startLoc = this.options.onComment && this.curPosition();
        var start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
        if (end === -1) {
          this.raise(this.pos - 2, "Unterminated comment");
        }
        this.pos = end + 2;
        if (this.options.locations) {
          for (var nextBreak = void 0, pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1; ) {
            ++this.curLine;
            pos = this.lineStart = nextBreak;
          }
        }
        if (this.options.onComment) {
          this.options.onComment(
            true,
            this.input.slice(start + 2, end),
            start,
            this.pos,
            startLoc,
            this.curPosition()
          );
        }
      };
      pp.skipLineComment = function(startSkip) {
        var start = this.pos;
        var startLoc = this.options.onComment && this.curPosition();
        var ch = this.input.charCodeAt(this.pos += startSkip);
        while (this.pos < this.input.length && !isNewLine(ch)) {
          ch = this.input.charCodeAt(++this.pos);
        }
        if (this.options.onComment) {
          this.options.onComment(
            false,
            this.input.slice(start + startSkip, this.pos),
            start,
            this.pos,
            startLoc,
            this.curPosition()
          );
        }
      };
      pp.skipSpace = function() {
        loop:
          while (this.pos < this.input.length) {
            var ch = this.input.charCodeAt(this.pos);
            switch (ch) {
              case 32:
              case 160:
                ++this.pos;
                break;
              case 13:
                if (this.input.charCodeAt(this.pos + 1) === 10) {
                  ++this.pos;
                }
              case 10:
              case 8232:
              case 8233:
                ++this.pos;
                if (this.options.locations) {
                  ++this.curLine;
                  this.lineStart = this.pos;
                }
                break;
              case 47:
                switch (this.input.charCodeAt(this.pos + 1)) {
                  case 42:
                    this.skipBlockComment();
                    break;
                  case 47:
                    this.skipLineComment(2);
                    break;
                  default:
                    break loop;
                }
                break;
              default:
                if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
                  ++this.pos;
                } else {
                  break loop;
                }
            }
          }
      };
      pp.finishToken = function(type, val) {
        this.end = this.pos;
        if (this.options.locations) {
          this.endLoc = this.curPosition();
        }
        var prevType = this.type;
        this.type = type;
        this.value = val;
        this.updateContext(prevType);
      };
      pp.readToken_dot = function() {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next >= 48 && next <= 57) {
          return this.readNumber(true);
        }
        var next2 = this.input.charCodeAt(this.pos + 2);
        if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
          this.pos += 3;
          return this.finishToken(types$1.ellipsis);
        } else {
          ++this.pos;
          return this.finishToken(types$1.dot);
        }
      };
      pp.readToken_slash = function() {
        var next = this.input.charCodeAt(this.pos + 1);
        if (this.exprAllowed) {
          ++this.pos;
          return this.readRegexp();
        }
        if (next === 61) {
          return this.finishOp(types$1.assign, 2);
        }
        return this.finishOp(types$1.slash, 1);
      };
      pp.readToken_mult_modulo_exp = function(code) {
        var next = this.input.charCodeAt(this.pos + 1);
        var size = 1;
        var tokentype = code === 42 ? types$1.star : types$1.modulo;
        if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {
          ++size;
          tokentype = types$1.starstar;
          next = this.input.charCodeAt(this.pos + 2);
        }
        if (next === 61) {
          return this.finishOp(types$1.assign, size + 1);
        }
        return this.finishOp(tokentype, size);
      };
      pp.readToken_pipe_amp = function(code) {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === code) {
          if (this.options.ecmaVersion >= 12) {
            var next2 = this.input.charCodeAt(this.pos + 2);
            if (next2 === 61) {
              return this.finishOp(types$1.assign, 3);
            }
          }
          return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2);
        }
        if (next === 61) {
          return this.finishOp(types$1.assign, 2);
        }
        return this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);
      };
      pp.readToken_caret = function() {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === 61) {
          return this.finishOp(types$1.assign, 2);
        }
        return this.finishOp(types$1.bitwiseXOR, 1);
      };
      pp.readToken_plus_min = function(code) {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === code) {
          if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
            this.skipLineComment(3);
            this.skipSpace();
            return this.nextToken();
          }
          return this.finishOp(types$1.incDec, 2);
        }
        if (next === 61) {
          return this.finishOp(types$1.assign, 2);
        }
        return this.finishOp(types$1.plusMin, 1);
      };
      pp.readToken_lt_gt = function(code) {
        var next = this.input.charCodeAt(this.pos + 1);
        var size = 1;
        if (next === code) {
          size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
          if (this.input.charCodeAt(this.pos + size) === 61) {
            return this.finishOp(types$1.assign, size + 1);
          }
          return this.finishOp(types$1.bitShift, size);
        }
        if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {
          this.skipLineComment(4);
          this.skipSpace();
          return this.nextToken();
        }
        if (next === 61) {
          size = 2;
        }
        return this.finishOp(types$1.relational, size);
      };
      pp.readToken_eq_excl = function(code) {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === 61) {
          return this.finishOp(types$1.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
        }
        if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {
          this.pos += 2;
          return this.finishToken(types$1.arrow);
        }
        return this.finishOp(code === 61 ? types$1.eq : types$1.prefix, 1);
      };
      pp.readToken_question = function() {
        var ecmaVersion2 = this.options.ecmaVersion;
        if (ecmaVersion2 >= 11) {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next === 46) {
            var next2 = this.input.charCodeAt(this.pos + 2);
            if (next2 < 48 || next2 > 57) {
              return this.finishOp(types$1.questionDot, 2);
            }
          }
          if (next === 63) {
            if (ecmaVersion2 >= 12) {
              var next2$1 = this.input.charCodeAt(this.pos + 2);
              if (next2$1 === 61) {
                return this.finishOp(types$1.assign, 3);
              }
            }
            return this.finishOp(types$1.coalesce, 2);
          }
        }
        return this.finishOp(types$1.question, 1);
      };
      pp.readToken_numberSign = function() {
        var ecmaVersion2 = this.options.ecmaVersion;
        var code = 35;
        if (ecmaVersion2 >= 13) {
          ++this.pos;
          code = this.fullCharCodeAtPos();
          if (isIdentifierStart(code, true) || code === 92) {
            return this.finishToken(types$1.privateId, this.readWord1());
          }
        }
        this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
      };
      pp.getTokenFromCode = function(code) {
        switch (code) {
          case 46:
            return this.readToken_dot();
          case 40:
            ++this.pos;
            return this.finishToken(types$1.parenL);
          case 41:
            ++this.pos;
            return this.finishToken(types$1.parenR);
          case 59:
            ++this.pos;
            return this.finishToken(types$1.semi);
          case 44:
            ++this.pos;
            return this.finishToken(types$1.comma);
          case 91:
            ++this.pos;
            return this.finishToken(types$1.bracketL);
          case 93:
            ++this.pos;
            return this.finishToken(types$1.bracketR);
          case 123:
            ++this.pos;
            return this.finishToken(types$1.braceL);
          case 125:
            ++this.pos;
            return this.finishToken(types$1.braceR);
          case 58:
            ++this.pos;
            return this.finishToken(types$1.colon);
          case 96:
            if (this.options.ecmaVersion < 6) {
              break;
            }
            ++this.pos;
            return this.finishToken(types$1.backQuote);
          case 48:
            var next = this.input.charCodeAt(this.pos + 1);
            if (next === 120 || next === 88) {
              return this.readRadixNumber(16);
            }
            if (this.options.ecmaVersion >= 6) {
              if (next === 111 || next === 79) {
                return this.readRadixNumber(8);
              }
              if (next === 98 || next === 66) {
                return this.readRadixNumber(2);
              }
            }
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            return this.readNumber(false);
          case 34:
          case 39:
            return this.readString(code);
          case 47:
            return this.readToken_slash();
          case 37:
          case 42:
            return this.readToken_mult_modulo_exp(code);
          case 124:
          case 38:
            return this.readToken_pipe_amp(code);
          case 94:
            return this.readToken_caret();
          case 43:
          case 45:
            return this.readToken_plus_min(code);
          case 60:
          case 62:
            return this.readToken_lt_gt(code);
          case 61:
          case 33:
            return this.readToken_eq_excl(code);
          case 63:
            return this.readToken_question();
          case 126:
            return this.finishOp(types$1.prefix, 1);
          case 35:
            return this.readToken_numberSign();
        }
        this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
      };
      pp.finishOp = function(type, size) {
        var str = this.input.slice(this.pos, this.pos + size);
        this.pos += size;
        return this.finishToken(type, str);
      };
      pp.readRegexp = function() {
        var escaped, inClass, start = this.pos;
        for (; ; ) {
          if (this.pos >= this.input.length) {
            this.raise(start, "Unterminated regular expression");
          }
          var ch = this.input.charAt(this.pos);
          if (lineBreak.test(ch)) {
            this.raise(start, "Unterminated regular expression");
          }
          if (!escaped) {
            if (ch === "[") {
              inClass = true;
            } else if (ch === "]" && inClass) {
              inClass = false;
            } else if (ch === "/" && !inClass) {
              break;
            }
            escaped = ch === "\\";
          } else {
            escaped = false;
          }
          ++this.pos;
        }
        var pattern = this.input.slice(start, this.pos);
        ++this.pos;
        var flagsStart = this.pos;
        var flags = this.readWord1();
        if (this.containsEsc) {
          this.unexpected(flagsStart);
        }
        var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
        state.reset(start, pattern, flags);
        this.validateRegExpFlags(state);
        this.validateRegExpPattern(state);
        var value = null;
        try {
          value = new RegExp(pattern, flags);
        } catch (e) {
        }
        return this.finishToken(types$1.regexp, { pattern, flags, value });
      };
      pp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
        var allowSeparators = this.options.ecmaVersion >= 12 && len === void 0;
        var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;
        var start = this.pos, total = 0, lastCode = 0;
        for (var i2 = 0, e = len == null ? Infinity : len; i2 < e; ++i2, ++this.pos) {
          var code = this.input.charCodeAt(this.pos), val = void 0;
          if (allowSeparators && code === 95) {
            if (isLegacyOctalNumericLiteral) {
              this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals");
            }
            if (lastCode === 95) {
              this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore");
            }
            if (i2 === 0) {
              this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits");
            }
            lastCode = code;
            continue;
          }
          if (code >= 97) {
            val = code - 97 + 10;
          } else if (code >= 65) {
            val = code - 65 + 10;
          } else if (code >= 48 && code <= 57) {
            val = code - 48;
          } else {
            val = Infinity;
          }
          if (val >= radix) {
            break;
          }
          lastCode = code;
          total = total * radix + val;
        }
        if (allowSeparators && lastCode === 95) {
          this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits");
        }
        if (this.pos === start || len != null && this.pos - start !== len) {
          return null;
        }
        return total;
      };
      function stringToNumber(str, isLegacyOctalNumericLiteral) {
        if (isLegacyOctalNumericLiteral) {
          return parseInt(str, 8);
        }
        return parseFloat(str.replace(/_/g, ""));
      }
      function stringToBigInt(str) {
        if (typeof BigInt !== "function") {
          return null;
        }
        return BigInt(str.replace(/_/g, ""));
      }
      pp.readRadixNumber = function(radix) {
        var start = this.pos;
        this.pos += 2;
        var val = this.readInt(radix);
        if (val == null) {
          this.raise(this.start + 2, "Expected number in radix " + radix);
        }
        if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
          val = stringToBigInt(this.input.slice(start, this.pos));
          ++this.pos;
        } else if (isIdentifierStart(this.fullCharCodeAtPos())) {
          this.raise(this.pos, "Identifier directly after number");
        }
        return this.finishToken(types$1.num, val);
      };
      pp.readNumber = function(startsWithDot) {
        var start = this.pos;
        if (!startsWithDot && this.readInt(10, void 0, true) === null) {
          this.raise(start, "Invalid number");
        }
        var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;
        if (octal && this.strict) {
          this.raise(start, "Invalid number");
        }
        var next = this.input.charCodeAt(this.pos);
        if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
          var val$1 = stringToBigInt(this.input.slice(start, this.pos));
          ++this.pos;
          if (isIdentifierStart(this.fullCharCodeAtPos())) {
            this.raise(this.pos, "Identifier directly after number");
          }
          return this.finishToken(types$1.num, val$1);
        }
        if (octal && /[89]/.test(this.input.slice(start, this.pos))) {
          octal = false;
        }
        if (next === 46 && !octal) {
          ++this.pos;
          this.readInt(10);
          next = this.input.charCodeAt(this.pos);
        }
        if ((next === 69 || next === 101) && !octal) {
          next = this.input.charCodeAt(++this.pos);
          if (next === 43 || next === 45) {
            ++this.pos;
          }
          if (this.readInt(10) === null) {
            this.raise(start, "Invalid number");
          }
        }
        if (isIdentifierStart(this.fullCharCodeAtPos())) {
          this.raise(this.pos, "Identifier directly after number");
        }
        var val = stringToNumber(this.input.slice(start, this.pos), octal);
        return this.finishToken(types$1.num, val);
      };
      pp.readCodePoint = function() {
        var ch = this.input.charCodeAt(this.pos), code;
        if (ch === 123) {
          if (this.options.ecmaVersion < 6) {
            this.unexpected();
          }
          var codePos = ++this.pos;
          code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
          ++this.pos;
          if (code > 1114111) {
            this.invalidStringToken(codePos, "Code point out of bounds");
          }
        } else {
          code = this.readHexChar(4);
        }
        return code;
      };
      pp.readString = function(quote) {
        var out = "", chunkStart = ++this.pos;
        for (; ; ) {
          if (this.pos >= this.input.length) {
            this.raise(this.start, "Unterminated string constant");
          }
          var ch = this.input.charCodeAt(this.pos);
          if (ch === quote) {
            break;
          }
          if (ch === 92) {
            out += this.input.slice(chunkStart, this.pos);
            out += this.readEscapedChar(false);
            chunkStart = this.pos;
          } else if (ch === 8232 || ch === 8233) {
            if (this.options.ecmaVersion < 10) {
              this.raise(this.start, "Unterminated string constant");
            }
            ++this.pos;
            if (this.options.locations) {
              this.curLine++;
              this.lineStart = this.pos;
            }
          } else {
            if (isNewLine(ch)) {
              this.raise(this.start, "Unterminated string constant");
            }
            ++this.pos;
          }
        }
        out += this.input.slice(chunkStart, this.pos++);
        return this.finishToken(types$1.string, out);
      };
      var INVALID_TEMPLATE_ESCAPE_ERROR = {};
      pp.tryReadTemplateToken = function() {
        this.inTemplateElement = true;
        try {
          this.readTmplToken();
        } catch (err) {
          if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
            this.readInvalidTemplateToken();
          } else {
            throw err;
          }
        }
        this.inTemplateElement = false;
      };
      pp.invalidStringToken = function(position, message) {
        if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
          throw INVALID_TEMPLATE_ESCAPE_ERROR;
        } else {
          this.raise(position, message);
        }
      };
      pp.readTmplToken = function() {
        var out = "", chunkStart = this.pos;
        for (; ; ) {
          if (this.pos >= this.input.length) {
            this.raise(this.start, "Unterminated template");
          }
          var ch = this.input.charCodeAt(this.pos);
          if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {
            if (this.pos === this.start && (this.type === types$1.template || this.type === types$1.invalidTemplate)) {
              if (ch === 36) {
                this.pos += 2;
                return this.finishToken(types$1.dollarBraceL);
              } else {
                ++this.pos;
                return this.finishToken(types$1.backQuote);
              }
            }
            out += this.input.slice(chunkStart, this.pos);
            return this.finishToken(types$1.template, out);
          }
          if (ch === 92) {
            out += this.input.slice(chunkStart, this.pos);
            out += this.readEscapedChar(true);
            chunkStart = this.pos;
          } else if (isNewLine(ch)) {
            out += this.input.slice(chunkStart, this.pos);
            ++this.pos;
            switch (ch) {
              case 13:
                if (this.input.charCodeAt(this.pos) === 10) {
                  ++this.pos;
                }
              case 10:
                out += "\n";
                break;
              default:
                out += String.fromCharCode(ch);
                break;
            }
            if (this.options.locations) {
              ++this.curLine;
              this.lineStart = this.pos;
            }
            chunkStart = this.pos;
          } else {
            ++this.pos;
          }
        }
      };
      pp.readInvalidTemplateToken = function() {
        for (; this.pos < this.input.length; this.pos++) {
          switch (this.input[this.pos]) {
            case "\\":
              ++this.pos;
              break;
            case "$":
              if (this.input[this.pos + 1] !== "{") {
                break;
              }
            case "`":
              return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos));
          }
        }
        this.raise(this.start, "Unterminated template");
      };
      pp.readEscapedChar = function(inTemplate) {
        var ch = this.input.charCodeAt(++this.pos);
        ++this.pos;
        switch (ch) {
          case 110:
            return "\n";
          case 114:
            return "\r";
          case 120:
            return String.fromCharCode(this.readHexChar(2));
          case 117:
            return codePointToString(this.readCodePoint());
          case 116:
            return "	";
          case 98:
            return "\b";
          case 118:
            return "\v";
          case 102:
            return "\f";
          case 13:
            if (this.input.charCodeAt(this.pos) === 10) {
              ++this.pos;
            }
          case 10:
            if (this.options.locations) {
              this.lineStart = this.pos;
              ++this.curLine;
            }
            return "";
          case 56:
          case 57:
            if (this.strict) {
              this.invalidStringToken(
                this.pos - 1,
                "Invalid escape sequence"
              );
            }
            if (inTemplate) {
              var codePos = this.pos - 1;
              this.invalidStringToken(
                codePos,
                "Invalid escape sequence in template string"
              );
            }
          default:
            if (ch >= 48 && ch <= 55) {
              var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
              var octal = parseInt(octalStr, 8);
              if (octal > 255) {
                octalStr = octalStr.slice(0, -1);
                octal = parseInt(octalStr, 8);
              }
              this.pos += octalStr.length - 1;
              ch = this.input.charCodeAt(this.pos);
              if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
                this.invalidStringToken(
                  this.pos - 1 - octalStr.length,
                  inTemplate ? "Octal literal in template string" : "Octal literal in strict mode"
                );
              }
              return String.fromCharCode(octal);
            }
            if (isNewLine(ch)) {
              return "";
            }
            return String.fromCharCode(ch);
        }
      };
      pp.readHexChar = function(len) {
        var codePos = this.pos;
        var n2 = this.readInt(16, len);
        if (n2 === null) {
          this.invalidStringToken(codePos, "Bad character escape sequence");
        }
        return n2;
      };
      pp.readWord1 = function() {
        this.containsEsc = false;
        var word = "", first = true, chunkStart = this.pos;
        var astral = this.options.ecmaVersion >= 6;
        while (this.pos < this.input.length) {
          var ch = this.fullCharCodeAtPos();
          if (isIdentifierChar(ch, astral)) {
            this.pos += ch <= 65535 ? 1 : 2;
          } else if (ch === 92) {
            this.containsEsc = true;
            word += this.input.slice(chunkStart, this.pos);
            var escStart = this.pos;
            if (this.input.charCodeAt(++this.pos) !== 117) {
              this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX");
            }
            ++this.pos;
            var esc = this.readCodePoint();
            if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) {
              this.invalidStringToken(escStart, "Invalid Unicode escape");
            }
            word += codePointToString(esc);
            chunkStart = this.pos;
          } else {
            break;
          }
          first = false;
        }
        return word + this.input.slice(chunkStart, this.pos);
      };
      pp.readWord = function() {
        var word = this.readWord1();
        var type = types$1.name;
        if (this.keywords.test(word)) {
          type = keywords[word];
        }
        return this.finishToken(type, word);
      };
      var version = "8.11.3";
      Parser.acorn = {
        Parser,
        version,
        defaultOptions,
        Position,
        SourceLocation,
        getLineInfo,
        Node,
        TokenType,
        tokTypes: types$1,
        keywordTypes: keywords,
        TokContext,
        tokContexts: types,
        isIdentifierChar,
        isIdentifierStart,
        Token,
        isNewLine,
        lineBreak,
        lineBreakG,
        nonASCIIwhitespace
      };
      function parse(input, options) {
        return Parser.parse(input, options);
      }
      function parseExpressionAt(input, pos, options) {
        return Parser.parseExpressionAt(input, pos, options);
      }
      function tokenizer(input, options) {
        return Parser.tokenizer(input, options);
      }
      exports2.Node = Node;
      exports2.Parser = Parser;
      exports2.Position = Position;
      exports2.SourceLocation = SourceLocation;
      exports2.TokContext = TokContext;
      exports2.Token = Token;
      exports2.TokenType = TokenType;
      exports2.defaultOptions = defaultOptions;
      exports2.getLineInfo = getLineInfo;
      exports2.isIdentifierChar = isIdentifierChar;
      exports2.isIdentifierStart = isIdentifierStart;
      exports2.isNewLine = isNewLine;
      exports2.keywordTypes = keywords;
      exports2.lineBreak = lineBreak;
      exports2.lineBreakG = lineBreakG;
      exports2.nonASCIIwhitespace = nonASCIIwhitespace;
      exports2.parse = parse;
      exports2.parseExpressionAt = parseExpressionAt;
      exports2.tokContexts = types;
      exports2.tokTypes = types$1;
      exports2.tokenizer = tokenizer;
      exports2.version = version;
    });
  }
});

// node_modules/terser/dist/bundle.min.js
var require_bundle_min = __commonJS({
  "node_modules/terser/dist/bundle.min.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_source_map_umd()) : typeof define === "function" && define.amd ? define(["exports", "@jridgewell/source-map"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.Terser = {}, global2.sourceMap));
    })(exports, function(exports2, sourceMap) {
      "use strict";
      function characters(str) {
        return str.split("");
      }
      function member(name, array) {
        return array.includes(name);
      }
      class DefaultsError extends Error {
        constructor(msg, defs) {
          super();
          this.name = "DefaultsError";
          this.message = msg;
          this.defs = defs;
        }
      }
      function defaults(args, defs, croak) {
        if (args === true) {
          args = {};
        } else if (args != null && typeof args === "object") {
          args = { ...args };
        }
        const ret = args || {};
        if (croak) {
          for (const i in ret)
            if (HOP(ret, i) && !HOP(defs, i)) {
              throw new DefaultsError("`" + i + "` is not a supported option", defs);
            }
        }
        for (const i in defs)
          if (HOP(defs, i)) {
            if (!args || !HOP(args, i)) {
              ret[i] = defs[i];
            } else if (i === "ecma") {
              let ecma = args[i] | 0;
              if (ecma > 5 && ecma < 2015)
                ecma += 2009;
              ret[i] = ecma;
            } else {
              ret[i] = args && HOP(args, i) ? args[i] : defs[i];
            }
          }
        return ret;
      }
      function noop() {
      }
      function return_false() {
        return false;
      }
      function return_true() {
        return true;
      }
      function return_this() {
        return this;
      }
      function return_null() {
        return null;
      }
      var MAP = function() {
        function MAP2(a, tw, allow_splicing = true) {
          const new_a = [];
          for (let i = 0; i < a.length; ++i) {
            let item = a[i];
            let ret = item.transform(tw, allow_splicing);
            if (ret instanceof AST_Node) {
              new_a.push(ret);
            } else if (ret instanceof Splice) {
              new_a.push(...ret.v);
            }
          }
          return new_a;
        }
        MAP2.splice = function(val) {
          return new Splice(val);
        };
        MAP2.skip = {};
        function Splice(val) {
          this.v = val;
        }
        return MAP2;
      }();
      function make_node(ctor, orig, props) {
        if (!props)
          props = {};
        if (orig) {
          if (!props.start)
            props.start = orig.start;
          if (!props.end)
            props.end = orig.end;
        }
        return new ctor(props);
      }
      function push_uniq(array, el) {
        if (!array.includes(el))
          array.push(el);
      }
      function string_template(text, props) {
        return text.replace(/{(.+?)}/g, function(str, p2) {
          return props && props[p2];
        });
      }
      function remove(array, el) {
        for (var i = array.length; --i >= 0; ) {
          if (array[i] === el)
            array.splice(i, 1);
        }
      }
      function mergeSort(array, cmp) {
        if (array.length < 2)
          return array.slice();
        function merge(a, b) {
          var r2 = [], ai = 0, bi = 0, i = 0;
          while (ai < a.length && bi < b.length) {
            cmp(a[ai], b[bi]) <= 0 ? r2[i++] = a[ai++] : r2[i++] = b[bi++];
          }
          if (ai < a.length)
            r2.push.apply(r2, a.slice(ai));
          if (bi < b.length)
            r2.push.apply(r2, b.slice(bi));
          return r2;
        }
        function _ms(a) {
          if (a.length <= 1)
            return a;
          var m2 = Math.floor(a.length / 2), left = a.slice(0, m2), right = a.slice(m2);
          left = _ms(left);
          right = _ms(right);
          return merge(left, right);
        }
        return _ms(array);
      }
      function makePredicate(words) {
        if (!Array.isArray(words))
          words = words.split(" ");
        return new Set(words.sort());
      }
      function map_add(map, key, value) {
        if (map.has(key)) {
          map.get(key).push(value);
        } else {
          map.set(key, [value]);
        }
      }
      function map_from_object(obj) {
        var map = /* @__PURE__ */ new Map();
        for (var key in obj) {
          if (HOP(obj, key) && key.charAt(0) === "$") {
            map.set(key.substr(1), obj[key]);
          }
        }
        return map;
      }
      function map_to_object(map) {
        var obj = /* @__PURE__ */ Object.create(null);
        map.forEach(function(value, key) {
          obj["$" + key] = value;
        });
        return obj;
      }
      function HOP(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
      }
      function keep_name(keep_setting, name) {
        return keep_setting === true || keep_setting instanceof RegExp && keep_setting.test(name);
      }
      var lineTerminatorEscape = {
        "\0": "0",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      function regexp_source_fix(source) {
        return source.replace(/[\0\n\r\u2028\u2029]/g, function(match, offset) {
          var escaped = source[offset - 1] == "\\" && (source[offset - 2] != "\\" || /(?:^|[^\\])(?:\\{2})*$/.test(source.slice(0, offset - 1)));
          return (escaped ? "" : "\\") + lineTerminatorEscape[match];
        });
      }
      const re_safe_regexp = /^[\\/|\0\s\w^$.[\]()]*$/;
      const regexp_is_safe = (source) => re_safe_regexp.test(source);
      const all_flags = "dgimsuyv";
      function sort_regexp_flags(flags) {
        const existing_flags = new Set(flags.split(""));
        let out = "";
        for (const flag of all_flags) {
          if (existing_flags.has(flag)) {
            out += flag;
            existing_flags.delete(flag);
          }
        }
        if (existing_flags.size) {
          existing_flags.forEach((flag) => {
            out += flag;
          });
        }
        return out;
      }
      function has_annotation(node, annotation) {
        return node._annotations & annotation;
      }
      function set_annotation(node, annotation) {
        node._annotations |= annotation;
      }
      function clear_annotation(node, annotation) {
        node._annotations &= ~annotation;
      }
      var LATEST_RAW = "";
      var TEMPLATE_RAWS = /* @__PURE__ */ new Map();
      var KEYWORDS = "break case catch class const continue debugger default delete do else export extends finally for function if in instanceof let new return switch throw try typeof var void while with";
      var KEYWORDS_ATOM = "false null true";
      var RESERVED_WORDS = "enum import super this " + KEYWORDS_ATOM + " " + KEYWORDS;
      var ALL_RESERVED_WORDS = "implements interface package private protected public static " + RESERVED_WORDS;
      var KEYWORDS_BEFORE_EXPRESSION = "return new delete throw else case yield await";
      KEYWORDS = makePredicate(KEYWORDS);
      RESERVED_WORDS = makePredicate(RESERVED_WORDS);
      KEYWORDS_BEFORE_EXPRESSION = makePredicate(KEYWORDS_BEFORE_EXPRESSION);
      KEYWORDS_ATOM = makePredicate(KEYWORDS_ATOM);
      ALL_RESERVED_WORDS = makePredicate(ALL_RESERVED_WORDS);
      var OPERATOR_CHARS = makePredicate(characters("+-*&%=<>!?|~^"));
      var RE_NUM_LITERAL = /[0-9a-f]/i;
      var RE_HEX_NUMBER = /^0x[0-9a-f]+$/i;
      var RE_OCT_NUMBER = /^0[0-7]+$/;
      var RE_ES6_OCT_NUMBER = /^0o[0-7]+$/i;
      var RE_BIN_NUMBER = /^0b[01]+$/i;
      var RE_DEC_NUMBER = /^\d*\.?\d*(?:e[+-]?\d*(?:\d\.?|\.?\d)\d*)?$/i;
      var RE_BIG_INT = /^(0[xob])?[0-9a-f]+n$/i;
      var OPERATORS = makePredicate([
        "in",
        "instanceof",
        "typeof",
        "new",
        "void",
        "delete",
        "++",
        "--",
        "+",
        "-",
        "!",
        "~",
        "&",
        "|",
        "^",
        "*",
        "**",
        "/",
        "%",
        ">>",
        "<<",
        ">>>",
        "<",
        ">",
        "<=",
        ">=",
        "==",
        "===",
        "!=",
        "!==",
        "?",
        "=",
        "+=",
        "-=",
        "||=",
        "&&=",
        "??=",
        "/=",
        "*=",
        "**=",
        "%=",
        ">>=",
        "<<=",
        ">>>=",
        "|=",
        "^=",
        "&=",
        "&&",
        "??",
        "||"
      ]);
      var WHITESPACE_CHARS = makePredicate(characters("  \n\r	\f\v​           \u2028\u2029  　\uFEFF"));
      var NEWLINE_CHARS = makePredicate(characters("\n\r\u2028\u2029"));
      var PUNC_AFTER_EXPRESSION = makePredicate(characters(";]),:"));
      var PUNC_BEFORE_EXPRESSION = makePredicate(characters("[{(,;:"));
      var PUNC_CHARS = makePredicate(characters("[]{}(),;:"));
      var UNICODE = {
        ID_Start: /[$A-Z_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
        ID_Continue: /(?:[$0-9A-Z_a-z\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF])+/
      };
      try {
        UNICODE = {
          // https://262.ecma-international.org/13.0/#prod-IdentifierStartChar
          // $, _, ID_Start
          ID_Start: new RegExp("[_$\\p{ID_Start}]", "u"),
          // https://262.ecma-international.org/13.0/#prod-IdentifierPartChar
          // $, zero-width-joiner, zero-width-non-joiner, ID_Continue
          ID_Continue: new RegExp("[$\\u200C\\u200D\\p{ID_Continue}]+", "u")
        };
      } catch (e) {
      }
      function get_full_char(str, pos) {
        if (is_surrogate_pair_head(str.charCodeAt(pos))) {
          if (is_surrogate_pair_tail(str.charCodeAt(pos + 1))) {
            return str.charAt(pos) + str.charAt(pos + 1);
          }
        } else if (is_surrogate_pair_tail(str.charCodeAt(pos))) {
          if (is_surrogate_pair_head(str.charCodeAt(pos - 1))) {
            return str.charAt(pos - 1) + str.charAt(pos);
          }
        }
        return str.charAt(pos);
      }
      function get_full_char_code(str, pos) {
        if (is_surrogate_pair_head(str.charCodeAt(pos))) {
          return 65536 + (str.charCodeAt(pos) - 55296 << 10) + str.charCodeAt(pos + 1) - 56320;
        }
        return str.charCodeAt(pos);
      }
      function get_full_char_length(str) {
        var surrogates = 0;
        for (var i = 0; i < str.length; i++) {
          if (is_surrogate_pair_head(str.charCodeAt(i)) && is_surrogate_pair_tail(str.charCodeAt(i + 1))) {
            surrogates++;
            i++;
          }
        }
        return str.length - surrogates;
      }
      function from_char_code(code) {
        if (code > 65535) {
          code -= 65536;
          return String.fromCharCode((code >> 10) + 55296) + String.fromCharCode(code % 1024 + 56320);
        }
        return String.fromCharCode(code);
      }
      function is_surrogate_pair_head(code) {
        return code >= 55296 && code <= 56319;
      }
      function is_surrogate_pair_tail(code) {
        return code >= 56320 && code <= 57343;
      }
      function is_digit(code) {
        return code >= 48 && code <= 57;
      }
      function is_identifier_start(ch) {
        return UNICODE.ID_Start.test(ch);
      }
      function is_identifier_char(ch) {
        return UNICODE.ID_Continue.test(ch);
      }
      const BASIC_IDENT = /^[a-z_$][a-z0-9_$]*$/i;
      function is_basic_identifier_string(str) {
        return BASIC_IDENT.test(str);
      }
      function is_identifier_string(str, allow_surrogates) {
        if (BASIC_IDENT.test(str)) {
          return true;
        }
        if (!allow_surrogates && /[\ud800-\udfff]/.test(str)) {
          return false;
        }
        var match = UNICODE.ID_Start.exec(str);
        if (!match || match.index !== 0) {
          return false;
        }
        str = str.slice(match[0].length);
        if (!str) {
          return true;
        }
        match = UNICODE.ID_Continue.exec(str);
        return !!match && match[0].length === str.length;
      }
      function parse_js_number(num, allow_e = true) {
        if (!allow_e && num.includes("e")) {
          return NaN;
        }
        if (RE_HEX_NUMBER.test(num)) {
          return parseInt(num.substr(2), 16);
        } else if (RE_OCT_NUMBER.test(num)) {
          return parseInt(num.substr(1), 8);
        } else if (RE_ES6_OCT_NUMBER.test(num)) {
          return parseInt(num.substr(2), 8);
        } else if (RE_BIN_NUMBER.test(num)) {
          return parseInt(num.substr(2), 2);
        } else if (RE_DEC_NUMBER.test(num)) {
          return parseFloat(num);
        } else {
          var val = parseFloat(num);
          if (val == num)
            return val;
        }
      }
      class JS_Parse_Error extends Error {
        constructor(message, filename, line, col, pos) {
          super();
          this.name = "SyntaxError";
          this.message = message;
          this.filename = filename;
          this.line = line;
          this.col = col;
          this.pos = pos;
        }
      }
      function js_error(message, filename, line, col, pos) {
        throw new JS_Parse_Error(message, filename, line, col, pos);
      }
      function is_token(token, type, val) {
        return token.type == type && (val == null || token.value == val);
      }
      var EX_EOF = {};
      function tokenizer($TEXT, filename, html5_comments, shebang) {
        var S = {
          text: $TEXT,
          filename,
          pos: 0,
          tokpos: 0,
          line: 1,
          tokline: 0,
          col: 0,
          tokcol: 0,
          newline_before: false,
          regex_allowed: false,
          brace_counter: 0,
          template_braces: [],
          comments_before: [],
          directives: {},
          directive_stack: []
        };
        function peek() {
          return get_full_char(S.text, S.pos);
        }
        function is_option_chain_op() {
          const must_be_dot = S.text.charCodeAt(S.pos + 1) === 46;
          if (!must_be_dot)
            return false;
          const cannot_be_digit = S.text.charCodeAt(S.pos + 2);
          return cannot_be_digit < 48 || cannot_be_digit > 57;
        }
        function next(signal_eof, in_string) {
          var ch = get_full_char(S.text, S.pos++);
          if (signal_eof && !ch)
            throw EX_EOF;
          if (NEWLINE_CHARS.has(ch)) {
            S.newline_before = S.newline_before || !in_string;
            ++S.line;
            S.col = 0;
            if (ch == "\r" && peek() == "\n") {
              ++S.pos;
              ch = "\n";
            }
          } else {
            if (ch.length > 1) {
              ++S.pos;
              ++S.col;
            }
            ++S.col;
          }
          return ch;
        }
        function forward(i) {
          while (i--)
            next();
        }
        function looking_at(str) {
          return S.text.substr(S.pos, str.length) == str;
        }
        function find_eol() {
          var text = S.text;
          for (var i = S.pos, n2 = S.text.length; i < n2; ++i) {
            var ch = text[i];
            if (NEWLINE_CHARS.has(ch))
              return i;
          }
          return -1;
        }
        function find(what, signal_eof) {
          var pos = S.text.indexOf(what, S.pos);
          if (signal_eof && pos == -1)
            throw EX_EOF;
          return pos;
        }
        function start_token() {
          S.tokline = S.line;
          S.tokcol = S.col;
          S.tokpos = S.pos;
        }
        var prev_was_dot = false;
        var previous_token = null;
        function token(type, value, is_comment) {
          S.regex_allowed = type == "operator" && !UNARY_POSTFIX.has(value) || type == "keyword" && KEYWORDS_BEFORE_EXPRESSION.has(value) || type == "punc" && PUNC_BEFORE_EXPRESSION.has(value) || type == "arrow";
          if (type == "punc" && (value == "." || value == "?.")) {
            prev_was_dot = true;
          } else if (!is_comment) {
            prev_was_dot = false;
          }
          const line = S.tokline;
          const col = S.tokcol;
          const pos = S.tokpos;
          const nlb = S.newline_before;
          const file = filename;
          let comments_before = [];
          let comments_after = [];
          if (!is_comment) {
            comments_before = S.comments_before;
            comments_after = S.comments_before = [];
          }
          S.newline_before = false;
          const tok = new AST_Token(type, value, line, col, pos, nlb, comments_before, comments_after, file);
          if (!is_comment)
            previous_token = tok;
          return tok;
        }
        function skip_whitespace() {
          while (WHITESPACE_CHARS.has(peek()))
            next();
        }
        function read_while(pred) {
          var ret = "", ch, i = 0;
          while ((ch = peek()) && pred(ch, i++))
            ret += next();
          return ret;
        }
        function parse_error(err) {
          js_error(err, filename, S.tokline, S.tokcol, S.tokpos);
        }
        function read_num(prefix) {
          var has_e = false, after_e = false, has_x = false, has_dot = prefix == ".", is_big_int = false, numeric_separator = false;
          var num = read_while(function(ch, i) {
            if (is_big_int)
              return false;
            var code = ch.charCodeAt(0);
            switch (code) {
              case 95:
                return numeric_separator = true;
              case 98:
              case 66:
                return has_x = true;
              case 111:
              case 79:
              case 120:
              case 88:
                return has_x ? false : has_x = true;
              case 101:
              case 69:
                return has_x ? true : has_e ? false : has_e = after_e = true;
              case 45:
                return after_e || i == 0 && !prefix;
              case 43:
                return after_e;
              case (after_e = false, 46):
                return !has_dot && !has_x && !has_e ? has_dot = true : false;
            }
            if (ch === "n") {
              is_big_int = true;
              return true;
            }
            return RE_NUM_LITERAL.test(ch);
          });
          if (prefix)
            num = prefix + num;
          LATEST_RAW = num;
          if (RE_OCT_NUMBER.test(num) && next_token.has_directive("use strict")) {
            parse_error("Legacy octal literals are not allowed in strict mode");
          }
          if (numeric_separator) {
            if (num.endsWith("_")) {
              parse_error("Numeric separators are not allowed at the end of numeric literals");
            } else if (num.includes("__")) {
              parse_error("Only one underscore is allowed as numeric separator");
            }
            num = num.replace(/_/g, "");
          }
          if (num.endsWith("n")) {
            const without_n = num.slice(0, -1);
            const allow_e = RE_HEX_NUMBER.test(without_n);
            const valid2 = parse_js_number(without_n, allow_e);
            if (!has_dot && RE_BIG_INT.test(num) && !isNaN(valid2))
              return token("big_int", without_n);
            parse_error("Invalid or unexpected token");
          }
          var valid = parse_js_number(num);
          if (!isNaN(valid)) {
            return token("num", valid);
          } else {
            parse_error("Invalid syntax: " + num);
          }
        }
        function is_octal(ch) {
          return ch >= "0" && ch <= "7";
        }
        function read_escaped_char(in_string, strict_hex, template_string) {
          var ch = next(true, in_string);
          switch (ch.charCodeAt(0)) {
            case 110:
              return "\n";
            case 114:
              return "\r";
            case 116:
              return "	";
            case 98:
              return "\b";
            case 118:
              return "\v";
            case 102:
              return "\f";
            case 120:
              return String.fromCharCode(hex_bytes(2, strict_hex));
            case 117:
              if (peek() == "{") {
                next(true);
                if (peek() === "}")
                  parse_error("Expecting hex-character between {}");
                while (peek() == "0")
                  next(true);
                var result, length = find("}", true) - S.pos;
                if (length > 6 || (result = hex_bytes(length, strict_hex)) > 1114111) {
                  parse_error("Unicode reference out of bounds");
                }
                next(true);
                return from_char_code(result);
              }
              return String.fromCharCode(hex_bytes(4, strict_hex));
            case 10:
              return "";
            case 13:
              if (peek() == "\n") {
                next(true, in_string);
                return "";
              }
          }
          if (is_octal(ch)) {
            if (template_string && strict_hex) {
              const represents_null_character = ch === "0" && !is_octal(peek());
              if (!represents_null_character) {
                parse_error("Octal escape sequences are not allowed in template strings");
              }
            }
            return read_octal_escape_sequence(ch, strict_hex);
          }
          return ch;
        }
        function read_octal_escape_sequence(ch, strict_octal) {
          var p2 = peek();
          if (p2 >= "0" && p2 <= "7") {
            ch += next(true);
            if (ch[0] <= "3" && (p2 = peek()) >= "0" && p2 <= "7")
              ch += next(true);
          }
          if (ch === "0")
            return "\0";
          if (ch.length > 0 && next_token.has_directive("use strict") && strict_octal)
            parse_error("Legacy octal escape sequences are not allowed in strict mode");
          return String.fromCharCode(parseInt(ch, 8));
        }
        function hex_bytes(n2, strict_hex) {
          var num = 0;
          for (; n2 > 0; --n2) {
            if (!strict_hex && isNaN(parseInt(peek(), 16))) {
              return parseInt(num, 16) || "";
            }
            var digit = next(true);
            if (isNaN(parseInt(digit, 16)))
              parse_error("Invalid hex-character pattern in string");
            num += digit;
          }
          return parseInt(num, 16);
        }
        var read_string = with_eof_error("Unterminated string constant", function() {
          const start_pos = S.pos;
          var quote = next(), ret = [];
          for (; ; ) {
            var ch = next(true, true);
            if (ch == "\\")
              ch = read_escaped_char(true, true);
            else if (ch == "\r" || ch == "\n")
              parse_error("Unterminated string constant");
            else if (ch == quote)
              break;
            ret.push(ch);
          }
          var tok = token("string", ret.join(""));
          LATEST_RAW = S.text.slice(start_pos, S.pos);
          tok.quote = quote;
          return tok;
        });
        var read_template_characters = with_eof_error("Unterminated template", function(begin) {
          if (begin) {
            S.template_braces.push(S.brace_counter);
          }
          var content = "", raw = "", ch, tok;
          next(true, true);
          while ((ch = next(true, true)) != "`") {
            if (ch == "\r") {
              if (peek() == "\n")
                ++S.pos;
              ch = "\n";
            } else if (ch == "$" && peek() == "{") {
              next(true, true);
              S.brace_counter++;
              tok = token(begin ? "template_head" : "template_substitution", content);
              TEMPLATE_RAWS.set(tok, raw);
              tok.template_end = false;
              return tok;
            }
            raw += ch;
            if (ch == "\\") {
              var tmp = S.pos;
              var prev_is_tag = previous_token && (previous_token.type === "name" || previous_token.type === "punc" && (previous_token.value === ")" || previous_token.value === "]"));
              ch = read_escaped_char(true, !prev_is_tag, true);
              raw += S.text.substr(tmp, S.pos - tmp);
            }
            content += ch;
          }
          S.template_braces.pop();
          tok = token(begin ? "template_head" : "template_substitution", content);
          TEMPLATE_RAWS.set(tok, raw);
          tok.template_end = true;
          return tok;
        });
        function skip_line_comment(type) {
          var regex_allowed = S.regex_allowed;
          var i = find_eol(), ret;
          if (i == -1) {
            ret = S.text.substr(S.pos);
            S.pos = S.text.length;
          } else {
            ret = S.text.substring(S.pos, i);
            S.pos = i;
          }
          S.col = S.tokcol + (S.pos - S.tokpos);
          S.comments_before.push(token(type, ret, true));
          S.regex_allowed = regex_allowed;
          return next_token;
        }
        var skip_multiline_comment = with_eof_error("Unterminated multiline comment", function() {
          var regex_allowed = S.regex_allowed;
          var i = find("*/", true);
          var text = S.text.substring(S.pos, i).replace(/\r\n|\r|\u2028|\u2029/g, "\n");
          forward(get_full_char_length(text) + 2);
          S.comments_before.push(token("comment2", text, true));
          S.newline_before = S.newline_before || text.includes("\n");
          S.regex_allowed = regex_allowed;
          return next_token;
        });
        var read_name = with_eof_error("Unterminated identifier name", function() {
          var name = [], ch, escaped = false;
          var read_escaped_identifier_char = function() {
            escaped = true;
            next();
            if (peek() !== "u") {
              parse_error("Expecting UnicodeEscapeSequence -- uXXXX or u{XXXX}");
            }
            return read_escaped_char(false, true);
          };
          if ((ch = peek()) === "\\") {
            ch = read_escaped_identifier_char();
            if (!is_identifier_start(ch)) {
              parse_error("First identifier char is an invalid identifier char");
            }
          } else if (is_identifier_start(ch)) {
            next();
          } else {
            return "";
          }
          name.push(ch);
          while ((ch = peek()) != null) {
            if ((ch = peek()) === "\\") {
              ch = read_escaped_identifier_char();
              if (!is_identifier_char(ch)) {
                parse_error("Invalid escaped identifier char");
              }
            } else {
              if (!is_identifier_char(ch)) {
                break;
              }
              next();
            }
            name.push(ch);
          }
          const name_str = name.join("");
          if (RESERVED_WORDS.has(name_str) && escaped) {
            parse_error("Escaped characters are not allowed in keywords");
          }
          return name_str;
        });
        var read_regexp = with_eof_error("Unterminated regular expression", function(source) {
          var prev_backslash = false, ch, in_class = false;
          while (ch = next(true))
            if (NEWLINE_CHARS.has(ch)) {
              parse_error("Unexpected line terminator");
            } else if (prev_backslash) {
              source += "\\" + ch;
              prev_backslash = false;
            } else if (ch == "[") {
              in_class = true;
              source += ch;
            } else if (ch == "]" && in_class) {
              in_class = false;
              source += ch;
            } else if (ch == "/" && !in_class) {
              break;
            } else if (ch == "\\") {
              prev_backslash = true;
            } else {
              source += ch;
            }
          const flags = read_name();
          return token("regexp", "/" + source + "/" + flags);
        });
        function read_operator(prefix) {
          function grow(op) {
            if (!peek())
              return op;
            var bigger = op + peek();
            if (OPERATORS.has(bigger)) {
              next();
              return grow(bigger);
            } else {
              return op;
            }
          }
          return token("operator", grow(prefix || next()));
        }
        function handle_slash() {
          next();
          switch (peek()) {
            case "/":
              next();
              return skip_line_comment("comment1");
            case "*":
              next();
              return skip_multiline_comment();
          }
          return S.regex_allowed ? read_regexp("") : read_operator("/");
        }
        function handle_eq_sign() {
          next();
          if (peek() === ">") {
            next();
            return token("arrow", "=>");
          } else {
            return read_operator("=");
          }
        }
        function handle_dot() {
          next();
          if (is_digit(peek().charCodeAt(0))) {
            return read_num(".");
          }
          if (peek() === ".") {
            next();
            next();
            return token("expand", "...");
          }
          return token("punc", ".");
        }
        function read_word() {
          var word = read_name();
          if (prev_was_dot)
            return token("name", word);
          return KEYWORDS_ATOM.has(word) ? token("atom", word) : !KEYWORDS.has(word) ? token("name", word) : OPERATORS.has(word) ? token("operator", word) : token("keyword", word);
        }
        function read_private_word() {
          next();
          return token("privatename", read_name());
        }
        function with_eof_error(eof_error, cont) {
          return function(x) {
            try {
              return cont(x);
            } catch (ex) {
              if (ex === EX_EOF)
                parse_error(eof_error);
              else
                throw ex;
            }
          };
        }
        function next_token(force_regexp) {
          if (force_regexp != null)
            return read_regexp(force_regexp);
          if (shebang && S.pos == 0 && looking_at("#!")) {
            start_token();
            forward(2);
            skip_line_comment("comment5");
          }
          for (; ; ) {
            skip_whitespace();
            start_token();
            if (html5_comments) {
              if (looking_at("<!--")) {
                forward(4);
                skip_line_comment("comment3");
                continue;
              }
              if (looking_at("-->") && S.newline_before) {
                forward(3);
                skip_line_comment("comment4");
                continue;
              }
            }
            var ch = peek();
            if (!ch)
              return token("eof");
            var code = ch.charCodeAt(0);
            switch (code) {
              case 34:
              case 39:
                return read_string();
              case 46:
                return handle_dot();
              case 47: {
                var tok = handle_slash();
                if (tok === next_token)
                  continue;
                return tok;
              }
              case 61:
                return handle_eq_sign();
              case 63: {
                if (!is_option_chain_op())
                  break;
                next();
                next();
                return token("punc", "?.");
              }
              case 96:
                return read_template_characters(true);
              case 123:
                S.brace_counter++;
                break;
              case 125:
                S.brace_counter--;
                if (S.template_braces.length > 0 && S.template_braces[S.template_braces.length - 1] === S.brace_counter)
                  return read_template_characters(false);
                break;
            }
            if (is_digit(code))
              return read_num();
            if (PUNC_CHARS.has(ch))
              return token("punc", next());
            if (OPERATOR_CHARS.has(ch))
              return read_operator();
            if (code == 92 || is_identifier_start(ch))
              return read_word();
            if (code == 35)
              return read_private_word();
            break;
          }
          parse_error("Unexpected character '" + ch + "'");
        }
        next_token.next = next;
        next_token.peek = peek;
        next_token.context = function(nc) {
          if (nc)
            S = nc;
          return S;
        };
        next_token.add_directive = function(directive) {
          S.directive_stack[S.directive_stack.length - 1].push(directive);
          if (S.directives[directive] === void 0) {
            S.directives[directive] = 1;
          } else {
            S.directives[directive]++;
          }
        };
        next_token.push_directives_stack = function() {
          S.directive_stack.push([]);
        };
        next_token.pop_directives_stack = function() {
          var directives2 = S.directive_stack[S.directive_stack.length - 1];
          for (var i = 0; i < directives2.length; i++) {
            S.directives[directives2[i]]--;
          }
          S.directive_stack.pop();
        };
        next_token.has_directive = function(directive) {
          return S.directives[directive] > 0;
        };
        return next_token;
      }
      var UNARY_PREFIX = makePredicate([
        "typeof",
        "void",
        "delete",
        "--",
        "++",
        "!",
        "~",
        "-",
        "+"
      ]);
      var UNARY_POSTFIX = makePredicate(["--", "++"]);
      var ASSIGNMENT = makePredicate(["=", "+=", "-=", "??=", "&&=", "||=", "/=", "*=", "**=", "%=", ">>=", "<<=", ">>>=", "|=", "^=", "&="]);
      var LOGICAL_ASSIGNMENT = makePredicate(["??=", "&&=", "||="]);
      var PRECEDENCE = function(a, ret) {
        for (var i = 0; i < a.length; ++i) {
          var b = a[i];
          for (var j = 0; j < b.length; ++j) {
            ret[b[j]] = i + 1;
          }
        }
        return ret;
      }(
        [
          ["||"],
          ["??"],
          ["&&"],
          ["|"],
          ["^"],
          ["&"],
          ["==", "===", "!=", "!=="],
          ["<", ">", "<=", ">=", "in", "instanceof"],
          [">>", "<<", ">>>"],
          ["+", "-"],
          ["*", "/", "%"],
          ["**"]
        ],
        {}
      );
      var ATOMIC_START_TOKEN = makePredicate(["atom", "num", "big_int", "string", "regexp", "name"]);
      function parse($TEXT, options) {
        const outer_comments_before_counts = /* @__PURE__ */ new WeakMap();
        options = defaults(options, {
          bare_returns: false,
          ecma: null,
          // Legacy
          expression: false,
          filename: null,
          html5_comments: true,
          module: false,
          shebang: true,
          strict: false,
          toplevel: null
        }, true);
        var S = {
          input: typeof $TEXT == "string" ? tokenizer(
            $TEXT,
            options.filename,
            options.html5_comments,
            options.shebang
          ) : $TEXT,
          token: null,
          prev: null,
          peeked: null,
          in_function: 0,
          in_async: -1,
          in_generator: -1,
          in_directives: true,
          in_loop: 0,
          labels: []
        };
        S.token = next();
        function is(type, value) {
          return is_token(S.token, type, value);
        }
        function peek() {
          return S.peeked || (S.peeked = S.input());
        }
        function next() {
          S.prev = S.token;
          if (!S.peeked)
            peek();
          S.token = S.peeked;
          S.peeked = null;
          S.in_directives = S.in_directives && (S.token.type == "string" || is("punc", ";"));
          return S.token;
        }
        function prev() {
          return S.prev;
        }
        function croak(msg, line, col, pos) {
          var ctx = S.input.context();
          js_error(
            msg,
            ctx.filename,
            line != null ? line : ctx.tokline,
            col != null ? col : ctx.tokcol,
            pos != null ? pos : ctx.tokpos
          );
        }
        function token_error(token, msg) {
          croak(msg, token.line, token.col);
        }
        function unexpected(token) {
          if (token == null)
            token = S.token;
          token_error(token, "Unexpected token: " + token.type + " (" + token.value + ")");
        }
        function expect_token(type, val) {
          if (is(type, val)) {
            return next();
          }
          token_error(S.token, "Unexpected token " + S.token.type + " «" + S.token.value + "», expected " + type + " «" + val + "»");
        }
        function expect(punc) {
          return expect_token("punc", punc);
        }
        function has_newline_before(token) {
          return token.nlb || !token.comments_before.every((comment) => !comment.nlb);
        }
        function can_insert_semicolon() {
          return !options.strict && (is("eof") || is("punc", "}") || has_newline_before(S.token));
        }
        function is_in_generator() {
          return S.in_generator === S.in_function;
        }
        function is_in_async() {
          return S.in_async === S.in_function;
        }
        function can_await() {
          return S.in_async === S.in_function || S.in_function === 0 && S.input.has_directive("use strict");
        }
        function semicolon(optional) {
          if (is("punc", ";"))
            next();
          else if (!optional && !can_insert_semicolon())
            unexpected();
        }
        function parenthesised() {
          expect("(");
          var exp = expression(true);
          expect(")");
          return exp;
        }
        function embed_tokens(parser) {
          return function _embed_tokens_wrapper(...args) {
            const start = S.token;
            const expr = parser(...args);
            expr.start = start;
            expr.end = prev();
            return expr;
          };
        }
        function handle_regexp() {
          if (is("operator", "/") || is("operator", "/=")) {
            S.peeked = null;
            S.token = S.input(S.token.value.substr(1));
          }
        }
        var statement = embed_tokens(function statement2(is_export_default, is_for_body, is_if_body) {
          handle_regexp();
          switch (S.token.type) {
            case "string":
              if (S.in_directives) {
                var token = peek();
                if (!LATEST_RAW.includes("\\") && (is_token(token, "punc", ";") || is_token(token, "punc", "}") || has_newline_before(token) || is_token(token, "eof"))) {
                  S.input.add_directive(S.token.value);
                } else {
                  S.in_directives = false;
                }
              }
              var dir = S.in_directives, stat = simple_statement();
              return dir && stat.body instanceof AST_String ? new AST_Directive(stat.body) : stat;
            case "template_head":
            case "num":
            case "big_int":
            case "regexp":
            case "operator":
            case "atom":
              return simple_statement();
            case "name":
            case "privatename":
              if (is("privatename") && !S.in_class)
                croak("Private field must be used in an enclosing class");
              if (S.token.value == "async" && is_token(peek(), "keyword", "function")) {
                next();
                next();
                if (is_for_body) {
                  croak("functions are not allowed as the body of a loop");
                }
                return function_(AST_Defun, false, true, is_export_default);
              }
              if (S.token.value == "import" && !is_token(peek(), "punc", "(") && !is_token(peek(), "punc", ".")) {
                next();
                var node = import_statement();
                semicolon();
                return node;
              }
              return is_token(peek(), "punc", ":") ? labeled_statement() : simple_statement();
            case "punc":
              switch (S.token.value) {
                case "{":
                  return new AST_BlockStatement({
                    start: S.token,
                    body: block_(),
                    end: prev()
                  });
                case "[":
                case "(":
                  return simple_statement();
                case ";":
                  S.in_directives = false;
                  next();
                  return new AST_EmptyStatement();
                default:
                  unexpected();
              }
            case "keyword":
              switch (S.token.value) {
                case "break":
                  next();
                  return break_cont(AST_Break);
                case "continue":
                  next();
                  return break_cont(AST_Continue);
                case "debugger":
                  next();
                  semicolon();
                  return new AST_Debugger();
                case "do":
                  next();
                  var body = in_loop(statement2);
                  expect_token("keyword", "while");
                  var condition = parenthesised();
                  semicolon(true);
                  return new AST_Do({
                    body,
                    condition
                  });
                case "while":
                  next();
                  return new AST_While({
                    condition: parenthesised(),
                    body: in_loop(function() {
                      return statement2(false, true);
                    })
                  });
                case "for":
                  next();
                  return for_();
                case "class":
                  next();
                  if (is_for_body) {
                    croak("classes are not allowed as the body of a loop");
                  }
                  if (is_if_body) {
                    croak("classes are not allowed as the body of an if");
                  }
                  return class_(AST_DefClass, is_export_default);
                case "function":
                  next();
                  if (is_for_body) {
                    croak("functions are not allowed as the body of a loop");
                  }
                  return function_(AST_Defun, false, false, is_export_default);
                case "if":
                  next();
                  return if_();
                case "return":
                  if (S.in_function == 0 && !options.bare_returns)
                    croak("'return' outside of function");
                  next();
                  var value = null;
                  if (is("punc", ";")) {
                    next();
                  } else if (!can_insert_semicolon()) {
                    value = expression(true);
                    semicolon();
                  }
                  return new AST_Return({
                    value
                  });
                case "switch":
                  next();
                  return new AST_Switch({
                    expression: parenthesised(),
                    body: in_loop(switch_body_)
                  });
                case "throw":
                  next();
                  if (has_newline_before(S.token))
                    croak("Illegal newline after 'throw'");
                  var value = expression(true);
                  semicolon();
                  return new AST_Throw({
                    value
                  });
                case "try":
                  next();
                  return try_();
                case "var":
                  next();
                  var node = var_();
                  semicolon();
                  return node;
                case "let":
                  next();
                  var node = let_();
                  semicolon();
                  return node;
                case "const":
                  next();
                  var node = const_();
                  semicolon();
                  return node;
                case "with":
                  if (S.input.has_directive("use strict")) {
                    croak("Strict mode may not include a with statement");
                  }
                  next();
                  return new AST_With({
                    expression: parenthesised(),
                    body: statement2()
                  });
                case "export":
                  if (!is_token(peek(), "punc", "(")) {
                    next();
                    var node = export_statement();
                    if (is("punc", ";"))
                      semicolon();
                    return node;
                  }
              }
          }
          unexpected();
        });
        function labeled_statement() {
          var label = as_symbol(AST_Label);
          if (label.name === "await" && is_in_async()) {
            token_error(S.prev, "await cannot be used as label inside async function");
          }
          if (S.labels.some((l2) => l2.name === label.name)) {
            croak("Label " + label.name + " defined twice");
          }
          expect(":");
          S.labels.push(label);
          var stat = statement();
          S.labels.pop();
          if (!(stat instanceof AST_IterationStatement)) {
            label.references.forEach(function(ref) {
              if (ref instanceof AST_Continue) {
                ref = ref.label.start;
                croak(
                  "Continue label `" + label.name + "` refers to non-IterationStatement.",
                  ref.line,
                  ref.col,
                  ref.pos
                );
              }
            });
          }
          return new AST_LabeledStatement({ body: stat, label });
        }
        function simple_statement(tmp) {
          return new AST_SimpleStatement({ body: (tmp = expression(true), semicolon(), tmp) });
        }
        function break_cont(type) {
          var label = null, ldef;
          if (!can_insert_semicolon()) {
            label = as_symbol(AST_LabelRef, true);
          }
          if (label != null) {
            ldef = S.labels.find((l2) => l2.name === label.name);
            if (!ldef)
              croak("Undefined label " + label.name);
            label.thedef = ldef;
          } else if (S.in_loop == 0)
            croak(type.TYPE + " not inside a loop or switch");
          semicolon();
          var stat = new type({ label });
          if (ldef)
            ldef.references.push(stat);
          return stat;
        }
        function for_() {
          var for_await_error = "`for await` invalid in this context";
          var await_tok = S.token;
          if (await_tok.type == "name" && await_tok.value == "await") {
            if (!can_await()) {
              token_error(await_tok, for_await_error);
            }
            next();
          } else {
            await_tok = false;
          }
          expect("(");
          var init = null;
          if (!is("punc", ";")) {
            init = is("keyword", "var") ? (next(), var_(true)) : is("keyword", "let") ? (next(), let_(true)) : is("keyword", "const") ? (next(), const_(true)) : expression(true, true);
            var is_in = is("operator", "in");
            var is_of = is("name", "of");
            if (await_tok && !is_of) {
              token_error(await_tok, for_await_error);
            }
            if (is_in || is_of) {
              if (init instanceof AST_Definitions) {
                if (init.definitions.length > 1)
                  token_error(init.start, "Only one variable declaration allowed in for..in loop");
              } else if (!(is_assignable(init) || (init = to_destructuring(init)) instanceof AST_Destructuring)) {
                token_error(init.start, "Invalid left-hand side in for..in loop");
              }
              next();
              if (is_in) {
                return for_in(init);
              } else {
                return for_of(init, !!await_tok);
              }
            }
          } else if (await_tok) {
            token_error(await_tok, for_await_error);
          }
          return regular_for(init);
        }
        function regular_for(init) {
          expect(";");
          var test = is("punc", ";") ? null : expression(true);
          expect(";");
          var step = is("punc", ")") ? null : expression(true);
          expect(")");
          return new AST_For({
            init,
            condition: test,
            step,
            body: in_loop(function() {
              return statement(false, true);
            })
          });
        }
        function for_of(init, is_await) {
          var lhs = init instanceof AST_Definitions ? init.definitions[0].name : null;
          var obj = expression(true);
          expect(")");
          return new AST_ForOf({
            await: is_await,
            init,
            name: lhs,
            object: obj,
            body: in_loop(function() {
              return statement(false, true);
            })
          });
        }
        function for_in(init) {
          var obj = expression(true);
          expect(")");
          return new AST_ForIn({
            init,
            object: obj,
            body: in_loop(function() {
              return statement(false, true);
            })
          });
        }
        var arrow_function = function(start, argnames, is_async) {
          if (has_newline_before(S.token)) {
            croak("Unexpected newline before arrow (=>)");
          }
          expect_token("arrow", "=>");
          var body = _function_body(is("punc", "{"), false, is_async);
          var end = body instanceof Array && body.length ? body[body.length - 1].end : body instanceof Array ? start : body.end;
          return new AST_Arrow({
            start,
            end,
            async: is_async,
            argnames,
            body
          });
        };
        var function_ = function(ctor, is_generator_property, is_async, is_export_default) {
          var in_statement = ctor === AST_Defun;
          var is_generator = is("operator", "*");
          if (is_generator) {
            next();
          }
          var name = is("name") ? as_symbol(in_statement ? AST_SymbolDefun : AST_SymbolLambda) : null;
          if (in_statement && !name) {
            if (is_export_default) {
              ctor = AST_Function;
            } else {
              unexpected();
            }
          }
          if (name && ctor !== AST_Accessor && !(name instanceof AST_SymbolDeclaration))
            unexpected(prev());
          var args = [];
          var body = _function_body(true, is_generator || is_generator_property, is_async, name, args);
          return new ctor({
            start: args.start,
            end: body.end,
            is_generator,
            async: is_async,
            name,
            argnames: args,
            body
          });
        };
        class UsedParametersTracker {
          constructor(is_parameter, strict, duplicates_ok = false) {
            this.is_parameter = is_parameter;
            this.duplicates_ok = duplicates_ok;
            this.parameters = /* @__PURE__ */ new Set();
            this.duplicate = null;
            this.default_assignment = false;
            this.spread = false;
            this.strict_mode = !!strict;
          }
          add_parameter(token) {
            if (this.parameters.has(token.value)) {
              if (this.duplicate === null) {
                this.duplicate = token;
              }
              this.check_strict();
            } else {
              this.parameters.add(token.value);
              if (this.is_parameter) {
                switch (token.value) {
                  case "arguments":
                  case "eval":
                  case "yield":
                    if (this.strict_mode) {
                      token_error(token, "Unexpected " + token.value + " identifier as parameter inside strict mode");
                    }
                    break;
                  default:
                    if (RESERVED_WORDS.has(token.value)) {
                      unexpected();
                    }
                }
              }
            }
          }
          mark_default_assignment(token) {
            if (this.default_assignment === false) {
              this.default_assignment = token;
            }
          }
          mark_spread(token) {
            if (this.spread === false) {
              this.spread = token;
            }
          }
          mark_strict_mode() {
            this.strict_mode = true;
          }
          is_strict() {
            return this.default_assignment !== false || this.spread !== false || this.strict_mode;
          }
          check_strict() {
            if (this.is_strict() && this.duplicate !== null && !this.duplicates_ok) {
              token_error(this.duplicate, "Parameter " + this.duplicate.value + " was used already");
            }
          }
        }
        function parameters(params) {
          var used_parameters = new UsedParametersTracker(true, S.input.has_directive("use strict"));
          expect("(");
          while (!is("punc", ")")) {
            var param = parameter(used_parameters);
            params.push(param);
            if (!is("punc", ")")) {
              expect(",");
            }
            if (param instanceof AST_Expansion) {
              break;
            }
          }
          next();
        }
        function parameter(used_parameters, symbol_type) {
          var param;
          var expand = false;
          if (used_parameters === void 0) {
            used_parameters = new UsedParametersTracker(true, S.input.has_directive("use strict"));
          }
          if (is("expand", "...")) {
            expand = S.token;
            used_parameters.mark_spread(S.token);
            next();
          }
          param = binding_element(used_parameters, symbol_type);
          if (is("operator", "=") && expand === false) {
            used_parameters.mark_default_assignment(S.token);
            next();
            param = new AST_DefaultAssign({
              start: param.start,
              left: param,
              operator: "=",
              right: expression(false),
              end: S.token
            });
          }
          if (expand !== false) {
            if (!is("punc", ")")) {
              unexpected();
            }
            param = new AST_Expansion({
              start: expand,
              expression: param,
              end: expand
            });
          }
          used_parameters.check_strict();
          return param;
        }
        function binding_element(used_parameters, symbol_type) {
          var elements = [];
          var first = true;
          var is_expand = false;
          var expand_token;
          var first_token = S.token;
          if (used_parameters === void 0) {
            const strict = S.input.has_directive("use strict");
            const duplicates_ok = symbol_type === AST_SymbolVar;
            used_parameters = new UsedParametersTracker(false, strict, duplicates_ok);
          }
          symbol_type = symbol_type === void 0 ? AST_SymbolFunarg : symbol_type;
          if (is("punc", "[")) {
            next();
            while (!is("punc", "]")) {
              if (first) {
                first = false;
              } else {
                expect(",");
              }
              if (is("expand", "...")) {
                is_expand = true;
                expand_token = S.token;
                used_parameters.mark_spread(S.token);
                next();
              }
              if (is("punc")) {
                switch (S.token.value) {
                  case ",":
                    elements.push(new AST_Hole({
                      start: S.token,
                      end: S.token
                    }));
                    continue;
                  case "]":
                    break;
                  case "[":
                  case "{":
                    elements.push(binding_element(used_parameters, symbol_type));
                    break;
                  default:
                    unexpected();
                }
              } else if (is("name")) {
                used_parameters.add_parameter(S.token);
                elements.push(as_symbol(symbol_type));
              } else {
                croak("Invalid function parameter");
              }
              if (is("operator", "=") && is_expand === false) {
                used_parameters.mark_default_assignment(S.token);
                next();
                elements[elements.length - 1] = new AST_DefaultAssign({
                  start: elements[elements.length - 1].start,
                  left: elements[elements.length - 1],
                  operator: "=",
                  right: expression(false),
                  end: S.token
                });
              }
              if (is_expand) {
                if (!is("punc", "]")) {
                  croak("Rest element must be last element");
                }
                elements[elements.length - 1] = new AST_Expansion({
                  start: expand_token,
                  expression: elements[elements.length - 1],
                  end: expand_token
                });
              }
            }
            expect("]");
            used_parameters.check_strict();
            return new AST_Destructuring({
              start: first_token,
              names: elements,
              is_array: true,
              end: prev()
            });
          } else if (is("punc", "{")) {
            next();
            while (!is("punc", "}")) {
              if (first) {
                first = false;
              } else {
                expect(",");
              }
              if (is("expand", "...")) {
                is_expand = true;
                expand_token = S.token;
                used_parameters.mark_spread(S.token);
                next();
              }
              if (is("name") && (is_token(peek(), "punc") || is_token(peek(), "operator")) && [",", "}", "="].includes(peek().value)) {
                used_parameters.add_parameter(S.token);
                var start = prev();
                var value = as_symbol(symbol_type);
                if (is_expand) {
                  elements.push(new AST_Expansion({
                    start: expand_token,
                    expression: value,
                    end: value.end
                  }));
                } else {
                  elements.push(new AST_ObjectKeyVal({
                    start,
                    key: value.name,
                    value,
                    end: value.end
                  }));
                }
              } else if (is("punc", "}")) {
                continue;
              } else {
                var property_token = S.token;
                var property = as_property_name();
                if (property === null) {
                  unexpected(prev());
                } else if (prev().type === "name" && !is("punc", ":")) {
                  elements.push(new AST_ObjectKeyVal({
                    start: prev(),
                    key: property,
                    value: new symbol_type({
                      start: prev(),
                      name: property,
                      end: prev()
                    }),
                    end: prev()
                  }));
                } else {
                  expect(":");
                  elements.push(new AST_ObjectKeyVal({
                    start: property_token,
                    quote: property_token.quote,
                    key: property,
                    value: binding_element(used_parameters, symbol_type),
                    end: prev()
                  }));
                }
              }
              if (is_expand) {
                if (!is("punc", "}")) {
                  croak("Rest element must be last element");
                }
              } else if (is("operator", "=")) {
                used_parameters.mark_default_assignment(S.token);
                next();
                elements[elements.length - 1].value = new AST_DefaultAssign({
                  start: elements[elements.length - 1].value.start,
                  left: elements[elements.length - 1].value,
                  operator: "=",
                  right: expression(false),
                  end: S.token
                });
              }
            }
            expect("}");
            used_parameters.check_strict();
            return new AST_Destructuring({
              start: first_token,
              names: elements,
              is_array: false,
              end: prev()
            });
          } else if (is("name")) {
            used_parameters.add_parameter(S.token);
            return as_symbol(symbol_type);
          } else {
            croak("Invalid function parameter");
          }
        }
        function params_or_seq_(allow_arrows, maybe_sequence) {
          var spread_token;
          var invalid_sequence;
          var trailing_comma;
          var a = [];
          expect("(");
          while (!is("punc", ")")) {
            if (spread_token)
              unexpected(spread_token);
            if (is("expand", "...")) {
              spread_token = S.token;
              if (maybe_sequence)
                invalid_sequence = S.token;
              next();
              a.push(new AST_Expansion({
                start: prev(),
                expression: expression(),
                end: S.token
              }));
            } else {
              a.push(expression());
            }
            if (!is("punc", ")")) {
              expect(",");
              if (is("punc", ")")) {
                trailing_comma = prev();
                if (maybe_sequence)
                  invalid_sequence = trailing_comma;
              }
            }
          }
          expect(")");
          if (allow_arrows && is("arrow", "=>")) {
            if (spread_token && trailing_comma)
              unexpected(trailing_comma);
          } else if (invalid_sequence) {
            unexpected(invalid_sequence);
          }
          return a;
        }
        function _function_body(block, generator, is_async, name, args) {
          var loop = S.in_loop;
          var labels = S.labels;
          var current_generator = S.in_generator;
          var current_async = S.in_async;
          ++S.in_function;
          if (generator)
            S.in_generator = S.in_function;
          if (is_async)
            S.in_async = S.in_function;
          if (args)
            parameters(args);
          if (block)
            S.in_directives = true;
          S.in_loop = 0;
          S.labels = [];
          if (block) {
            S.input.push_directives_stack();
            var a = block_();
            if (name)
              _verify_symbol(name);
            if (args)
              args.forEach(_verify_symbol);
            S.input.pop_directives_stack();
          } else {
            var a = [new AST_Return({
              start: S.token,
              value: expression(false),
              end: S.token
            })];
          }
          --S.in_function;
          S.in_loop = loop;
          S.labels = labels;
          S.in_generator = current_generator;
          S.in_async = current_async;
          return a;
        }
        function _await_expression() {
          if (!can_await()) {
            croak(
              "Unexpected await expression outside async function",
              S.prev.line,
              S.prev.col,
              S.prev.pos
            );
          }
          return new AST_Await({
            start: prev(),
            end: S.token,
            expression: maybe_unary(true)
          });
        }
        function _yield_expression() {
          if (!is_in_generator()) {
            croak(
              "Unexpected yield expression outside generator function",
              S.prev.line,
              S.prev.col,
              S.prev.pos
            );
          }
          var start = S.token;
          var star = false;
          var has_expression = true;
          if (can_insert_semicolon() || is("punc") && PUNC_AFTER_EXPRESSION.has(S.token.value)) {
            has_expression = false;
          } else if (is("operator", "*")) {
            star = true;
            next();
          }
          return new AST_Yield({
            start,
            is_star: star,
            expression: has_expression ? expression() : null,
            end: prev()
          });
        }
        function if_() {
          var cond = parenthesised(), body = statement(false, false, true), belse = null;
          if (is("keyword", "else")) {
            next();
            belse = statement(false, false, true);
          }
          return new AST_If({
            condition: cond,
            body,
            alternative: belse
          });
        }
        function block_() {
          expect("{");
          var a = [];
          while (!is("punc", "}")) {
            if (is("eof"))
              unexpected();
            a.push(statement());
          }
          next();
          return a;
        }
        function switch_body_() {
          expect("{");
          var a = [], cur = null, branch = null, tmp;
          while (!is("punc", "}")) {
            if (is("eof"))
              unexpected();
            if (is("keyword", "case")) {
              if (branch)
                branch.end = prev();
              cur = [];
              branch = new AST_Case({
                start: (tmp = S.token, next(), tmp),
                expression: expression(true),
                body: cur
              });
              a.push(branch);
              expect(":");
            } else if (is("keyword", "default")) {
              if (branch)
                branch.end = prev();
              cur = [];
              branch = new AST_Default({
                start: (tmp = S.token, next(), expect(":"), tmp),
                body: cur
              });
              a.push(branch);
            } else {
              if (!cur)
                unexpected();
              cur.push(statement());
            }
          }
          if (branch)
            branch.end = prev();
          next();
          return a;
        }
        function try_() {
          var body, bcatch = null, bfinally = null;
          body = new AST_TryBlock({
            start: S.token,
            body: block_(),
            end: prev()
          });
          if (is("keyword", "catch")) {
            var start = S.token;
            next();
            if (is("punc", "{")) {
              var name = null;
            } else {
              expect("(");
              var name = parameter(void 0, AST_SymbolCatch);
              expect(")");
            }
            bcatch = new AST_Catch({
              start,
              argname: name,
              body: block_(),
              end: prev()
            });
          }
          if (is("keyword", "finally")) {
            var start = S.token;
            next();
            bfinally = new AST_Finally({
              start,
              body: block_(),
              end: prev()
            });
          }
          if (!bcatch && !bfinally)
            croak("Missing catch/finally blocks");
          return new AST_Try({
            body,
            bcatch,
            bfinally
          });
        }
        function vardefs(no_in, kind) {
          var var_defs = [];
          var def;
          for (; ; ) {
            var sym_type = kind === "var" ? AST_SymbolVar : kind === "const" ? AST_SymbolConst : kind === "let" ? AST_SymbolLet : null;
            if (is("punc", "{") || is("punc", "[")) {
              def = new AST_VarDef({
                start: S.token,
                name: binding_element(void 0, sym_type),
                value: is("operator", "=") ? (expect_token("operator", "="), expression(false, no_in)) : null,
                end: prev()
              });
            } else {
              def = new AST_VarDef({
                start: S.token,
                name: as_symbol(sym_type),
                value: is("operator", "=") ? (next(), expression(false, no_in)) : !no_in && kind === "const" ? croak("Missing initializer in const declaration") : null,
                end: prev()
              });
              if (def.name.name == "import")
                croak("Unexpected token: import");
            }
            var_defs.push(def);
            if (!is("punc", ","))
              break;
            next();
          }
          return var_defs;
        }
        var var_ = function(no_in) {
          return new AST_Var({
            start: prev(),
            definitions: vardefs(no_in, "var"),
            end: prev()
          });
        };
        var let_ = function(no_in) {
          return new AST_Let({
            start: prev(),
            definitions: vardefs(no_in, "let"),
            end: prev()
          });
        };
        var const_ = function(no_in) {
          return new AST_Const({
            start: prev(),
            definitions: vardefs(no_in, "const"),
            end: prev()
          });
        };
        var new_ = function(allow_calls) {
          var start = S.token;
          expect_token("operator", "new");
          if (is("punc", ".")) {
            next();
            expect_token("name", "target");
            return subscripts(new AST_NewTarget({
              start,
              end: prev()
            }), allow_calls);
          }
          var newexp = expr_atom(false), args;
          if (is("punc", "(")) {
            next();
            args = expr_list(")", true);
          } else {
            args = [];
          }
          var call = new AST_New({
            start,
            expression: newexp,
            args,
            end: prev()
          });
          annotate(call);
          return subscripts(call, allow_calls);
        };
        function as_atom_node() {
          var tok = S.token, ret;
          switch (tok.type) {
            case "name":
              ret = _make_symbol(AST_SymbolRef);
              break;
            case "num":
              ret = new AST_Number({
                start: tok,
                end: tok,
                value: tok.value,
                raw: LATEST_RAW
              });
              break;
            case "big_int":
              ret = new AST_BigInt({ start: tok, end: tok, value: tok.value });
              break;
            case "string":
              ret = new AST_String({
                start: tok,
                end: tok,
                value: tok.value,
                quote: tok.quote
              });
              annotate(ret);
              break;
            case "regexp":
              const [_, source, flags] = tok.value.match(/^\/(.*)\/(\w*)$/);
              ret = new AST_RegExp({ start: tok, end: tok, value: { source, flags } });
              break;
            case "atom":
              switch (tok.value) {
                case "false":
                  ret = new AST_False({ start: tok, end: tok });
                  break;
                case "true":
                  ret = new AST_True({ start: tok, end: tok });
                  break;
                case "null":
                  ret = new AST_Null({ start: tok, end: tok });
                  break;
              }
              break;
          }
          next();
          return ret;
        }
        function to_fun_args(ex, default_seen_above) {
          var insert_default = function(ex2, default_value) {
            if (default_value) {
              return new AST_DefaultAssign({
                start: ex2.start,
                left: ex2,
                operator: "=",
                right: default_value,
                end: default_value.end
              });
            }
            return ex2;
          };
          if (ex instanceof AST_Object) {
            return insert_default(new AST_Destructuring({
              start: ex.start,
              end: ex.end,
              is_array: false,
              names: ex.properties.map((prop) => to_fun_args(prop))
            }), default_seen_above);
          } else if (ex instanceof AST_ObjectKeyVal) {
            ex.value = to_fun_args(ex.value);
            return insert_default(ex, default_seen_above);
          } else if (ex instanceof AST_Hole) {
            return ex;
          } else if (ex instanceof AST_Destructuring) {
            ex.names = ex.names.map((name) => to_fun_args(name));
            return insert_default(ex, default_seen_above);
          } else if (ex instanceof AST_SymbolRef) {
            return insert_default(new AST_SymbolFunarg({
              name: ex.name,
              start: ex.start,
              end: ex.end
            }), default_seen_above);
          } else if (ex instanceof AST_Expansion) {
            ex.expression = to_fun_args(ex.expression);
            return insert_default(ex, default_seen_above);
          } else if (ex instanceof AST_Array) {
            return insert_default(new AST_Destructuring({
              start: ex.start,
              end: ex.end,
              is_array: true,
              names: ex.elements.map((elm) => to_fun_args(elm))
            }), default_seen_above);
          } else if (ex instanceof AST_Assign) {
            return insert_default(to_fun_args(ex.left, ex.right), default_seen_above);
          } else if (ex instanceof AST_DefaultAssign) {
            ex.left = to_fun_args(ex.left);
            return ex;
          } else {
            croak("Invalid function parameter", ex.start.line, ex.start.col);
          }
        }
        var expr_atom = function(allow_calls, allow_arrows) {
          if (is("operator", "new")) {
            return new_(allow_calls);
          }
          if (is("name", "import") && is_token(peek(), "punc", ".")) {
            return import_meta(allow_calls);
          }
          var start = S.token;
          var peeked;
          var async = is("name", "async") && (peeked = peek()).value != "[" && peeked.type != "arrow" && as_atom_node();
          if (is("punc")) {
            switch (S.token.value) {
              case "(":
                if (async && !allow_calls)
                  break;
                var exprs = params_or_seq_(allow_arrows, !async);
                if (allow_arrows && is("arrow", "=>")) {
                  return arrow_function(start, exprs.map((e) => to_fun_args(e)), !!async);
                }
                var ex = async ? new AST_Call({
                  expression: async,
                  args: exprs
                }) : to_expr_or_sequence(start, exprs);
                if (ex.start) {
                  const outer_comments_before = start.comments_before.length;
                  outer_comments_before_counts.set(start, outer_comments_before);
                  ex.start.comments_before.unshift(...start.comments_before);
                  start.comments_before = ex.start.comments_before;
                  if (outer_comments_before == 0 && start.comments_before.length > 0) {
                    var comment = start.comments_before[0];
                    if (!comment.nlb) {
                      comment.nlb = start.nlb;
                      start.nlb = false;
                    }
                  }
                  start.comments_after = ex.start.comments_after;
                }
                ex.start = start;
                var end = prev();
                if (ex.end) {
                  end.comments_before = ex.end.comments_before;
                  ex.end.comments_after.push(...end.comments_after);
                  end.comments_after = ex.end.comments_after;
                }
                ex.end = end;
                if (ex instanceof AST_Call)
                  annotate(ex);
                return subscripts(ex, allow_calls);
              case "[":
                return subscripts(array_(), allow_calls);
              case "{":
                return subscripts(object_or_destructuring_(), allow_calls);
            }
            if (!async)
              unexpected();
          }
          if (allow_arrows && is("name") && is_token(peek(), "arrow")) {
            var param = new AST_SymbolFunarg({
              name: S.token.value,
              start,
              end: start
            });
            next();
            return arrow_function(start, [param], !!async);
          }
          if (is("keyword", "function")) {
            next();
            var func = function_(AST_Function, false, !!async);
            func.start = start;
            func.end = prev();
            return subscripts(func, allow_calls);
          }
          if (async)
            return subscripts(async, allow_calls);
          if (is("keyword", "class")) {
            next();
            var cls = class_(AST_ClassExpression);
            cls.start = start;
            cls.end = prev();
            return subscripts(cls, allow_calls);
          }
          if (is("template_head")) {
            return subscripts(template_string(), allow_calls);
          }
          if (is("privatename")) {
            if (!S.in_class) {
              croak("Private field must be used in an enclosing class");
            }
            const start2 = S.token;
            const key = new AST_SymbolPrivateProperty({
              start: start2,
              name: start2.value,
              end: start2
            });
            next();
            expect_token("operator", "in");
            const private_in = new AST_PrivateIn({
              start: start2,
              key,
              value: subscripts(as_atom_node(), allow_calls),
              end: prev()
            });
            return subscripts(private_in, allow_calls);
          }
          if (ATOMIC_START_TOKEN.has(S.token.type)) {
            return subscripts(as_atom_node(), allow_calls);
          }
          unexpected();
        };
        function template_string() {
          var segments = [], start = S.token;
          segments.push(new AST_TemplateSegment({
            start: S.token,
            raw: TEMPLATE_RAWS.get(S.token),
            value: S.token.value,
            end: S.token
          }));
          while (!S.token.template_end) {
            next();
            handle_regexp();
            segments.push(expression(true));
            segments.push(new AST_TemplateSegment({
              start: S.token,
              raw: TEMPLATE_RAWS.get(S.token),
              value: S.token.value,
              end: S.token
            }));
          }
          next();
          return new AST_TemplateString({
            start,
            segments,
            end: S.token
          });
        }
        function expr_list(closing, allow_trailing_comma, allow_empty) {
          var first = true, a = [];
          while (!is("punc", closing)) {
            if (first)
              first = false;
            else
              expect(",");
            if (allow_trailing_comma && is("punc", closing))
              break;
            if (is("punc", ",") && allow_empty) {
              a.push(new AST_Hole({ start: S.token, end: S.token }));
            } else if (is("expand", "...")) {
              next();
              a.push(new AST_Expansion({ start: prev(), expression: expression(), end: S.token }));
            } else {
              a.push(expression(false));
            }
          }
          next();
          return a;
        }
        var array_ = embed_tokens(function() {
          expect("[");
          return new AST_Array({
            elements: expr_list("]", !options.strict, true)
          });
        });
        var create_accessor = embed_tokens((is_generator, is_async) => {
          return function_(AST_Accessor, is_generator, is_async);
        });
        var object_or_destructuring_ = embed_tokens(function object_or_destructuring_2() {
          var start = S.token, first = true, a = [];
          expect("{");
          while (!is("punc", "}")) {
            if (first)
              first = false;
            else
              expect(",");
            if (!options.strict && is("punc", "}"))
              break;
            start = S.token;
            if (start.type == "expand") {
              next();
              a.push(new AST_Expansion({
                start,
                expression: expression(false),
                end: prev()
              }));
              continue;
            }
            if (is("privatename")) {
              croak("private fields are not allowed in an object");
            }
            var name = as_property_name();
            var value;
            if (!is("punc", ":")) {
              var concise = concise_method_or_getset(name, start);
              if (concise) {
                a.push(concise);
                continue;
              }
              value = new AST_SymbolRef({
                start: prev(),
                name,
                end: prev()
              });
            } else if (name === null) {
              unexpected(prev());
            } else {
              next();
              value = expression(false);
            }
            if (is("operator", "=")) {
              next();
              value = new AST_Assign({
                start,
                left: value,
                operator: "=",
                right: expression(false),
                logical: false,
                end: prev()
              });
            }
            const kv = new AST_ObjectKeyVal({
              start,
              quote: start.quote,
              key: name instanceof AST_Node ? name : "" + name,
              value,
              end: prev()
            });
            a.push(annotate(kv));
          }
          next();
          return new AST_Object({ properties: a });
        });
        function class_(KindOfClass, is_export_default) {
          var start, method, class_name, extends_, a = [];
          S.input.push_directives_stack();
          S.input.add_directive("use strict");
          if (S.token.type == "name" && S.token.value != "extends") {
            class_name = as_symbol(KindOfClass === AST_DefClass ? AST_SymbolDefClass : AST_SymbolClass);
          }
          if (KindOfClass === AST_DefClass && !class_name) {
            if (is_export_default) {
              KindOfClass = AST_ClassExpression;
            } else {
              unexpected();
            }
          }
          if (S.token.value == "extends") {
            next();
            extends_ = expression(true);
          }
          expect("{");
          const save_in_class = S.in_class;
          S.in_class = true;
          while (is("punc", ";")) {
            next();
          }
          while (!is("punc", "}")) {
            start = S.token;
            method = concise_method_or_getset(as_property_name(), start, true);
            if (!method) {
              unexpected();
            }
            a.push(method);
            while (is("punc", ";")) {
              next();
            }
          }
          S.in_class = save_in_class;
          S.input.pop_directives_stack();
          next();
          return new KindOfClass({
            start,
            name: class_name,
            extends: extends_,
            properties: a,
            end: prev()
          });
        }
        function concise_method_or_getset(name, start, is_class) {
          const get_symbol_ast = (name2, SymbolClass = AST_SymbolMethod) => {
            if (typeof name2 === "string" || typeof name2 === "number") {
              return new SymbolClass({
                start,
                name: "" + name2,
                end: prev()
              });
            } else if (name2 === null) {
              unexpected();
            }
            return name2;
          };
          const is_not_method_start = () => !is("punc", "(") && !is("punc", ",") && !is("punc", "}") && !is("punc", ";") && !is("operator", "=");
          var is_async = false;
          var is_static = false;
          var is_generator = false;
          var is_private = false;
          var accessor_type = null;
          if (is_class && name === "static" && is_not_method_start()) {
            const static_block = class_static_block();
            if (static_block != null) {
              return static_block;
            }
            is_static = true;
            name = as_property_name();
          }
          if (name === "async" && is_not_method_start()) {
            is_async = true;
            name = as_property_name();
          }
          if (prev().type === "operator" && prev().value === "*") {
            is_generator = true;
            name = as_property_name();
          }
          if ((name === "get" || name === "set") && is_not_method_start()) {
            accessor_type = name;
            name = as_property_name();
          }
          if (prev().type === "privatename") {
            is_private = true;
          }
          const property_token = prev();
          if (accessor_type != null) {
            if (!is_private) {
              const AccessorClass = accessor_type === "get" ? AST_ObjectGetter : AST_ObjectSetter;
              name = get_symbol_ast(name);
              return annotate(new AccessorClass({
                start,
                static: is_static,
                key: name,
                quote: name instanceof AST_SymbolMethod ? property_token.quote : void 0,
                value: create_accessor(),
                end: prev()
              }));
            } else {
              const AccessorClass = accessor_type === "get" ? AST_PrivateGetter : AST_PrivateSetter;
              return annotate(new AccessorClass({
                start,
                static: is_static,
                key: get_symbol_ast(name),
                value: create_accessor(),
                end: prev()
              }));
            }
          }
          if (is("punc", "(")) {
            name = get_symbol_ast(name);
            const AST_MethodVariant = is_private ? AST_PrivateMethod : AST_ConciseMethod;
            var node = new AST_MethodVariant({
              start,
              static: is_static,
              is_generator,
              async: is_async,
              key: name,
              quote: name instanceof AST_SymbolMethod ? property_token.quote : void 0,
              value: create_accessor(is_generator, is_async),
              end: prev()
            });
            return annotate(node);
          }
          if (is_class) {
            const key = get_symbol_ast(name, AST_SymbolClassProperty);
            const quote = key instanceof AST_SymbolClassProperty ? property_token.quote : void 0;
            const AST_ClassPropertyVariant = is_private ? AST_ClassPrivateProperty : AST_ClassProperty;
            if (is("operator", "=")) {
              next();
              return annotate(
                new AST_ClassPropertyVariant({
                  start,
                  static: is_static,
                  quote,
                  key,
                  value: expression(false),
                  end: prev()
                })
              );
            } else if (is("name") || is("privatename") || is("operator", "*") || is("punc", ";") || is("punc", "}")) {
              return annotate(
                new AST_ClassPropertyVariant({
                  start,
                  static: is_static,
                  quote,
                  key,
                  end: prev()
                })
              );
            }
          }
        }
        function class_static_block() {
          if (!is("punc", "{")) {
            return null;
          }
          const start = S.token;
          const body = [];
          next();
          while (!is("punc", "}")) {
            body.push(statement());
          }
          next();
          return new AST_ClassStaticBlock({ start, body, end: prev() });
        }
        function maybe_import_assertion() {
          if (is("name", "assert") && !has_newline_before(S.token)) {
            next();
            return object_or_destructuring_();
          }
          return null;
        }
        function import_statement() {
          var start = prev();
          var imported_name;
          var imported_names;
          if (is("name")) {
            imported_name = as_symbol(AST_SymbolImport);
          }
          if (is("punc", ",")) {
            next();
          }
          imported_names = map_names(true);
          if (imported_names || imported_name) {
            expect_token("name", "from");
          }
          var mod_str = S.token;
          if (mod_str.type !== "string") {
            unexpected();
          }
          next();
          const assert_clause = maybe_import_assertion();
          return new AST_Import({
            start,
            imported_name,
            imported_names,
            module_name: new AST_String({
              start: mod_str,
              value: mod_str.value,
              quote: mod_str.quote,
              end: mod_str
            }),
            assert_clause,
            end: S.token
          });
        }
        function import_meta(allow_calls) {
          var start = S.token;
          expect_token("name", "import");
          expect_token("punc", ".");
          expect_token("name", "meta");
          return subscripts(new AST_ImportMeta({
            start,
            end: prev()
          }), allow_calls);
        }
        function map_name(is_import) {
          function make_symbol(type2, quote) {
            return new type2({
              name: as_property_name(),
              quote: quote || void 0,
              start: prev(),
              end: prev()
            });
          }
          var foreign_type = is_import ? AST_SymbolImportForeign : AST_SymbolExportForeign;
          var type = is_import ? AST_SymbolImport : AST_SymbolExport;
          var start = S.token;
          var foreign_name;
          var name;
          if (is_import) {
            foreign_name = make_symbol(foreign_type, start.quote);
          } else {
            name = make_symbol(type, start.quote);
          }
          if (is("name", "as")) {
            next();
            if (is_import) {
              name = make_symbol(type);
            } else {
              foreign_name = make_symbol(foreign_type, S.token.quote);
            }
          } else if (is_import) {
            name = new type(foreign_name);
          } else {
            foreign_name = new foreign_type(name);
          }
          return new AST_NameMapping({
            start,
            foreign_name,
            name,
            end: prev()
          });
        }
        function map_nameAsterisk(is_import, import_or_export_foreign_name) {
          var foreign_type = is_import ? AST_SymbolImportForeign : AST_SymbolExportForeign;
          var type = is_import ? AST_SymbolImport : AST_SymbolExport;
          var start = S.token;
          var name, foreign_name;
          var end = prev();
          if (is_import) {
            name = import_or_export_foreign_name;
          } else {
            foreign_name = import_or_export_foreign_name;
          }
          name = name || new type({
            start,
            name: "*",
            end
          });
          foreign_name = foreign_name || new foreign_type({
            start,
            name: "*",
            end
          });
          return new AST_NameMapping({
            start,
            foreign_name,
            name,
            end
          });
        }
        function map_names(is_import) {
          var names;
          if (is("punc", "{")) {
            next();
            names = [];
            while (!is("punc", "}")) {
              names.push(map_name(is_import));
              if (is("punc", ",")) {
                next();
              }
            }
            next();
          } else if (is("operator", "*")) {
            var name;
            next();
            if (is("name", "as")) {
              next();
              name = is_import ? as_symbol(AST_SymbolImport) : as_symbol_or_string(AST_SymbolExportForeign);
            }
            names = [map_nameAsterisk(is_import, name)];
          }
          return names;
        }
        function export_statement() {
          var start = S.token;
          var is_default;
          var exported_names;
          if (is("keyword", "default")) {
            is_default = true;
            next();
          } else if (exported_names = map_names(false)) {
            if (is("name", "from")) {
              next();
              var mod_str = S.token;
              if (mod_str.type !== "string") {
                unexpected();
              }
              next();
              const assert_clause = maybe_import_assertion();
              return new AST_Export({
                start,
                is_default,
                exported_names,
                module_name: new AST_String({
                  start: mod_str,
                  value: mod_str.value,
                  quote: mod_str.quote,
                  end: mod_str
                }),
                end: prev(),
                assert_clause
              });
            } else {
              return new AST_Export({
                start,
                is_default,
                exported_names,
                end: prev()
              });
            }
          }
          var node;
          var exported_value;
          var exported_definition;
          if (is("punc", "{") || is_default && (is("keyword", "class") || is("keyword", "function")) && is_token(peek(), "punc")) {
            exported_value = expression(false);
            semicolon();
          } else if ((node = statement(is_default)) instanceof AST_Definitions && is_default) {
            unexpected(node.start);
          } else if (node instanceof AST_Definitions || node instanceof AST_Defun || node instanceof AST_DefClass) {
            exported_definition = node;
          } else if (node instanceof AST_ClassExpression || node instanceof AST_Function) {
            exported_value = node;
          } else if (node instanceof AST_SimpleStatement) {
            exported_value = node.body;
          } else {
            unexpected(node.start);
          }
          return new AST_Export({
            start,
            is_default,
            exported_value,
            exported_definition,
            end: prev(),
            assert_clause: null
          });
        }
        function as_property_name() {
          var tmp = S.token;
          switch (tmp.type) {
            case "punc":
              if (tmp.value === "[") {
                next();
                var ex = expression(false);
                expect("]");
                return ex;
              } else
                unexpected(tmp);
            case "operator":
              if (tmp.value === "*") {
                next();
                return null;
              }
              if (!["delete", "in", "instanceof", "new", "typeof", "void"].includes(tmp.value)) {
                unexpected(tmp);
              }
            case "name":
            case "privatename":
            case "string":
            case "num":
            case "big_int":
            case "keyword":
            case "atom":
              next();
              return tmp.value;
            default:
              unexpected(tmp);
          }
        }
        function as_name() {
          var tmp = S.token;
          if (tmp.type != "name" && tmp.type != "privatename")
            unexpected();
          next();
          return tmp.value;
        }
        function _make_symbol(type) {
          var name = S.token.value;
          return new (name == "this" ? AST_This : name == "super" ? AST_Super : type)({
            name: String(name),
            start: S.token,
            end: S.token
          });
        }
        function _verify_symbol(sym) {
          var name = sym.name;
          if (is_in_generator() && name == "yield") {
            token_error(sym.start, "Yield cannot be used as identifier inside generators");
          }
          if (S.input.has_directive("use strict")) {
            if (name == "yield") {
              token_error(sym.start, "Unexpected yield identifier inside strict mode");
            }
            if (sym instanceof AST_SymbolDeclaration && (name == "arguments" || name == "eval")) {
              token_error(sym.start, "Unexpected " + name + " in strict mode");
            }
          }
        }
        function as_symbol(type, noerror) {
          if (!is("name")) {
            if (!noerror)
              croak("Name expected");
            return null;
          }
          var sym = _make_symbol(type);
          _verify_symbol(sym);
          next();
          return sym;
        }
        function as_symbol_or_string(type) {
          if (!is("name")) {
            if (!is("string")) {
              croak("Name or string expected");
            }
            var tok = S.token;
            var ret = new type({
              start: tok,
              end: tok,
              name: tok.value,
              quote: tok.quote
            });
            next();
            return ret;
          }
          var sym = _make_symbol(type);
          _verify_symbol(sym);
          next();
          return sym;
        }
        function annotate(node, before_token = node.start) {
          var comments = before_token.comments_before;
          const comments_outside_parens = outer_comments_before_counts.get(before_token);
          var i = comments_outside_parens != null ? comments_outside_parens : comments.length;
          while (--i >= 0) {
            var comment = comments[i];
            if (/[@#]__/.test(comment.value)) {
              if (/[@#]__PURE__/.test(comment.value)) {
                set_annotation(node, _PURE);
                break;
              }
              if (/[@#]__INLINE__/.test(comment.value)) {
                set_annotation(node, _INLINE);
                break;
              }
              if (/[@#]__NOINLINE__/.test(comment.value)) {
                set_annotation(node, _NOINLINE);
                break;
              }
              if (/[@#]__KEY__/.test(comment.value)) {
                set_annotation(node, _KEY);
                break;
              }
              if (/[@#]__MANGLE_PROP__/.test(comment.value)) {
                set_annotation(node, _MANGLEPROP);
                break;
              }
            }
          }
          return node;
        }
        var subscripts = function(expr, allow_calls, is_chain) {
          var start = expr.start;
          if (is("punc", ".")) {
            next();
            if (is("privatename") && !S.in_class)
              croak("Private field must be used in an enclosing class");
            const AST_DotVariant = is("privatename") ? AST_DotHash : AST_Dot;
            return annotate(subscripts(new AST_DotVariant({
              start,
              expression: expr,
              optional: false,
              property: as_name(),
              end: prev()
            }), allow_calls, is_chain));
          }
          if (is("punc", "[")) {
            next();
            var prop = expression(true);
            expect("]");
            return annotate(subscripts(new AST_Sub({
              start,
              expression: expr,
              optional: false,
              property: prop,
              end: prev()
            }), allow_calls, is_chain));
          }
          if (allow_calls && is("punc", "(")) {
            next();
            var call = new AST_Call({
              start,
              expression: expr,
              optional: false,
              args: call_args(),
              end: prev()
            });
            annotate(call);
            return subscripts(call, true, is_chain);
          }
          if (is("punc", "?.")) {
            next();
            let chain_contents;
            if (allow_calls && is("punc", "(")) {
              next();
              const call2 = new AST_Call({
                start,
                optional: true,
                expression: expr,
                args: call_args(),
                end: prev()
              });
              annotate(call2);
              chain_contents = subscripts(call2, true, true);
            } else if (is("name") || is("privatename")) {
              if (is("privatename") && !S.in_class)
                croak("Private field must be used in an enclosing class");
              const AST_DotVariant = is("privatename") ? AST_DotHash : AST_Dot;
              chain_contents = annotate(subscripts(new AST_DotVariant({
                start,
                expression: expr,
                optional: true,
                property: as_name(),
                end: prev()
              }), allow_calls, true));
            } else if (is("punc", "[")) {
              next();
              const property = expression(true);
              expect("]");
              chain_contents = annotate(subscripts(new AST_Sub({
                start,
                expression: expr,
                optional: true,
                property,
                end: prev()
              }), allow_calls, true));
            }
            if (!chain_contents)
              unexpected();
            if (chain_contents instanceof AST_Chain)
              return chain_contents;
            return new AST_Chain({
              start,
              expression: chain_contents,
              end: prev()
            });
          }
          if (is("template_head")) {
            if (is_chain) {
              unexpected();
            }
            return subscripts(new AST_PrefixedTemplateString({
              start,
              prefix: expr,
              template_string: template_string(),
              end: prev()
            }), allow_calls);
          }
          return expr;
        };
        function call_args() {
          var args = [];
          while (!is("punc", ")")) {
            if (is("expand", "...")) {
              next();
              args.push(new AST_Expansion({
                start: prev(),
                expression: expression(false),
                end: prev()
              }));
            } else {
              args.push(expression(false));
            }
            if (!is("punc", ")")) {
              expect(",");
            }
          }
          next();
          return args;
        }
        var maybe_unary = function(allow_calls, allow_arrows) {
          var start = S.token;
          if (start.type == "name" && start.value == "await" && can_await()) {
            next();
            return _await_expression();
          }
          if (is("operator") && UNARY_PREFIX.has(start.value)) {
            next();
            handle_regexp();
            var ex = make_unary(AST_UnaryPrefix, start, maybe_unary(allow_calls));
            ex.start = start;
            ex.end = prev();
            return ex;
          }
          var val = expr_atom(allow_calls, allow_arrows);
          while (is("operator") && UNARY_POSTFIX.has(S.token.value) && !has_newline_before(S.token)) {
            if (val instanceof AST_Arrow)
              unexpected();
            val = make_unary(AST_UnaryPostfix, S.token, val);
            val.start = start;
            val.end = S.token;
            next();
          }
          return val;
        };
        function make_unary(ctor, token, expr) {
          var op = token.value;
          switch (op) {
            case "++":
            case "--":
              if (!is_assignable(expr))
                croak("Invalid use of " + op + " operator", token.line, token.col, token.pos);
              break;
            case "delete":
              if (expr instanceof AST_SymbolRef && S.input.has_directive("use strict"))
                croak("Calling delete on expression not allowed in strict mode", expr.start.line, expr.start.col, expr.start.pos);
              break;
          }
          return new ctor({ operator: op, expression: expr });
        }
        var expr_op = function(left, min_prec, no_in) {
          var op = is("operator") ? S.token.value : null;
          if (op == "in" && no_in)
            op = null;
          if (op == "**" && left instanceof AST_UnaryPrefix && !is_token(left.start, "punc", "(") && left.operator !== "--" && left.operator !== "++")
            unexpected(left.start);
          var prec = op != null ? PRECEDENCE[op] : null;
          if (prec != null && (prec > min_prec || op === "**" && min_prec === prec)) {
            next();
            var right = expr_op(maybe_unary(true), prec, no_in);
            return expr_op(new AST_Binary({
              start: left.start,
              left,
              operator: op,
              right,
              end: right.end
            }), min_prec, no_in);
          }
          return left;
        };
        function expr_ops(no_in) {
          return expr_op(maybe_unary(true, true), 0, no_in);
        }
        var maybe_conditional = function(no_in) {
          var start = S.token;
          var expr = expr_ops(no_in);
          if (is("operator", "?")) {
            next();
            var yes = expression(false);
            expect(":");
            return new AST_Conditional({
              start,
              condition: expr,
              consequent: yes,
              alternative: expression(false, no_in),
              end: prev()
            });
          }
          return expr;
        };
        function is_assignable(expr) {
          return expr instanceof AST_PropAccess || expr instanceof AST_SymbolRef;
        }
        function to_destructuring(node) {
          if (node instanceof AST_Object) {
            node = new AST_Destructuring({
              start: node.start,
              names: node.properties.map(to_destructuring),
              is_array: false,
              end: node.end
            });
          } else if (node instanceof AST_Array) {
            var names = [];
            for (var i = 0; i < node.elements.length; i++) {
              if (node.elements[i] instanceof AST_Expansion) {
                if (i + 1 !== node.elements.length) {
                  token_error(node.elements[i].start, "Spread must the be last element in destructuring array");
                }
                node.elements[i].expression = to_destructuring(node.elements[i].expression);
              }
              names.push(to_destructuring(node.elements[i]));
            }
            node = new AST_Destructuring({
              start: node.start,
              names,
              is_array: true,
              end: node.end
            });
          } else if (node instanceof AST_ObjectProperty) {
            node.value = to_destructuring(node.value);
          } else if (node instanceof AST_Assign) {
            node = new AST_DefaultAssign({
              start: node.start,
              left: node.left,
              operator: "=",
              right: node.right,
              end: node.end
            });
          }
          return node;
        }
        var maybe_assign = function(no_in) {
          handle_regexp();
          var start = S.token;
          if (start.type == "name" && start.value == "yield") {
            if (is_in_generator()) {
              next();
              return _yield_expression();
            } else if (S.input.has_directive("use strict")) {
              token_error(S.token, "Unexpected yield identifier inside strict mode");
            }
          }
          var left = maybe_conditional(no_in);
          var val = S.token.value;
          if (is("operator") && ASSIGNMENT.has(val)) {
            if (is_assignable(left) || (left = to_destructuring(left)) instanceof AST_Destructuring) {
              next();
              return new AST_Assign({
                start,
                left,
                operator: val,
                right: maybe_assign(no_in),
                logical: LOGICAL_ASSIGNMENT.has(val),
                end: prev()
              });
            }
            croak("Invalid assignment");
          }
          return left;
        };
        var to_expr_or_sequence = function(start, exprs) {
          if (exprs.length === 1) {
            return exprs[0];
          } else if (exprs.length > 1) {
            return new AST_Sequence({ start, expressions: exprs, end: peek() });
          } else {
            croak("Invalid parenthesized expression");
          }
        };
        var expression = function(commas, no_in) {
          var start = S.token;
          var exprs = [];
          while (true) {
            exprs.push(maybe_assign(no_in));
            if (!commas || !is("punc", ","))
              break;
            next();
            commas = true;
          }
          return to_expr_or_sequence(start, exprs);
        };
        function in_loop(cont) {
          ++S.in_loop;
          var ret = cont();
          --S.in_loop;
          return ret;
        }
        if (options.expression) {
          return expression(true);
        }
        return function parse_toplevel() {
          var start = S.token;
          var body = [];
          S.input.push_directives_stack();
          if (options.module)
            S.input.add_directive("use strict");
          while (!is("eof")) {
            body.push(statement());
          }
          S.input.pop_directives_stack();
          var end = prev();
          var toplevel = options.toplevel;
          if (toplevel) {
            toplevel.body = toplevel.body.concat(body);
            toplevel.end = end;
          } else {
            toplevel = new AST_Toplevel({ start, body, end });
          }
          TEMPLATE_RAWS = /* @__PURE__ */ new Map();
          return toplevel;
        }();
      }
      function DEFNODE(type, props, ctor, methods, base = AST_Node) {
        if (!props)
          props = [];
        else
          props = props.split(/\s+/);
        var self_props = props;
        if (base && base.PROPS)
          props = props.concat(base.PROPS);
        const proto = base && Object.create(base.prototype);
        if (proto) {
          ctor.prototype = proto;
          ctor.BASE = base;
        }
        if (base)
          base.SUBCLASSES.push(ctor);
        ctor.prototype.CTOR = ctor;
        ctor.prototype.constructor = ctor;
        ctor.PROPS = props || null;
        ctor.SELF_PROPS = self_props;
        ctor.SUBCLASSES = [];
        if (type) {
          ctor.prototype.TYPE = ctor.TYPE = type;
        }
        if (methods) {
          for (let i in methods)
            if (HOP(methods, i)) {
              if (i[0] === "$") {
                ctor[i.substr(1)] = methods[i];
              } else {
                ctor.prototype[i] = methods[i];
              }
            }
        }
        ctor.DEFMETHOD = function(name, method) {
          this.prototype[name] = method;
        };
        return ctor;
      }
      const has_tok_flag = (tok, flag) => Boolean(tok.flags & flag);
      const set_tok_flag = (tok, flag, truth) => {
        if (truth) {
          tok.flags |= flag;
        } else {
          tok.flags &= ~flag;
        }
      };
      const TOK_FLAG_NLB = 1;
      const TOK_FLAG_QUOTE_SINGLE = 2;
      const TOK_FLAG_QUOTE_EXISTS = 4;
      const TOK_FLAG_TEMPLATE_END = 8;
      class AST_Token {
        constructor(type, value, line, col, pos, nlb, comments_before, comments_after, file) {
          this.flags = nlb ? 1 : 0;
          this.type = type;
          this.value = value;
          this.line = line;
          this.col = col;
          this.pos = pos;
          this.comments_before = comments_before;
          this.comments_after = comments_after;
          this.file = file;
          Object.seal(this);
        }
        // Return a string summary of the token for node.js console.log
        [Symbol.for("nodejs.util.inspect.custom")](_depth, options) {
          const special = (str) => options.stylize(str, "special");
          const quote = typeof this.value === "string" && this.value.includes("`") ? "'" : "`";
          const value = `${quote}${this.value}${quote}`;
          return `${special("[AST_Token")} ${value} at ${this.line}:${this.col}${special("]")}`;
        }
        get nlb() {
          return has_tok_flag(this, TOK_FLAG_NLB);
        }
        set nlb(new_nlb) {
          set_tok_flag(this, TOK_FLAG_NLB, new_nlb);
        }
        get quote() {
          return !has_tok_flag(this, TOK_FLAG_QUOTE_EXISTS) ? "" : has_tok_flag(this, TOK_FLAG_QUOTE_SINGLE) ? "'" : '"';
        }
        set quote(quote_type) {
          set_tok_flag(this, TOK_FLAG_QUOTE_SINGLE, quote_type === "'");
          set_tok_flag(this, TOK_FLAG_QUOTE_EXISTS, !!quote_type);
        }
        get template_end() {
          return has_tok_flag(this, TOK_FLAG_TEMPLATE_END);
        }
        set template_end(new_template_end) {
          set_tok_flag(this, TOK_FLAG_TEMPLATE_END, new_template_end);
        }
      }
      var AST_Node = DEFNODE("Node", "start end", function AST_Node2(props) {
        if (props) {
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        _clone: function(deep) {
          if (deep) {
            var self2 = this.clone();
            return self2.transform(new TreeTransformer(function(node) {
              if (node !== self2) {
                return node.clone(true);
              }
            }));
          }
          return new this.CTOR(this);
        },
        clone: function(deep) {
          return this._clone(deep);
        },
        $documentation: "Base class of all AST nodes",
        $propdoc: {
          start: "[AST_Token] The first token of this node",
          end: "[AST_Token] The last token of this node"
        },
        _walk: function(visitor) {
          return visitor._visit(this);
        },
        walk: function(visitor) {
          return this._walk(visitor);
        },
        _children_backwards: () => {
        }
      }, null);
      var AST_Statement = DEFNODE("Statement", null, function AST_Statement2(props) {
        if (props) {
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Base class of all statements"
      });
      var AST_Debugger = DEFNODE("Debugger", null, function AST_Debugger2(props) {
        if (props) {
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Represents a debugger statement"
      }, AST_Statement);
      var AST_Directive = DEFNODE("Directive", "value quote", function AST_Directive2(props) {
        if (props) {
          this.value = props.value;
          this.quote = props.quote;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: 'Represents a directive, like "use strict";',
        $propdoc: {
          value: "[string] The value of this directive as a plain string (it's not an AST_String!)",
          quote: "[string] the original quote character"
        }
      }, AST_Statement);
      var AST_SimpleStatement = DEFNODE("SimpleStatement", "body", function AST_SimpleStatement2(props) {
        if (props) {
          this.body = props.body;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A statement consisting of an expression, i.e. a = 1 + 2",
        $propdoc: {
          body: "[AST_Node] an expression node (should not be instanceof AST_Statement)"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.body._walk(visitor);
          });
        },
        _children_backwards(push2) {
          push2(this.body);
        }
      }, AST_Statement);
      function walk_body(node, visitor) {
        const body = node.body;
        for (var i = 0, len = body.length; i < len; i++) {
          body[i]._walk(visitor);
        }
      }
      function clone_block_scope(deep) {
        var clone = this._clone(deep);
        if (this.block_scope) {
          clone.block_scope = this.block_scope.clone();
        }
        return clone;
      }
      var AST_Block = DEFNODE("Block", "body block_scope", function AST_Block2(props) {
        if (props) {
          this.body = props.body;
          this.block_scope = props.block_scope;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A body of statements (usually braced)",
        $propdoc: {
          body: "[AST_Statement*] an array of statements",
          block_scope: "[AST_Scope] the block scope"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            walk_body(this, visitor);
          });
        },
        _children_backwards(push2) {
          let i = this.body.length;
          while (i--)
            push2(this.body[i]);
        },
        clone: clone_block_scope
      }, AST_Statement);
      var AST_BlockStatement = DEFNODE("BlockStatement", null, function AST_BlockStatement2(props) {
        if (props) {
          this.body = props.body;
          this.block_scope = props.block_scope;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A block statement"
      }, AST_Block);
      var AST_EmptyStatement = DEFNODE("EmptyStatement", null, function AST_EmptyStatement2(props) {
        if (props) {
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "The empty statement (empty block or simply a semicolon)"
      }, AST_Statement);
      var AST_StatementWithBody = DEFNODE("StatementWithBody", "body", function AST_StatementWithBody2(props) {
        if (props) {
          this.body = props.body;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Base class for all statements that contain one nested body: `For`, `ForIn`, `Do`, `While`, `With`",
        $propdoc: {
          body: "[AST_Statement] the body; this should always be present, even if it's an AST_EmptyStatement"
        }
      }, AST_Statement);
      var AST_LabeledStatement = DEFNODE("LabeledStatement", "label", function AST_LabeledStatement2(props) {
        if (props) {
          this.label = props.label;
          this.body = props.body;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Statement with a label",
        $propdoc: {
          label: "[AST_Label] a label definition"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.label._walk(visitor);
            this.body._walk(visitor);
          });
        },
        _children_backwards(push2) {
          push2(this.body);
          push2(this.label);
        },
        clone: function(deep) {
          var node = this._clone(deep);
          if (deep) {
            var label = node.label;
            var def = this.label;
            node.walk(new TreeWalker(function(node2) {
              if (node2 instanceof AST_LoopControl && node2.label && node2.label.thedef === def) {
                node2.label.thedef = label;
                label.references.push(node2);
              }
            }));
          }
          return node;
        }
      }, AST_StatementWithBody);
      var AST_IterationStatement = DEFNODE(
        "IterationStatement",
        "block_scope",
        function AST_IterationStatement2(props) {
          if (props) {
            this.block_scope = props.block_scope;
            this.body = props.body;
            this.start = props.start;
            this.end = props.end;
          }
          this.flags = 0;
        },
        {
          $documentation: "Internal class.  All loops inherit from it.",
          $propdoc: {
            block_scope: "[AST_Scope] the block scope for this iteration statement."
          },
          clone: clone_block_scope
        },
        AST_StatementWithBody
      );
      var AST_DWLoop = DEFNODE("DWLoop", "condition", function AST_DWLoop2(props) {
        if (props) {
          this.condition = props.condition;
          this.block_scope = props.block_scope;
          this.body = props.body;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Base class for do/while statements",
        $propdoc: {
          condition: "[AST_Node] the loop condition.  Should not be instanceof AST_Statement"
        }
      }, AST_IterationStatement);
      var AST_Do = DEFNODE("Do", null, function AST_Do2(props) {
        if (props) {
          this.condition = props.condition;
          this.block_scope = props.block_scope;
          this.body = props.body;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A `do` statement",
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.body._walk(visitor);
            this.condition._walk(visitor);
          });
        },
        _children_backwards(push2) {
          push2(this.condition);
          push2(this.body);
        }
      }, AST_DWLoop);
      var AST_While = DEFNODE("While", null, function AST_While2(props) {
        if (props) {
          this.condition = props.condition;
          this.block_scope = props.block_scope;
          this.body = props.body;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A `while` statement",
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.condition._walk(visitor);
            this.body._walk(visitor);
          });
        },
        _children_backwards(push2) {
          push2(this.body);
          push2(this.condition);
        }
      }, AST_DWLoop);
      var AST_For = DEFNODE("For", "init condition step", function AST_For2(props) {
        if (props) {
          this.init = props.init;
          this.condition = props.condition;
          this.step = props.step;
          this.block_scope = props.block_scope;
          this.body = props.body;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A `for` statement",
        $propdoc: {
          init: "[AST_Node?] the `for` initialization code, or null if empty",
          condition: "[AST_Node?] the `for` termination clause, or null if empty",
          step: "[AST_Node?] the `for` update clause, or null if empty"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            if (this.init)
              this.init._walk(visitor);
            if (this.condition)
              this.condition._walk(visitor);
            if (this.step)
              this.step._walk(visitor);
            this.body._walk(visitor);
          });
        },
        _children_backwards(push2) {
          push2(this.body);
          if (this.step)
            push2(this.step);
          if (this.condition)
            push2(this.condition);
          if (this.init)
            push2(this.init);
        }
      }, AST_IterationStatement);
      var AST_ForIn = DEFNODE("ForIn", "init object", function AST_ForIn2(props) {
        if (props) {
          this.init = props.init;
          this.object = props.object;
          this.block_scope = props.block_scope;
          this.body = props.body;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A `for ... in` statement",
        $propdoc: {
          init: "[AST_Node] the `for/in` initialization code",
          object: "[AST_Node] the object that we're looping through"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.init._walk(visitor);
            this.object._walk(visitor);
            this.body._walk(visitor);
          });
        },
        _children_backwards(push2) {
          push2(this.body);
          if (this.object)
            push2(this.object);
          if (this.init)
            push2(this.init);
        }
      }, AST_IterationStatement);
      var AST_ForOf = DEFNODE("ForOf", "await", function AST_ForOf2(props) {
        if (props) {
          this.await = props.await;
          this.init = props.init;
          this.object = props.object;
          this.block_scope = props.block_scope;
          this.body = props.body;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A `for ... of` statement"
      }, AST_ForIn);
      var AST_With = DEFNODE("With", "expression", function AST_With2(props) {
        if (props) {
          this.expression = props.expression;
          this.body = props.body;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A `with` statement",
        $propdoc: {
          expression: "[AST_Node] the `with` expression"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.expression._walk(visitor);
            this.body._walk(visitor);
          });
        },
        _children_backwards(push2) {
          push2(this.body);
          push2(this.expression);
        }
      }, AST_StatementWithBody);
      var AST_Scope = DEFNODE(
        "Scope",
        "variables uses_with uses_eval parent_scope enclosed cname",
        function AST_Scope2(props) {
          if (props) {
            this.variables = props.variables;
            this.uses_with = props.uses_with;
            this.uses_eval = props.uses_eval;
            this.parent_scope = props.parent_scope;
            this.enclosed = props.enclosed;
            this.cname = props.cname;
            this.body = props.body;
            this.block_scope = props.block_scope;
            this.start = props.start;
            this.end = props.end;
          }
          this.flags = 0;
        },
        {
          $documentation: "Base class for all statements introducing a lexical scope",
          $propdoc: {
            variables: "[Map/S] a map of name -> SymbolDef for all variables/functions defined in this scope",
            uses_with: "[boolean/S] tells whether this scope uses the `with` statement",
            uses_eval: "[boolean/S] tells whether this scope contains a direct call to the global `eval`",
            parent_scope: "[AST_Scope?/S] link to the parent scope",
            enclosed: "[SymbolDef*/S] a list of all symbol definitions that are accessed from this scope or any subscopes",
            cname: "[integer/S] current index for mangling variables (used internally by the mangler)"
          },
          get_defun_scope: function() {
            var self2 = this;
            while (self2.is_block_scope()) {
              self2 = self2.parent_scope;
            }
            return self2;
          },
          clone: function(deep, toplevel) {
            var node = this._clone(deep);
            if (deep && this.variables && toplevel && !this._block_scope) {
              node.figure_out_scope({}, {
                toplevel,
                parent_scope: this.parent_scope
              });
            } else {
              if (this.variables)
                node.variables = new Map(this.variables);
              if (this.enclosed)
                node.enclosed = this.enclosed.slice();
              if (this._block_scope)
                node._block_scope = this._block_scope;
            }
            return node;
          },
          pinned: function() {
            return this.uses_eval || this.uses_with;
          }
        },
        AST_Block
      );
      var AST_Toplevel = DEFNODE("Toplevel", "globals", function AST_Toplevel2(props) {
        if (props) {
          this.globals = props.globals;
          this.variables = props.variables;
          this.uses_with = props.uses_with;
          this.uses_eval = props.uses_eval;
          this.parent_scope = props.parent_scope;
          this.enclosed = props.enclosed;
          this.cname = props.cname;
          this.body = props.body;
          this.block_scope = props.block_scope;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "The toplevel scope",
        $propdoc: {
          globals: "[Map/S] a map of name -> SymbolDef for all undeclared names"
        },
        wrap_commonjs: function(name) {
          var body = this.body;
          var wrapped_tl = "(function(exports){'$ORIG';})(typeof " + name + "=='undefined'?(" + name + "={}):" + name + ");";
          wrapped_tl = parse(wrapped_tl);
          wrapped_tl = wrapped_tl.transform(new TreeTransformer(function(node) {
            if (node instanceof AST_Directive && node.value == "$ORIG") {
              return MAP.splice(body);
            }
          }));
          return wrapped_tl;
        },
        wrap_enclose: function(args_values) {
          if (typeof args_values != "string")
            args_values = "";
          var index = args_values.indexOf(":");
          if (index < 0)
            index = args_values.length;
          var body = this.body;
          return parse([
            "(function(",
            args_values.slice(0, index),
            '){"$ORIG"})(',
            args_values.slice(index + 1),
            ")"
          ].join("")).transform(new TreeTransformer(function(node) {
            if (node instanceof AST_Directive && node.value == "$ORIG") {
              return MAP.splice(body);
            }
          }));
        }
      }, AST_Scope);
      var AST_Expansion = DEFNODE("Expansion", "expression", function AST_Expansion2(props) {
        if (props) {
          this.expression = props.expression;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "An expandible argument, such as ...rest, a splat, such as [1,2,...all], or an expansion in a variable declaration, such as var [first, ...rest] = list",
        $propdoc: {
          expression: "[AST_Node] the thing to be expanded"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.expression.walk(visitor);
          });
        },
        _children_backwards(push2) {
          push2(this.expression);
        }
      });
      var AST_Lambda = DEFNODE(
        "Lambda",
        "name argnames uses_arguments is_generator async",
        function AST_Lambda2(props) {
          if (props) {
            this.name = props.name;
            this.argnames = props.argnames;
            this.uses_arguments = props.uses_arguments;
            this.is_generator = props.is_generator;
            this.async = props.async;
            this.variables = props.variables;
            this.uses_with = props.uses_with;
            this.uses_eval = props.uses_eval;
            this.parent_scope = props.parent_scope;
            this.enclosed = props.enclosed;
            this.cname = props.cname;
            this.body = props.body;
            this.block_scope = props.block_scope;
            this.start = props.start;
            this.end = props.end;
          }
          this.flags = 0;
        },
        {
          $documentation: "Base class for functions",
          $propdoc: {
            name: "[AST_SymbolDeclaration?] the name of this function",
            argnames: "[AST_SymbolFunarg|AST_Destructuring|AST_Expansion|AST_DefaultAssign*] array of function arguments, destructurings, or expanding arguments",
            uses_arguments: "[boolean/S] tells whether this function accesses the arguments array",
            is_generator: "[boolean] is this a generator method",
            async: "[boolean] is this method async"
          },
          args_as_names: function() {
            var out = [];
            for (var i = 0; i < this.argnames.length; i++) {
              if (this.argnames[i] instanceof AST_Destructuring) {
                out.push(...this.argnames[i].all_symbols());
              } else {
                out.push(this.argnames[i]);
              }
            }
            return out;
          },
          _walk: function(visitor) {
            return visitor._visit(this, function() {
              if (this.name)
                this.name._walk(visitor);
              var argnames = this.argnames;
              for (var i = 0, len = argnames.length; i < len; i++) {
                argnames[i]._walk(visitor);
              }
              walk_body(this, visitor);
            });
          },
          _children_backwards(push2) {
            let i = this.body.length;
            while (i--)
              push2(this.body[i]);
            i = this.argnames.length;
            while (i--)
              push2(this.argnames[i]);
            if (this.name)
              push2(this.name);
          },
          is_braceless() {
            return this.body[0] instanceof AST_Return && this.body[0].value;
          },
          // Default args and expansion don't count, so .argnames.length doesn't cut it
          length_property() {
            let length = 0;
            for (const arg of this.argnames) {
              if (arg instanceof AST_SymbolFunarg || arg instanceof AST_Destructuring) {
                length++;
              }
            }
            return length;
          }
        },
        AST_Scope
      );
      var AST_Accessor = DEFNODE("Accessor", null, function AST_Accessor2(props) {
        if (props) {
          this.name = props.name;
          this.argnames = props.argnames;
          this.uses_arguments = props.uses_arguments;
          this.is_generator = props.is_generator;
          this.async = props.async;
          this.variables = props.variables;
          this.uses_with = props.uses_with;
          this.uses_eval = props.uses_eval;
          this.parent_scope = props.parent_scope;
          this.enclosed = props.enclosed;
          this.cname = props.cname;
          this.body = props.body;
          this.block_scope = props.block_scope;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A setter/getter function.  The `name` property is always null."
      }, AST_Lambda);
      var AST_Function = DEFNODE("Function", null, function AST_Function2(props) {
        if (props) {
          this.name = props.name;
          this.argnames = props.argnames;
          this.uses_arguments = props.uses_arguments;
          this.is_generator = props.is_generator;
          this.async = props.async;
          this.variables = props.variables;
          this.uses_with = props.uses_with;
          this.uses_eval = props.uses_eval;
          this.parent_scope = props.parent_scope;
          this.enclosed = props.enclosed;
          this.cname = props.cname;
          this.body = props.body;
          this.block_scope = props.block_scope;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A function expression"
      }, AST_Lambda);
      var AST_Arrow = DEFNODE("Arrow", null, function AST_Arrow2(props) {
        if (props) {
          this.name = props.name;
          this.argnames = props.argnames;
          this.uses_arguments = props.uses_arguments;
          this.is_generator = props.is_generator;
          this.async = props.async;
          this.variables = props.variables;
          this.uses_with = props.uses_with;
          this.uses_eval = props.uses_eval;
          this.parent_scope = props.parent_scope;
          this.enclosed = props.enclosed;
          this.cname = props.cname;
          this.body = props.body;
          this.block_scope = props.block_scope;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "An ES6 Arrow function ((a) => b)"
      }, AST_Lambda);
      var AST_Defun = DEFNODE("Defun", null, function AST_Defun2(props) {
        if (props) {
          this.name = props.name;
          this.argnames = props.argnames;
          this.uses_arguments = props.uses_arguments;
          this.is_generator = props.is_generator;
          this.async = props.async;
          this.variables = props.variables;
          this.uses_with = props.uses_with;
          this.uses_eval = props.uses_eval;
          this.parent_scope = props.parent_scope;
          this.enclosed = props.enclosed;
          this.cname = props.cname;
          this.body = props.body;
          this.block_scope = props.block_scope;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A function definition"
      }, AST_Lambda);
      var AST_Destructuring = DEFNODE("Destructuring", "names is_array", function AST_Destructuring2(props) {
        if (props) {
          this.names = props.names;
          this.is_array = props.is_array;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A destructuring of several names. Used in destructuring assignment and with destructuring function argument names",
        $propdoc: {
          "names": "[AST_Node*] Array of properties or elements",
          "is_array": "[Boolean] Whether the destructuring represents an object or array"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.names.forEach(function(name) {
              name._walk(visitor);
            });
          });
        },
        _children_backwards(push2) {
          let i = this.names.length;
          while (i--)
            push2(this.names[i]);
        },
        all_symbols: function() {
          var out = [];
          walk(this, (node) => {
            if (node instanceof AST_SymbolDeclaration) {
              out.push(node);
            }
            if (node instanceof AST_Lambda) {
              return true;
            }
          });
          return out;
        }
      });
      var AST_PrefixedTemplateString = DEFNODE(
        "PrefixedTemplateString",
        "template_string prefix",
        function AST_PrefixedTemplateString2(props) {
          if (props) {
            this.template_string = props.template_string;
            this.prefix = props.prefix;
            this.start = props.start;
            this.end = props.end;
          }
          this.flags = 0;
        },
        {
          $documentation: "A templatestring with a prefix, such as String.raw`foobarbaz`",
          $propdoc: {
            template_string: "[AST_TemplateString] The template string",
            prefix: "[AST_Node] The prefix, which will get called."
          },
          _walk: function(visitor) {
            return visitor._visit(this, function() {
              this.prefix._walk(visitor);
              this.template_string._walk(visitor);
            });
          },
          _children_backwards(push2) {
            push2(this.template_string);
            push2(this.prefix);
          }
        }
      );
      var AST_TemplateString = DEFNODE("TemplateString", "segments", function AST_TemplateString2(props) {
        if (props) {
          this.segments = props.segments;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A template string literal",
        $propdoc: {
          segments: "[AST_Node*] One or more segments, starting with AST_TemplateSegment. AST_Node may follow AST_TemplateSegment, but each AST_Node must be followed by AST_TemplateSegment."
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.segments.forEach(function(seg) {
              seg._walk(visitor);
            });
          });
        },
        _children_backwards(push2) {
          let i = this.segments.length;
          while (i--)
            push2(this.segments[i]);
        }
      });
      var AST_TemplateSegment = DEFNODE("TemplateSegment", "value raw", function AST_TemplateSegment2(props) {
        if (props) {
          this.value = props.value;
          this.raw = props.raw;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A segment of a template string literal",
        $propdoc: {
          value: "Content of the segment",
          raw: "Raw source of the segment"
        }
      });
      var AST_Jump = DEFNODE("Jump", null, function AST_Jump2(props) {
        if (props) {
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Base class for “jumps” (for now that's `return`, `throw`, `break` and `continue`)"
      }, AST_Statement);
      var AST_Exit = DEFNODE("Exit", "value", function AST_Exit2(props) {
        if (props) {
          this.value = props.value;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Base class for “exits” (`return` and `throw`)",
        $propdoc: {
          value: "[AST_Node?] the value returned or thrown by this statement; could be null for AST_Return"
        },
        _walk: function(visitor) {
          return visitor._visit(this, this.value && function() {
            this.value._walk(visitor);
          });
        },
        _children_backwards(push2) {
          if (this.value)
            push2(this.value);
        }
      }, AST_Jump);
      var AST_Return = DEFNODE("Return", null, function AST_Return2(props) {
        if (props) {
          this.value = props.value;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A `return` statement"
      }, AST_Exit);
      var AST_Throw = DEFNODE("Throw", null, function AST_Throw2(props) {
        if (props) {
          this.value = props.value;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A `throw` statement"
      }, AST_Exit);
      var AST_LoopControl = DEFNODE("LoopControl", "label", function AST_LoopControl2(props) {
        if (props) {
          this.label = props.label;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Base class for loop control statements (`break` and `continue`)",
        $propdoc: {
          label: "[AST_LabelRef?] the label, or null if none"
        },
        _walk: function(visitor) {
          return visitor._visit(this, this.label && function() {
            this.label._walk(visitor);
          });
        },
        _children_backwards(push2) {
          if (this.label)
            push2(this.label);
        }
      }, AST_Jump);
      var AST_Break = DEFNODE("Break", null, function AST_Break2(props) {
        if (props) {
          this.label = props.label;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A `break` statement"
      }, AST_LoopControl);
      var AST_Continue = DEFNODE("Continue", null, function AST_Continue2(props) {
        if (props) {
          this.label = props.label;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A `continue` statement"
      }, AST_LoopControl);
      var AST_Await = DEFNODE("Await", "expression", function AST_Await2(props) {
        if (props) {
          this.expression = props.expression;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "An `await` statement",
        $propdoc: {
          expression: "[AST_Node] the mandatory expression being awaited"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.expression._walk(visitor);
          });
        },
        _children_backwards(push2) {
          push2(this.expression);
        }
      });
      var AST_Yield = DEFNODE("Yield", "expression is_star", function AST_Yield2(props) {
        if (props) {
          this.expression = props.expression;
          this.is_star = props.is_star;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A `yield` statement",
        $propdoc: {
          expression: "[AST_Node?] the value returned or thrown by this statement; could be null (representing undefined) but only when is_star is set to false",
          is_star: "[Boolean] Whether this is a yield or yield* statement"
        },
        _walk: function(visitor) {
          return visitor._visit(this, this.expression && function() {
            this.expression._walk(visitor);
          });
        },
        _children_backwards(push2) {
          if (this.expression)
            push2(this.expression);
        }
      });
      var AST_If = DEFNODE("If", "condition alternative", function AST_If2(props) {
        if (props) {
          this.condition = props.condition;
          this.alternative = props.alternative;
          this.body = props.body;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A `if` statement",
        $propdoc: {
          condition: "[AST_Node] the `if` condition",
          alternative: "[AST_Statement?] the `else` part, or null if not present"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.condition._walk(visitor);
            this.body._walk(visitor);
            if (this.alternative)
              this.alternative._walk(visitor);
          });
        },
        _children_backwards(push2) {
          if (this.alternative) {
            push2(this.alternative);
          }
          push2(this.body);
          push2(this.condition);
        }
      }, AST_StatementWithBody);
      var AST_Switch = DEFNODE("Switch", "expression", function AST_Switch2(props) {
        if (props) {
          this.expression = props.expression;
          this.body = props.body;
          this.block_scope = props.block_scope;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A `switch` statement",
        $propdoc: {
          expression: "[AST_Node] the `switch` “discriminant”"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.expression._walk(visitor);
            walk_body(this, visitor);
          });
        },
        _children_backwards(push2) {
          let i = this.body.length;
          while (i--)
            push2(this.body[i]);
          push2(this.expression);
        }
      }, AST_Block);
      var AST_SwitchBranch = DEFNODE("SwitchBranch", null, function AST_SwitchBranch2(props) {
        if (props) {
          this.body = props.body;
          this.block_scope = props.block_scope;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Base class for `switch` branches"
      }, AST_Block);
      var AST_Default = DEFNODE("Default", null, function AST_Default2(props) {
        if (props) {
          this.body = props.body;
          this.block_scope = props.block_scope;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A `default` switch branch"
      }, AST_SwitchBranch);
      var AST_Case = DEFNODE("Case", "expression", function AST_Case2(props) {
        if (props) {
          this.expression = props.expression;
          this.body = props.body;
          this.block_scope = props.block_scope;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A `case` switch branch",
        $propdoc: {
          expression: "[AST_Node] the `case` expression"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.expression._walk(visitor);
            walk_body(this, visitor);
          });
        },
        _children_backwards(push2) {
          let i = this.body.length;
          while (i--)
            push2(this.body[i]);
          push2(this.expression);
        }
      }, AST_SwitchBranch);
      var AST_Try = DEFNODE("Try", "body bcatch bfinally", function AST_Try2(props) {
        if (props) {
          this.body = props.body;
          this.bcatch = props.bcatch;
          this.bfinally = props.bfinally;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A `try` statement",
        $propdoc: {
          body: "[AST_TryBlock] the try block",
          bcatch: "[AST_Catch?] the catch block, or null if not present",
          bfinally: "[AST_Finally?] the finally block, or null if not present"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.body._walk(visitor);
            if (this.bcatch)
              this.bcatch._walk(visitor);
            if (this.bfinally)
              this.bfinally._walk(visitor);
          });
        },
        _children_backwards(push2) {
          if (this.bfinally)
            push2(this.bfinally);
          if (this.bcatch)
            push2(this.bcatch);
          push2(this.body);
        }
      }, AST_Statement);
      var AST_TryBlock = DEFNODE("TryBlock", null, function AST_TryBlock2(props) {
        if (props) {
          this.body = props.body;
          this.block_scope = props.block_scope;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "The `try` block of a try statement"
      }, AST_Block);
      var AST_Catch = DEFNODE("Catch", "argname", function AST_Catch2(props) {
        if (props) {
          this.argname = props.argname;
          this.body = props.body;
          this.block_scope = props.block_scope;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A `catch` node; only makes sense as part of a `try` statement",
        $propdoc: {
          argname: "[AST_SymbolCatch|AST_Destructuring|AST_Expansion|AST_DefaultAssign] symbol for the exception"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            if (this.argname)
              this.argname._walk(visitor);
            walk_body(this, visitor);
          });
        },
        _children_backwards(push2) {
          let i = this.body.length;
          while (i--)
            push2(this.body[i]);
          if (this.argname)
            push2(this.argname);
        }
      }, AST_Block);
      var AST_Finally = DEFNODE("Finally", null, function AST_Finally2(props) {
        if (props) {
          this.body = props.body;
          this.block_scope = props.block_scope;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A `finally` node; only makes sense as part of a `try` statement"
      }, AST_Block);
      var AST_Definitions = DEFNODE("Definitions", "definitions", function AST_Definitions2(props) {
        if (props) {
          this.definitions = props.definitions;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Base class for `var` or `const` nodes (variable declarations/initializations)",
        $propdoc: {
          definitions: "[AST_VarDef*] array of variable definitions"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            var definitions = this.definitions;
            for (var i = 0, len = definitions.length; i < len; i++) {
              definitions[i]._walk(visitor);
            }
          });
        },
        _children_backwards(push2) {
          let i = this.definitions.length;
          while (i--)
            push2(this.definitions[i]);
        }
      }, AST_Statement);
      var AST_Var = DEFNODE("Var", null, function AST_Var2(props) {
        if (props) {
          this.definitions = props.definitions;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A `var` statement"
      }, AST_Definitions);
      var AST_Let = DEFNODE("Let", null, function AST_Let2(props) {
        if (props) {
          this.definitions = props.definitions;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A `let` statement"
      }, AST_Definitions);
      var AST_Const = DEFNODE("Const", null, function AST_Const2(props) {
        if (props) {
          this.definitions = props.definitions;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A `const` statement"
      }, AST_Definitions);
      var AST_VarDef = DEFNODE("VarDef", "name value", function AST_VarDef2(props) {
        if (props) {
          this.name = props.name;
          this.value = props.value;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A variable declaration; only appears in a AST_Definitions node",
        $propdoc: {
          name: "[AST_Destructuring|AST_SymbolConst|AST_SymbolLet|AST_SymbolVar] name of the variable",
          value: "[AST_Node?] initializer, or null of there's no initializer"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.name._walk(visitor);
            if (this.value)
              this.value._walk(visitor);
          });
        },
        _children_backwards(push2) {
          if (this.value)
            push2(this.value);
          push2(this.name);
        },
        declarations_as_names() {
          if (this.name instanceof AST_SymbolDeclaration) {
            return [this];
          } else {
            return this.name.all_symbols();
          }
        }
      });
      var AST_NameMapping = DEFNODE("NameMapping", "foreign_name name", function AST_NameMapping2(props) {
        if (props) {
          this.foreign_name = props.foreign_name;
          this.name = props.name;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "The part of the export/import statement that declare names from a module.",
        $propdoc: {
          foreign_name: "[AST_SymbolExportForeign|AST_SymbolImportForeign] The name being exported/imported (as specified in the module)",
          name: "[AST_SymbolExport|AST_SymbolImport] The name as it is visible to this module."
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.foreign_name._walk(visitor);
            this.name._walk(visitor);
          });
        },
        _children_backwards(push2) {
          push2(this.name);
          push2(this.foreign_name);
        }
      });
      var AST_Import = DEFNODE(
        "Import",
        "imported_name imported_names module_name assert_clause",
        function AST_Import2(props) {
          if (props) {
            this.imported_name = props.imported_name;
            this.imported_names = props.imported_names;
            this.module_name = props.module_name;
            this.assert_clause = props.assert_clause;
            this.start = props.start;
            this.end = props.end;
          }
          this.flags = 0;
        },
        {
          $documentation: "An `import` statement",
          $propdoc: {
            imported_name: "[AST_SymbolImport] The name of the variable holding the module's default export.",
            imported_names: "[AST_NameMapping*] The names of non-default imported variables",
            module_name: "[AST_String] String literal describing where this module came from",
            assert_clause: "[AST_Object?] The import assertion"
          },
          _walk: function(visitor) {
            return visitor._visit(this, function() {
              if (this.imported_name) {
                this.imported_name._walk(visitor);
              }
              if (this.imported_names) {
                this.imported_names.forEach(function(name_import) {
                  name_import._walk(visitor);
                });
              }
              this.module_name._walk(visitor);
            });
          },
          _children_backwards(push2) {
            push2(this.module_name);
            if (this.imported_names) {
              let i = this.imported_names.length;
              while (i--)
                push2(this.imported_names[i]);
            }
            if (this.imported_name)
              push2(this.imported_name);
          }
        }
      );
      var AST_ImportMeta = DEFNODE("ImportMeta", null, function AST_ImportMeta2(props) {
        if (props) {
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A reference to import.meta"
      });
      var AST_Export = DEFNODE(
        "Export",
        "exported_definition exported_value is_default exported_names module_name assert_clause",
        function AST_Export2(props) {
          if (props) {
            this.exported_definition = props.exported_definition;
            this.exported_value = props.exported_value;
            this.is_default = props.is_default;
            this.exported_names = props.exported_names;
            this.module_name = props.module_name;
            this.assert_clause = props.assert_clause;
            this.start = props.start;
            this.end = props.end;
          }
          this.flags = 0;
        },
        {
          $documentation: "An `export` statement",
          $propdoc: {
            exported_definition: "[AST_Defun|AST_Definitions|AST_DefClass?] An exported definition",
            exported_value: "[AST_Node?] An exported value",
            exported_names: "[AST_NameMapping*?] List of exported names",
            module_name: "[AST_String?] Name of the file to load exports from",
            is_default: "[Boolean] Whether this is the default exported value of this module",
            assert_clause: "[AST_Object?] The import assertion"
          },
          _walk: function(visitor) {
            return visitor._visit(this, function() {
              if (this.exported_definition) {
                this.exported_definition._walk(visitor);
              }
              if (this.exported_value) {
                this.exported_value._walk(visitor);
              }
              if (this.exported_names) {
                this.exported_names.forEach(function(name_export) {
                  name_export._walk(visitor);
                });
              }
              if (this.module_name) {
                this.module_name._walk(visitor);
              }
            });
          },
          _children_backwards(push2) {
            if (this.module_name)
              push2(this.module_name);
            if (this.exported_names) {
              let i = this.exported_names.length;
              while (i--)
                push2(this.exported_names[i]);
            }
            if (this.exported_value)
              push2(this.exported_value);
            if (this.exported_definition)
              push2(this.exported_definition);
          }
        },
        AST_Statement
      );
      var AST_Call = DEFNODE(
        "Call",
        "expression args optional _annotations",
        function AST_Call2(props) {
          if (props) {
            this.expression = props.expression;
            this.args = props.args;
            this.optional = props.optional;
            this._annotations = props._annotations;
            this.start = props.start;
            this.end = props.end;
            this.initialize();
          }
          this.flags = 0;
        },
        {
          $documentation: "A function call expression",
          $propdoc: {
            expression: "[AST_Node] expression to invoke as function",
            args: "[AST_Node*] array of arguments",
            optional: "[boolean] whether this is an optional call (IE ?.() )",
            _annotations: "[number] bitfield containing information about the call"
          },
          initialize() {
            if (this._annotations == null)
              this._annotations = 0;
          },
          _walk(visitor) {
            return visitor._visit(this, function() {
              var args = this.args;
              for (var i = 0, len = args.length; i < len; i++) {
                args[i]._walk(visitor);
              }
              this.expression._walk(visitor);
            });
          },
          _children_backwards(push2) {
            let i = this.args.length;
            while (i--)
              push2(this.args[i]);
            push2(this.expression);
          }
        }
      );
      var AST_New = DEFNODE("New", null, function AST_New2(props) {
        if (props) {
          this.expression = props.expression;
          this.args = props.args;
          this.optional = props.optional;
          this._annotations = props._annotations;
          this.start = props.start;
          this.end = props.end;
          this.initialize();
        }
        this.flags = 0;
      }, {
        $documentation: "An object instantiation.  Derives from a function call since it has exactly the same properties"
      }, AST_Call);
      var AST_Sequence = DEFNODE("Sequence", "expressions", function AST_Sequence2(props) {
        if (props) {
          this.expressions = props.expressions;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A sequence expression (comma-separated expressions)",
        $propdoc: {
          expressions: "[AST_Node*] array of expressions (at least two)"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.expressions.forEach(function(node) {
              node._walk(visitor);
            });
          });
        },
        _children_backwards(push2) {
          let i = this.expressions.length;
          while (i--)
            push2(this.expressions[i]);
        }
      });
      var AST_PropAccess = DEFNODE(
        "PropAccess",
        "expression property optional",
        function AST_PropAccess2(props) {
          if (props) {
            this.expression = props.expression;
            this.property = props.property;
            this.optional = props.optional;
            this.start = props.start;
            this.end = props.end;
          }
          this.flags = 0;
        },
        {
          $documentation: 'Base class for property access expressions, i.e. `a.foo` or `a["foo"]`',
          $propdoc: {
            expression: "[AST_Node] the “container” expression",
            property: "[AST_Node|string] the property to access.  For AST_Dot & AST_DotHash this is always a plain string, while for AST_Sub it's an arbitrary AST_Node",
            optional: "[boolean] whether this is an optional property access (IE ?.)"
          }
        }
      );
      var AST_Dot = DEFNODE("Dot", "quote", function AST_Dot2(props) {
        if (props) {
          this.quote = props.quote;
          this.expression = props.expression;
          this.property = props.property;
          this.optional = props.optional;
          this._annotations = props._annotations;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A dotted property access expression",
        $propdoc: {
          quote: "[string] the original quote character when transformed from AST_Sub"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.expression._walk(visitor);
          });
        },
        _children_backwards(push2) {
          push2(this.expression);
        }
      }, AST_PropAccess);
      var AST_DotHash = DEFNODE("DotHash", "", function AST_DotHash2(props) {
        if (props) {
          this.expression = props.expression;
          this.property = props.property;
          this.optional = props.optional;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A dotted property access to a private property",
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.expression._walk(visitor);
          });
        },
        _children_backwards(push2) {
          push2(this.expression);
        }
      }, AST_PropAccess);
      var AST_Sub = DEFNODE("Sub", null, function AST_Sub2(props) {
        if (props) {
          this.expression = props.expression;
          this.property = props.property;
          this.optional = props.optional;
          this._annotations = props._annotations;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: 'Index-style property access, i.e. `a["foo"]`',
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.expression._walk(visitor);
            this.property._walk(visitor);
          });
        },
        _children_backwards(push2) {
          push2(this.property);
          push2(this.expression);
        }
      }, AST_PropAccess);
      var AST_Chain = DEFNODE("Chain", "expression", function AST_Chain2(props) {
        if (props) {
          this.expression = props.expression;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A chain expression like a?.b?.(c)?.[d]",
        $propdoc: {
          expression: "[AST_Call|AST_Dot|AST_DotHash|AST_Sub] chain element."
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.expression._walk(visitor);
          });
        },
        _children_backwards(push2) {
          push2(this.expression);
        }
      });
      var AST_Unary = DEFNODE("Unary", "operator expression", function AST_Unary2(props) {
        if (props) {
          this.operator = props.operator;
          this.expression = props.expression;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Base class for unary expressions",
        $propdoc: {
          operator: "[string] the operator",
          expression: "[AST_Node] expression that this unary operator applies to"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.expression._walk(visitor);
          });
        },
        _children_backwards(push2) {
          push2(this.expression);
        }
      });
      var AST_UnaryPrefix = DEFNODE("UnaryPrefix", null, function AST_UnaryPrefix2(props) {
        if (props) {
          this.operator = props.operator;
          this.expression = props.expression;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Unary prefix expression, i.e. `typeof i` or `++i`"
      }, AST_Unary);
      var AST_UnaryPostfix = DEFNODE("UnaryPostfix", null, function AST_UnaryPostfix2(props) {
        if (props) {
          this.operator = props.operator;
          this.expression = props.expression;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Unary postfix expression, i.e. `i++`"
      }, AST_Unary);
      var AST_Binary = DEFNODE("Binary", "operator left right", function AST_Binary2(props) {
        if (props) {
          this.operator = props.operator;
          this.left = props.left;
          this.right = props.right;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Binary expression, i.e. `a + b`",
        $propdoc: {
          left: "[AST_Node] left-hand side expression",
          operator: "[string] the operator",
          right: "[AST_Node] right-hand side expression"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.left._walk(visitor);
            this.right._walk(visitor);
          });
        },
        _children_backwards(push2) {
          push2(this.right);
          push2(this.left);
        }
      });
      var AST_Conditional = DEFNODE(
        "Conditional",
        "condition consequent alternative",
        function AST_Conditional2(props) {
          if (props) {
            this.condition = props.condition;
            this.consequent = props.consequent;
            this.alternative = props.alternative;
            this.start = props.start;
            this.end = props.end;
          }
          this.flags = 0;
        },
        {
          $documentation: "Conditional expression using the ternary operator, i.e. `a ? b : c`",
          $propdoc: {
            condition: "[AST_Node]",
            consequent: "[AST_Node]",
            alternative: "[AST_Node]"
          },
          _walk: function(visitor) {
            return visitor._visit(this, function() {
              this.condition._walk(visitor);
              this.consequent._walk(visitor);
              this.alternative._walk(visitor);
            });
          },
          _children_backwards(push2) {
            push2(this.alternative);
            push2(this.consequent);
            push2(this.condition);
          }
        }
      );
      var AST_Assign = DEFNODE("Assign", "logical", function AST_Assign2(props) {
        if (props) {
          this.logical = props.logical;
          this.operator = props.operator;
          this.left = props.left;
          this.right = props.right;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "An assignment expression — `a = b + 5`",
        $propdoc: {
          logical: "Whether it's a logical assignment"
        }
      }, AST_Binary);
      var AST_DefaultAssign = DEFNODE("DefaultAssign", null, function AST_DefaultAssign2(props) {
        if (props) {
          this.operator = props.operator;
          this.left = props.left;
          this.right = props.right;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A default assignment expression like in `(a = 3) => a`"
      }, AST_Binary);
      var AST_Array = DEFNODE("Array", "elements", function AST_Array2(props) {
        if (props) {
          this.elements = props.elements;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "An array literal",
        $propdoc: {
          elements: "[AST_Node*] array of elements"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            var elements = this.elements;
            for (var i = 0, len = elements.length; i < len; i++) {
              elements[i]._walk(visitor);
            }
          });
        },
        _children_backwards(push2) {
          let i = this.elements.length;
          while (i--)
            push2(this.elements[i]);
        }
      });
      var AST_Object = DEFNODE("Object", "properties", function AST_Object2(props) {
        if (props) {
          this.properties = props.properties;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "An object literal",
        $propdoc: {
          properties: "[AST_ObjectProperty*] array of properties"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            var properties = this.properties;
            for (var i = 0, len = properties.length; i < len; i++) {
              properties[i]._walk(visitor);
            }
          });
        },
        _children_backwards(push2) {
          let i = this.properties.length;
          while (i--)
            push2(this.properties[i]);
        }
      });
      var AST_ObjectProperty = DEFNODE("ObjectProperty", "key value", function AST_ObjectProperty2(props) {
        if (props) {
          this.key = props.key;
          this.value = props.value;
          this.start = props.start;
          this.end = props.end;
          this._annotations = props._annotations;
        }
        this.flags = 0;
      }, {
        $documentation: "Base class for literal object properties",
        $propdoc: {
          key: "[string|AST_Node] property name. For ObjectKeyVal this is a string. For getters, setters and computed property this is an AST_Node.",
          value: "[AST_Node] property value.  For getters and setters this is an AST_Accessor."
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            if (this.key instanceof AST_Node)
              this.key._walk(visitor);
            this.value._walk(visitor);
          });
        },
        _children_backwards(push2) {
          push2(this.value);
          if (this.key instanceof AST_Node)
            push2(this.key);
        }
      });
      var AST_ObjectKeyVal = DEFNODE("ObjectKeyVal", "quote", function AST_ObjectKeyVal2(props) {
        if (props) {
          this.quote = props.quote;
          this.key = props.key;
          this.value = props.value;
          this.start = props.start;
          this.end = props.end;
          this._annotations = props._annotations;
        }
        this.flags = 0;
      }, {
        $documentation: "A key: value object property",
        $propdoc: {
          quote: "[string] the original quote character"
        },
        computed_key() {
          return this.key instanceof AST_Node;
        }
      }, AST_ObjectProperty);
      var AST_PrivateSetter = DEFNODE("PrivateSetter", "static", function AST_PrivateSetter2(props) {
        if (props) {
          this.static = props.static;
          this.key = props.key;
          this.value = props.value;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $propdoc: {
          static: "[boolean] whether this is a static private setter"
        },
        $documentation: "A private setter property",
        computed_key() {
          return false;
        }
      }, AST_ObjectProperty);
      var AST_PrivateGetter = DEFNODE("PrivateGetter", "static", function AST_PrivateGetter2(props) {
        if (props) {
          this.static = props.static;
          this.key = props.key;
          this.value = props.value;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $propdoc: {
          static: "[boolean] whether this is a static private getter"
        },
        $documentation: "A private getter property",
        computed_key() {
          return false;
        }
      }, AST_ObjectProperty);
      var AST_ObjectSetter = DEFNODE("ObjectSetter", "quote static", function AST_ObjectSetter2(props) {
        if (props) {
          this.quote = props.quote;
          this.static = props.static;
          this.key = props.key;
          this.value = props.value;
          this.start = props.start;
          this.end = props.end;
          this._annotations = props._annotations;
        }
        this.flags = 0;
      }, {
        $propdoc: {
          quote: "[string|undefined] the original quote character, if any",
          static: "[boolean] whether this is a static setter (classes only)"
        },
        $documentation: "An object setter property",
        computed_key() {
          return !(this.key instanceof AST_SymbolMethod);
        }
      }, AST_ObjectProperty);
      var AST_ObjectGetter = DEFNODE("ObjectGetter", "quote static", function AST_ObjectGetter2(props) {
        if (props) {
          this.quote = props.quote;
          this.static = props.static;
          this.key = props.key;
          this.value = props.value;
          this.start = props.start;
          this.end = props.end;
          this._annotations = props._annotations;
        }
        this.flags = 0;
      }, {
        $propdoc: {
          quote: "[string|undefined] the original quote character, if any",
          static: "[boolean] whether this is a static getter (classes only)"
        },
        $documentation: "An object getter property",
        computed_key() {
          return !(this.key instanceof AST_SymbolMethod);
        }
      }, AST_ObjectProperty);
      var AST_ConciseMethod = DEFNODE(
        "ConciseMethod",
        "quote static is_generator async",
        function AST_ConciseMethod2(props) {
          if (props) {
            this.quote = props.quote;
            this.static = props.static;
            this.is_generator = props.is_generator;
            this.async = props.async;
            this.key = props.key;
            this.value = props.value;
            this.start = props.start;
            this.end = props.end;
            this._annotations = props._annotations;
          }
          this.flags = 0;
        },
        {
          $propdoc: {
            quote: "[string|undefined] the original quote character, if any",
            static: "[boolean] is this method static (classes only)",
            is_generator: "[boolean] is this a generator method",
            async: "[boolean] is this method async"
          },
          $documentation: "An ES6 concise method inside an object or class",
          computed_key() {
            return !(this.key instanceof AST_SymbolMethod);
          }
        },
        AST_ObjectProperty
      );
      var AST_PrivateMethod = DEFNODE("PrivateMethod", "", function AST_PrivateMethod2(props) {
        if (props) {
          this.quote = props.quote;
          this.static = props.static;
          this.is_generator = props.is_generator;
          this.async = props.async;
          this.key = props.key;
          this.value = props.value;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A private class method inside a class"
      }, AST_ConciseMethod);
      var AST_Class = DEFNODE(
        "Class",
        "name extends properties",
        function AST_Class2(props) {
          if (props) {
            this.name = props.name;
            this.extends = props.extends;
            this.properties = props.properties;
            this.variables = props.variables;
            this.uses_with = props.uses_with;
            this.uses_eval = props.uses_eval;
            this.parent_scope = props.parent_scope;
            this.enclosed = props.enclosed;
            this.cname = props.cname;
            this.body = props.body;
            this.block_scope = props.block_scope;
            this.start = props.start;
            this.end = props.end;
          }
          this.flags = 0;
        },
        {
          $propdoc: {
            name: "[AST_SymbolClass|AST_SymbolDefClass?] optional class name.",
            extends: "[AST_Node]? optional parent class",
            properties: "[AST_ObjectProperty*] array of properties"
          },
          $documentation: "An ES6 class",
          _walk: function(visitor) {
            return visitor._visit(this, function() {
              if (this.name) {
                this.name._walk(visitor);
              }
              if (this.extends) {
                this.extends._walk(visitor);
              }
              this.properties.forEach((prop) => prop._walk(visitor));
            });
          },
          _children_backwards(push2) {
            let i = this.properties.length;
            while (i--)
              push2(this.properties[i]);
            if (this.extends)
              push2(this.extends);
            if (this.name)
              push2(this.name);
          },
          /** go through the bits that are executed instantly, not when the class is `new`'d. Doesn't walk the name. */
          visit_nondeferred_class_parts(visitor) {
            if (this.extends) {
              this.extends._walk(visitor);
            }
            this.properties.forEach((prop) => {
              if (prop instanceof AST_ClassStaticBlock) {
                prop._walk(visitor);
                return;
              }
              if (prop.computed_key()) {
                visitor.push(prop);
                prop.key._walk(visitor);
                visitor.pop();
              }
              if ((prop instanceof AST_ClassPrivateProperty || prop instanceof AST_ClassProperty) && prop.static && prop.value) {
                visitor.push(prop);
                prop.value._walk(visitor);
                visitor.pop();
              }
            });
          },
          /** go through the bits that are executed later, when the class is `new`'d or a static method is called */
          visit_deferred_class_parts(visitor) {
            this.properties.forEach((prop) => {
              if (prop instanceof AST_ConciseMethod) {
                prop.walk(visitor);
              } else if (prop instanceof AST_ClassProperty && !prop.static && prop.value) {
                visitor.push(prop);
                prop.value._walk(visitor);
                visitor.pop();
              }
            });
          }
        },
        AST_Scope
        /* TODO a class might have a scope but it's not a scope */
      );
      var AST_ClassProperty = DEFNODE("ClassProperty", "static quote", function AST_ClassProperty2(props) {
        if (props) {
          this.static = props.static;
          this.quote = props.quote;
          this.key = props.key;
          this.value = props.value;
          this.start = props.start;
          this.end = props.end;
          this._annotations = props._annotations;
        }
        this.flags = 0;
      }, {
        $documentation: "A class property",
        $propdoc: {
          static: "[boolean] whether this is a static key",
          quote: "[string] which quote is being used"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            if (this.key instanceof AST_Node)
              this.key._walk(visitor);
            if (this.value instanceof AST_Node)
              this.value._walk(visitor);
          });
        },
        _children_backwards(push2) {
          if (this.value instanceof AST_Node)
            push2(this.value);
          if (this.key instanceof AST_Node)
            push2(this.key);
        },
        computed_key() {
          return !(this.key instanceof AST_SymbolClassProperty);
        }
      }, AST_ObjectProperty);
      var AST_ClassPrivateProperty = DEFNODE("ClassPrivateProperty", "", function AST_ClassPrivateProperty2(props) {
        if (props) {
          this.static = props.static;
          this.quote = props.quote;
          this.key = props.key;
          this.value = props.value;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A class property for a private property"
      }, AST_ClassProperty);
      var AST_PrivateIn = DEFNODE("PrivateIn", "key value", function AST_PrivateIn2(props) {
        if (props) {
          this.key = props.key;
          this.value = props.value;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "An `in` binop when the key is private, eg #x in this",
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            this.key._walk(visitor);
            this.value._walk(visitor);
          });
        },
        _children_backwards(push2) {
          push2(this.value);
          push2(this.key);
        }
      });
      var AST_DefClass = DEFNODE("DefClass", null, function AST_DefClass2(props) {
        if (props) {
          this.name = props.name;
          this.extends = props.extends;
          this.properties = props.properties;
          this.variables = props.variables;
          this.uses_with = props.uses_with;
          this.uses_eval = props.uses_eval;
          this.parent_scope = props.parent_scope;
          this.enclosed = props.enclosed;
          this.cname = props.cname;
          this.body = props.body;
          this.block_scope = props.block_scope;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A class definition"
      }, AST_Class);
      var AST_ClassStaticBlock = DEFNODE("ClassStaticBlock", "body block_scope", function AST_ClassStaticBlock2(props) {
        this.body = props.body;
        this.block_scope = props.block_scope;
        this.start = props.start;
        this.end = props.end;
      }, {
        $documentation: "A block containing statements to be executed in the context of the class",
        $propdoc: {
          body: "[AST_Statement*] an array of statements"
        },
        _walk: function(visitor) {
          return visitor._visit(this, function() {
            walk_body(this, visitor);
          });
        },
        _children_backwards(push2) {
          let i = this.body.length;
          while (i--)
            push2(this.body[i]);
        },
        clone: clone_block_scope,
        computed_key: () => false
      }, AST_Scope);
      var AST_ClassExpression = DEFNODE("ClassExpression", null, function AST_ClassExpression2(props) {
        if (props) {
          this.name = props.name;
          this.extends = props.extends;
          this.properties = props.properties;
          this.variables = props.variables;
          this.uses_with = props.uses_with;
          this.uses_eval = props.uses_eval;
          this.parent_scope = props.parent_scope;
          this.enclosed = props.enclosed;
          this.cname = props.cname;
          this.body = props.body;
          this.block_scope = props.block_scope;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A class expression."
      }, AST_Class);
      var AST_Symbol = DEFNODE("Symbol", "scope name thedef", function AST_Symbol2(props) {
        if (props) {
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $propdoc: {
          name: "[string] name of this symbol",
          scope: "[AST_Scope/S] the current scope (not necessarily the definition scope)",
          thedef: "[SymbolDef/S] the definition of this symbol"
        },
        $documentation: "Base class for all symbols"
      });
      var AST_NewTarget = DEFNODE("NewTarget", null, function AST_NewTarget2(props) {
        if (props) {
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A reference to new.target"
      });
      var AST_SymbolDeclaration = DEFNODE("SymbolDeclaration", "init", function AST_SymbolDeclaration2(props) {
        if (props) {
          this.init = props.init;
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A declaration symbol (symbol in var/const, function name or argument, symbol in catch)"
      }, AST_Symbol);
      var AST_SymbolVar = DEFNODE("SymbolVar", null, function AST_SymbolVar2(props) {
        if (props) {
          this.init = props.init;
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Symbol defining a variable"
      }, AST_SymbolDeclaration);
      var AST_SymbolBlockDeclaration = DEFNODE(
        "SymbolBlockDeclaration",
        null,
        function AST_SymbolBlockDeclaration2(props) {
          if (props) {
            this.init = props.init;
            this.scope = props.scope;
            this.name = props.name;
            this.thedef = props.thedef;
            this.start = props.start;
            this.end = props.end;
          }
          this.flags = 0;
        },
        {
          $documentation: "Base class for block-scoped declaration symbols"
        },
        AST_SymbolDeclaration
      );
      var AST_SymbolConst = DEFNODE("SymbolConst", null, function AST_SymbolConst2(props) {
        if (props) {
          this.init = props.init;
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A constant declaration"
      }, AST_SymbolBlockDeclaration);
      var AST_SymbolLet = DEFNODE("SymbolLet", null, function AST_SymbolLet2(props) {
        if (props) {
          this.init = props.init;
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A block-scoped `let` declaration"
      }, AST_SymbolBlockDeclaration);
      var AST_SymbolFunarg = DEFNODE("SymbolFunarg", null, function AST_SymbolFunarg2(props) {
        if (props) {
          this.init = props.init;
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Symbol naming a function argument"
      }, AST_SymbolVar);
      var AST_SymbolDefun = DEFNODE("SymbolDefun", null, function AST_SymbolDefun2(props) {
        if (props) {
          this.init = props.init;
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Symbol defining a function"
      }, AST_SymbolDeclaration);
      var AST_SymbolMethod = DEFNODE("SymbolMethod", null, function AST_SymbolMethod2(props) {
        if (props) {
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Symbol in an object defining a method"
      }, AST_Symbol);
      var AST_SymbolClassProperty = DEFNODE("SymbolClassProperty", null, function AST_SymbolClassProperty2(props) {
        if (props) {
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Symbol for a class property"
      }, AST_Symbol);
      var AST_SymbolLambda = DEFNODE("SymbolLambda", null, function AST_SymbolLambda2(props) {
        if (props) {
          this.init = props.init;
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Symbol naming a function expression"
      }, AST_SymbolDeclaration);
      var AST_SymbolDefClass = DEFNODE("SymbolDefClass", null, function AST_SymbolDefClass2(props) {
        if (props) {
          this.init = props.init;
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Symbol naming a class's name in a class declaration. Lexically scoped to its containing scope, and accessible within the class."
      }, AST_SymbolBlockDeclaration);
      var AST_SymbolClass = DEFNODE("SymbolClass", null, function AST_SymbolClass2(props) {
        if (props) {
          this.init = props.init;
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Symbol naming a class's name. Lexically scoped to the class."
      }, AST_SymbolDeclaration);
      var AST_SymbolCatch = DEFNODE("SymbolCatch", null, function AST_SymbolCatch2(props) {
        if (props) {
          this.init = props.init;
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Symbol naming the exception in catch"
      }, AST_SymbolBlockDeclaration);
      var AST_SymbolImport = DEFNODE("SymbolImport", null, function AST_SymbolImport2(props) {
        if (props) {
          this.init = props.init;
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Symbol referring to an imported name"
      }, AST_SymbolBlockDeclaration);
      var AST_SymbolImportForeign = DEFNODE("SymbolImportForeign", null, function AST_SymbolImportForeign2(props) {
        if (props) {
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.quote = props.quote;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A symbol imported from a module, but it is defined in the other module, and its real name is irrelevant for this module's purposes"
      }, AST_Symbol);
      var AST_Label = DEFNODE("Label", "references", function AST_Label2(props) {
        if (props) {
          this.references = props.references;
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.start = props.start;
          this.end = props.end;
          this.initialize();
        }
        this.flags = 0;
      }, {
        $documentation: "Symbol naming a label (declaration)",
        $propdoc: {
          references: "[AST_LoopControl*] a list of nodes referring to this label"
        },
        initialize: function() {
          this.references = [];
          this.thedef = this;
        }
      }, AST_Symbol);
      var AST_SymbolRef = DEFNODE("SymbolRef", null, function AST_SymbolRef2(props) {
        if (props) {
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Reference to some symbol (not definition/declaration)"
      }, AST_Symbol);
      var AST_SymbolExport = DEFNODE("SymbolExport", null, function AST_SymbolExport2(props) {
        if (props) {
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.quote = props.quote;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Symbol referring to a name to export"
      }, AST_SymbolRef);
      var AST_SymbolExportForeign = DEFNODE("SymbolExportForeign", null, function AST_SymbolExportForeign2(props) {
        if (props) {
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.quote = props.quote;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A symbol exported from this module, but it is used in the other module, and its real name is irrelevant for this module's purposes"
      }, AST_Symbol);
      var AST_LabelRef = DEFNODE("LabelRef", null, function AST_LabelRef2(props) {
        if (props) {
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Reference to a label symbol"
      }, AST_Symbol);
      var AST_SymbolPrivateProperty = DEFNODE("SymbolPrivateProperty", null, function AST_SymbolPrivateProperty2(props) {
        if (props) {
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A symbol that refers to a private property"
      }, AST_Symbol);
      var AST_This = DEFNODE("This", null, function AST_This2(props) {
        if (props) {
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "The `this` symbol"
      }, AST_Symbol);
      var AST_Super = DEFNODE("Super", null, function AST_Super2(props) {
        if (props) {
          this.scope = props.scope;
          this.name = props.name;
          this.thedef = props.thedef;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "The `super` symbol"
      }, AST_This);
      var AST_Constant = DEFNODE("Constant", null, function AST_Constant2(props) {
        if (props) {
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Base class for all constants",
        getValue: function() {
          return this.value;
        }
      });
      var AST_String = DEFNODE("String", "value quote", function AST_String2(props) {
        if (props) {
          this.value = props.value;
          this.quote = props.quote;
          this.start = props.start;
          this.end = props.end;
          this._annotations = props._annotations;
        }
        this.flags = 0;
      }, {
        $documentation: "A string literal",
        $propdoc: {
          value: "[string] the contents of this string",
          quote: "[string] the original quote character"
        }
      }, AST_Constant);
      var AST_Number = DEFNODE("Number", "value raw", function AST_Number2(props) {
        if (props) {
          this.value = props.value;
          this.raw = props.raw;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A number literal",
        $propdoc: {
          value: "[number] the numeric value",
          raw: "[string] numeric value as string"
        }
      }, AST_Constant);
      var AST_BigInt = DEFNODE("BigInt", "value", function AST_BigInt2(props) {
        if (props) {
          this.value = props.value;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A big int literal",
        $propdoc: {
          value: "[string] big int value"
        }
      }, AST_Constant);
      var AST_RegExp = DEFNODE("RegExp", "value", function AST_RegExp2(props) {
        if (props) {
          this.value = props.value;
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A regexp literal",
        $propdoc: {
          value: "[RegExp] the actual regexp"
        }
      }, AST_Constant);
      var AST_Atom = DEFNODE("Atom", null, function AST_Atom2(props) {
        if (props) {
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Base class for atoms"
      }, AST_Constant);
      var AST_Null = DEFNODE("Null", null, function AST_Null2(props) {
        if (props) {
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "The `null` atom",
        value: null
      }, AST_Atom);
      var AST_NaN = DEFNODE("NaN", null, function AST_NaN2(props) {
        if (props) {
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "The impossible value",
        value: 0 / 0
      }, AST_Atom);
      var AST_Undefined = DEFNODE("Undefined", null, function AST_Undefined2(props) {
        if (props) {
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "The `undefined` value",
        value: /* @__PURE__ */ function() {
        }()
      }, AST_Atom);
      var AST_Hole = DEFNODE("Hole", null, function AST_Hole2(props) {
        if (props) {
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "A hole in an array",
        value: /* @__PURE__ */ function() {
        }()
      }, AST_Atom);
      var AST_Infinity = DEFNODE("Infinity", null, function AST_Infinity2(props) {
        if (props) {
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "The `Infinity` value",
        value: 1 / 0
      }, AST_Atom);
      var AST_Boolean = DEFNODE("Boolean", null, function AST_Boolean2(props) {
        if (props) {
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "Base class for booleans"
      }, AST_Atom);
      var AST_False = DEFNODE("False", null, function AST_False2(props) {
        if (props) {
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "The `false` atom",
        value: false
      }, AST_Boolean);
      var AST_True = DEFNODE("True", null, function AST_True2(props) {
        if (props) {
          this.start = props.start;
          this.end = props.end;
        }
        this.flags = 0;
      }, {
        $documentation: "The `true` atom",
        value: true
      }, AST_Boolean);
      function walk(node, cb, to_visit = [node]) {
        const push2 = to_visit.push.bind(to_visit);
        while (to_visit.length) {
          const node2 = to_visit.pop();
          const ret = cb(node2, to_visit);
          if (ret) {
            if (ret === walk_abort)
              return true;
            continue;
          }
          node2._children_backwards(push2);
        }
        return false;
      }
      function walk_parent(node, cb, initial_stack) {
        const to_visit = [node];
        const push2 = to_visit.push.bind(to_visit);
        const stack = initial_stack ? initial_stack.slice() : [];
        const parent_pop_indices = [];
        let current;
        const info = {
          parent: (n2 = 0) => {
            if (n2 === -1) {
              return current;
            }
            if (initial_stack && n2 >= stack.length) {
              n2 -= stack.length;
              return initial_stack[initial_stack.length - (n2 + 1)];
            }
            return stack[stack.length - (1 + n2)];
          }
        };
        while (to_visit.length) {
          current = to_visit.pop();
          while (parent_pop_indices.length && to_visit.length == parent_pop_indices[parent_pop_indices.length - 1]) {
            stack.pop();
            parent_pop_indices.pop();
          }
          const ret = cb(current, info);
          if (ret) {
            if (ret === walk_abort)
              return true;
            continue;
          }
          const visit_length = to_visit.length;
          current._children_backwards(push2);
          if (to_visit.length > visit_length) {
            stack.push(current);
            parent_pop_indices.push(visit_length - 1);
          }
        }
        return false;
      }
      const walk_abort = Symbol("abort walk");
      class TreeWalker {
        constructor(callback) {
          this.visit = callback;
          this.stack = [];
          this.directives = /* @__PURE__ */ Object.create(null);
        }
        _visit(node, descend) {
          this.push(node);
          var ret = this.visit(node, descend ? function() {
            descend.call(node);
          } : noop);
          if (!ret && descend) {
            descend.call(node);
          }
          this.pop();
          return ret;
        }
        parent(n2) {
          return this.stack[this.stack.length - 2 - (n2 || 0)];
        }
        push(node) {
          if (node instanceof AST_Lambda) {
            this.directives = Object.create(this.directives);
          } else if (node instanceof AST_Directive && !this.directives[node.value]) {
            this.directives[node.value] = node;
          } else if (node instanceof AST_Class) {
            this.directives = Object.create(this.directives);
            if (!this.directives["use strict"]) {
              this.directives["use strict"] = node;
            }
          }
          this.stack.push(node);
        }
        pop() {
          var node = this.stack.pop();
          if (node instanceof AST_Lambda || node instanceof AST_Class) {
            this.directives = Object.getPrototypeOf(this.directives);
          }
        }
        self() {
          return this.stack[this.stack.length - 1];
        }
        find_parent(type) {
          var stack = this.stack;
          for (var i = stack.length; --i >= 0; ) {
            var x = stack[i];
            if (x instanceof type)
              return x;
          }
        }
        find_scope() {
          var stack = this.stack;
          for (var i = stack.length; --i >= 0; ) {
            const p2 = stack[i];
            if (p2 instanceof AST_Toplevel)
              return p2;
            if (p2 instanceof AST_Lambda)
              return p2;
            if (p2.block_scope)
              return p2.block_scope;
          }
        }
        has_directive(type) {
          var dir = this.directives[type];
          if (dir)
            return dir;
          var node = this.stack[this.stack.length - 1];
          if (node instanceof AST_Scope && node.body) {
            for (var i = 0; i < node.body.length; ++i) {
              var st = node.body[i];
              if (!(st instanceof AST_Directive))
                break;
              if (st.value == type)
                return st;
            }
          }
        }
        loopcontrol_target(node) {
          var stack = this.stack;
          if (node.label)
            for (var i = stack.length; --i >= 0; ) {
              var x = stack[i];
              if (x instanceof AST_LabeledStatement && x.label.name == node.label.name)
                return x.body;
            }
          else
            for (var i = stack.length; --i >= 0; ) {
              var x = stack[i];
              if (x instanceof AST_IterationStatement || node instanceof AST_Break && x instanceof AST_Switch)
                return x;
            }
        }
      }
      class TreeTransformer extends TreeWalker {
        constructor(before, after) {
          super();
          this.before = before;
          this.after = after;
        }
      }
      const _PURE = 1;
      const _INLINE = 2;
      const _NOINLINE = 4;
      const _KEY = 8;
      const _MANGLEPROP = 16;
      function def_transform(node, descend) {
        node.DEFMETHOD("transform", function(tw, in_list) {
          let transformed = void 0;
          tw.push(this);
          if (tw.before)
            transformed = tw.before(this, descend, in_list);
          if (transformed === void 0) {
            transformed = this;
            descend(transformed, tw);
            if (tw.after) {
              const after_ret = tw.after(transformed, in_list);
              if (after_ret !== void 0)
                transformed = after_ret;
            }
          }
          tw.pop();
          return transformed;
        });
      }
      def_transform(AST_Node, noop);
      def_transform(AST_LabeledStatement, function(self2, tw) {
        self2.label = self2.label.transform(tw);
        self2.body = self2.body.transform(tw);
      });
      def_transform(AST_SimpleStatement, function(self2, tw) {
        self2.body = self2.body.transform(tw);
      });
      def_transform(AST_Block, function(self2, tw) {
        self2.body = MAP(self2.body, tw);
      });
      def_transform(AST_Do, function(self2, tw) {
        self2.body = self2.body.transform(tw);
        self2.condition = self2.condition.transform(tw);
      });
      def_transform(AST_While, function(self2, tw) {
        self2.condition = self2.condition.transform(tw);
        self2.body = self2.body.transform(tw);
      });
      def_transform(AST_For, function(self2, tw) {
        if (self2.init)
          self2.init = self2.init.transform(tw);
        if (self2.condition)
          self2.condition = self2.condition.transform(tw);
        if (self2.step)
          self2.step = self2.step.transform(tw);
        self2.body = self2.body.transform(tw);
      });
      def_transform(AST_ForIn, function(self2, tw) {
        self2.init = self2.init.transform(tw);
        self2.object = self2.object.transform(tw);
        self2.body = self2.body.transform(tw);
      });
      def_transform(AST_With, function(self2, tw) {
        self2.expression = self2.expression.transform(tw);
        self2.body = self2.body.transform(tw);
      });
      def_transform(AST_Exit, function(self2, tw) {
        if (self2.value)
          self2.value = self2.value.transform(tw);
      });
      def_transform(AST_LoopControl, function(self2, tw) {
        if (self2.label)
          self2.label = self2.label.transform(tw);
      });
      def_transform(AST_If, function(self2, tw) {
        self2.condition = self2.condition.transform(tw);
        self2.body = self2.body.transform(tw);
        if (self2.alternative)
          self2.alternative = self2.alternative.transform(tw);
      });
      def_transform(AST_Switch, function(self2, tw) {
        self2.expression = self2.expression.transform(tw);
        self2.body = MAP(self2.body, tw);
      });
      def_transform(AST_Case, function(self2, tw) {
        self2.expression = self2.expression.transform(tw);
        self2.body = MAP(self2.body, tw);
      });
      def_transform(AST_Try, function(self2, tw) {
        self2.body = self2.body.transform(tw);
        if (self2.bcatch)
          self2.bcatch = self2.bcatch.transform(tw);
        if (self2.bfinally)
          self2.bfinally = self2.bfinally.transform(tw);
      });
      def_transform(AST_Catch, function(self2, tw) {
        if (self2.argname)
          self2.argname = self2.argname.transform(tw);
        self2.body = MAP(self2.body, tw);
      });
      def_transform(AST_Definitions, function(self2, tw) {
        self2.definitions = MAP(self2.definitions, tw);
      });
      def_transform(AST_VarDef, function(self2, tw) {
        self2.name = self2.name.transform(tw);
        if (self2.value)
          self2.value = self2.value.transform(tw);
      });
      def_transform(AST_Destructuring, function(self2, tw) {
        self2.names = MAP(self2.names, tw);
      });
      def_transform(AST_Lambda, function(self2, tw) {
        if (self2.name)
          self2.name = self2.name.transform(tw);
        self2.argnames = MAP(
          self2.argnames,
          tw,
          /* allow_splicing */
          false
        );
        if (self2.body instanceof AST_Node) {
          self2.body = self2.body.transform(tw);
        } else {
          self2.body = MAP(self2.body, tw);
        }
      });
      def_transform(AST_Call, function(self2, tw) {
        self2.expression = self2.expression.transform(tw);
        self2.args = MAP(
          self2.args,
          tw,
          /* allow_splicing */
          false
        );
      });
      def_transform(AST_Sequence, function(self2, tw) {
        const result = MAP(self2.expressions, tw);
        self2.expressions = result.length ? result : [new AST_Number({ value: 0 })];
      });
      def_transform(AST_PropAccess, function(self2, tw) {
        self2.expression = self2.expression.transform(tw);
      });
      def_transform(AST_Sub, function(self2, tw) {
        self2.expression = self2.expression.transform(tw);
        self2.property = self2.property.transform(tw);
      });
      def_transform(AST_Chain, function(self2, tw) {
        self2.expression = self2.expression.transform(tw);
      });
      def_transform(AST_Yield, function(self2, tw) {
        if (self2.expression)
          self2.expression = self2.expression.transform(tw);
      });
      def_transform(AST_Await, function(self2, tw) {
        self2.expression = self2.expression.transform(tw);
      });
      def_transform(AST_Unary, function(self2, tw) {
        self2.expression = self2.expression.transform(tw);
      });
      def_transform(AST_Binary, function(self2, tw) {
        self2.left = self2.left.transform(tw);
        self2.right = self2.right.transform(tw);
      });
      def_transform(AST_PrivateIn, function(self2, tw) {
        self2.key = self2.key.transform(tw);
        self2.value = self2.value.transform(tw);
      });
      def_transform(AST_Conditional, function(self2, tw) {
        self2.condition = self2.condition.transform(tw);
        self2.consequent = self2.consequent.transform(tw);
        self2.alternative = self2.alternative.transform(tw);
      });
      def_transform(AST_Array, function(self2, tw) {
        self2.elements = MAP(self2.elements, tw);
      });
      def_transform(AST_Object, function(self2, tw) {
        self2.properties = MAP(self2.properties, tw);
      });
      def_transform(AST_ObjectProperty, function(self2, tw) {
        if (self2.key instanceof AST_Node) {
          self2.key = self2.key.transform(tw);
        }
        if (self2.value)
          self2.value = self2.value.transform(tw);
      });
      def_transform(AST_Class, function(self2, tw) {
        if (self2.name)
          self2.name = self2.name.transform(tw);
        if (self2.extends)
          self2.extends = self2.extends.transform(tw);
        self2.properties = MAP(self2.properties, tw);
      });
      def_transform(AST_ClassStaticBlock, function(self2, tw) {
        self2.body = MAP(self2.body, tw);
      });
      def_transform(AST_Expansion, function(self2, tw) {
        self2.expression = self2.expression.transform(tw);
      });
      def_transform(AST_NameMapping, function(self2, tw) {
        self2.foreign_name = self2.foreign_name.transform(tw);
        self2.name = self2.name.transform(tw);
      });
      def_transform(AST_Import, function(self2, tw) {
        if (self2.imported_name)
          self2.imported_name = self2.imported_name.transform(tw);
        if (self2.imported_names)
          MAP(self2.imported_names, tw);
        self2.module_name = self2.module_name.transform(tw);
      });
      def_transform(AST_Export, function(self2, tw) {
        if (self2.exported_definition)
          self2.exported_definition = self2.exported_definition.transform(tw);
        if (self2.exported_value)
          self2.exported_value = self2.exported_value.transform(tw);
        if (self2.exported_names)
          MAP(self2.exported_names, tw);
        if (self2.module_name)
          self2.module_name = self2.module_name.transform(tw);
      });
      def_transform(AST_TemplateString, function(self2, tw) {
        self2.segments = MAP(self2.segments, tw);
      });
      def_transform(AST_PrefixedTemplateString, function(self2, tw) {
        self2.prefix = self2.prefix.transform(tw);
        self2.template_string = self2.template_string.transform(tw);
      });
      (function() {
        var normalize_directives = function(body) {
          for (var i = 0; i < body.length; i++) {
            if (body[i] instanceof AST_Statement && body[i].body instanceof AST_String) {
              body[i] = new AST_Directive({
                start: body[i].start,
                end: body[i].end,
                value: body[i].body.value
              });
            } else {
              return body;
            }
          }
          return body;
        };
        const assert_clause_from_moz = (assertions) => {
          if (assertions && assertions.length > 0) {
            return new AST_Object({
              start: my_start_token(assertions),
              end: my_end_token(assertions),
              properties: assertions.map(
                (assertion_kv) => new AST_ObjectKeyVal({
                  start: my_start_token(assertion_kv),
                  end: my_end_token(assertion_kv),
                  key: assertion_kv.key.name || assertion_kv.key.value,
                  value: from_moz(assertion_kv.value)
                })
              )
            });
          }
          return null;
        };
        var MOZ_TO_ME = {
          Program: function(M) {
            return new AST_Toplevel({
              start: my_start_token(M),
              end: my_end_token(M),
              body: normalize_directives(M.body.map(from_moz))
            });
          },
          ArrayPattern: function(M) {
            return new AST_Destructuring({
              start: my_start_token(M),
              end: my_end_token(M),
              names: M.elements.map(function(elm) {
                if (elm === null) {
                  return new AST_Hole();
                }
                return from_moz(elm);
              }),
              is_array: true
            });
          },
          ObjectPattern: function(M) {
            return new AST_Destructuring({
              start: my_start_token(M),
              end: my_end_token(M),
              names: M.properties.map(from_moz),
              is_array: false
            });
          },
          AssignmentPattern: function(M) {
            return new AST_DefaultAssign({
              start: my_start_token(M),
              end: my_end_token(M),
              left: from_moz(M.left),
              operator: "=",
              right: from_moz(M.right)
            });
          },
          SpreadElement: function(M) {
            return new AST_Expansion({
              start: my_start_token(M),
              end: my_end_token(M),
              expression: from_moz(M.argument)
            });
          },
          RestElement: function(M) {
            return new AST_Expansion({
              start: my_start_token(M),
              end: my_end_token(M),
              expression: from_moz(M.argument)
            });
          },
          TemplateElement: function(M) {
            return new AST_TemplateSegment({
              start: my_start_token(M),
              end: my_end_token(M),
              value: M.value.cooked,
              raw: M.value.raw
            });
          },
          TemplateLiteral: function(M) {
            var segments = [];
            for (var i = 0; i < M.quasis.length; i++) {
              segments.push(from_moz(M.quasis[i]));
              if (M.expressions[i]) {
                segments.push(from_moz(M.expressions[i]));
              }
            }
            return new AST_TemplateString({
              start: my_start_token(M),
              end: my_end_token(M),
              segments
            });
          },
          TaggedTemplateExpression: function(M) {
            return new AST_PrefixedTemplateString({
              start: my_start_token(M),
              end: my_end_token(M),
              template_string: from_moz(M.quasi),
              prefix: from_moz(M.tag)
            });
          },
          FunctionDeclaration: function(M) {
            return new AST_Defun({
              start: my_start_token(M),
              end: my_end_token(M),
              name: from_moz(M.id),
              argnames: M.params.map(from_moz),
              is_generator: M.generator,
              async: M.async,
              body: normalize_directives(from_moz(M.body).body)
            });
          },
          FunctionExpression: function(M) {
            return new AST_Function({
              start: my_start_token(M),
              end: my_end_token(M),
              name: from_moz(M.id),
              argnames: M.params.map(from_moz),
              is_generator: M.generator,
              async: M.async,
              body: normalize_directives(from_moz(M.body).body)
            });
          },
          ArrowFunctionExpression: function(M) {
            const body = M.body.type === "BlockStatement" ? from_moz(M.body).body : [make_node(AST_Return, {}, { value: from_moz(M.body) })];
            return new AST_Arrow({
              start: my_start_token(M),
              end: my_end_token(M),
              argnames: M.params.map(from_moz),
              body,
              async: M.async
            });
          },
          ExpressionStatement: function(M) {
            return new AST_SimpleStatement({
              start: my_start_token(M),
              end: my_end_token(M),
              body: from_moz(M.expression)
            });
          },
          TryStatement: function(M) {
            var handlers = M.handlers || [M.handler];
            if (handlers.length > 1 || M.guardedHandlers && M.guardedHandlers.length) {
              throw new Error("Multiple catch clauses are not supported.");
            }
            return new AST_Try({
              start: my_start_token(M),
              end: my_end_token(M),
              body: new AST_TryBlock(from_moz(M.block)),
              bcatch: from_moz(handlers[0]),
              bfinally: M.finalizer ? new AST_Finally(from_moz(M.finalizer)) : null
            });
          },
          Property: function(M) {
            var key = M.key;
            var args = {
              start: my_start_token(key || M.value),
              end: my_end_token(M.value),
              key: key.type == "Identifier" ? key.name : key.value,
              value: from_moz(M.value)
            };
            if (M.computed) {
              args.key = from_moz(M.key);
            }
            if (M.method) {
              args.is_generator = M.value.generator;
              args.async = M.value.async;
              if (!M.computed) {
                args.key = new AST_SymbolMethod({ name: args.key });
              } else {
                args.key = from_moz(M.key);
              }
              return new AST_ConciseMethod(args);
            }
            if (M.kind == "init") {
              if (key.type != "Identifier" && key.type != "Literal") {
                args.key = from_moz(key);
              }
              return new AST_ObjectKeyVal(args);
            }
            if (typeof args.key === "string" || typeof args.key === "number") {
              args.key = new AST_SymbolMethod({
                name: args.key
              });
            }
            args.value = new AST_Accessor(args.value);
            if (M.kind == "get")
              return new AST_ObjectGetter(args);
            if (M.kind == "set")
              return new AST_ObjectSetter(args);
            if (M.kind == "method") {
              args.async = M.value.async;
              args.is_generator = M.value.generator;
              args.quote = M.computed ? '"' : null;
              return new AST_ConciseMethod(args);
            }
          },
          MethodDefinition: function(M) {
            const is_private = M.key.type === "PrivateIdentifier";
            const key = M.computed ? from_moz(M.key) : new AST_SymbolMethod({ name: M.key.name || M.key.value });
            var args = {
              start: my_start_token(M),
              end: my_end_token(M),
              key,
              value: from_moz(M.value),
              static: M.static
            };
            if (M.kind == "get") {
              return new (is_private ? AST_PrivateGetter : AST_ObjectGetter)(args);
            }
            if (M.kind == "set") {
              return new (is_private ? AST_PrivateSetter : AST_ObjectSetter)(args);
            }
            args.is_generator = M.value.generator;
            args.async = M.value.async;
            return new (is_private ? AST_PrivateMethod : AST_ConciseMethod)(args);
          },
          FieldDefinition: function(M) {
            let key;
            if (M.computed) {
              key = from_moz(M.key);
            } else {
              if (M.key.type !== "Identifier")
                throw new Error("Non-Identifier key in FieldDefinition");
              key = from_moz(M.key);
            }
            return new AST_ClassProperty({
              start: my_start_token(M),
              end: my_end_token(M),
              key,
              value: from_moz(M.value),
              static: M.static
            });
          },
          PropertyDefinition: function(M) {
            let key;
            if (M.computed) {
              key = from_moz(M.key);
            } else if (M.key.type === "PrivateIdentifier") {
              return new AST_ClassPrivateProperty({
                start: my_start_token(M),
                end: my_end_token(M),
                key: from_moz(M.key),
                value: from_moz(M.value),
                static: M.static
              });
            } else {
              if (M.key.type !== "Identifier") {
                throw new Error("Non-Identifier key in PropertyDefinition");
              }
              key = from_moz(M.key);
            }
            return new AST_ClassProperty({
              start: my_start_token(M),
              end: my_end_token(M),
              key,
              value: from_moz(M.value),
              static: M.static
            });
          },
          PrivateIdentifier: function(M) {
            return new AST_SymbolPrivateProperty({
              start: my_start_token(M),
              end: my_end_token(M),
              name: M.name
            });
          },
          StaticBlock: function(M) {
            return new AST_ClassStaticBlock({
              start: my_start_token(M),
              end: my_end_token(M),
              body: M.body.map(from_moz)
            });
          },
          ArrayExpression: function(M) {
            return new AST_Array({
              start: my_start_token(M),
              end: my_end_token(M),
              elements: M.elements.map(function(elem) {
                return elem === null ? new AST_Hole() : from_moz(elem);
              })
            });
          },
          ObjectExpression: function(M) {
            return new AST_Object({
              start: my_start_token(M),
              end: my_end_token(M),
              properties: M.properties.map(function(prop) {
                if (prop.type === "SpreadElement") {
                  return from_moz(prop);
                }
                prop.type = "Property";
                return from_moz(prop);
              })
            });
          },
          SequenceExpression: function(M) {
            return new AST_Sequence({
              start: my_start_token(M),
              end: my_end_token(M),
              expressions: M.expressions.map(from_moz)
            });
          },
          MemberExpression: function(M) {
            if (M.property.type === "PrivateIdentifier") {
              return new AST_DotHash({
                start: my_start_token(M),
                end: my_end_token(M),
                property: M.property.name,
                expression: from_moz(M.object),
                optional: M.optional || false
              });
            }
            return new (M.computed ? AST_Sub : AST_Dot)({
              start: my_start_token(M),
              end: my_end_token(M),
              property: M.computed ? from_moz(M.property) : M.property.name,
              expression: from_moz(M.object),
              optional: M.optional || false
            });
          },
          ChainExpression: function(M) {
            return new AST_Chain({
              start: my_start_token(M),
              end: my_end_token(M),
              expression: from_moz(M.expression)
            });
          },
          SwitchCase: function(M) {
            return new (M.test ? AST_Case : AST_Default)({
              start: my_start_token(M),
              end: my_end_token(M),
              expression: from_moz(M.test),
              body: M.consequent.map(from_moz)
            });
          },
          VariableDeclaration: function(M) {
            return new (M.kind === "const" ? AST_Const : M.kind === "let" ? AST_Let : AST_Var)({
              start: my_start_token(M),
              end: my_end_token(M),
              definitions: M.declarations.map(from_moz)
            });
          },
          ImportDeclaration: function(M) {
            var imported_name = null;
            var imported_names = null;
            M.specifiers.forEach(function(specifier) {
              if (specifier.type === "ImportSpecifier" || specifier.type === "ImportNamespaceSpecifier") {
                if (!imported_names) {
                  imported_names = [];
                }
                imported_names.push(from_moz(specifier));
              } else if (specifier.type === "ImportDefaultSpecifier") {
                imported_name = from_moz(specifier);
              }
            });
            return new AST_Import({
              start: my_start_token(M),
              end: my_end_token(M),
              imported_name,
              imported_names,
              module_name: from_moz(M.source),
              assert_clause: assert_clause_from_moz(M.assertions)
            });
          },
          ImportSpecifier: function(M) {
            return new AST_NameMapping({
              start: my_start_token(M),
              end: my_end_token(M),
              foreign_name: from_moz(M.imported),
              name: from_moz(M.local)
            });
          },
          ImportDefaultSpecifier: function(M) {
            return from_moz(M.local);
          },
          ImportNamespaceSpecifier: function(M) {
            return new AST_NameMapping({
              start: my_start_token(M),
              end: my_end_token(M),
              foreign_name: new AST_SymbolImportForeign({ name: "*" }),
              name: from_moz(M.local)
            });
          },
          ExportAllDeclaration: function(M) {
            var foreign_name = M.exported == null ? new AST_SymbolExportForeign({ name: "*" }) : from_moz(M.exported);
            return new AST_Export({
              start: my_start_token(M),
              end: my_end_token(M),
              exported_names: [
                new AST_NameMapping({
                  name: new AST_SymbolExportForeign({ name: "*" }),
                  foreign_name
                })
              ],
              module_name: from_moz(M.source),
              assert_clause: assert_clause_from_moz(M.assertions)
            });
          },
          ExportNamedDeclaration: function(M) {
            return new AST_Export({
              start: my_start_token(M),
              end: my_end_token(M),
              exported_definition: from_moz(M.declaration),
              exported_names: M.specifiers && M.specifiers.length ? M.specifiers.map(function(specifier) {
                return from_moz(specifier);
              }) : null,
              module_name: from_moz(M.source),
              assert_clause: assert_clause_from_moz(M.assertions)
            });
          },
          ExportDefaultDeclaration: function(M) {
            return new AST_Export({
              start: my_start_token(M),
              end: my_end_token(M),
              exported_value: from_moz(M.declaration),
              is_default: true
            });
          },
          ExportSpecifier: function(M) {
            return new AST_NameMapping({
              foreign_name: from_moz(M.exported),
              name: from_moz(M.local)
            });
          },
          Literal: function(M) {
            var val = M.value, args = {
              start: my_start_token(M),
              end: my_end_token(M)
            };
            var rx = M.regex;
            if (rx && rx.pattern) {
              args.value = {
                source: rx.pattern,
                flags: rx.flags
              };
              return new AST_RegExp(args);
            } else if (rx) {
              const rx_source = M.raw || val;
              const match = rx_source.match(/^\/(.*)\/(\w*)$/);
              if (!match)
                throw new Error("Invalid regex source " + rx_source);
              const [_, source, flags] = match;
              args.value = { source, flags };
              return new AST_RegExp(args);
            }
            if (val === null)
              return new AST_Null(args);
            switch (typeof val) {
              case "string":
                args.quote = '"';
                var p2 = FROM_MOZ_STACK[FROM_MOZ_STACK.length - 2];
                if (p2.type == "ImportSpecifier") {
                  args.name = val;
                  return new AST_SymbolImportForeign(args);
                } else if (p2.type == "ExportSpecifier") {
                  args.name = val;
                  if (M == p2.exported) {
                    return new AST_SymbolExportForeign(args);
                  } else {
                    return new AST_SymbolExport(args);
                  }
                } else if (p2.type == "ExportAllDeclaration" && M == p2.exported) {
                  args.name = val;
                  return new AST_SymbolExportForeign(args);
                }
                args.value = val;
                return new AST_String(args);
              case "number":
                args.value = val;
                args.raw = M.raw || val.toString();
                return new AST_Number(args);
              case "boolean":
                return new (val ? AST_True : AST_False)(args);
            }
          },
          MetaProperty: function(M) {
            if (M.meta.name === "new" && M.property.name === "target") {
              return new AST_NewTarget({
                start: my_start_token(M),
                end: my_end_token(M)
              });
            } else if (M.meta.name === "import" && M.property.name === "meta") {
              return new AST_ImportMeta({
                start: my_start_token(M),
                end: my_end_token(M)
              });
            }
          },
          Identifier: function(M) {
            var p2 = FROM_MOZ_STACK[FROM_MOZ_STACK.length - 2];
            return new (p2.type == "LabeledStatement" ? AST_Label : p2.type == "VariableDeclarator" && p2.id === M ? p2.kind == "const" ? AST_SymbolConst : p2.kind == "let" ? AST_SymbolLet : AST_SymbolVar : /Import.*Specifier/.test(p2.type) ? p2.local === M ? AST_SymbolImport : AST_SymbolImportForeign : p2.type == "ExportSpecifier" ? p2.local === M ? AST_SymbolExport : AST_SymbolExportForeign : p2.type == "FunctionExpression" ? p2.id === M ? AST_SymbolLambda : AST_SymbolFunarg : p2.type == "FunctionDeclaration" ? p2.id === M ? AST_SymbolDefun : AST_SymbolFunarg : p2.type == "ArrowFunctionExpression" ? p2.params.includes(M) ? AST_SymbolFunarg : AST_SymbolRef : p2.type == "ClassExpression" ? p2.id === M ? AST_SymbolClass : AST_SymbolRef : p2.type == "Property" ? p2.key === M && p2.computed || p2.value === M ? AST_SymbolRef : AST_SymbolMethod : p2.type == "PropertyDefinition" || p2.type === "FieldDefinition" ? p2.key === M && p2.computed || p2.value === M ? AST_SymbolRef : AST_SymbolClassProperty : p2.type == "ClassDeclaration" ? p2.id === M ? AST_SymbolDefClass : AST_SymbolRef : p2.type == "MethodDefinition" ? p2.computed ? AST_SymbolRef : AST_SymbolMethod : p2.type == "CatchClause" ? AST_SymbolCatch : p2.type == "BreakStatement" || p2.type == "ContinueStatement" ? AST_LabelRef : AST_SymbolRef)({
              start: my_start_token(M),
              end: my_end_token(M),
              name: M.name
            });
          },
          BigIntLiteral(M) {
            return new AST_BigInt({
              start: my_start_token(M),
              end: my_end_token(M),
              value: M.value
            });
          },
          EmptyStatement: function(M) {
            return new AST_EmptyStatement({
              start: my_start_token(M),
              end: my_end_token(M)
            });
          },
          BlockStatement: function(M) {
            return new AST_BlockStatement({
              start: my_start_token(M),
              end: my_end_token(M),
              body: M.body.map(from_moz)
            });
          },
          IfStatement: function(M) {
            return new AST_If({
              start: my_start_token(M),
              end: my_end_token(M),
              condition: from_moz(M.test),
              body: from_moz(M.consequent),
              alternative: from_moz(M.alternate)
            });
          },
          LabeledStatement: function(M) {
            return new AST_LabeledStatement({
              start: my_start_token(M),
              end: my_end_token(M),
              label: from_moz(M.label),
              body: from_moz(M.body)
            });
          },
          BreakStatement: function(M) {
            return new AST_Break({
              start: my_start_token(M),
              end: my_end_token(M),
              label: from_moz(M.label)
            });
          },
          ContinueStatement: function(M) {
            return new AST_Continue({
              start: my_start_token(M),
              end: my_end_token(M),
              label: from_moz(M.label)
            });
          },
          WithStatement: function(M) {
            return new AST_With({
              start: my_start_token(M),
              end: my_end_token(M),
              expression: from_moz(M.object),
              body: from_moz(M.body)
            });
          },
          SwitchStatement: function(M) {
            return new AST_Switch({
              start: my_start_token(M),
              end: my_end_token(M),
              expression: from_moz(M.discriminant),
              body: M.cases.map(from_moz)
            });
          },
          ReturnStatement: function(M) {
            return new AST_Return({
              start: my_start_token(M),
              end: my_end_token(M),
              value: from_moz(M.argument)
            });
          },
          ThrowStatement: function(M) {
            return new AST_Throw({
              start: my_start_token(M),
              end: my_end_token(M),
              value: from_moz(M.argument)
            });
          },
          WhileStatement: function(M) {
            return new AST_While({
              start: my_start_token(M),
              end: my_end_token(M),
              condition: from_moz(M.test),
              body: from_moz(M.body)
            });
          },
          DoWhileStatement: function(M) {
            return new AST_Do({
              start: my_start_token(M),
              end: my_end_token(M),
              condition: from_moz(M.test),
              body: from_moz(M.body)
            });
          },
          ForStatement: function(M) {
            return new AST_For({
              start: my_start_token(M),
              end: my_end_token(M),
              init: from_moz(M.init),
              condition: from_moz(M.test),
              step: from_moz(M.update),
              body: from_moz(M.body)
            });
          },
          ForInStatement: function(M) {
            return new AST_ForIn({
              start: my_start_token(M),
              end: my_end_token(M),
              init: from_moz(M.left),
              object: from_moz(M.right),
              body: from_moz(M.body)
            });
          },
          ForOfStatement: function(M) {
            return new AST_ForOf({
              start: my_start_token(M),
              end: my_end_token(M),
              init: from_moz(M.left),
              object: from_moz(M.right),
              body: from_moz(M.body),
              await: M.await
            });
          },
          AwaitExpression: function(M) {
            return new AST_Await({
              start: my_start_token(M),
              end: my_end_token(M),
              expression: from_moz(M.argument)
            });
          },
          YieldExpression: function(M) {
            return new AST_Yield({
              start: my_start_token(M),
              end: my_end_token(M),
              expression: from_moz(M.argument),
              is_star: M.delegate
            });
          },
          DebuggerStatement: function(M) {
            return new AST_Debugger({
              start: my_start_token(M),
              end: my_end_token(M)
            });
          },
          VariableDeclarator: function(M) {
            return new AST_VarDef({
              start: my_start_token(M),
              end: my_end_token(M),
              name: from_moz(M.id),
              value: from_moz(M.init)
            });
          },
          CatchClause: function(M) {
            return new AST_Catch({
              start: my_start_token(M),
              end: my_end_token(M),
              argname: from_moz(M.param),
              body: from_moz(M.body).body
            });
          },
          ThisExpression: function(M) {
            return new AST_This({
              start: my_start_token(M),
              end: my_end_token(M)
            });
          },
          Super: function(M) {
            return new AST_Super({
              start: my_start_token(M),
              end: my_end_token(M)
            });
          },
          BinaryExpression: function(M) {
            if (M.left.type === "PrivateIdentifier") {
              return new AST_PrivateIn({
                start: my_start_token(M),
                end: my_end_token(M),
                key: new AST_SymbolPrivateProperty({
                  start: my_start_token(M.left),
                  end: my_end_token(M.left),
                  name: M.left.name
                }),
                value: from_moz(M.right)
              });
            }
            return new AST_Binary({
              start: my_start_token(M),
              end: my_end_token(M),
              operator: M.operator,
              left: from_moz(M.left),
              right: from_moz(M.right)
            });
          },
          LogicalExpression: function(M) {
            return new AST_Binary({
              start: my_start_token(M),
              end: my_end_token(M),
              operator: M.operator,
              left: from_moz(M.left),
              right: from_moz(M.right)
            });
          },
          AssignmentExpression: function(M) {
            return new AST_Assign({
              start: my_start_token(M),
              end: my_end_token(M),
              operator: M.operator,
              left: from_moz(M.left),
              right: from_moz(M.right)
            });
          },
          ConditionalExpression: function(M) {
            return new AST_Conditional({
              start: my_start_token(M),
              end: my_end_token(M),
              condition: from_moz(M.test),
              consequent: from_moz(M.consequent),
              alternative: from_moz(M.alternate)
            });
          },
          NewExpression: function(M) {
            return new AST_New({
              start: my_start_token(M),
              end: my_end_token(M),
              expression: from_moz(M.callee),
              args: M.arguments.map(from_moz)
            });
          },
          CallExpression: function(M) {
            return new AST_Call({
              start: my_start_token(M),
              end: my_end_token(M),
              expression: from_moz(M.callee),
              optional: M.optional,
              args: M.arguments.map(from_moz)
            });
          }
        };
        MOZ_TO_ME.UpdateExpression = MOZ_TO_ME.UnaryExpression = function To_Moz_Unary(M) {
          var prefix = "prefix" in M ? M.prefix : M.type == "UnaryExpression" ? true : false;
          return new (prefix ? AST_UnaryPrefix : AST_UnaryPostfix)({
            start: my_start_token(M),
            end: my_end_token(M),
            operator: M.operator,
            expression: from_moz(M.argument)
          });
        };
        MOZ_TO_ME.ClassDeclaration = MOZ_TO_ME.ClassExpression = function From_Moz_Class(M) {
          return new (M.type === "ClassDeclaration" ? AST_DefClass : AST_ClassExpression)({
            start: my_start_token(M),
            end: my_end_token(M),
            name: from_moz(M.id),
            extends: from_moz(M.superClass),
            properties: M.body.body.map(from_moz)
          });
        };
        def_to_moz(AST_EmptyStatement, function To_Moz_EmptyStatement() {
          return {
            type: "EmptyStatement"
          };
        });
        def_to_moz(AST_BlockStatement, function To_Moz_BlockStatement(M) {
          return {
            type: "BlockStatement",
            body: M.body.map(to_moz)
          };
        });
        def_to_moz(AST_If, function To_Moz_IfStatement(M) {
          return {
            type: "IfStatement",
            test: to_moz(M.condition),
            consequent: to_moz(M.body),
            alternate: to_moz(M.alternative)
          };
        });
        def_to_moz(AST_LabeledStatement, function To_Moz_LabeledStatement(M) {
          return {
            type: "LabeledStatement",
            label: to_moz(M.label),
            body: to_moz(M.body)
          };
        });
        def_to_moz(AST_Break, function To_Moz_BreakStatement(M) {
          return {
            type: "BreakStatement",
            label: to_moz(M.label)
          };
        });
        def_to_moz(AST_Continue, function To_Moz_ContinueStatement(M) {
          return {
            type: "ContinueStatement",
            label: to_moz(M.label)
          };
        });
        def_to_moz(AST_With, function To_Moz_WithStatement(M) {
          return {
            type: "WithStatement",
            object: to_moz(M.expression),
            body: to_moz(M.body)
          };
        });
        def_to_moz(AST_Switch, function To_Moz_SwitchStatement(M) {
          return {
            type: "SwitchStatement",
            discriminant: to_moz(M.expression),
            cases: M.body.map(to_moz)
          };
        });
        def_to_moz(AST_Return, function To_Moz_ReturnStatement(M) {
          return {
            type: "ReturnStatement",
            argument: to_moz(M.value)
          };
        });
        def_to_moz(AST_Throw, function To_Moz_ThrowStatement(M) {
          return {
            type: "ThrowStatement",
            argument: to_moz(M.value)
          };
        });
        def_to_moz(AST_While, function To_Moz_WhileStatement(M) {
          return {
            type: "WhileStatement",
            test: to_moz(M.condition),
            body: to_moz(M.body)
          };
        });
        def_to_moz(AST_Do, function To_Moz_DoWhileStatement(M) {
          return {
            type: "DoWhileStatement",
            test: to_moz(M.condition),
            body: to_moz(M.body)
          };
        });
        def_to_moz(AST_For, function To_Moz_ForStatement(M) {
          return {
            type: "ForStatement",
            init: to_moz(M.init),
            test: to_moz(M.condition),
            update: to_moz(M.step),
            body: to_moz(M.body)
          };
        });
        def_to_moz(AST_ForIn, function To_Moz_ForInStatement(M) {
          return {
            type: "ForInStatement",
            left: to_moz(M.init),
            right: to_moz(M.object),
            body: to_moz(M.body)
          };
        });
        def_to_moz(AST_ForOf, function To_Moz_ForOfStatement(M) {
          return {
            type: "ForOfStatement",
            left: to_moz(M.init),
            right: to_moz(M.object),
            body: to_moz(M.body),
            await: M.await
          };
        });
        def_to_moz(AST_Await, function To_Moz_AwaitExpression(M) {
          return {
            type: "AwaitExpression",
            argument: to_moz(M.expression)
          };
        });
        def_to_moz(AST_Yield, function To_Moz_YieldExpression(M) {
          return {
            type: "YieldExpression",
            argument: to_moz(M.expression),
            delegate: M.is_star
          };
        });
        def_to_moz(AST_Debugger, function To_Moz_DebuggerStatement() {
          return {
            type: "DebuggerStatement"
          };
        });
        def_to_moz(AST_VarDef, function To_Moz_VariableDeclarator(M) {
          return {
            type: "VariableDeclarator",
            id: to_moz(M.name),
            init: to_moz(M.value)
          };
        });
        def_to_moz(AST_Catch, function To_Moz_CatchClause(M) {
          return {
            type: "CatchClause",
            param: to_moz(M.argname),
            body: to_moz_block(M)
          };
        });
        def_to_moz(AST_This, function To_Moz_ThisExpression() {
          return {
            type: "ThisExpression"
          };
        });
        def_to_moz(AST_Super, function To_Moz_Super() {
          return {
            type: "Super"
          };
        });
        def_to_moz(AST_Binary, function To_Moz_BinaryExpression(M) {
          return {
            type: "BinaryExpression",
            operator: M.operator,
            left: to_moz(M.left),
            right: to_moz(M.right)
          };
        });
        def_to_moz(AST_Binary, function To_Moz_LogicalExpression(M) {
          return {
            type: "LogicalExpression",
            operator: M.operator,
            left: to_moz(M.left),
            right: to_moz(M.right)
          };
        });
        def_to_moz(AST_Assign, function To_Moz_AssignmentExpression(M) {
          return {
            type: "AssignmentExpression",
            operator: M.operator,
            left: to_moz(M.left),
            right: to_moz(M.right)
          };
        });
        def_to_moz(AST_Conditional, function To_Moz_ConditionalExpression(M) {
          return {
            type: "ConditionalExpression",
            test: to_moz(M.condition),
            consequent: to_moz(M.consequent),
            alternate: to_moz(M.alternative)
          };
        });
        def_to_moz(AST_New, function To_Moz_NewExpression(M) {
          return {
            type: "NewExpression",
            callee: to_moz(M.expression),
            arguments: M.args.map(to_moz)
          };
        });
        def_to_moz(AST_Call, function To_Moz_CallExpression(M) {
          return {
            type: "CallExpression",
            callee: to_moz(M.expression),
            optional: M.optional,
            arguments: M.args.map(to_moz)
          };
        });
        def_to_moz(AST_Toplevel, function To_Moz_Program(M) {
          return to_moz_scope("Program", M);
        });
        def_to_moz(AST_Expansion, function To_Moz_Spread(M) {
          return {
            type: to_moz_in_destructuring() ? "RestElement" : "SpreadElement",
            argument: to_moz(M.expression)
          };
        });
        def_to_moz(AST_PrefixedTemplateString, function To_Moz_TaggedTemplateExpression(M) {
          return {
            type: "TaggedTemplateExpression",
            tag: to_moz(M.prefix),
            quasi: to_moz(M.template_string)
          };
        });
        def_to_moz(AST_TemplateString, function To_Moz_TemplateLiteral(M) {
          var quasis = [];
          var expressions = [];
          for (var i = 0; i < M.segments.length; i++) {
            if (i % 2 !== 0) {
              expressions.push(to_moz(M.segments[i]));
            } else {
              quasis.push({
                type: "TemplateElement",
                value: {
                  raw: M.segments[i].raw,
                  cooked: M.segments[i].value
                },
                tail: i === M.segments.length - 1
              });
            }
          }
          return {
            type: "TemplateLiteral",
            quasis,
            expressions
          };
        });
        def_to_moz(AST_Defun, function To_Moz_FunctionDeclaration(M) {
          return {
            type: "FunctionDeclaration",
            id: to_moz(M.name),
            params: M.argnames.map(to_moz),
            generator: M.is_generator,
            async: M.async,
            body: to_moz_scope("BlockStatement", M)
          };
        });
        def_to_moz(AST_Function, function To_Moz_FunctionExpression(M, parent) {
          var is_generator = parent.is_generator !== void 0 ? parent.is_generator : M.is_generator;
          return {
            type: "FunctionExpression",
            id: to_moz(M.name),
            params: M.argnames.map(to_moz),
            generator: is_generator,
            async: M.async,
            body: to_moz_scope("BlockStatement", M)
          };
        });
        def_to_moz(AST_Arrow, function To_Moz_ArrowFunctionExpression(M) {
          var body = {
            type: "BlockStatement",
            body: M.body.map(to_moz)
          };
          return {
            type: "ArrowFunctionExpression",
            params: M.argnames.map(to_moz),
            async: M.async,
            body
          };
        });
        def_to_moz(AST_Destructuring, function To_Moz_ObjectPattern(M) {
          if (M.is_array) {
            return {
              type: "ArrayPattern",
              elements: M.names.map(to_moz)
            };
          }
          return {
            type: "ObjectPattern",
            properties: M.names.map(to_moz)
          };
        });
        def_to_moz(AST_Directive, function To_Moz_Directive(M) {
          return {
            type: "ExpressionStatement",
            expression: {
              type: "Literal",
              value: M.value,
              raw: M.print_to_string()
            },
            directive: M.value
          };
        });
        def_to_moz(AST_SimpleStatement, function To_Moz_ExpressionStatement(M) {
          return {
            type: "ExpressionStatement",
            expression: to_moz(M.body)
          };
        });
        def_to_moz(AST_SwitchBranch, function To_Moz_SwitchCase(M) {
          return {
            type: "SwitchCase",
            test: to_moz(M.expression),
            consequent: M.body.map(to_moz)
          };
        });
        def_to_moz(AST_Try, function To_Moz_TryStatement(M) {
          return {
            type: "TryStatement",
            block: to_moz_block(M.body),
            handler: to_moz(M.bcatch),
            guardedHandlers: [],
            finalizer: to_moz(M.bfinally)
          };
        });
        def_to_moz(AST_Catch, function To_Moz_CatchClause(M) {
          return {
            type: "CatchClause",
            param: to_moz(M.argname),
            guard: null,
            body: to_moz_block(M)
          };
        });
        def_to_moz(AST_Definitions, function To_Moz_VariableDeclaration(M) {
          return {
            type: "VariableDeclaration",
            kind: M instanceof AST_Const ? "const" : M instanceof AST_Let ? "let" : "var",
            declarations: M.definitions.map(to_moz)
          };
        });
        const assert_clause_to_moz = (assert_clause) => {
          const assertions = [];
          if (assert_clause) {
            for (const { key, value } of assert_clause.properties) {
              const key_moz = is_basic_identifier_string(key) ? { type: "Identifier", name: key } : { type: "Literal", value: key, raw: JSON.stringify(key) };
              assertions.push({
                type: "ImportAttribute",
                key: key_moz,
                value: to_moz(value)
              });
            }
          }
          return assertions;
        };
        def_to_moz(AST_Export, function To_Moz_ExportDeclaration(M) {
          if (M.exported_names) {
            var first_exported = M.exported_names[0];
            var first_exported_name = first_exported.name;
            if (first_exported_name.name === "*" && !first_exported_name.quote) {
              var foreign_name = first_exported.foreign_name;
              var exported = foreign_name.name === "*" && !foreign_name.quote ? null : to_moz(foreign_name);
              return {
                type: "ExportAllDeclaration",
                source: to_moz(M.module_name),
                exported,
                assertions: assert_clause_to_moz(M.assert_clause)
              };
            }
            return {
              type: "ExportNamedDeclaration",
              specifiers: M.exported_names.map(function(name_mapping) {
                return {
                  type: "ExportSpecifier",
                  exported: to_moz(name_mapping.foreign_name),
                  local: to_moz(name_mapping.name)
                };
              }),
              declaration: to_moz(M.exported_definition),
              source: to_moz(M.module_name),
              assertions: assert_clause_to_moz(M.assert_clause)
            };
          }
          return {
            type: M.is_default ? "ExportDefaultDeclaration" : "ExportNamedDeclaration",
            declaration: to_moz(M.exported_value || M.exported_definition)
          };
        });
        def_to_moz(AST_Import, function To_Moz_ImportDeclaration(M) {
          var specifiers = [];
          if (M.imported_name) {
            specifiers.push({
              type: "ImportDefaultSpecifier",
              local: to_moz(M.imported_name)
            });
          }
          if (M.imported_names) {
            var first_imported_foreign_name = M.imported_names[0].foreign_name;
            if (first_imported_foreign_name.name === "*" && !first_imported_foreign_name.quote) {
              specifiers.push({
                type: "ImportNamespaceSpecifier",
                local: to_moz(M.imported_names[0].name)
              });
            } else {
              M.imported_names.forEach(function(name_mapping) {
                specifiers.push({
                  type: "ImportSpecifier",
                  local: to_moz(name_mapping.name),
                  imported: to_moz(name_mapping.foreign_name)
                });
              });
            }
          }
          return {
            type: "ImportDeclaration",
            specifiers,
            source: to_moz(M.module_name),
            assertions: assert_clause_to_moz(M.assert_clause)
          };
        });
        def_to_moz(AST_ImportMeta, function To_Moz_MetaProperty() {
          return {
            type: "MetaProperty",
            meta: {
              type: "Identifier",
              name: "import"
            },
            property: {
              type: "Identifier",
              name: "meta"
            }
          };
        });
        def_to_moz(AST_Sequence, function To_Moz_SequenceExpression(M) {
          return {
            type: "SequenceExpression",
            expressions: M.expressions.map(to_moz)
          };
        });
        def_to_moz(AST_DotHash, function To_Moz_PrivateMemberExpression(M) {
          return {
            type: "MemberExpression",
            object: to_moz(M.expression),
            computed: false,
            property: {
              type: "PrivateIdentifier",
              name: M.property
            },
            optional: M.optional
          };
        });
        def_to_moz(AST_PropAccess, function To_Moz_MemberExpression(M) {
          var isComputed = M instanceof AST_Sub;
          return {
            type: "MemberExpression",
            object: to_moz(M.expression),
            computed: isComputed,
            property: isComputed ? to_moz(M.property) : { type: "Identifier", name: M.property },
            optional: M.optional
          };
        });
        def_to_moz(AST_Chain, function To_Moz_ChainExpression(M) {
          return {
            type: "ChainExpression",
            expression: to_moz(M.expression)
          };
        });
        def_to_moz(AST_Unary, function To_Moz_Unary(M) {
          return {
            type: M.operator == "++" || M.operator == "--" ? "UpdateExpression" : "UnaryExpression",
            operator: M.operator,
            prefix: M instanceof AST_UnaryPrefix,
            argument: to_moz(M.expression)
          };
        });
        def_to_moz(AST_Binary, function To_Moz_BinaryExpression(M) {
          if (M.operator == "=" && to_moz_in_destructuring()) {
            return {
              type: "AssignmentPattern",
              left: to_moz(M.left),
              right: to_moz(M.right)
            };
          }
          const type = M.operator == "&&" || M.operator == "||" || M.operator === "??" ? "LogicalExpression" : "BinaryExpression";
          return {
            type,
            left: to_moz(M.left),
            operator: M.operator,
            right: to_moz(M.right)
          };
        });
        def_to_moz(AST_PrivateIn, function To_Moz_BinaryExpression_PrivateIn(M) {
          return {
            type: "BinaryExpression",
            left: { type: "PrivateIdentifier", name: M.key.name },
            operator: "in",
            right: to_moz(M.value)
          };
        });
        def_to_moz(AST_Array, function To_Moz_ArrayExpression(M) {
          return {
            type: "ArrayExpression",
            elements: M.elements.map(to_moz)
          };
        });
        def_to_moz(AST_Object, function To_Moz_ObjectExpression(M) {
          return {
            type: "ObjectExpression",
            properties: M.properties.map(to_moz)
          };
        });
        def_to_moz(AST_ObjectProperty, function To_Moz_Property(M, parent) {
          var key = M.key instanceof AST_Node ? to_moz(M.key) : {
            type: "Identifier",
            value: M.key
          };
          if (typeof M.key === "number") {
            key = {
              type: "Literal",
              value: Number(M.key)
            };
          }
          if (typeof M.key === "string") {
            key = {
              type: "Identifier",
              name: M.key
            };
          }
          var kind;
          var string_or_num = typeof M.key === "string" || typeof M.key === "number";
          var computed = string_or_num ? false : !(M.key instanceof AST_Symbol) || M.key instanceof AST_SymbolRef;
          if (M instanceof AST_ObjectKeyVal) {
            kind = "init";
            computed = !string_or_num;
          } else if (M instanceof AST_ObjectGetter) {
            kind = "get";
          } else if (M instanceof AST_ObjectSetter) {
            kind = "set";
          }
          if (M instanceof AST_PrivateGetter || M instanceof AST_PrivateSetter) {
            const kind2 = M instanceof AST_PrivateGetter ? "get" : "set";
            return {
              type: "MethodDefinition",
              computed: false,
              kind: kind2,
              static: M.static,
              key: {
                type: "PrivateIdentifier",
                name: M.key.name
              },
              value: to_moz(M.value)
            };
          }
          if (M instanceof AST_ClassPrivateProperty) {
            return {
              type: "PropertyDefinition",
              key: {
                type: "PrivateIdentifier",
                name: M.key.name
              },
              value: to_moz(M.value),
              computed: false,
              static: M.static
            };
          }
          if (M instanceof AST_ClassProperty) {
            return {
              type: "PropertyDefinition",
              key,
              value: to_moz(M.value),
              computed,
              static: M.static
            };
          }
          if (parent instanceof AST_Class) {
            return {
              type: "MethodDefinition",
              computed,
              kind,
              static: M.static,
              key: to_moz(M.key),
              value: to_moz(M.value)
            };
          }
          return {
            type: "Property",
            computed,
            kind,
            key,
            value: to_moz(M.value)
          };
        });
        def_to_moz(AST_ConciseMethod, function To_Moz_MethodDefinition(M, parent) {
          if (parent instanceof AST_Object) {
            return {
              type: "Property",
              computed: !(M.key instanceof AST_Symbol) || M.key instanceof AST_SymbolRef,
              kind: "init",
              method: true,
              shorthand: false,
              key: to_moz(M.key),
              value: to_moz(M.value)
            };
          }
          const key = M instanceof AST_PrivateMethod ? {
            type: "PrivateIdentifier",
            name: M.key.name
          } : to_moz(M.key);
          return {
            type: "MethodDefinition",
            kind: M.key === "constructor" ? "constructor" : "method",
            key,
            value: to_moz(M.value),
            computed: !(M.key instanceof AST_Symbol) || M.key instanceof AST_SymbolRef,
            static: M.static
          };
        });
        def_to_moz(AST_Class, function To_Moz_Class(M) {
          var type = M instanceof AST_ClassExpression ? "ClassExpression" : "ClassDeclaration";
          return {
            type,
            superClass: to_moz(M.extends),
            id: M.name ? to_moz(M.name) : null,
            body: {
              type: "ClassBody",
              body: M.properties.map(to_moz)
            }
          };
        });
        def_to_moz(AST_ClassStaticBlock, function To_Moz_StaticBlock(M) {
          return {
            type: "StaticBlock",
            body: M.body.map(to_moz)
          };
        });
        def_to_moz(AST_NewTarget, function To_Moz_MetaProperty() {
          return {
            type: "MetaProperty",
            meta: {
              type: "Identifier",
              name: "new"
            },
            property: {
              type: "Identifier",
              name: "target"
            }
          };
        });
        def_to_moz(AST_Symbol, function To_Moz_Identifier(M, parent) {
          if (M instanceof AST_SymbolMethod && parent.quote || (M instanceof AST_SymbolImportForeign || M instanceof AST_SymbolExportForeign || M instanceof AST_SymbolExport) && M.quote) {
            return {
              type: "Literal",
              value: M.name
            };
          }
          var def = M.definition();
          return {
            type: "Identifier",
            name: def ? def.mangled_name || def.name : M.name
          };
        });
        def_to_moz(AST_RegExp, function To_Moz_RegExpLiteral(M) {
          const pattern = M.value.source;
          const flags = M.value.flags;
          return {
            type: "Literal",
            value: null,
            raw: M.print_to_string(),
            regex: { pattern, flags }
          };
        });
        def_to_moz(AST_Constant, function To_Moz_Literal(M) {
          var value = M.value;
          return {
            type: "Literal",
            value,
            raw: M.raw || M.print_to_string()
          };
        });
        def_to_moz(AST_Atom, function To_Moz_Atom(M) {
          return {
            type: "Identifier",
            name: String(M.value)
          };
        });
        def_to_moz(AST_BigInt, (M) => ({
          type: "BigIntLiteral",
          value: M.value
        }));
        AST_Boolean.DEFMETHOD("to_mozilla_ast", AST_Constant.prototype.to_mozilla_ast);
        AST_Null.DEFMETHOD("to_mozilla_ast", AST_Constant.prototype.to_mozilla_ast);
        AST_Hole.DEFMETHOD("to_mozilla_ast", function To_Moz_ArrayHole() {
          return null;
        });
        AST_Block.DEFMETHOD("to_mozilla_ast", AST_BlockStatement.prototype.to_mozilla_ast);
        AST_Lambda.DEFMETHOD("to_mozilla_ast", AST_Function.prototype.to_mozilla_ast);
        function my_start_token(moznode) {
          var loc = moznode.loc, start = loc && loc.start;
          var range = moznode.range;
          return new AST_Token(
            "",
            "",
            start && start.line || 0,
            start && start.column || 0,
            range ? range[0] : moznode.start,
            false,
            [],
            [],
            loc && loc.source
          );
        }
        function my_end_token(moznode) {
          var loc = moznode.loc, end = loc && loc.end;
          var range = moznode.range;
          return new AST_Token(
            "",
            "",
            end && end.line || 0,
            end && end.column || 0,
            range ? range[0] : moznode.end,
            false,
            [],
            [],
            loc && loc.source
          );
        }
        var FROM_MOZ_STACK = null;
        function from_moz(node) {
          FROM_MOZ_STACK.push(node);
          var ret = node != null ? MOZ_TO_ME[node.type](node) : null;
          FROM_MOZ_STACK.pop();
          return ret;
        }
        AST_Node.from_mozilla_ast = function(node) {
          var save_stack = FROM_MOZ_STACK;
          FROM_MOZ_STACK = [];
          var ast = from_moz(node);
          FROM_MOZ_STACK = save_stack;
          return ast;
        };
        function set_moz_loc(mynode, moznode) {
          var start = mynode.start;
          var end = mynode.end;
          if (!(start && end)) {
            return moznode;
          }
          if (start.pos != null && end.endpos != null) {
            moznode.range = [start.pos, end.endpos];
          }
          if (start.line) {
            moznode.loc = {
              start: { line: start.line, column: start.col },
              end: end.endline ? { line: end.endline, column: end.endcol } : null
            };
            if (start.file) {
              moznode.loc.source = start.file;
            }
          }
          return moznode;
        }
        function def_to_moz(mytype, handler) {
          mytype.DEFMETHOD("to_mozilla_ast", function(parent) {
            return set_moz_loc(this, handler(this, parent));
          });
        }
        var TO_MOZ_STACK = null;
        function to_moz(node) {
          if (TO_MOZ_STACK === null) {
            TO_MOZ_STACK = [];
          }
          TO_MOZ_STACK.push(node);
          var ast = node != null ? node.to_mozilla_ast(TO_MOZ_STACK[TO_MOZ_STACK.length - 2]) : null;
          TO_MOZ_STACK.pop();
          if (TO_MOZ_STACK.length === 0) {
            TO_MOZ_STACK = null;
          }
          return ast;
        }
        function to_moz_in_destructuring() {
          var i = TO_MOZ_STACK.length;
          while (i--) {
            if (TO_MOZ_STACK[i] instanceof AST_Destructuring) {
              return true;
            }
          }
          return false;
        }
        function to_moz_block(node) {
          return {
            type: "BlockStatement",
            body: node.body.map(to_moz)
          };
        }
        function to_moz_scope(type, node) {
          var body = node.body.map(to_moz);
          if (node.body[0] instanceof AST_SimpleStatement && node.body[0].body instanceof AST_String) {
            body.unshift(to_moz(new AST_EmptyStatement(node.body[0])));
          }
          return {
            type,
            body
          };
        }
      })();
      function first_in_statement(stack) {
        let node = stack.parent(-1);
        for (let i = 0, p2; p2 = stack.parent(i); i++) {
          if (p2 instanceof AST_Statement && p2.body === node)
            return true;
          if (p2 instanceof AST_Sequence && p2.expressions[0] === node || p2.TYPE === "Call" && p2.expression === node || p2 instanceof AST_PrefixedTemplateString && p2.prefix === node || p2 instanceof AST_Dot && p2.expression === node || p2 instanceof AST_Sub && p2.expression === node || p2 instanceof AST_Chain && p2.expression === node || p2 instanceof AST_Conditional && p2.condition === node || p2 instanceof AST_Binary && p2.left === node || p2 instanceof AST_UnaryPostfix && p2.expression === node) {
            node = p2;
          } else {
            return false;
          }
        }
      }
      function left_is_object(node) {
        if (node instanceof AST_Object)
          return true;
        if (node instanceof AST_Sequence)
          return left_is_object(node.expressions[0]);
        if (node.TYPE === "Call")
          return left_is_object(node.expression);
        if (node instanceof AST_PrefixedTemplateString)
          return left_is_object(node.prefix);
        if (node instanceof AST_Dot || node instanceof AST_Sub)
          return left_is_object(node.expression);
        if (node instanceof AST_Chain)
          return left_is_object(node.expression);
        if (node instanceof AST_Conditional)
          return left_is_object(node.condition);
        if (node instanceof AST_Binary)
          return left_is_object(node.left);
        if (node instanceof AST_UnaryPostfix)
          return left_is_object(node.expression);
        return false;
      }
      const CODE_LINE_BREAK = 10;
      const CODE_SPACE = 32;
      const r_annotation = /[@#]__(PURE|INLINE|NOINLINE)__/;
      function is_some_comments(comment) {
        return (comment.type === "comment2" || comment.type === "comment1") && /@preserve|@copyright|@lic|@cc_on|^\**!/i.test(comment.value);
      }
      const ROPE_COMMIT_WHEN = 8 * 1e3;
      class Rope {
        constructor() {
          this.committed = "";
          this.current = "";
        }
        append(str) {
          if (this.current.length > ROPE_COMMIT_WHEN) {
            this.committed += this.current + str;
            this.current = "";
          } else {
            this.current += str;
          }
        }
        insertAt(char, index) {
          const { committed, current } = this;
          if (index < committed.length) {
            this.committed = committed.slice(0, index) + char + committed.slice(index);
          } else if (index === committed.length) {
            this.committed += char;
          } else {
            index -= committed.length;
            this.committed += current.slice(0, index) + char;
            this.current = current.slice(index);
          }
        }
        charAt(index) {
          const { committed } = this;
          if (index < committed.length)
            return committed[index];
          return this.current[index - committed.length];
        }
        charCodeAt(index) {
          const { committed } = this;
          if (index < committed.length)
            return committed.charCodeAt(index);
          return this.current.charCodeAt(index - committed.length);
        }
        length() {
          return this.committed.length + this.current.length;
        }
        expectDirective() {
          let ch, n2 = this.length();
          if (n2 <= 0)
            return true;
          while ((ch = this.charCodeAt(--n2)) && (ch == CODE_SPACE || ch == CODE_LINE_BREAK))
            ;
          return !ch || ch === 59 || ch === 123;
        }
        hasNLB() {
          let n2 = this.length() - 1;
          while (n2 >= 0) {
            const code = this.charCodeAt(n2--);
            if (code === CODE_LINE_BREAK)
              return true;
            if (code !== CODE_SPACE)
              return false;
          }
          return true;
        }
        toString() {
          return this.committed + this.current;
        }
      }
      function OutputStream(options) {
        var readonly = !options;
        options = defaults(options, {
          ascii_only: false,
          beautify: false,
          braces: false,
          comments: "some",
          ecma: 5,
          ie8: false,
          indent_level: 4,
          indent_start: 0,
          inline_script: true,
          keep_numbers: false,
          keep_quoted_props: false,
          max_line_len: false,
          preamble: null,
          preserve_annotations: false,
          quote_keys: false,
          quote_style: 0,
          safari10: false,
          semicolons: true,
          shebang: true,
          shorthand: void 0,
          source_map: null,
          webkit: false,
          width: 80,
          wrap_iife: false,
          wrap_func_args: true,
          _destroy_ast: false
        }, true);
        if (options.shorthand === void 0)
          options.shorthand = options.ecma > 5;
        var comment_filter = return_false;
        if (options.comments) {
          let comments = options.comments;
          if (typeof options.comments === "string" && /^\/.*\/[a-zA-Z]*$/.test(options.comments)) {
            var regex_pos = options.comments.lastIndexOf("/");
            comments = new RegExp(
              options.comments.substr(1, regex_pos - 1),
              options.comments.substr(regex_pos + 1)
            );
          }
          if (comments instanceof RegExp) {
            comment_filter = function(comment) {
              return comment.type != "comment5" && comments.test(comment.value);
            };
          } else if (typeof comments === "function") {
            comment_filter = function(comment) {
              return comment.type != "comment5" && comments(this, comment);
            };
          } else if (comments === "some") {
            comment_filter = is_some_comments;
          } else {
            comment_filter = return_true;
          }
        }
        if (options.preserve_annotations) {
          let prev_comment_filter = comment_filter;
          comment_filter = function(comment) {
            return r_annotation.test(comment.value) || prev_comment_filter.apply(this, arguments);
          };
        }
        var indentation = 0;
        var current_col = 0;
        var current_line = 1;
        var current_pos = 0;
        var OUTPUT = new Rope();
        let printed_comments = /* @__PURE__ */ new Set();
        var to_utf8 = options.ascii_only ? function(str, identifier = false, regexp = false) {
          if (options.ecma >= 2015 && !options.safari10 && !regexp) {
            str = str.replace(/[\ud800-\udbff][\udc00-\udfff]/g, function(ch) {
              var code = get_full_char_code(ch, 0).toString(16);
              return "\\u{" + code + "}";
            });
          }
          return str.replace(/[\u0000-\u001f\u007f-\uffff]/g, function(ch) {
            var code = ch.charCodeAt(0).toString(16);
            if (code.length <= 2 && !identifier) {
              while (code.length < 2)
                code = "0" + code;
              return "\\x" + code;
            } else {
              while (code.length < 4)
                code = "0" + code;
              return "\\u" + code;
            }
          });
        } : function(str) {
          return str.replace(/[\ud800-\udbff][\udc00-\udfff]|([\ud800-\udbff]|[\udc00-\udfff])/g, function(match, lone) {
            if (lone) {
              return "\\u" + lone.charCodeAt(0).toString(16);
            }
            return match;
          });
        };
        function make_string(str, quote) {
          var dq = 0, sq = 0;
          str = str.replace(
            /[\\\b\f\n\r\v\t\x22\x27\u2028\u2029\0\ufeff]/g,
            function(s, i) {
              switch (s) {
                case '"':
                  ++dq;
                  return '"';
                case "'":
                  ++sq;
                  return "'";
                case "\\":
                  return "\\\\";
                case "\n":
                  return "\\n";
                case "\r":
                  return "\\r";
                case "	":
                  return "\\t";
                case "\b":
                  return "\\b";
                case "\f":
                  return "\\f";
                case "\v":
                  return options.ie8 ? "\\x0B" : "\\v";
                case "\u2028":
                  return "\\u2028";
                case "\u2029":
                  return "\\u2029";
                case "\uFEFF":
                  return "\\ufeff";
                case "\0":
                  return /[0-9]/.test(get_full_char(str, i + 1)) ? "\\x00" : "\\0";
              }
              return s;
            }
          );
          function quote_single() {
            return "'" + str.replace(/\x27/g, "\\'") + "'";
          }
          function quote_double() {
            return '"' + str.replace(/\x22/g, '\\"') + '"';
          }
          function quote_template() {
            return "`" + str.replace(/`/g, "\\`") + "`";
          }
          str = to_utf8(str);
          if (quote === "`")
            return quote_template();
          switch (options.quote_style) {
            case 1:
              return quote_single();
            case 2:
              return quote_double();
            case 3:
              return quote == "'" ? quote_single() : quote_double();
            default:
              return dq > sq ? quote_single() : quote_double();
          }
        }
        function encode_string(str, quote) {
          var ret = make_string(str, quote);
          if (options.inline_script) {
            ret = ret.replace(/<\x2f(script)([>\/\t\n\f\r ])/gi, "<\\/$1$2");
            ret = ret.replace(/\x3c!--/g, "\\x3c!--");
            ret = ret.replace(/--\x3e/g, "--\\x3e");
          }
          return ret;
        }
        function make_name(name) {
          name = name.toString();
          name = to_utf8(name, true);
          return name;
        }
        function make_indent(back) {
          return " ".repeat(options.indent_start + indentation - back * options.indent_level);
        }
        var has_parens = false;
        var might_need_space = false;
        var might_need_semicolon = false;
        var might_add_newline = 0;
        var need_newline_indented = false;
        var need_space = false;
        var newline_insert = -1;
        var last = "";
        var mapping_token, mapping_name, mappings = options.source_map && [];
        var do_add_mapping = mappings ? function() {
          mappings.forEach(function(mapping) {
            try {
              let { name, token } = mapping;
              if (name !== false) {
                if (token.type == "name" || token.type === "privatename") {
                  name = token.value;
                } else if (name instanceof AST_Symbol) {
                  name = token.type === "string" ? token.value : name.name;
                }
              }
              options.source_map.add(
                mapping.token.file,
                mapping.line,
                mapping.col,
                mapping.token.line,
                mapping.token.col,
                is_basic_identifier_string(name) ? name : void 0
              );
            } catch (ex) {
            }
          });
          mappings = [];
        } : noop;
        var ensure_line_len = options.max_line_len ? function() {
          if (current_col > options.max_line_len) {
            if (might_add_newline) {
              OUTPUT.insertAt("\n", might_add_newline);
              const len_after_newline = OUTPUT.length() - might_add_newline - 1;
              if (mappings) {
                var delta = len_after_newline - current_col;
                mappings.forEach(function(mapping) {
                  mapping.line++;
                  mapping.col += delta;
                });
              }
              current_line++;
              current_pos++;
              current_col = len_after_newline;
            }
          }
          if (might_add_newline) {
            might_add_newline = 0;
            do_add_mapping();
          }
        } : noop;
        var requireSemicolonChars = makePredicate("( [ + * / - , . `");
        function print(str) {
          str = String(str);
          var ch = get_full_char(str, 0);
          if (need_newline_indented && ch) {
            need_newline_indented = false;
            if (ch !== "\n") {
              print("\n");
              indent();
            }
          }
          if (need_space && ch) {
            need_space = false;
            if (!/[\s;})]/.test(ch)) {
              space();
            }
          }
          newline_insert = -1;
          var prev = last.charAt(last.length - 1);
          if (might_need_semicolon) {
            might_need_semicolon = false;
            if (prev === ":" && ch === "}" || (!ch || !";}".includes(ch)) && prev !== ";") {
              if (options.semicolons || requireSemicolonChars.has(ch)) {
                OUTPUT.append(";");
                current_col++;
                current_pos++;
              } else {
                ensure_line_len();
                if (current_col > 0) {
                  OUTPUT.append("\n");
                  current_pos++;
                  current_line++;
                  current_col = 0;
                }
                if (/^\s+$/.test(str)) {
                  might_need_semicolon = true;
                }
              }
              if (!options.beautify)
                might_need_space = false;
            }
          }
          if (might_need_space) {
            if (is_identifier_char(prev) && (is_identifier_char(ch) || ch == "\\") || ch == "/" && ch == prev || (ch == "+" || ch == "-") && ch == last) {
              OUTPUT.append(" ");
              current_col++;
              current_pos++;
            }
            might_need_space = false;
          }
          if (mapping_token) {
            mappings.push({
              token: mapping_token,
              name: mapping_name,
              line: current_line,
              col: current_col
            });
            mapping_token = false;
            if (!might_add_newline)
              do_add_mapping();
          }
          OUTPUT.append(str);
          has_parens = str[str.length - 1] == "(";
          current_pos += str.length;
          var a = str.split(/\r?\n/), n2 = a.length - 1;
          current_line += n2;
          current_col += a[0].length;
          if (n2 > 0) {
            ensure_line_len();
            current_col = a[n2].length;
          }
          last = str;
        }
        var star = function() {
          print("*");
        };
        var space = options.beautify ? function() {
          print(" ");
        } : function() {
          might_need_space = true;
        };
        var indent = options.beautify ? function(half) {
          if (options.beautify) {
            print(make_indent(half ? 0.5 : 0));
          }
        } : noop;
        var with_indent = options.beautify ? function(col, cont) {
          if (col === true)
            col = next_indent();
          var save_indentation = indentation;
          indentation = col;
          var ret = cont();
          indentation = save_indentation;
          return ret;
        } : function(col, cont) {
          return cont();
        };
        var newline = options.beautify ? function() {
          if (newline_insert < 0)
            return print("\n");
          if (OUTPUT.charAt(newline_insert) != "\n") {
            OUTPUT.insertAt("\n", newline_insert);
            current_pos++;
            current_line++;
          }
          newline_insert++;
        } : options.max_line_len ? function() {
          ensure_line_len();
          might_add_newline = OUTPUT.length();
        } : noop;
        var semicolon = options.beautify ? function() {
          print(";");
        } : function() {
          might_need_semicolon = true;
        };
        function force_semicolon() {
          might_need_semicolon = false;
          print(";");
        }
        function next_indent() {
          return indentation + options.indent_level;
        }
        function with_block(cont) {
          var ret;
          print("{");
          newline();
          with_indent(next_indent(), function() {
            ret = cont();
          });
          indent();
          print("}");
          return ret;
        }
        function with_parens(cont) {
          print("(");
          var ret = cont();
          print(")");
          return ret;
        }
        function with_square(cont) {
          print("[");
          var ret = cont();
          print("]");
          return ret;
        }
        function comma() {
          print(",");
          space();
        }
        function colon() {
          print(":");
          space();
        }
        var add_mapping = mappings ? function(token, name) {
          mapping_token = token;
          mapping_name = name;
        } : noop;
        function get() {
          if (might_add_newline) {
            ensure_line_len();
          }
          return OUTPUT.toString();
        }
        function filter_comment(comment) {
          if (!options.preserve_annotations) {
            comment = comment.replace(r_annotation, " ");
          }
          if (/^\s*$/.test(comment)) {
            return "";
          }
          return comment.replace(/(<\s*\/\s*)(script)/i, "<\\/$2");
        }
        function prepend_comments(node) {
          var self2 = this;
          var start = node.start;
          if (!start)
            return;
          var printed_comments2 = self2.printed_comments;
          const keyword_with_value = node instanceof AST_Exit && node.value || (node instanceof AST_Await || node instanceof AST_Yield) && node.expression;
          if (start.comments_before && printed_comments2.has(start.comments_before)) {
            if (keyword_with_value) {
              start.comments_before = [];
            } else {
              return;
            }
          }
          var comments = start.comments_before;
          if (!comments) {
            comments = start.comments_before = [];
          }
          printed_comments2.add(comments);
          if (keyword_with_value) {
            var tw = new TreeWalker(function(node2) {
              var parent = tw.parent();
              if (parent instanceof AST_Exit || parent instanceof AST_Await || parent instanceof AST_Yield || parent instanceof AST_Binary && parent.left === node2 || parent.TYPE == "Call" && parent.expression === node2 || parent instanceof AST_Conditional && parent.condition === node2 || parent instanceof AST_Dot && parent.expression === node2 || parent instanceof AST_Sequence && parent.expressions[0] === node2 || parent instanceof AST_Sub && parent.expression === node2 || parent instanceof AST_UnaryPostfix) {
                if (!node2.start)
                  return;
                var text = node2.start.comments_before;
                if (text && !printed_comments2.has(text)) {
                  printed_comments2.add(text);
                  comments = comments.concat(text);
                }
              } else {
                return true;
              }
            });
            tw.push(node);
            keyword_with_value.walk(tw);
          }
          if (current_pos == 0) {
            if (comments.length > 0 && options.shebang && comments[0].type === "comment5" && !printed_comments2.has(comments[0])) {
              print("#!" + comments.shift().value + "\n");
              indent();
            }
            var preamble = options.preamble;
            if (preamble) {
              print(preamble.replace(/\r\n?|[\n\u2028\u2029]|\s*$/g, "\n"));
            }
          }
          comments = comments.filter(comment_filter, node).filter((c2) => !printed_comments2.has(c2));
          if (comments.length == 0)
            return;
          var last_nlb = OUTPUT.hasNLB();
          comments.forEach(function(c2, i) {
            printed_comments2.add(c2);
            if (!last_nlb) {
              if (c2.nlb) {
                print("\n");
                indent();
                last_nlb = true;
              } else if (i > 0) {
                space();
              }
            }
            if (/comment[134]/.test(c2.type)) {
              var value = filter_comment(c2.value);
              if (value) {
                print("//" + value + "\n");
                indent();
              }
              last_nlb = true;
            } else if (c2.type == "comment2") {
              var value = filter_comment(c2.value);
              if (value) {
                print("/*" + value + "*/");
              }
              last_nlb = false;
            }
          });
          if (!last_nlb) {
            if (start.nlb) {
              print("\n");
              indent();
            } else {
              space();
            }
          }
        }
        function append_comments(node, tail) {
          var self2 = this;
          var token = node.end;
          if (!token)
            return;
          var printed_comments2 = self2.printed_comments;
          var comments = token[tail ? "comments_before" : "comments_after"];
          if (!comments || printed_comments2.has(comments))
            return;
          if (!(node instanceof AST_Statement || comments.every(
            (c2) => !/comment[134]/.test(c2.type)
          )))
            return;
          printed_comments2.add(comments);
          var insert = OUTPUT.length();
          comments.filter(comment_filter, node).forEach(function(c2, i) {
            if (printed_comments2.has(c2))
              return;
            printed_comments2.add(c2);
            need_space = false;
            if (need_newline_indented) {
              print("\n");
              indent();
              need_newline_indented = false;
            } else if (c2.nlb && (i > 0 || !OUTPUT.hasNLB())) {
              print("\n");
              indent();
            } else if (i > 0 || !tail) {
              space();
            }
            if (/comment[134]/.test(c2.type)) {
              const value = filter_comment(c2.value);
              if (value) {
                print("//" + value);
              }
              need_newline_indented = true;
            } else if (c2.type == "comment2") {
              const value = filter_comment(c2.value);
              if (value) {
                print("/*" + value + "*/");
              }
              need_space = true;
            }
          });
          if (OUTPUT.length() > insert)
            newline_insert = insert;
        }
        const gc_scope = options["_destroy_ast"] ? function gc_scope2(scope) {
          scope.body.length = 0;
          scope.argnames.length = 0;
        } : noop;
        var stack = [];
        return {
          get,
          toString: get,
          indent,
          in_directive: false,
          use_asm: null,
          active_scope: null,
          indentation: function() {
            return indentation;
          },
          current_width: function() {
            return current_col - indentation;
          },
          should_break: function() {
            return options.width && this.current_width() >= options.width;
          },
          has_parens: function() {
            return has_parens;
          },
          newline,
          print,
          star,
          space,
          comma,
          colon,
          last: function() {
            return last;
          },
          semicolon,
          force_semicolon,
          to_utf8,
          print_name: function(name) {
            print(make_name(name));
          },
          print_string: function(str, quote, escape_directive) {
            var encoded = encode_string(str, quote);
            if (escape_directive === true && !encoded.includes("\\")) {
              if (!OUTPUT.expectDirective()) {
                force_semicolon();
              }
              force_semicolon();
            }
            print(encoded);
          },
          print_template_string_chars: function(str) {
            var encoded = encode_string(str, "`").replace(/\${/g, "\\${");
            return print(encoded.substr(1, encoded.length - 2));
          },
          encode_string,
          next_indent,
          with_indent,
          with_block,
          with_parens,
          with_square,
          add_mapping,
          option: function(opt) {
            return options[opt];
          },
          gc_scope,
          printed_comments,
          prepend_comments: readonly ? noop : prepend_comments,
          append_comments: readonly || comment_filter === return_false ? noop : append_comments,
          line: function() {
            return current_line;
          },
          col: function() {
            return current_col;
          },
          pos: function() {
            return current_pos;
          },
          push_node: function(node) {
            stack.push(node);
          },
          pop_node: function() {
            return stack.pop();
          },
          parent: function(n2) {
            return stack[stack.length - 2 - (n2 || 0)];
          }
        };
      }
      (function() {
        function DEFPRINT(nodetype, generator) {
          nodetype.DEFMETHOD("_codegen", generator);
        }
        AST_Node.DEFMETHOD("print", function(output, force_parens) {
          var self2 = this, generator = self2._codegen;
          if (self2 instanceof AST_Scope) {
            output.active_scope = self2;
          } else if (!output.use_asm && self2 instanceof AST_Directive && self2.value == "use asm") {
            output.use_asm = output.active_scope;
          }
          function doit() {
            output.prepend_comments(self2);
            self2.add_source_map(output);
            generator(self2, output);
            output.append_comments(self2);
          }
          output.push_node(self2);
          if (force_parens || self2.needs_parens(output)) {
            output.with_parens(doit);
          } else {
            doit();
          }
          output.pop_node();
          if (self2 === output.use_asm) {
            output.use_asm = null;
          }
        });
        AST_Node.DEFMETHOD("_print", AST_Node.prototype.print);
        AST_Node.DEFMETHOD("print_to_string", function(options) {
          var output = OutputStream(options);
          this.print(output);
          return output.get();
        });
        function PARENS(nodetype, func) {
          if (Array.isArray(nodetype)) {
            nodetype.forEach(function(nodetype2) {
              PARENS(nodetype2, func);
            });
          } else {
            nodetype.DEFMETHOD("needs_parens", func);
          }
        }
        PARENS(AST_Node, return_false);
        PARENS(AST_Function, function(output) {
          if (!output.has_parens() && first_in_statement(output)) {
            return true;
          }
          if (output.option("webkit")) {
            var p2 = output.parent();
            if (p2 instanceof AST_PropAccess && p2.expression === this) {
              return true;
            }
          }
          if (output.option("wrap_iife")) {
            var p2 = output.parent();
            if (p2 instanceof AST_Call && p2.expression === this) {
              return true;
            }
          }
          if (output.option("wrap_func_args")) {
            var p2 = output.parent();
            if (p2 instanceof AST_Call && p2.args.includes(this)) {
              return true;
            }
          }
          return false;
        });
        PARENS(AST_Arrow, function(output) {
          var p2 = output.parent();
          if (output.option("wrap_func_args") && p2 instanceof AST_Call && p2.args.includes(this)) {
            return true;
          }
          return p2 instanceof AST_PropAccess && p2.expression === this || p2 instanceof AST_Conditional && p2.condition === this;
        });
        PARENS(AST_Object, function(output) {
          return !output.has_parens() && first_in_statement(output);
        });
        PARENS(AST_ClassExpression, first_in_statement);
        PARENS(AST_Unary, function(output) {
          var p2 = output.parent();
          return p2 instanceof AST_PropAccess && p2.expression === this || p2 instanceof AST_Call && p2.expression === this || p2 instanceof AST_Binary && p2.operator === "**" && this instanceof AST_UnaryPrefix && p2.left === this && this.operator !== "++" && this.operator !== "--";
        });
        PARENS(AST_Await, function(output) {
          var p2 = output.parent();
          return p2 instanceof AST_PropAccess && p2.expression === this || p2 instanceof AST_Call && p2.expression === this || p2 instanceof AST_Binary && p2.operator === "**" && p2.left === this || output.option("safari10") && p2 instanceof AST_UnaryPrefix;
        });
        PARENS(AST_Sequence, function(output) {
          var p2 = output.parent();
          return p2 instanceof AST_Call || p2 instanceof AST_Unary || p2 instanceof AST_Binary || p2 instanceof AST_VarDef || p2 instanceof AST_PropAccess || p2 instanceof AST_Array || p2 instanceof AST_ObjectProperty || p2 instanceof AST_Conditional || p2 instanceof AST_Arrow || p2 instanceof AST_DefaultAssign || p2 instanceof AST_Expansion || p2 instanceof AST_ForOf && this === p2.object || p2 instanceof AST_Yield || p2 instanceof AST_Export;
        });
        PARENS(AST_Binary, function(output) {
          var p2 = output.parent();
          if (p2 instanceof AST_Call && p2.expression === this)
            return true;
          if (p2 instanceof AST_Unary)
            return true;
          if (p2 instanceof AST_PropAccess && p2.expression === this)
            return true;
          if (p2 instanceof AST_Binary) {
            const po = p2.operator;
            const so = this.operator;
            if (so === "??" && (po === "||" || po === "&&")) {
              return true;
            }
            if (po === "??" && (so === "||" || so === "&&")) {
              return true;
            }
            const pp = PRECEDENCE[po];
            const sp = PRECEDENCE[so];
            if (pp > sp || pp == sp && (this === p2.right || po == "**")) {
              return true;
            }
          }
        });
        PARENS(AST_Yield, function(output) {
          var p2 = output.parent();
          if (p2 instanceof AST_Binary && p2.operator !== "=")
            return true;
          if (p2 instanceof AST_Call && p2.expression === this)
            return true;
          if (p2 instanceof AST_Conditional && p2.condition === this)
            return true;
          if (p2 instanceof AST_Unary)
            return true;
          if (p2 instanceof AST_PropAccess && p2.expression === this)
            return true;
        });
        PARENS(AST_Chain, function(output) {
          var p2 = output.parent();
          if (!(p2 instanceof AST_Call || p2 instanceof AST_PropAccess))
            return false;
          return p2.expression === this;
        });
        PARENS(AST_PropAccess, function(output) {
          var p2 = output.parent();
          if (p2 instanceof AST_New && p2.expression === this) {
            return walk(this, (node) => {
              if (node instanceof AST_Scope)
                return true;
              if (node instanceof AST_Call) {
                return walk_abort;
              }
            });
          }
        });
        PARENS(AST_Call, function(output) {
          var p2 = output.parent(), p1;
          if (p2 instanceof AST_New && p2.expression === this || p2 instanceof AST_Export && p2.is_default && this.expression instanceof AST_Function)
            return true;
          return this.expression instanceof AST_Function && p2 instanceof AST_PropAccess && p2.expression === this && (p1 = output.parent(1)) instanceof AST_Assign && p1.left === p2;
        });
        PARENS(AST_New, function(output) {
          var p2 = output.parent();
          if (this.args.length === 0 && (p2 instanceof AST_PropAccess || p2 instanceof AST_Call && p2.expression === this || p2 instanceof AST_PrefixedTemplateString && p2.prefix === this))
            return true;
        });
        PARENS(AST_Number, function(output) {
          var p2 = output.parent();
          if (p2 instanceof AST_PropAccess && p2.expression === this) {
            var value = this.getValue();
            if (value < 0 || /^0/.test(make_num(value))) {
              return true;
            }
          }
        });
        PARENS(AST_BigInt, function(output) {
          var p2 = output.parent();
          if (p2 instanceof AST_PropAccess && p2.expression === this) {
            var value = this.getValue();
            if (value.startsWith("-")) {
              return true;
            }
          }
        });
        PARENS([AST_Assign, AST_Conditional], function(output) {
          var p2 = output.parent();
          if (p2 instanceof AST_Unary)
            return true;
          if (p2 instanceof AST_Binary && !(p2 instanceof AST_Assign))
            return true;
          if (p2 instanceof AST_Call && p2.expression === this)
            return true;
          if (p2 instanceof AST_Conditional && p2.condition === this)
            return true;
          if (p2 instanceof AST_PropAccess && p2.expression === this)
            return true;
          if (this instanceof AST_Assign && this.left instanceof AST_Destructuring && this.left.is_array === false)
            return true;
        });
        DEFPRINT(AST_Directive, function(self2, output) {
          output.print_string(self2.value, self2.quote);
          output.semicolon();
        });
        DEFPRINT(AST_Expansion, function(self2, output) {
          output.print("...");
          self2.expression.print(output);
        });
        DEFPRINT(AST_Destructuring, function(self2, output) {
          output.print(self2.is_array ? "[" : "{");
          var len = self2.names.length;
          self2.names.forEach(function(name, i) {
            if (i > 0)
              output.comma();
            name.print(output);
            if (i == len - 1 && name instanceof AST_Hole)
              output.comma();
          });
          output.print(self2.is_array ? "]" : "}");
        });
        DEFPRINT(AST_Debugger, function(self2, output) {
          output.print("debugger");
          output.semicolon();
        });
        function display_body(body, is_toplevel, output, allow_directives) {
          var last = body.length - 1;
          output.in_directive = allow_directives;
          body.forEach(function(stmt, i) {
            if (output.in_directive === true && !(stmt instanceof AST_Directive || stmt instanceof AST_EmptyStatement || stmt instanceof AST_SimpleStatement && stmt.body instanceof AST_String)) {
              output.in_directive = false;
            }
            if (!(stmt instanceof AST_EmptyStatement)) {
              output.indent();
              stmt.print(output);
              if (!(i == last && is_toplevel)) {
                output.newline();
                if (is_toplevel)
                  output.newline();
              }
            }
            if (output.in_directive === true && stmt instanceof AST_SimpleStatement && stmt.body instanceof AST_String) {
              output.in_directive = false;
            }
          });
          output.in_directive = false;
        }
        AST_StatementWithBody.DEFMETHOD("_do_print_body", function(output) {
          print_maybe_braced_body(this.body, output);
        });
        DEFPRINT(AST_Statement, function(self2, output) {
          self2.body.print(output);
          output.semicolon();
        });
        DEFPRINT(AST_Toplevel, function(self2, output) {
          display_body(self2.body, true, output, true);
          output.print("");
        });
        DEFPRINT(AST_LabeledStatement, function(self2, output) {
          self2.label.print(output);
          output.colon();
          self2.body.print(output);
        });
        DEFPRINT(AST_SimpleStatement, function(self2, output) {
          self2.body.print(output);
          output.semicolon();
        });
        function print_braced_empty(self2, output) {
          output.print("{");
          output.with_indent(output.next_indent(), function() {
            output.append_comments(self2, true);
          });
          output.add_mapping(self2.end);
          output.print("}");
        }
        function print_braced(self2, output, allow_directives) {
          if (self2.body.length > 0) {
            output.with_block(function() {
              display_body(self2.body, false, output, allow_directives);
              output.add_mapping(self2.end);
            });
          } else
            print_braced_empty(self2, output);
        }
        DEFPRINT(AST_BlockStatement, function(self2, output) {
          print_braced(self2, output);
        });
        DEFPRINT(AST_EmptyStatement, function(self2, output) {
          output.semicolon();
        });
        DEFPRINT(AST_Do, function(self2, output) {
          output.print("do");
          output.space();
          make_block(self2.body, output);
          output.space();
          output.print("while");
          output.space();
          output.with_parens(function() {
            self2.condition.print(output);
          });
          output.semicolon();
        });
        DEFPRINT(AST_While, function(self2, output) {
          output.print("while");
          output.space();
          output.with_parens(function() {
            self2.condition.print(output);
          });
          output.space();
          self2._do_print_body(output);
        });
        DEFPRINT(AST_For, function(self2, output) {
          output.print("for");
          output.space();
          output.with_parens(function() {
            if (self2.init) {
              if (self2.init instanceof AST_Definitions) {
                self2.init.print(output);
              } else {
                parenthesize_for_noin(self2.init, output, true);
              }
              output.print(";");
              output.space();
            } else {
              output.print(";");
            }
            if (self2.condition) {
              self2.condition.print(output);
              output.print(";");
              output.space();
            } else {
              output.print(";");
            }
            if (self2.step) {
              self2.step.print(output);
            }
          });
          output.space();
          self2._do_print_body(output);
        });
        DEFPRINT(AST_ForIn, function(self2, output) {
          output.print("for");
          if (self2.await) {
            output.space();
            output.print("await");
          }
          output.space();
          output.with_parens(function() {
            self2.init.print(output);
            output.space();
            output.print(self2 instanceof AST_ForOf ? "of" : "in");
            output.space();
            self2.object.print(output);
          });
          output.space();
          self2._do_print_body(output);
        });
        DEFPRINT(AST_With, function(self2, output) {
          output.print("with");
          output.space();
          output.with_parens(function() {
            self2.expression.print(output);
          });
          output.space();
          self2._do_print_body(output);
        });
        AST_Lambda.DEFMETHOD("_do_print", function(output, nokeyword) {
          var self2 = this;
          if (!nokeyword) {
            if (self2.async) {
              output.print("async");
              output.space();
            }
            output.print("function");
            if (self2.is_generator) {
              output.star();
            }
            if (self2.name) {
              output.space();
            }
          }
          if (self2.name instanceof AST_Symbol) {
            self2.name.print(output);
          } else if (nokeyword && self2.name instanceof AST_Node) {
            output.with_square(function() {
              self2.name.print(output);
            });
          }
          output.with_parens(function() {
            self2.argnames.forEach(function(arg, i) {
              if (i)
                output.comma();
              arg.print(output);
            });
          });
          output.space();
          print_braced(self2, output, true);
        });
        DEFPRINT(AST_Lambda, function(self2, output) {
          self2._do_print(output);
          output.gc_scope(self2);
        });
        DEFPRINT(AST_PrefixedTemplateString, function(self2, output) {
          var tag = self2.prefix;
          var parenthesize_tag = tag instanceof AST_Lambda || tag instanceof AST_Binary || tag instanceof AST_Conditional || tag instanceof AST_Sequence || tag instanceof AST_Unary || tag instanceof AST_Dot && tag.expression instanceof AST_Object;
          if (parenthesize_tag)
            output.print("(");
          self2.prefix.print(output);
          if (parenthesize_tag)
            output.print(")");
          self2.template_string.print(output);
        });
        DEFPRINT(AST_TemplateString, function(self2, output) {
          var is_tagged = output.parent() instanceof AST_PrefixedTemplateString;
          output.print("`");
          for (var i = 0; i < self2.segments.length; i++) {
            if (!(self2.segments[i] instanceof AST_TemplateSegment)) {
              output.print("${");
              self2.segments[i].print(output);
              output.print("}");
            } else if (is_tagged) {
              output.print(self2.segments[i].raw);
            } else {
              output.print_template_string_chars(self2.segments[i].value);
            }
          }
          output.print("`");
        });
        DEFPRINT(AST_TemplateSegment, function(self2, output) {
          output.print_template_string_chars(self2.value);
        });
        AST_Arrow.DEFMETHOD("_do_print", function(output) {
          var self2 = this;
          var parent = output.parent();
          var needs_parens = parent instanceof AST_Binary && !(parent instanceof AST_Assign) || parent instanceof AST_Unary || parent instanceof AST_Call && self2 === parent.expression;
          if (needs_parens) {
            output.print("(");
          }
          if (self2.async) {
            output.print("async");
            output.space();
          }
          if (self2.argnames.length === 1 && self2.argnames[0] instanceof AST_Symbol) {
            self2.argnames[0].print(output);
          } else {
            output.with_parens(function() {
              self2.argnames.forEach(function(arg, i) {
                if (i)
                  output.comma();
                arg.print(output);
              });
            });
          }
          output.space();
          output.print("=>");
          output.space();
          const first_statement = self2.body[0];
          if (self2.body.length === 1 && first_statement instanceof AST_Return) {
            const returned = first_statement.value;
            if (!returned) {
              output.print("{}");
            } else if (left_is_object(returned)) {
              output.print("(");
              returned.print(output);
              output.print(")");
            } else {
              returned.print(output);
            }
          } else {
            print_braced(self2, output);
          }
          if (needs_parens) {
            output.print(")");
          }
          output.gc_scope(self2);
        });
        AST_Exit.DEFMETHOD("_do_print", function(output, kind) {
          output.print(kind);
          if (this.value) {
            output.space();
            const comments = this.value.start.comments_before;
            if (comments && comments.length && !output.printed_comments.has(comments)) {
              output.print("(");
              this.value.print(output);
              output.print(")");
            } else {
              this.value.print(output);
            }
          }
          output.semicolon();
        });
        DEFPRINT(AST_Return, function(self2, output) {
          self2._do_print(output, "return");
        });
        DEFPRINT(AST_Throw, function(self2, output) {
          self2._do_print(output, "throw");
        });
        DEFPRINT(AST_Yield, function(self2, output) {
          var star = self2.is_star ? "*" : "";
          output.print("yield" + star);
          if (self2.expression) {
            output.space();
            self2.expression.print(output);
          }
        });
        DEFPRINT(AST_Await, function(self2, output) {
          output.print("await");
          output.space();
          var e = self2.expression;
          var parens = !(e instanceof AST_Call || e instanceof AST_SymbolRef || e instanceof AST_PropAccess || e instanceof AST_Unary || e instanceof AST_Constant || e instanceof AST_Await || e instanceof AST_Object);
          if (parens)
            output.print("(");
          self2.expression.print(output);
          if (parens)
            output.print(")");
        });
        AST_LoopControl.DEFMETHOD("_do_print", function(output, kind) {
          output.print(kind);
          if (this.label) {
            output.space();
            this.label.print(output);
          }
          output.semicolon();
        });
        DEFPRINT(AST_Break, function(self2, output) {
          self2._do_print(output, "break");
        });
        DEFPRINT(AST_Continue, function(self2, output) {
          self2._do_print(output, "continue");
        });
        function make_then(self2, output) {
          var b = self2.body;
          if (output.option("braces") || output.option("ie8") && b instanceof AST_Do)
            return make_block(b, output);
          if (!b)
            return output.force_semicolon();
          while (true) {
            if (b instanceof AST_If) {
              if (!b.alternative) {
                make_block(self2.body, output);
                return;
              }
              b = b.alternative;
            } else if (b instanceof AST_StatementWithBody) {
              b = b.body;
            } else
              break;
          }
          print_maybe_braced_body(self2.body, output);
        }
        DEFPRINT(AST_If, function(self2, output) {
          output.print("if");
          output.space();
          output.with_parens(function() {
            self2.condition.print(output);
          });
          output.space();
          if (self2.alternative) {
            make_then(self2, output);
            output.space();
            output.print("else");
            output.space();
            if (self2.alternative instanceof AST_If)
              self2.alternative.print(output);
            else
              print_maybe_braced_body(self2.alternative, output);
          } else {
            self2._do_print_body(output);
          }
        });
        DEFPRINT(AST_Switch, function(self2, output) {
          output.print("switch");
          output.space();
          output.with_parens(function() {
            self2.expression.print(output);
          });
          output.space();
          var last = self2.body.length - 1;
          if (last < 0)
            print_braced_empty(self2, output);
          else
            output.with_block(function() {
              self2.body.forEach(function(branch, i) {
                output.indent(true);
                branch.print(output);
                if (i < last && branch.body.length > 0)
                  output.newline();
              });
            });
        });
        AST_SwitchBranch.DEFMETHOD("_do_print_body", function(output) {
          output.newline();
          this.body.forEach(function(stmt) {
            output.indent();
            stmt.print(output);
            output.newline();
          });
        });
        DEFPRINT(AST_Default, function(self2, output) {
          output.print("default:");
          self2._do_print_body(output);
        });
        DEFPRINT(AST_Case, function(self2, output) {
          output.print("case");
          output.space();
          self2.expression.print(output);
          output.print(":");
          self2._do_print_body(output);
        });
        DEFPRINT(AST_Try, function(self2, output) {
          output.print("try");
          output.space();
          self2.body.print(output);
          if (self2.bcatch) {
            output.space();
            self2.bcatch.print(output);
          }
          if (self2.bfinally) {
            output.space();
            self2.bfinally.print(output);
          }
        });
        DEFPRINT(AST_TryBlock, function(self2, output) {
          print_braced(self2, output);
        });
        DEFPRINT(AST_Catch, function(self2, output) {
          output.print("catch");
          if (self2.argname) {
            output.space();
            output.with_parens(function() {
              self2.argname.print(output);
            });
          }
          output.space();
          print_braced(self2, output);
        });
        DEFPRINT(AST_Finally, function(self2, output) {
          output.print("finally");
          output.space();
          print_braced(self2, output);
        });
        AST_Definitions.DEFMETHOD("_do_print", function(output, kind) {
          output.print(kind);
          output.space();
          this.definitions.forEach(function(def, i) {
            if (i)
              output.comma();
            def.print(output);
          });
          var p2 = output.parent();
          var in_for = p2 instanceof AST_For || p2 instanceof AST_ForIn;
          var output_semicolon = !in_for || p2 && p2.init !== this;
          if (output_semicolon)
            output.semicolon();
        });
        DEFPRINT(AST_Let, function(self2, output) {
          self2._do_print(output, "let");
        });
        DEFPRINT(AST_Var, function(self2, output) {
          self2._do_print(output, "var");
        });
        DEFPRINT(AST_Const, function(self2, output) {
          self2._do_print(output, "const");
        });
        DEFPRINT(AST_Import, function(self2, output) {
          output.print("import");
          output.space();
          if (self2.imported_name) {
            self2.imported_name.print(output);
          }
          if (self2.imported_name && self2.imported_names) {
            output.print(",");
            output.space();
          }
          if (self2.imported_names) {
            if (self2.imported_names.length === 1 && self2.imported_names[0].foreign_name.name === "*" && !self2.imported_names[0].foreign_name.quote) {
              self2.imported_names[0].print(output);
            } else {
              output.print("{");
              self2.imported_names.forEach(function(name_import, i) {
                output.space();
                name_import.print(output);
                if (i < self2.imported_names.length - 1) {
                  output.print(",");
                }
              });
              output.space();
              output.print("}");
            }
          }
          if (self2.imported_name || self2.imported_names) {
            output.space();
            output.print("from");
            output.space();
          }
          self2.module_name.print(output);
          if (self2.assert_clause) {
            output.print("assert");
            self2.assert_clause.print(output);
          }
          output.semicolon();
        });
        DEFPRINT(AST_ImportMeta, function(self2, output) {
          output.print("import.meta");
        });
        DEFPRINT(AST_NameMapping, function(self2, output) {
          var is_import = output.parent() instanceof AST_Import;
          var definition = self2.name.definition();
          var foreign_name = self2.foreign_name;
          var names_are_different = (definition && definition.mangled_name || self2.name.name) !== foreign_name.name;
          if (!names_are_different && foreign_name.name === "*" && foreign_name.quote != self2.name.quote) {
            names_are_different = true;
          }
          var foreign_name_is_name = foreign_name.quote == null;
          if (names_are_different) {
            if (is_import) {
              if (foreign_name_is_name) {
                output.print(foreign_name.name);
              } else {
                output.print_string(foreign_name.name, foreign_name.quote);
              }
            } else {
              if (self2.name.quote == null) {
                self2.name.print(output);
              } else {
                output.print_string(self2.name.name, self2.name.quote);
              }
            }
            output.space();
            output.print("as");
            output.space();
            if (is_import) {
              self2.name.print(output);
            } else {
              if (foreign_name_is_name) {
                output.print(foreign_name.name);
              } else {
                output.print_string(foreign_name.name, foreign_name.quote);
              }
            }
          } else {
            if (self2.name.quote == null) {
              self2.name.print(output);
            } else {
              output.print_string(self2.name.name, self2.name.quote);
            }
          }
        });
        DEFPRINT(AST_Export, function(self2, output) {
          output.print("export");
          output.space();
          if (self2.is_default) {
            output.print("default");
            output.space();
          }
          if (self2.exported_names) {
            if (self2.exported_names.length === 1 && self2.exported_names[0].name.name === "*" && !self2.exported_names[0].name.quote) {
              self2.exported_names[0].print(output);
            } else {
              output.print("{");
              self2.exported_names.forEach(function(name_export, i) {
                output.space();
                name_export.print(output);
                if (i < self2.exported_names.length - 1) {
                  output.print(",");
                }
              });
              output.space();
              output.print("}");
            }
          } else if (self2.exported_value) {
            self2.exported_value.print(output);
          } else if (self2.exported_definition) {
            self2.exported_definition.print(output);
            if (self2.exported_definition instanceof AST_Definitions)
              return;
          }
          if (self2.module_name) {
            output.space();
            output.print("from");
            output.space();
            self2.module_name.print(output);
          }
          if (self2.assert_clause) {
            output.print("assert");
            self2.assert_clause.print(output);
          }
          if (self2.exported_value && !(self2.exported_value instanceof AST_Defun || self2.exported_value instanceof AST_Function || self2.exported_value instanceof AST_Class) || self2.module_name || self2.exported_names) {
            output.semicolon();
          }
        });
        function parenthesize_for_noin(node, output, noin) {
          var parens = false;
          if (noin) {
            parens = walk(node, (node2) => {
              if (node2 instanceof AST_Scope && !(node2 instanceof AST_Arrow)) {
                return true;
              }
              if (node2 instanceof AST_Binary && node2.operator == "in" || node2 instanceof AST_PrivateIn) {
                return walk_abort;
              }
            });
          }
          node.print(output, parens);
        }
        DEFPRINT(AST_VarDef, function(self2, output) {
          self2.name.print(output);
          if (self2.value) {
            output.space();
            output.print("=");
            output.space();
            var p2 = output.parent(1);
            var noin = p2 instanceof AST_For || p2 instanceof AST_ForIn;
            parenthesize_for_noin(self2.value, output, noin);
          }
        });
        DEFPRINT(AST_Call, function(self2, output) {
          self2.expression.print(output);
          if (self2 instanceof AST_New && self2.args.length === 0)
            return;
          if (self2.expression instanceof AST_Call || self2.expression instanceof AST_Lambda) {
            output.add_mapping(self2.start);
          }
          if (self2.optional)
            output.print("?.");
          output.with_parens(function() {
            self2.args.forEach(function(expr, i) {
              if (i)
                output.comma();
              expr.print(output);
            });
          });
        });
        DEFPRINT(AST_New, function(self2, output) {
          output.print("new");
          output.space();
          AST_Call.prototype._codegen(self2, output);
        });
        AST_Sequence.DEFMETHOD("_do_print", function(output) {
          this.expressions.forEach(function(node, index) {
            if (index > 0) {
              output.comma();
              if (output.should_break()) {
                output.newline();
                output.indent();
              }
            }
            node.print(output);
          });
        });
        DEFPRINT(AST_Sequence, function(self2, output) {
          self2._do_print(output);
        });
        DEFPRINT(AST_Dot, function(self2, output) {
          var expr = self2.expression;
          expr.print(output);
          var prop = self2.property;
          var print_computed = ALL_RESERVED_WORDS.has(prop) ? output.option("ie8") : !is_identifier_string(
            prop,
            output.option("ecma") >= 2015 && !output.option("safari10")
          );
          if (self2.optional)
            output.print("?.");
          if (print_computed) {
            output.print("[");
            output.add_mapping(self2.end);
            output.print_string(prop);
            output.print("]");
          } else {
            if (expr instanceof AST_Number && expr.getValue() >= 0) {
              if (!/[xa-f.)]/i.test(output.last())) {
                output.print(".");
              }
            }
            if (!self2.optional)
              output.print(".");
            output.add_mapping(self2.end);
            output.print_name(prop);
          }
        });
        DEFPRINT(AST_DotHash, function(self2, output) {
          var expr = self2.expression;
          expr.print(output);
          var prop = self2.property;
          if (self2.optional)
            output.print("?");
          output.print(".#");
          output.add_mapping(self2.end);
          output.print_name(prop);
        });
        DEFPRINT(AST_Sub, function(self2, output) {
          self2.expression.print(output);
          if (self2.optional)
            output.print("?.");
          output.print("[");
          self2.property.print(output);
          output.print("]");
        });
        DEFPRINT(AST_Chain, function(self2, output) {
          self2.expression.print(output);
        });
        DEFPRINT(AST_UnaryPrefix, function(self2, output) {
          var op = self2.operator;
          if (op === "--" && output.last().endsWith("!")) {
            output.print(" ");
          }
          output.print(op);
          if (/^[a-z]/i.test(op) || /[+-]$/.test(op) && self2.expression instanceof AST_UnaryPrefix && /^[+-]/.test(self2.expression.operator)) {
            output.space();
          }
          self2.expression.print(output);
        });
        DEFPRINT(AST_UnaryPostfix, function(self2, output) {
          self2.expression.print(output);
          output.print(self2.operator);
        });
        DEFPRINT(AST_Binary, function(self2, output) {
          var op = self2.operator;
          self2.left.print(output);
          if (op[0] == ">" && output.last().endsWith("--")) {
            output.print(" ");
          } else {
            output.space();
          }
          output.print(op);
          output.space();
          self2.right.print(output);
        });
        DEFPRINT(AST_Conditional, function(self2, output) {
          self2.condition.print(output);
          output.space();
          output.print("?");
          output.space();
          self2.consequent.print(output);
          output.space();
          output.colon();
          self2.alternative.print(output);
        });
        DEFPRINT(AST_Array, function(self2, output) {
          output.with_square(function() {
            var a = self2.elements, len = a.length;
            if (len > 0)
              output.space();
            a.forEach(function(exp, i) {
              if (i)
                output.comma();
              exp.print(output);
              if (i === len - 1 && exp instanceof AST_Hole)
                output.comma();
            });
            if (len > 0)
              output.space();
          });
        });
        DEFPRINT(AST_Object, function(self2, output) {
          if (self2.properties.length > 0)
            output.with_block(function() {
              self2.properties.forEach(function(prop, i) {
                if (i) {
                  output.print(",");
                  output.newline();
                }
                output.indent();
                prop.print(output);
              });
              output.newline();
            });
          else
            print_braced_empty(self2, output);
        });
        DEFPRINT(AST_Class, function(self2, output) {
          output.print("class");
          output.space();
          if (self2.name) {
            self2.name.print(output);
            output.space();
          }
          if (self2.extends) {
            var parens = !(self2.extends instanceof AST_SymbolRef) && !(self2.extends instanceof AST_PropAccess) && !(self2.extends instanceof AST_ClassExpression) && !(self2.extends instanceof AST_Function);
            output.print("extends");
            if (parens) {
              output.print("(");
            } else {
              output.space();
            }
            self2.extends.print(output);
            if (parens) {
              output.print(")");
            } else {
              output.space();
            }
          }
          if (self2.properties.length > 0)
            output.with_block(function() {
              self2.properties.forEach(function(prop, i) {
                if (i) {
                  output.newline();
                }
                output.indent();
                prop.print(output);
              });
              output.newline();
            });
          else
            output.print("{}");
        });
        DEFPRINT(AST_NewTarget, function(self2, output) {
          output.print("new.target");
        });
        function print_property_name(key, quote, output) {
          if (output.option("quote_keys")) {
            output.print_string(key);
            return false;
          }
          if ("" + +key == key && key >= 0) {
            if (output.option("keep_numbers")) {
              output.print(key);
              return false;
            }
            output.print(make_num(key));
            return false;
          }
          var print_string = ALL_RESERVED_WORDS.has(key) ? output.option("ie8") : output.option("ecma") < 2015 || output.option("safari10") ? !is_basic_identifier_string(key) : !is_identifier_string(key, true);
          if (print_string || quote && output.option("keep_quoted_props")) {
            output.print_string(key, quote);
            return false;
          }
          output.print_name(key);
          return true;
        }
        DEFPRINT(AST_ObjectKeyVal, function(self2, output) {
          function get_name(self3) {
            var def = self3.definition();
            return def ? def.mangled_name || def.name : self3.name;
          }
          const try_shorthand = output.option("shorthand") && !(self2.key instanceof AST_Node);
          if (try_shorthand && self2.value instanceof AST_Symbol && get_name(self2.value) === self2.key && !ALL_RESERVED_WORDS.has(self2.key)) {
            const was_shorthand = print_property_name(self2.key, self2.quote, output);
            if (!was_shorthand) {
              output.colon();
              self2.value.print(output);
            }
          } else if (try_shorthand && self2.value instanceof AST_DefaultAssign && self2.value.left instanceof AST_Symbol && get_name(self2.value.left) === self2.key) {
            const was_shorthand = print_property_name(self2.key, self2.quote, output);
            if (!was_shorthand) {
              output.colon();
              self2.value.left.print(output);
            }
            output.space();
            output.print("=");
            output.space();
            self2.value.right.print(output);
          } else {
            if (!(self2.key instanceof AST_Node)) {
              print_property_name(self2.key, self2.quote, output);
            } else {
              output.with_square(function() {
                self2.key.print(output);
              });
            }
            output.colon();
            self2.value.print(output);
          }
        });
        DEFPRINT(AST_ClassPrivateProperty, (self2, output) => {
          if (self2.static) {
            output.print("static");
            output.space();
          }
          output.print("#");
          print_property_name(self2.key.name, self2.quote, output);
          if (self2.value) {
            output.print("=");
            self2.value.print(output);
          }
          output.semicolon();
        });
        DEFPRINT(AST_ClassProperty, (self2, output) => {
          if (self2.static) {
            output.print("static");
            output.space();
          }
          if (self2.key instanceof AST_SymbolClassProperty) {
            print_property_name(self2.key.name, self2.quote, output);
          } else {
            output.print("[");
            self2.key.print(output);
            output.print("]");
          }
          if (self2.value) {
            output.print("=");
            self2.value.print(output);
          }
          output.semicolon();
        });
        AST_ObjectProperty.DEFMETHOD("_print_getter_setter", function(type, is_private, output) {
          var self2 = this;
          if (self2.static) {
            output.print("static");
            output.space();
          }
          if (type) {
            output.print(type);
            output.space();
          }
          if (self2.key instanceof AST_SymbolMethod) {
            if (is_private)
              output.print("#");
            print_property_name(self2.key.name, self2.quote, output);
            self2.key.add_source_map(output);
          } else {
            output.with_square(function() {
              self2.key.print(output);
            });
          }
          self2.value._do_print(output, true);
        });
        DEFPRINT(AST_ObjectSetter, function(self2, output) {
          self2._print_getter_setter("set", false, output);
        });
        DEFPRINT(AST_ObjectGetter, function(self2, output) {
          self2._print_getter_setter("get", false, output);
        });
        DEFPRINT(AST_PrivateSetter, function(self2, output) {
          self2._print_getter_setter("set", true, output);
        });
        DEFPRINT(AST_PrivateGetter, function(self2, output) {
          self2._print_getter_setter("get", true, output);
        });
        DEFPRINT(AST_PrivateMethod, function(self2, output) {
          var type;
          if (self2.is_generator && self2.async) {
            type = "async*";
          } else if (self2.is_generator) {
            type = "*";
          } else if (self2.async) {
            type = "async";
          }
          self2._print_getter_setter(type, true, output);
        });
        DEFPRINT(AST_PrivateIn, function(self2, output) {
          self2.key.print(output);
          output.space();
          output.print("in");
          output.space();
          self2.value.print(output);
        });
        DEFPRINT(AST_SymbolPrivateProperty, function(self2, output) {
          output.print("#" + self2.name);
        });
        DEFPRINT(AST_ConciseMethod, function(self2, output) {
          var type;
          if (self2.is_generator && self2.async) {
            type = "async*";
          } else if (self2.is_generator) {
            type = "*";
          } else if (self2.async) {
            type = "async";
          }
          self2._print_getter_setter(type, false, output);
        });
        DEFPRINT(AST_ClassStaticBlock, function(self2, output) {
          output.print("static");
          output.space();
          print_braced(self2, output);
        });
        AST_Symbol.DEFMETHOD("_do_print", function(output) {
          var def = this.definition();
          output.print_name(def ? def.mangled_name || def.name : this.name);
        });
        DEFPRINT(AST_Symbol, function(self2, output) {
          self2._do_print(output);
        });
        DEFPRINT(AST_Hole, noop);
        DEFPRINT(AST_This, function(self2, output) {
          output.print("this");
        });
        DEFPRINT(AST_Super, function(self2, output) {
          output.print("super");
        });
        DEFPRINT(AST_Constant, function(self2, output) {
          output.print(self2.getValue());
        });
        DEFPRINT(AST_String, function(self2, output) {
          output.print_string(self2.getValue(), self2.quote, output.in_directive);
        });
        DEFPRINT(AST_Number, function(self2, output) {
          if ((output.option("keep_numbers") || output.use_asm) && self2.raw) {
            output.print(self2.raw);
          } else {
            output.print(make_num(self2.getValue()));
          }
        });
        DEFPRINT(AST_BigInt, function(self2, output) {
          output.print(self2.getValue() + "n");
        });
        const r_slash_script = /(<\s*\/\s*script)/i;
        const r_starts_with_script = /^\s*script/i;
        const slash_script_replace = (_, $1) => $1.replace("/", "\\/");
        DEFPRINT(AST_RegExp, function(self2, output) {
          let { source, flags } = self2.getValue();
          source = regexp_source_fix(source);
          flags = flags ? sort_regexp_flags(flags) : "";
          source = source.replace(r_slash_script, slash_script_replace);
          if (r_starts_with_script.test(source) && output.last().endsWith("<")) {
            output.print(" ");
          }
          output.print(output.to_utf8(`/${source}/${flags}`, false, true));
          const parent = output.parent();
          if (parent instanceof AST_Binary && /^\w/.test(parent.operator) && parent.left === self2) {
            output.print(" ");
          }
        });
        function print_maybe_braced_body(stat, output) {
          if (output.option("braces")) {
            make_block(stat, output);
          } else {
            if (!stat || stat instanceof AST_EmptyStatement)
              output.force_semicolon();
            else if (stat instanceof AST_Let || stat instanceof AST_Const || stat instanceof AST_Class)
              make_block(stat, output);
            else
              stat.print(output);
          }
        }
        function best_of2(a) {
          var best = a[0], len = best.length;
          for (var i = 1; i < a.length; ++i) {
            if (a[i].length < len) {
              best = a[i];
              len = best.length;
            }
          }
          return best;
        }
        function make_num(num) {
          var str = num.toString(10).replace(/^0\./, ".").replace("e+", "e");
          var candidates = [str];
          if (Math.floor(num) === num) {
            if (num < 0) {
              candidates.push("-0x" + (-num).toString(16).toLowerCase());
            } else {
              candidates.push("0x" + num.toString(16).toLowerCase());
            }
          }
          var match, len, digits;
          if (match = /^\.0+/.exec(str)) {
            len = match[0].length;
            digits = str.slice(len);
            candidates.push(digits + "e-" + (digits.length + len - 1));
          } else if (match = /0+$/.exec(str)) {
            len = match[0].length;
            candidates.push(str.slice(0, -len) + "e" + len);
          } else if (match = /^(\d)\.(\d+)e(-?\d+)$/.exec(str)) {
            candidates.push(match[1] + match[2] + "e" + (match[3] - match[2].length));
          }
          return best_of2(candidates);
        }
        function make_block(stmt, output) {
          if (!stmt || stmt instanceof AST_EmptyStatement)
            output.print("{}");
          else if (stmt instanceof AST_BlockStatement)
            stmt.print(output);
          else
            output.with_block(function() {
              output.indent();
              stmt.print(output);
              output.newline();
            });
        }
        function DEFMAP(nodetype, generator) {
          nodetype.forEach(function(nodetype2) {
            nodetype2.DEFMETHOD("add_source_map", generator);
          });
        }
        DEFMAP([
          // We could easily add info for ALL nodes, but it seems to me that
          // would be quite wasteful, hence this noop in the base class.
          AST_Node,
          // since the label symbol will mark it
          AST_LabeledStatement,
          AST_Toplevel
        ], noop);
        DEFMAP([
          AST_Array,
          AST_BlockStatement,
          AST_Catch,
          AST_Class,
          AST_Constant,
          AST_Debugger,
          AST_Definitions,
          AST_Directive,
          AST_Finally,
          AST_Jump,
          AST_Lambda,
          AST_New,
          AST_Object,
          AST_StatementWithBody,
          AST_Symbol,
          AST_Switch,
          AST_SwitchBranch,
          AST_TemplateString,
          AST_TemplateSegment,
          AST_Try
        ], function(output) {
          output.add_mapping(this.start);
        });
        DEFMAP([
          AST_ObjectGetter,
          AST_ObjectSetter,
          AST_PrivateGetter,
          AST_PrivateSetter,
          AST_ConciseMethod,
          AST_PrivateMethod
        ], function(output) {
          output.add_mapping(
            this.start,
            false
            /*name handled below*/
          );
        });
        DEFMAP([
          AST_SymbolMethod,
          AST_SymbolPrivateProperty
        ], function(output) {
          const tok_type = this.end && this.end.type;
          if (tok_type === "name" || tok_type === "privatename") {
            output.add_mapping(this.end, this.name);
          } else {
            output.add_mapping(this.end);
          }
        });
        DEFMAP([AST_ObjectProperty], function(output) {
          output.add_mapping(this.start, this.key);
        });
      })();
      const shallow_cmp = (node1, node2) => {
        return node1 === null && node2 === null || node1.TYPE === node2.TYPE && node1.shallow_cmp(node2);
      };
      const equivalent_to = (tree1, tree2) => {
        if (!shallow_cmp(tree1, tree2))
          return false;
        const walk_1_state = [tree1];
        const walk_2_state = [tree2];
        const walk_1_push = walk_1_state.push.bind(walk_1_state);
        const walk_2_push = walk_2_state.push.bind(walk_2_state);
        while (walk_1_state.length && walk_2_state.length) {
          const node_1 = walk_1_state.pop();
          const node_2 = walk_2_state.pop();
          if (!shallow_cmp(node_1, node_2))
            return false;
          node_1._children_backwards(walk_1_push);
          node_2._children_backwards(walk_2_push);
          if (walk_1_state.length !== walk_2_state.length) {
            return false;
          }
        }
        return walk_1_state.length == 0 && walk_2_state.length == 0;
      };
      const pass_through = () => true;
      AST_Node.prototype.shallow_cmp = function() {
        throw new Error("did not find a shallow_cmp function for " + this.constructor.name);
      };
      AST_Debugger.prototype.shallow_cmp = pass_through;
      AST_Directive.prototype.shallow_cmp = function(other) {
        return this.value === other.value;
      };
      AST_SimpleStatement.prototype.shallow_cmp = pass_through;
      AST_Block.prototype.shallow_cmp = pass_through;
      AST_EmptyStatement.prototype.shallow_cmp = pass_through;
      AST_LabeledStatement.prototype.shallow_cmp = function(other) {
        return this.label.name === other.label.name;
      };
      AST_Do.prototype.shallow_cmp = pass_through;
      AST_While.prototype.shallow_cmp = pass_through;
      AST_For.prototype.shallow_cmp = function(other) {
        return (this.init == null ? other.init == null : this.init === other.init) && (this.condition == null ? other.condition == null : this.condition === other.condition) && (this.step == null ? other.step == null : this.step === other.step);
      };
      AST_ForIn.prototype.shallow_cmp = pass_through;
      AST_ForOf.prototype.shallow_cmp = pass_through;
      AST_With.prototype.shallow_cmp = pass_through;
      AST_Toplevel.prototype.shallow_cmp = pass_through;
      AST_Expansion.prototype.shallow_cmp = pass_through;
      AST_Lambda.prototype.shallow_cmp = function(other) {
        return this.is_generator === other.is_generator && this.async === other.async;
      };
      AST_Destructuring.prototype.shallow_cmp = function(other) {
        return this.is_array === other.is_array;
      };
      AST_PrefixedTemplateString.prototype.shallow_cmp = pass_through;
      AST_TemplateString.prototype.shallow_cmp = pass_through;
      AST_TemplateSegment.prototype.shallow_cmp = function(other) {
        return this.value === other.value;
      };
      AST_Jump.prototype.shallow_cmp = pass_through;
      AST_LoopControl.prototype.shallow_cmp = pass_through;
      AST_Await.prototype.shallow_cmp = pass_through;
      AST_Yield.prototype.shallow_cmp = function(other) {
        return this.is_star === other.is_star;
      };
      AST_If.prototype.shallow_cmp = function(other) {
        return this.alternative == null ? other.alternative == null : this.alternative === other.alternative;
      };
      AST_Switch.prototype.shallow_cmp = pass_through;
      AST_SwitchBranch.prototype.shallow_cmp = pass_through;
      AST_Try.prototype.shallow_cmp = function(other) {
        return this.body === other.body && (this.bcatch == null ? other.bcatch == null : this.bcatch === other.bcatch) && (this.bfinally == null ? other.bfinally == null : this.bfinally === other.bfinally);
      };
      AST_Catch.prototype.shallow_cmp = function(other) {
        return this.argname == null ? other.argname == null : this.argname === other.argname;
      };
      AST_Finally.prototype.shallow_cmp = pass_through;
      AST_Definitions.prototype.shallow_cmp = pass_through;
      AST_VarDef.prototype.shallow_cmp = function(other) {
        return this.value == null ? other.value == null : this.value === other.value;
      };
      AST_NameMapping.prototype.shallow_cmp = pass_through;
      AST_Import.prototype.shallow_cmp = function(other) {
        return (this.imported_name == null ? other.imported_name == null : this.imported_name === other.imported_name) && (this.imported_names == null ? other.imported_names == null : this.imported_names === other.imported_names);
      };
      AST_ImportMeta.prototype.shallow_cmp = pass_through;
      AST_Export.prototype.shallow_cmp = function(other) {
        return (this.exported_definition == null ? other.exported_definition == null : this.exported_definition === other.exported_definition) && (this.exported_value == null ? other.exported_value == null : this.exported_value === other.exported_value) && (this.exported_names == null ? other.exported_names == null : this.exported_names === other.exported_names) && this.module_name === other.module_name && this.is_default === other.is_default;
      };
      AST_Call.prototype.shallow_cmp = pass_through;
      AST_Sequence.prototype.shallow_cmp = pass_through;
      AST_PropAccess.prototype.shallow_cmp = pass_through;
      AST_Chain.prototype.shallow_cmp = pass_through;
      AST_Dot.prototype.shallow_cmp = function(other) {
        return this.property === other.property;
      };
      AST_DotHash.prototype.shallow_cmp = function(other) {
        return this.property === other.property;
      };
      AST_Unary.prototype.shallow_cmp = function(other) {
        return this.operator === other.operator;
      };
      AST_Binary.prototype.shallow_cmp = function(other) {
        return this.operator === other.operator;
      };
      AST_Conditional.prototype.shallow_cmp = pass_through;
      AST_Array.prototype.shallow_cmp = pass_through;
      AST_Object.prototype.shallow_cmp = pass_through;
      AST_ObjectProperty.prototype.shallow_cmp = pass_through;
      AST_ObjectKeyVal.prototype.shallow_cmp = function(other) {
        return this.key === other.key;
      };
      AST_ObjectSetter.prototype.shallow_cmp = function(other) {
        return this.static === other.static;
      };
      AST_ObjectGetter.prototype.shallow_cmp = function(other) {
        return this.static === other.static;
      };
      AST_ConciseMethod.prototype.shallow_cmp = function(other) {
        return this.static === other.static && this.is_generator === other.is_generator && this.async === other.async;
      };
      AST_Class.prototype.shallow_cmp = function(other) {
        return (this.name == null ? other.name == null : this.name === other.name) && (this.extends == null ? other.extends == null : this.extends === other.extends);
      };
      AST_ClassProperty.prototype.shallow_cmp = function(other) {
        return this.static === other.static;
      };
      AST_Symbol.prototype.shallow_cmp = function(other) {
        return this.name === other.name;
      };
      AST_NewTarget.prototype.shallow_cmp = pass_through;
      AST_This.prototype.shallow_cmp = pass_through;
      AST_Super.prototype.shallow_cmp = pass_through;
      AST_String.prototype.shallow_cmp = function(other) {
        return this.value === other.value;
      };
      AST_Number.prototype.shallow_cmp = function(other) {
        return this.value === other.value;
      };
      AST_BigInt.prototype.shallow_cmp = function(other) {
        return this.value === other.value;
      };
      AST_RegExp.prototype.shallow_cmp = function(other) {
        return this.value.flags === other.value.flags && this.value.source === other.value.source;
      };
      AST_Atom.prototype.shallow_cmp = pass_through;
      const MASK_EXPORT_DONT_MANGLE = 1 << 0;
      const MASK_EXPORT_WANT_MANGLE = 1 << 1;
      let function_defs = null;
      let unmangleable_names = null;
      let scopes_with_block_defuns = null;
      class SymbolDef {
        constructor(scope, orig, init) {
          this.name = orig.name;
          this.orig = [orig];
          this.init = init;
          this.eliminated = 0;
          this.assignments = 0;
          this.scope = scope;
          this.replaced = 0;
          this.global = false;
          this.export = 0;
          this.mangled_name = null;
          this.undeclared = false;
          this.id = SymbolDef.next_id++;
          this.chained = false;
          this.direct_access = false;
          this.escaped = 0;
          this.recursive_refs = 0;
          this.references = [];
          this.should_replace = void 0;
          this.single_use = false;
          this.fixed = false;
          Object.seal(this);
        }
        fixed_value() {
          if (!this.fixed || this.fixed instanceof AST_Node)
            return this.fixed;
          return this.fixed();
        }
        unmangleable(options) {
          if (!options)
            options = {};
          if (function_defs && function_defs.has(this.id) && keep_name(options.keep_fnames, this.orig[0].name))
            return true;
          return this.global && !options.toplevel || this.export & MASK_EXPORT_DONT_MANGLE || this.undeclared || !options.eval && this.scope.pinned() || (this.orig[0] instanceof AST_SymbolLambda || this.orig[0] instanceof AST_SymbolDefun) && keep_name(options.keep_fnames, this.orig[0].name) || this.orig[0] instanceof AST_SymbolMethod || (this.orig[0] instanceof AST_SymbolClass || this.orig[0] instanceof AST_SymbolDefClass) && keep_name(options.keep_classnames, this.orig[0].name);
        }
        mangle(options) {
          const cache = options.cache && options.cache.props;
          if (this.global && cache && cache.has(this.name)) {
            this.mangled_name = cache.get(this.name);
          } else if (!this.mangled_name && !this.unmangleable(options)) {
            var s = this.scope;
            var sym = this.orig[0];
            if (options.ie8 && sym instanceof AST_SymbolLambda)
              s = s.parent_scope;
            const redefinition = redefined_catch_def(this);
            this.mangled_name = redefinition ? redefinition.mangled_name || redefinition.name : s.next_mangled(options, this);
            if (this.global && cache) {
              cache.set(this.name, this.mangled_name);
            }
          }
        }
      }
      SymbolDef.next_id = 1;
      function redefined_catch_def(def) {
        if (def.orig[0] instanceof AST_SymbolCatch && def.scope.is_block_scope()) {
          return def.scope.get_defun_scope().variables.get(def.name);
        }
      }
      AST_Scope.DEFMETHOD("figure_out_scope", function(options, { parent_scope = null, toplevel = this } = {}) {
        options = defaults(options, {
          cache: null,
          ie8: false,
          safari10: false,
          module: false
        });
        if (!(toplevel instanceof AST_Toplevel)) {
          throw new Error("Invalid toplevel scope");
        }
        var scope = this.parent_scope = parent_scope;
        var labels = /* @__PURE__ */ new Map();
        var defun = null;
        var in_destructuring = null;
        var for_scopes = [];
        var tw = new TreeWalker((node, descend) => {
          if (node.is_block_scope()) {
            const save_scope2 = scope;
            node.block_scope = scope = new AST_Scope(node);
            scope._block_scope = true;
            scope.init_scope_vars(save_scope2);
            scope.uses_with = save_scope2.uses_with;
            scope.uses_eval = save_scope2.uses_eval;
            if (options.safari10) {
              if (node instanceof AST_For || node instanceof AST_ForIn || node instanceof AST_ForOf) {
                for_scopes.push(scope);
              }
            }
            if (node instanceof AST_Switch) {
              const the_block_scope = scope;
              scope = save_scope2;
              node.expression.walk(tw);
              scope = the_block_scope;
              for (let i = 0; i < node.body.length; i++) {
                node.body[i].walk(tw);
              }
            } else {
              descend();
            }
            scope = save_scope2;
            return true;
          }
          if (node instanceof AST_Destructuring) {
            const save_destructuring = in_destructuring;
            in_destructuring = node;
            descend();
            in_destructuring = save_destructuring;
            return true;
          }
          if (node instanceof AST_Scope) {
            node.init_scope_vars(scope);
            var save_scope = scope;
            var save_defun = defun;
            var save_labels = labels;
            defun = scope = node;
            labels = /* @__PURE__ */ new Map();
            descend();
            scope = save_scope;
            defun = save_defun;
            labels = save_labels;
            return true;
          }
          if (node instanceof AST_LabeledStatement) {
            var l2 = node.label;
            if (labels.has(l2.name)) {
              throw new Error(string_template("Label {name} defined twice", l2));
            }
            labels.set(l2.name, l2);
            descend();
            labels.delete(l2.name);
            return true;
          }
          if (node instanceof AST_With) {
            for (var s = scope; s; s = s.parent_scope)
              s.uses_with = true;
            return;
          }
          if (node instanceof AST_Symbol) {
            node.scope = scope;
          }
          if (node instanceof AST_Label) {
            node.thedef = node;
            node.references = [];
          }
          if (node instanceof AST_SymbolLambda) {
            defun.def_function(node, node.name == "arguments" ? void 0 : defun);
          } else if (node instanceof AST_SymbolDefun) {
            const closest_scope = defun.parent_scope;
            node.scope = tw.directives["use strict"] ? closest_scope : closest_scope.get_defun_scope();
            mark_export(node.scope.def_function(node, defun), 1);
          } else if (node instanceof AST_SymbolClass) {
            mark_export(defun.def_variable(node, defun), 1);
          } else if (node instanceof AST_SymbolImport) {
            scope.def_variable(node);
          } else if (node instanceof AST_SymbolDefClass) {
            mark_export((node.scope = defun.parent_scope).def_function(node, defun), 1);
          } else if (node instanceof AST_SymbolVar || node instanceof AST_SymbolLet || node instanceof AST_SymbolConst || node instanceof AST_SymbolCatch) {
            var def;
            if (node instanceof AST_SymbolBlockDeclaration) {
              def = scope.def_variable(node, null);
            } else {
              def = defun.def_variable(node, node.TYPE == "SymbolVar" ? null : void 0);
            }
            if (!def.orig.every((sym2) => {
              if (sym2 === node)
                return true;
              if (node instanceof AST_SymbolBlockDeclaration) {
                return sym2 instanceof AST_SymbolLambda;
              }
              return !(sym2 instanceof AST_SymbolLet || sym2 instanceof AST_SymbolConst);
            })) {
              js_error(
                `"${node.name}" is redeclared`,
                node.start.file,
                node.start.line,
                node.start.col,
                node.start.pos
              );
            }
            if (!(node instanceof AST_SymbolFunarg))
              mark_export(def, 2);
            if (defun !== scope) {
              node.mark_enclosed();
              var def = scope.find_variable(node);
              if (node.thedef !== def) {
                node.thedef = def;
                node.reference();
              }
            }
          } else if (node instanceof AST_LabelRef) {
            var sym = labels.get(node.name);
            if (!sym)
              throw new Error(string_template("Undefined label {name} [{line},{col}]", {
                name: node.name,
                line: node.start.line,
                col: node.start.col
              }));
            node.thedef = sym;
          }
          if (!(scope instanceof AST_Toplevel) && (node instanceof AST_Export || node instanceof AST_Import)) {
            js_error(
              `"${node.TYPE}" statement may only appear at the top level`,
              node.start.file,
              node.start.line,
              node.start.col,
              node.start.pos
            );
          }
        });
        if (options.module) {
          tw.directives["use strict"] = true;
        }
        this.walk(tw);
        function mark_export(def, level) {
          if (in_destructuring) {
            var i = 0;
            do {
              level++;
            } while (tw.parent(i++) !== in_destructuring);
          }
          var node = tw.parent(level);
          if (def.export = node instanceof AST_Export ? MASK_EXPORT_DONT_MANGLE : 0) {
            var exported = node.exported_definition;
            if ((exported instanceof AST_Defun || exported instanceof AST_DefClass) && node.is_default) {
              def.export = MASK_EXPORT_WANT_MANGLE;
            }
          }
        }
        const is_toplevel = this instanceof AST_Toplevel;
        if (is_toplevel) {
          this.globals = /* @__PURE__ */ new Map();
        }
        var tw = new TreeWalker((node) => {
          if (node instanceof AST_LoopControl && node.label) {
            node.label.thedef.references.push(node);
            return true;
          }
          if (node instanceof AST_SymbolRef) {
            var name = node.name;
            if (name == "eval" && tw.parent() instanceof AST_Call) {
              for (var s = node.scope; s && !s.uses_eval; s = s.parent_scope) {
                s.uses_eval = true;
              }
            }
            var sym;
            if (tw.parent() instanceof AST_NameMapping && tw.parent(1).module_name || !(sym = node.scope.find_variable(name))) {
              sym = toplevel.def_global(node);
              if (node instanceof AST_SymbolExport)
                sym.export = MASK_EXPORT_DONT_MANGLE;
            } else if (sym.scope instanceof AST_Lambda && name == "arguments") {
              sym.scope.get_defun_scope().uses_arguments = true;
            }
            node.thedef = sym;
            node.reference();
            if (node.scope.is_block_scope() && !(sym.orig[0] instanceof AST_SymbolBlockDeclaration)) {
              node.scope = node.scope.get_defun_scope();
            }
            return true;
          }
          var def;
          if (node instanceof AST_SymbolCatch && (def = redefined_catch_def(node.definition()))) {
            var s = node.scope;
            while (s) {
              push_uniq(s.enclosed, def);
              if (s === def.scope)
                break;
              s = s.parent_scope;
            }
          }
        });
        this.walk(tw);
        if (options.ie8 || options.safari10) {
          walk(this, (node) => {
            if (node instanceof AST_SymbolCatch) {
              var name = node.name;
              var refs = node.thedef.references;
              var scope2 = node.scope.get_defun_scope();
              var def = scope2.find_variable(name) || toplevel.globals.get(name) || scope2.def_variable(node);
              refs.forEach(function(ref) {
                ref.thedef = def;
                ref.reference();
              });
              node.thedef = def;
              node.reference();
              return true;
            }
          });
        }
        if (options.safari10) {
          for (const scope2 of for_scopes) {
            scope2.parent_scope.variables.forEach(function(def) {
              push_uniq(scope2.enclosed, def);
            });
          }
        }
      });
      AST_Toplevel.DEFMETHOD("def_global", function(node) {
        var globals = this.globals, name = node.name;
        if (globals.has(name)) {
          return globals.get(name);
        } else {
          var g = new SymbolDef(this, node);
          g.undeclared = true;
          g.global = true;
          globals.set(name, g);
          return g;
        }
      });
      AST_Scope.DEFMETHOD("init_scope_vars", function(parent_scope) {
        this.variables = /* @__PURE__ */ new Map();
        this.uses_with = false;
        this.uses_eval = false;
        this.parent_scope = parent_scope;
        this.enclosed = [];
        this.cname = -1;
      });
      AST_Scope.DEFMETHOD("conflicting_def", function(name) {
        return this.enclosed.find((def) => def.name === name) || this.variables.has(name) || this.parent_scope && this.parent_scope.conflicting_def(name);
      });
      AST_Scope.DEFMETHOD("conflicting_def_shallow", function(name) {
        return this.enclosed.find((def) => def.name === name) || this.variables.has(name);
      });
      AST_Scope.DEFMETHOD("add_child_scope", function(scope) {
        if (scope.parent_scope === this)
          return;
        scope.parent_scope = this;
        if (scope instanceof AST_Arrow && !this.uses_arguments) {
          this.uses_arguments = walk(scope, (node) => {
            if (node instanceof AST_SymbolRef && node.scope instanceof AST_Lambda && node.name === "arguments") {
              return walk_abort;
            }
            if (node instanceof AST_Lambda && !(node instanceof AST_Arrow)) {
              return true;
            }
          });
        }
        this.uses_with = this.uses_with || scope.uses_with;
        this.uses_eval = this.uses_eval || scope.uses_eval;
        const scope_ancestry = (() => {
          const ancestry = [];
          let cur = this;
          do {
            ancestry.push(cur);
          } while (cur = cur.parent_scope);
          ancestry.reverse();
          return ancestry;
        })();
        const new_scope_enclosed_set = new Set(scope.enclosed);
        const to_enclose = [];
        for (const scope_topdown of scope_ancestry) {
          to_enclose.forEach((e) => push_uniq(scope_topdown.enclosed, e));
          for (const def of scope_topdown.variables.values()) {
            if (new_scope_enclosed_set.has(def)) {
              push_uniq(to_enclose, def);
              push_uniq(scope_topdown.enclosed, def);
            }
          }
        }
      });
      function find_scopes_visible_from(scopes) {
        const found_scopes = /* @__PURE__ */ new Set();
        for (const scope of new Set(scopes)) {
          (function bubble_up(scope2) {
            if (scope2 == null || found_scopes.has(scope2))
              return;
            found_scopes.add(scope2);
            bubble_up(scope2.parent_scope);
          })(scope);
        }
        return [...found_scopes];
      }
      AST_Scope.DEFMETHOD("create_symbol", function(SymClass, {
        source,
        tentative_name,
        scope,
        conflict_scopes = [scope],
        init = null
      } = {}) {
        let symbol_name;
        conflict_scopes = find_scopes_visible_from(conflict_scopes);
        if (tentative_name) {
          tentative_name = symbol_name = tentative_name.replace(/(?:^[^a-z_$]|[^a-z0-9_$])/ig, "_");
          let i = 0;
          while (conflict_scopes.find((s) => s.conflicting_def_shallow(symbol_name))) {
            symbol_name = tentative_name + "$" + i++;
          }
        }
        if (!symbol_name) {
          throw new Error("No symbol name could be generated in create_symbol()");
        }
        const symbol = make_node(SymClass, source, {
          name: symbol_name,
          scope
        });
        this.def_variable(symbol, init || null);
        symbol.mark_enclosed();
        return symbol;
      });
      AST_Node.DEFMETHOD("is_block_scope", return_false);
      AST_Class.DEFMETHOD("is_block_scope", return_false);
      AST_Lambda.DEFMETHOD("is_block_scope", return_false);
      AST_Toplevel.DEFMETHOD("is_block_scope", return_false);
      AST_SwitchBranch.DEFMETHOD("is_block_scope", return_false);
      AST_Block.DEFMETHOD("is_block_scope", return_true);
      AST_Scope.DEFMETHOD("is_block_scope", function() {
        return this._block_scope || false;
      });
      AST_IterationStatement.DEFMETHOD("is_block_scope", return_true);
      AST_Lambda.DEFMETHOD("init_scope_vars", function() {
        AST_Scope.prototype.init_scope_vars.apply(this, arguments);
        this.uses_arguments = false;
        this.def_variable(new AST_SymbolFunarg({
          name: "arguments",
          start: this.start,
          end: this.end
        }));
      });
      AST_Arrow.DEFMETHOD("init_scope_vars", function() {
        AST_Scope.prototype.init_scope_vars.apply(this, arguments);
        this.uses_arguments = false;
      });
      AST_Symbol.DEFMETHOD("mark_enclosed", function() {
        var def = this.definition();
        var s = this.scope;
        while (s) {
          push_uniq(s.enclosed, def);
          if (s === def.scope)
            break;
          s = s.parent_scope;
        }
      });
      AST_Symbol.DEFMETHOD("reference", function() {
        this.definition().references.push(this);
        this.mark_enclosed();
      });
      AST_Scope.DEFMETHOD("find_variable", function(name) {
        if (name instanceof AST_Symbol)
          name = name.name;
        return this.variables.get(name) || this.parent_scope && this.parent_scope.find_variable(name);
      });
      AST_Scope.DEFMETHOD("def_function", function(symbol, init) {
        var def = this.def_variable(symbol, init);
        if (!def.init || def.init instanceof AST_Defun)
          def.init = init;
        return def;
      });
      AST_Scope.DEFMETHOD("def_variable", function(symbol, init) {
        var def = this.variables.get(symbol.name);
        if (def) {
          def.orig.push(symbol);
          if (def.init && (def.scope !== symbol.scope || def.init instanceof AST_Function)) {
            def.init = init;
          }
        } else {
          def = new SymbolDef(this, symbol, init);
          this.variables.set(symbol.name, def);
          def.global = !this.parent_scope;
        }
        return symbol.thedef = def;
      });
      function next_mangled(scope, options) {
        let defun_scope;
        if (scopes_with_block_defuns && (defun_scope = scope.get_defun_scope()) && scopes_with_block_defuns.has(defun_scope)) {
          scope = defun_scope;
        }
        var ext = scope.enclosed;
        var nth_identifier = options.nth_identifier;
        out:
          while (true) {
            var m2 = nth_identifier.get(++scope.cname);
            if (ALL_RESERVED_WORDS.has(m2))
              continue;
            if (options.reserved.has(m2))
              continue;
            if (unmangleable_names && unmangleable_names.has(m2))
              continue out;
            for (let i = ext.length; --i >= 0; ) {
              const def = ext[i];
              const name = def.mangled_name || def.unmangleable(options) && def.name;
              if (m2 == name)
                continue out;
            }
            return m2;
          }
      }
      AST_Scope.DEFMETHOD("next_mangled", function(options) {
        return next_mangled(this, options);
      });
      AST_Toplevel.DEFMETHOD("next_mangled", function(options) {
        let name;
        const mangled_names = this.mangled_names;
        do {
          name = next_mangled(this, options);
        } while (mangled_names.has(name));
        return name;
      });
      AST_Function.DEFMETHOD("next_mangled", function(options, def) {
        var tricky_def = def.orig[0] instanceof AST_SymbolFunarg && this.name && this.name.definition();
        var tricky_name = tricky_def ? tricky_def.mangled_name || tricky_def.name : null;
        while (true) {
          var name = next_mangled(this, options);
          if (!tricky_name || tricky_name != name)
            return name;
        }
      });
      AST_Symbol.DEFMETHOD("unmangleable", function(options) {
        var def = this.definition();
        return !def || def.unmangleable(options);
      });
      AST_Label.DEFMETHOD("unmangleable", return_false);
      AST_Symbol.DEFMETHOD("unreferenced", function() {
        return !this.definition().references.length && !this.scope.pinned();
      });
      AST_Symbol.DEFMETHOD("definition", function() {
        return this.thedef;
      });
      AST_Symbol.DEFMETHOD("global", function() {
        return this.thedef.global;
      });
      function format_mangler_options(options) {
        options = defaults(options, {
          eval: false,
          nth_identifier: base54,
          ie8: false,
          keep_classnames: false,
          keep_fnames: false,
          module: false,
          reserved: [],
          toplevel: false
        });
        if (options.module)
          options.toplevel = true;
        if (!Array.isArray(options.reserved) && !(options.reserved instanceof Set)) {
          options.reserved = [];
        }
        options.reserved = new Set(options.reserved);
        options.reserved.add("arguments");
        return options;
      }
      AST_Toplevel.DEFMETHOD("mangle_names", function(options) {
        options = format_mangler_options(options);
        var nth_identifier = options.nth_identifier;
        var lname = -1;
        var to_mangle = [];
        if (options.keep_fnames) {
          function_defs = /* @__PURE__ */ new Set();
        }
        const mangled_names = this.mangled_names = /* @__PURE__ */ new Set();
        unmangleable_names = /* @__PURE__ */ new Set();
        if (options.cache) {
          this.globals.forEach(collect);
          if (options.cache.props) {
            options.cache.props.forEach(function(mangled_name) {
              mangled_names.add(mangled_name);
            });
          }
        }
        var tw = new TreeWalker(function(node, descend) {
          if (node instanceof AST_LabeledStatement) {
            var save_nesting = lname;
            descend();
            lname = save_nesting;
            return true;
          }
          if (node instanceof AST_Defun && !(tw.parent() instanceof AST_Scope)) {
            scopes_with_block_defuns = scopes_with_block_defuns || /* @__PURE__ */ new Set();
            scopes_with_block_defuns.add(node.parent_scope.get_defun_scope());
          }
          if (node instanceof AST_Scope) {
            node.variables.forEach(collect);
            return;
          }
          if (node.is_block_scope()) {
            node.block_scope.variables.forEach(collect);
            return;
          }
          if (function_defs && node instanceof AST_VarDef && node.value instanceof AST_Lambda && !node.value.name && keep_name(options.keep_fnames, node.name.name)) {
            function_defs.add(node.name.definition().id);
            return;
          }
          if (node instanceof AST_Label) {
            let name;
            do {
              name = nth_identifier.get(++lname);
            } while (ALL_RESERVED_WORDS.has(name));
            node.mangled_name = name;
            return true;
          }
          if (!(options.ie8 || options.safari10) && node instanceof AST_SymbolCatch) {
            to_mangle.push(node.definition());
            return;
          }
        });
        this.walk(tw);
        if (options.keep_fnames || options.keep_classnames) {
          to_mangle.forEach((def) => {
            if (def.name.length < 6 && def.unmangleable(options)) {
              unmangleable_names.add(def.name);
            }
          });
        }
        to_mangle.forEach((def) => {
          def.mangle(options);
        });
        function_defs = null;
        unmangleable_names = null;
        scopes_with_block_defuns = null;
        function collect(symbol) {
          if (symbol.export & MASK_EXPORT_DONT_MANGLE) {
            unmangleable_names.add(symbol.name);
          } else if (!options.reserved.has(symbol.name)) {
            to_mangle.push(symbol);
          }
        }
      });
      AST_Toplevel.DEFMETHOD("find_colliding_names", function(options) {
        const cache = options.cache && options.cache.props;
        const avoid = /* @__PURE__ */ new Set();
        options.reserved.forEach(to_avoid);
        this.globals.forEach(add_def);
        this.walk(new TreeWalker(function(node) {
          if (node instanceof AST_Scope)
            node.variables.forEach(add_def);
          if (node instanceof AST_SymbolCatch)
            add_def(node.definition());
        }));
        return avoid;
        function to_avoid(name) {
          avoid.add(name);
        }
        function add_def(def) {
          var name = def.name;
          if (def.global && cache && cache.has(name))
            name = cache.get(name);
          else if (!def.unmangleable(options))
            return;
          to_avoid(name);
        }
      });
      AST_Toplevel.DEFMETHOD("expand_names", function(options) {
        options = format_mangler_options(options);
        var nth_identifier = options.nth_identifier;
        if (nth_identifier.reset && nth_identifier.sort) {
          nth_identifier.reset();
          nth_identifier.sort();
        }
        var avoid = this.find_colliding_names(options);
        var cname = 0;
        this.globals.forEach(rename);
        this.walk(new TreeWalker(function(node) {
          if (node instanceof AST_Scope)
            node.variables.forEach(rename);
          if (node instanceof AST_SymbolCatch)
            rename(node.definition());
        }));
        function next_name() {
          var name;
          do {
            name = nth_identifier.get(cname++);
          } while (avoid.has(name) || ALL_RESERVED_WORDS.has(name));
          return name;
        }
        function rename(def) {
          if (def.global && options.cache)
            return;
          if (def.unmangleable(options))
            return;
          if (options.reserved.has(def.name))
            return;
          const redefinition = redefined_catch_def(def);
          const name = def.name = redefinition ? redefinition.name : next_name();
          def.orig.forEach(function(sym) {
            sym.name = name;
          });
          def.references.forEach(function(sym) {
            sym.name = name;
          });
        }
      });
      AST_Node.DEFMETHOD("tail_node", return_this);
      AST_Sequence.DEFMETHOD("tail_node", function() {
        return this.expressions[this.expressions.length - 1];
      });
      AST_Toplevel.DEFMETHOD("compute_char_frequency", function(options) {
        options = format_mangler_options(options);
        var nth_identifier = options.nth_identifier;
        if (!nth_identifier.reset || !nth_identifier.consider || !nth_identifier.sort) {
          return;
        }
        nth_identifier.reset();
        try {
          AST_Node.prototype.print = function(stream, force_parens) {
            this._print(stream, force_parens);
            if (this instanceof AST_Symbol && !this.unmangleable(options)) {
              nth_identifier.consider(this.name, -1);
            } else if (options.properties) {
              if (this instanceof AST_DotHash) {
                nth_identifier.consider("#" + this.property, -1);
              } else if (this instanceof AST_Dot) {
                nth_identifier.consider(this.property, -1);
              } else if (this instanceof AST_Sub) {
                skip_string(this.property);
              }
            }
          };
          nth_identifier.consider(this.print_to_string(), 1);
        } finally {
          AST_Node.prototype.print = AST_Node.prototype._print;
        }
        nth_identifier.sort();
        function skip_string(node) {
          if (node instanceof AST_String) {
            nth_identifier.consider(node.value, -1);
          } else if (node instanceof AST_Conditional) {
            skip_string(node.consequent);
            skip_string(node.alternative);
          } else if (node instanceof AST_Sequence) {
            skip_string(node.tail_node());
          }
        }
      });
      const base54 = (() => {
        const leading = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_".split("");
        const digits = "0123456789".split("");
        let chars;
        let frequency;
        function reset() {
          frequency = /* @__PURE__ */ new Map();
          leading.forEach(function(ch) {
            frequency.set(ch, 0);
          });
          digits.forEach(function(ch) {
            frequency.set(ch, 0);
          });
        }
        function consider(str, delta) {
          for (var i = str.length; --i >= 0; ) {
            frequency.set(str[i], frequency.get(str[i]) + delta);
          }
        }
        function compare(a, b) {
          return frequency.get(b) - frequency.get(a);
        }
        function sort() {
          chars = mergeSort(leading, compare).concat(mergeSort(digits, compare));
        }
        reset();
        sort();
        function base542(num) {
          var ret = "", base = 54;
          num++;
          do {
            num--;
            ret += chars[num % base];
            num = Math.floor(num / base);
            base = 64;
          } while (num > 0);
          return ret;
        }
        return {
          get: base542,
          consider,
          reset,
          sort
        };
      })();
      let mangle_options = void 0;
      AST_Node.prototype.size = function(compressor, stack) {
        mangle_options = compressor && compressor._mangle_options;
        let size = 0;
        walk_parent(this, (node, info) => {
          size += node._size(info);
          if (node instanceof AST_Arrow && node.is_braceless()) {
            size += node.body[0].value._size(info);
            return true;
          }
        }, stack || compressor && compressor.stack);
        mangle_options = void 0;
        return size;
      };
      AST_Node.prototype._size = () => 0;
      AST_Debugger.prototype._size = () => 8;
      AST_Directive.prototype._size = function() {
        return 2 + this.value.length;
      };
      const list_overhead = (array) => array.length && array.length - 1;
      AST_Block.prototype._size = function() {
        return 2 + list_overhead(this.body);
      };
      AST_Toplevel.prototype._size = function() {
        return list_overhead(this.body);
      };
      AST_EmptyStatement.prototype._size = () => 1;
      AST_LabeledStatement.prototype._size = () => 2;
      AST_Do.prototype._size = () => 9;
      AST_While.prototype._size = () => 7;
      AST_For.prototype._size = () => 8;
      AST_ForIn.prototype._size = () => 8;
      AST_With.prototype._size = () => 6;
      AST_Expansion.prototype._size = () => 3;
      const lambda_modifiers = (func) => (func.is_generator ? 1 : 0) + (func.async ? 6 : 0);
      AST_Accessor.prototype._size = function() {
        return lambda_modifiers(this) + 4 + list_overhead(this.argnames) + list_overhead(this.body);
      };
      AST_Function.prototype._size = function(info) {
        const first = !!first_in_statement(info);
        return first * 2 + lambda_modifiers(this) + 12 + list_overhead(this.argnames) + list_overhead(this.body);
      };
      AST_Defun.prototype._size = function() {
        return lambda_modifiers(this) + 13 + list_overhead(this.argnames) + list_overhead(this.body);
      };
      AST_Arrow.prototype._size = function() {
        let args_and_arrow = 2 + list_overhead(this.argnames);
        if (!(this.argnames.length === 1 && this.argnames[0] instanceof AST_Symbol)) {
          args_and_arrow += 2;
        }
        const body_overhead = this.is_braceless() ? 0 : list_overhead(this.body) + 2;
        return lambda_modifiers(this) + args_and_arrow + body_overhead;
      };
      AST_Destructuring.prototype._size = () => 2;
      AST_TemplateString.prototype._size = function() {
        return 2 + Math.floor(this.segments.length / 2) * 3;
      };
      AST_TemplateSegment.prototype._size = function() {
        return this.value.length;
      };
      AST_Return.prototype._size = function() {
        return this.value ? 7 : 6;
      };
      AST_Throw.prototype._size = () => 6;
      AST_Break.prototype._size = function() {
        return this.label ? 6 : 5;
      };
      AST_Continue.prototype._size = function() {
        return this.label ? 9 : 8;
      };
      AST_If.prototype._size = () => 4;
      AST_Switch.prototype._size = function() {
        return 8 + list_overhead(this.body);
      };
      AST_Case.prototype._size = function() {
        return 5 + list_overhead(this.body);
      };
      AST_Default.prototype._size = function() {
        return 8 + list_overhead(this.body);
      };
      AST_Try.prototype._size = () => 3;
      AST_Catch.prototype._size = function() {
        let size = 7 + list_overhead(this.body);
        if (this.argname) {
          size += 2;
        }
        return size;
      };
      AST_Finally.prototype._size = function() {
        return 7 + list_overhead(this.body);
      };
      AST_Var.prototype._size = function() {
        return 4 + list_overhead(this.definitions);
      };
      AST_Let.prototype._size = function() {
        return 4 + list_overhead(this.definitions);
      };
      AST_Const.prototype._size = function() {
        return 6 + list_overhead(this.definitions);
      };
      AST_VarDef.prototype._size = function() {
        return this.value ? 1 : 0;
      };
      AST_NameMapping.prototype._size = function() {
        return this.name ? 4 : 0;
      };
      AST_Import.prototype._size = function() {
        let size = 6;
        if (this.imported_name)
          size += 1;
        if (this.imported_name || this.imported_names)
          size += 5;
        if (this.imported_names) {
          size += 2 + list_overhead(this.imported_names);
        }
        return size;
      };
      AST_ImportMeta.prototype._size = () => 11;
      AST_Export.prototype._size = function() {
        let size = 7 + (this.is_default ? 8 : 0);
        if (this.exported_value) {
          size += this.exported_value._size();
        }
        if (this.exported_names) {
          size += 2 + list_overhead(this.exported_names);
        }
        if (this.module_name) {
          size += 5;
        }
        return size;
      };
      AST_Call.prototype._size = function() {
        if (this.optional) {
          return 4 + list_overhead(this.args);
        }
        return 2 + list_overhead(this.args);
      };
      AST_New.prototype._size = function() {
        return 6 + list_overhead(this.args);
      };
      AST_Sequence.prototype._size = function() {
        return list_overhead(this.expressions);
      };
      AST_Dot.prototype._size = function() {
        if (this.optional) {
          return this.property.length + 2;
        }
        return this.property.length + 1;
      };
      AST_DotHash.prototype._size = function() {
        if (this.optional) {
          return this.property.length + 3;
        }
        return this.property.length + 2;
      };
      AST_Sub.prototype._size = function() {
        return this.optional ? 4 : 2;
      };
      AST_Unary.prototype._size = function() {
        if (this.operator === "typeof")
          return 7;
        if (this.operator === "void")
          return 5;
        return this.operator.length;
      };
      AST_Binary.prototype._size = function(info) {
        if (this.operator === "in")
          return 4;
        let size = this.operator.length;
        if ((this.operator === "+" || this.operator === "-") && this.right instanceof AST_Unary && this.right.operator === this.operator) {
          size += 1;
        }
        if (this.needs_parens(info)) {
          size += 2;
        }
        return size;
      };
      AST_Conditional.prototype._size = () => 3;
      AST_Array.prototype._size = function() {
        return 2 + list_overhead(this.elements);
      };
      AST_Object.prototype._size = function(info) {
        let base = 2;
        if (first_in_statement(info)) {
          base += 2;
        }
        return base + list_overhead(this.properties);
      };
      const key_size = (key) => typeof key === "string" ? key.length : 0;
      AST_ObjectKeyVal.prototype._size = function() {
        return key_size(this.key) + 1;
      };
      const static_size = (is_static) => is_static ? 7 : 0;
      AST_ObjectGetter.prototype._size = function() {
        return 5 + static_size(this.static) + key_size(this.key);
      };
      AST_ObjectSetter.prototype._size = function() {
        return 5 + static_size(this.static) + key_size(this.key);
      };
      AST_ConciseMethod.prototype._size = function() {
        return static_size(this.static) + key_size(this.key) + lambda_modifiers(this);
      };
      AST_PrivateMethod.prototype._size = function() {
        return AST_ConciseMethod.prototype._size.call(this) + 1;
      };
      AST_PrivateGetter.prototype._size = AST_PrivateSetter.prototype._size = function() {
        return AST_ConciseMethod.prototype._size.call(this) + 4;
      };
      AST_PrivateIn.prototype._size = function() {
        return 5;
      };
      AST_Class.prototype._size = function() {
        return (this.name ? 8 : 7) + (this.extends ? 8 : 0);
      };
      AST_ClassStaticBlock.prototype._size = function() {
        return 8 + list_overhead(this.body);
      };
      AST_ClassProperty.prototype._size = function() {
        return static_size(this.static) + (typeof this.key === "string" ? this.key.length + 2 : 0) + (this.value ? 1 : 0);
      };
      AST_ClassPrivateProperty.prototype._size = function() {
        return AST_ClassProperty.prototype._size.call(this) + 1;
      };
      AST_Symbol.prototype._size = function() {
        if (!(mangle_options && this.thedef && !this.thedef.unmangleable(mangle_options))) {
          return this.name.length;
        } else {
          return 1;
        }
      };
      AST_SymbolClassProperty.prototype._size = function() {
        return this.name.length;
      };
      AST_SymbolRef.prototype._size = AST_SymbolDeclaration.prototype._size = function() {
        if (this.name === "arguments")
          return 9;
        return AST_Symbol.prototype._size.call(this);
      };
      AST_NewTarget.prototype._size = () => 10;
      AST_SymbolImportForeign.prototype._size = function() {
        return this.name.length;
      };
      AST_SymbolExportForeign.prototype._size = function() {
        return this.name.length;
      };
      AST_This.prototype._size = () => 4;
      AST_Super.prototype._size = () => 5;
      AST_String.prototype._size = function() {
        return this.value.length + 2;
      };
      AST_Number.prototype._size = function() {
        const { value } = this;
        if (value === 0)
          return 1;
        if (value > 0 && Math.floor(value) === value) {
          return Math.floor(Math.log10(value) + 1);
        }
        return value.toString().length;
      };
      AST_BigInt.prototype._size = function() {
        return this.value.length;
      };
      AST_RegExp.prototype._size = function() {
        return this.value.toString().length;
      };
      AST_Null.prototype._size = () => 4;
      AST_NaN.prototype._size = () => 3;
      AST_Undefined.prototype._size = () => 6;
      AST_Hole.prototype._size = () => 0;
      AST_Infinity.prototype._size = () => 8;
      AST_True.prototype._size = () => 4;
      AST_False.prototype._size = () => 5;
      AST_Await.prototype._size = () => 6;
      AST_Yield.prototype._size = () => 6;
      const UNUSED = 1;
      const TRUTHY = 2;
      const FALSY = 4;
      const UNDEFINED = 8;
      const INLINED = 16;
      const WRITE_ONLY = 32;
      const SQUEEZED = 256;
      const OPTIMIZED = 512;
      const TOP = 1024;
      const CLEAR_BETWEEN_PASSES = SQUEEZED | OPTIMIZED | TOP;
      const has_flag = (node, flag) => node.flags & flag;
      const set_flag = (node, flag) => {
        node.flags |= flag;
      };
      const clear_flag = (node, flag) => {
        node.flags &= ~flag;
      };
      function merge_sequence(array, node) {
        if (node instanceof AST_Sequence) {
          array.push(...node.expressions);
        } else {
          array.push(node);
        }
        return array;
      }
      function make_sequence(orig, expressions) {
        if (expressions.length == 1)
          return expressions[0];
        if (expressions.length == 0)
          throw new Error("trying to create a sequence with length zero!");
        return make_node(AST_Sequence, orig, {
          expressions: expressions.reduce(merge_sequence, [])
        });
      }
      function make_node_from_constant(val, orig) {
        switch (typeof val) {
          case "string":
            return make_node(AST_String, orig, {
              value: val
            });
          case "number":
            if (isNaN(val))
              return make_node(AST_NaN, orig);
            if (isFinite(val)) {
              return 1 / val < 0 ? make_node(AST_UnaryPrefix, orig, {
                operator: "-",
                expression: make_node(AST_Number, orig, { value: -val })
              }) : make_node(AST_Number, orig, { value: val });
            }
            return val < 0 ? make_node(AST_UnaryPrefix, orig, {
              operator: "-",
              expression: make_node(AST_Infinity, orig)
            }) : make_node(AST_Infinity, orig);
          case "bigint":
            return make_node(AST_BigInt, orig, { value: val.toString() });
          case "boolean":
            return make_node(val ? AST_True : AST_False, orig);
          case "undefined":
            return make_node(AST_Undefined, orig);
          default:
            if (val === null) {
              return make_node(AST_Null, orig, { value: null });
            }
            if (val instanceof RegExp) {
              return make_node(AST_RegExp, orig, {
                value: {
                  source: regexp_source_fix(val.source),
                  flags: val.flags
                }
              });
            }
            throw new Error(string_template("Can't handle constant of type: {type}", {
              type: typeof val
            }));
        }
      }
      function best_of_expression(ast1, ast2) {
        return ast1.size() > ast2.size() ? ast2 : ast1;
      }
      function best_of_statement(ast1, ast2) {
        return best_of_expression(
          make_node(AST_SimpleStatement, ast1, {
            body: ast1
          }),
          make_node(AST_SimpleStatement, ast2, {
            body: ast2
          })
        ).body;
      }
      function best_of(compressor, ast1, ast2) {
        if (first_in_statement(compressor)) {
          return best_of_statement(ast1, ast2);
        } else {
          return best_of_expression(ast1, ast2);
        }
      }
      function get_simple_key(key) {
        if (key instanceof AST_Constant) {
          return key.getValue();
        }
        if (key instanceof AST_UnaryPrefix && key.operator == "void" && key.expression instanceof AST_Constant) {
          return;
        }
        return key;
      }
      function read_property(obj, key) {
        key = get_simple_key(key);
        if (key instanceof AST_Node)
          return;
        var value;
        if (obj instanceof AST_Array) {
          var elements = obj.elements;
          if (key == "length")
            return make_node_from_constant(elements.length, obj);
          if (typeof key == "number" && key in elements)
            value = elements[key];
        } else if (obj instanceof AST_Object) {
          key = "" + key;
          var props = obj.properties;
          for (var i = props.length; --i >= 0; ) {
            var prop = props[i];
            if (!(prop instanceof AST_ObjectKeyVal))
              return;
            if (!value && props[i].key === key)
              value = props[i].value;
          }
        }
        return value instanceof AST_SymbolRef && value.fixed_value() || value;
      }
      function has_break_or_continue(loop, parent) {
        var found = false;
        var tw = new TreeWalker(function(node) {
          if (found || node instanceof AST_Scope)
            return true;
          if (node instanceof AST_LoopControl && tw.loopcontrol_target(node) === loop) {
            return found = true;
          }
        });
        if (parent instanceof AST_LabeledStatement)
          tw.push(parent);
        tw.push(loop);
        loop.body.walk(tw);
        return found;
      }
      function maintain_this_binding(parent, orig, val) {
        if (parent instanceof AST_UnaryPrefix && parent.operator == "delete" || parent instanceof AST_Call && parent.expression === orig && (val instanceof AST_Chain || val instanceof AST_PropAccess || val instanceof AST_SymbolRef && val.name == "eval")) {
          const zero = make_node(AST_Number, orig, { value: 0 });
          return make_sequence(orig, [zero, val]);
        } else {
          return val;
        }
      }
      function is_func_expr(node) {
        return node instanceof AST_Arrow || node instanceof AST_Function;
      }
      function is_iife_call(node) {
        if (node.TYPE != "Call")
          return false;
        return node.expression instanceof AST_Function || is_iife_call(node.expression);
      }
      function is_empty(thing) {
        if (thing === null)
          return true;
        if (thing instanceof AST_EmptyStatement)
          return true;
        if (thing instanceof AST_BlockStatement)
          return thing.body.length == 0;
        return false;
      }
      const identifier_atom = makePredicate("Infinity NaN undefined");
      function is_identifier_atom(node) {
        return node instanceof AST_Infinity || node instanceof AST_NaN || node instanceof AST_Undefined;
      }
      function is_ref_of(ref, type) {
        if (!(ref instanceof AST_SymbolRef))
          return false;
        var orig = ref.definition().orig;
        for (var i = orig.length; --i >= 0; ) {
          if (orig[i] instanceof type)
            return true;
        }
      }
      function can_be_evicted_from_block(node) {
        return !(node instanceof AST_DefClass || node instanceof AST_Defun || node instanceof AST_Let || node instanceof AST_Const || node instanceof AST_Export || node instanceof AST_Import);
      }
      function as_statement_array(thing) {
        if (thing === null)
          return [];
        if (thing instanceof AST_BlockStatement)
          return thing.body;
        if (thing instanceof AST_EmptyStatement)
          return [];
        if (thing instanceof AST_Statement)
          return [thing];
        throw new Error("Can't convert thing to statement array");
      }
      function is_reachable(scope_node, defs) {
        const find_ref = (node) => {
          if (node instanceof AST_SymbolRef && defs.includes(node.definition())) {
            return walk_abort;
          }
        };
        return walk_parent(scope_node, (node, info) => {
          if (node instanceof AST_Scope && node !== scope_node) {
            var parent = info.parent();
            if (parent instanceof AST_Call && parent.expression === node && !(node.async || node.is_generator)) {
              return;
            }
            if (walk(node, find_ref))
              return walk_abort;
            return true;
          }
        });
      }
      function is_recursive_ref(compressor, def) {
        var node;
        for (var i = 0; node = compressor.parent(i); i++) {
          if (node instanceof AST_Lambda || node instanceof AST_Class) {
            var name = node.name;
            if (name && name.definition() === def) {
              return true;
            }
          }
        }
        return false;
      }
      function retain_top_func(fn, compressor) {
        return compressor.top_retain && fn instanceof AST_Defun && has_flag(fn, TOP) && fn.name && compressor.top_retain(fn.name.definition());
      }
      function make_nested_lookup(obj) {
        const out = /* @__PURE__ */ new Map();
        for (var key of Object.keys(obj)) {
          out.set(key, makePredicate(obj[key]));
        }
        const does_have = (global_name, fname) => {
          const inner_map = out.get(global_name);
          return inner_map != null && inner_map.has(fname);
        };
        return does_have;
      }
      const pure_prop_access_globals = /* @__PURE__ */ new Set([
        "Number",
        "String",
        "Array",
        "Object",
        "Function",
        "Promise"
      ]);
      const object_methods = [
        "constructor",
        "toString",
        "valueOf"
      ];
      const is_pure_native_method = make_nested_lookup({
        Array: [
          "at",
          "flat",
          "includes",
          "indexOf",
          "join",
          "lastIndexOf",
          "slice",
          ...object_methods
        ],
        Boolean: object_methods,
        Function: object_methods,
        Number: [
          "toExponential",
          "toFixed",
          "toPrecision",
          ...object_methods
        ],
        Object: object_methods,
        RegExp: [
          "test",
          ...object_methods
        ],
        String: [
          "at",
          "charAt",
          "charCodeAt",
          "charPointAt",
          "concat",
          "endsWith",
          "fromCharCode",
          "fromCodePoint",
          "includes",
          "indexOf",
          "italics",
          "lastIndexOf",
          "localeCompare",
          "match",
          "matchAll",
          "normalize",
          "padStart",
          "padEnd",
          "repeat",
          "replace",
          "replaceAll",
          "search",
          "slice",
          "split",
          "startsWith",
          "substr",
          "substring",
          "repeat",
          "toLocaleLowerCase",
          "toLocaleUpperCase",
          "toLowerCase",
          "toUpperCase",
          "trim",
          "trimEnd",
          "trimStart",
          ...object_methods
        ]
      });
      const is_pure_native_fn = make_nested_lookup({
        Array: [
          "isArray"
        ],
        Math: [
          "abs",
          "acos",
          "asin",
          "atan",
          "ceil",
          "cos",
          "exp",
          "floor",
          "log",
          "round",
          "sin",
          "sqrt",
          "tan",
          "atan2",
          "pow",
          "max",
          "min"
        ],
        Number: [
          "isFinite",
          "isNaN"
        ],
        Object: [
          "create",
          "getOwnPropertyDescriptor",
          "getOwnPropertyNames",
          "getPrototypeOf",
          "isExtensible",
          "isFrozen",
          "isSealed",
          "hasOwn",
          "keys"
        ],
        String: [
          "fromCharCode"
        ]
      });
      const is_pure_native_value = make_nested_lookup({
        Math: [
          "E",
          "LN10",
          "LN2",
          "LOG2E",
          "LOG10E",
          "PI",
          "SQRT1_2",
          "SQRT2"
        ],
        Number: [
          "MAX_VALUE",
          "MIN_VALUE",
          "NaN",
          "NEGATIVE_INFINITY",
          "POSITIVE_INFINITY"
        ]
      });
      const is_undeclared_ref = (node) => node instanceof AST_SymbolRef && node.definition().undeclared;
      const bitwise_binop = makePredicate("<<< >> << & | ^ ~");
      const lazy_op = makePredicate("&& || ??");
      const unary_side_effects = makePredicate("delete ++ --");
      (function(def_is_boolean) {
        const unary_bool = makePredicate("! delete");
        const binary_bool = makePredicate("in instanceof == != === !== < <= >= >");
        def_is_boolean(AST_Node, return_false);
        def_is_boolean(AST_UnaryPrefix, function() {
          return unary_bool.has(this.operator);
        });
        def_is_boolean(AST_Binary, function() {
          return binary_bool.has(this.operator) || lazy_op.has(this.operator) && this.left.is_boolean() && this.right.is_boolean();
        });
        def_is_boolean(AST_Conditional, function() {
          return this.consequent.is_boolean() && this.alternative.is_boolean();
        });
        def_is_boolean(AST_Assign, function() {
          return this.operator == "=" && this.right.is_boolean();
        });
        def_is_boolean(AST_Sequence, function() {
          return this.tail_node().is_boolean();
        });
        def_is_boolean(AST_True, return_true);
        def_is_boolean(AST_False, return_true);
      })(function(node, func) {
        node.DEFMETHOD("is_boolean", func);
      });
      (function(def_is_number) {
        def_is_number(AST_Node, return_false);
        def_is_number(AST_Number, return_true);
        const unary = makePredicate("+ - ~ ++ --");
        def_is_number(AST_Unary, function() {
          return unary.has(this.operator) && !(this.expression instanceof AST_BigInt);
        });
        const numeric_ops = makePredicate("- * / % & | ^ << >> >>>");
        def_is_number(AST_Binary, function(compressor) {
          return numeric_ops.has(this.operator) || this.operator == "+" && this.left.is_number(compressor) && this.right.is_number(compressor);
        });
        def_is_number(AST_Assign, function(compressor) {
          return numeric_ops.has(this.operator.slice(0, -1)) || this.operator == "=" && this.right.is_number(compressor);
        });
        def_is_number(AST_Sequence, function(compressor) {
          return this.tail_node().is_number(compressor);
        });
        def_is_number(AST_Conditional, function(compressor) {
          return this.consequent.is_number(compressor) && this.alternative.is_number(compressor);
        });
      })(function(node, func) {
        node.DEFMETHOD("is_number", func);
      });
      (function(def_is_32_bit_integer) {
        def_is_32_bit_integer(AST_Node, return_false);
        def_is_32_bit_integer(AST_Number, function() {
          return this.value === (this.value | 0);
        });
        def_is_32_bit_integer(AST_UnaryPrefix, function() {
          return this.operator == "~" ? this.expression.is_number() : this.operator === "+" ? this.expression.is_32_bit_integer() : false;
        });
        def_is_32_bit_integer(AST_Binary, function() {
          return bitwise_binop.has(this.operator);
        });
      })(function(node, func) {
        node.DEFMETHOD("is_32_bit_integer", func);
      });
      (function(def_is_string) {
        def_is_string(AST_Node, return_false);
        def_is_string(AST_String, return_true);
        def_is_string(AST_TemplateString, return_true);
        def_is_string(AST_UnaryPrefix, function() {
          return this.operator == "typeof";
        });
        def_is_string(AST_Binary, function(compressor) {
          return this.operator == "+" && (this.left.is_string(compressor) || this.right.is_string(compressor));
        });
        def_is_string(AST_Assign, function(compressor) {
          return (this.operator == "=" || this.operator == "+=") && this.right.is_string(compressor);
        });
        def_is_string(AST_Sequence, function(compressor) {
          return this.tail_node().is_string(compressor);
        });
        def_is_string(AST_Conditional, function(compressor) {
          return this.consequent.is_string(compressor) && this.alternative.is_string(compressor);
        });
      })(function(node, func) {
        node.DEFMETHOD("is_string", func);
      });
      function is_undefined(node, compressor) {
        return has_flag(node, UNDEFINED) || node instanceof AST_Undefined || node instanceof AST_UnaryPrefix && node.operator == "void" && !node.expression.has_side_effects(compressor);
      }
      function is_null_or_undefined(node, compressor) {
        let fixed;
        return node instanceof AST_Null || is_undefined(node, compressor) || node instanceof AST_SymbolRef && (fixed = node.definition().fixed) instanceof AST_Node && is_nullish(fixed, compressor);
      }
      function is_nullish_shortcircuited(node, compressor) {
        if (node instanceof AST_PropAccess || node instanceof AST_Call) {
          return node.optional && is_null_or_undefined(node.expression, compressor) || is_nullish_shortcircuited(node.expression, compressor);
        }
        if (node instanceof AST_Chain)
          return is_nullish_shortcircuited(node.expression, compressor);
        return false;
      }
      function is_nullish(node, compressor) {
        if (is_null_or_undefined(node, compressor))
          return true;
        return is_nullish_shortcircuited(node, compressor);
      }
      (function(def_has_side_effects) {
        def_has_side_effects(AST_Node, return_true);
        def_has_side_effects(AST_EmptyStatement, return_false);
        def_has_side_effects(AST_Constant, return_false);
        def_has_side_effects(AST_This, return_false);
        function any(list, compressor) {
          for (var i = list.length; --i >= 0; )
            if (list[i].has_side_effects(compressor))
              return true;
          return false;
        }
        def_has_side_effects(AST_Block, function(compressor) {
          return any(this.body, compressor);
        });
        def_has_side_effects(AST_Call, function(compressor) {
          if (!this.is_callee_pure(compressor) && (!this.expression.is_call_pure(compressor) || this.expression.has_side_effects(compressor))) {
            return true;
          }
          return any(this.args, compressor);
        });
        def_has_side_effects(AST_Switch, function(compressor) {
          return this.expression.has_side_effects(compressor) || any(this.body, compressor);
        });
        def_has_side_effects(AST_Case, function(compressor) {
          return this.expression.has_side_effects(compressor) || any(this.body, compressor);
        });
        def_has_side_effects(AST_Try, function(compressor) {
          return this.body.has_side_effects(compressor) || this.bcatch && this.bcatch.has_side_effects(compressor) || this.bfinally && this.bfinally.has_side_effects(compressor);
        });
        def_has_side_effects(AST_If, function(compressor) {
          return this.condition.has_side_effects(compressor) || this.body && this.body.has_side_effects(compressor) || this.alternative && this.alternative.has_side_effects(compressor);
        });
        def_has_side_effects(AST_ImportMeta, return_false);
        def_has_side_effects(AST_LabeledStatement, function(compressor) {
          return this.body.has_side_effects(compressor);
        });
        def_has_side_effects(AST_SimpleStatement, function(compressor) {
          return this.body.has_side_effects(compressor);
        });
        def_has_side_effects(AST_Lambda, return_false);
        def_has_side_effects(AST_Class, function(compressor) {
          if (this.extends && this.extends.has_side_effects(compressor)) {
            return true;
          }
          return any(this.properties, compressor);
        });
        def_has_side_effects(AST_ClassStaticBlock, function(compressor) {
          return any(this.body, compressor);
        });
        def_has_side_effects(AST_Binary, function(compressor) {
          return this.left.has_side_effects(compressor) || this.right.has_side_effects(compressor);
        });
        def_has_side_effects(AST_Assign, return_true);
        def_has_side_effects(AST_Conditional, function(compressor) {
          return this.condition.has_side_effects(compressor) || this.consequent.has_side_effects(compressor) || this.alternative.has_side_effects(compressor);
        });
        def_has_side_effects(AST_Unary, function(compressor) {
          return unary_side_effects.has(this.operator) || this.expression.has_side_effects(compressor);
        });
        def_has_side_effects(AST_SymbolRef, function(compressor) {
          return !this.is_declared(compressor) && !pure_prop_access_globals.has(this.name);
        });
        def_has_side_effects(AST_SymbolClassProperty, return_false);
        def_has_side_effects(AST_SymbolDeclaration, return_false);
        def_has_side_effects(AST_Object, function(compressor) {
          return any(this.properties, compressor);
        });
        def_has_side_effects(AST_ObjectProperty, function(compressor) {
          return this.computed_key() && this.key.has_side_effects(compressor) || this.value && this.value.has_side_effects(compressor);
        });
        def_has_side_effects(AST_ClassProperty, function(compressor) {
          return this.computed_key() && this.key.has_side_effects(compressor) || this.static && this.value && this.value.has_side_effects(compressor);
        });
        def_has_side_effects(AST_ConciseMethod, function(compressor) {
          return this.computed_key() && this.key.has_side_effects(compressor);
        });
        def_has_side_effects(AST_ObjectGetter, function(compressor) {
          return this.computed_key() && this.key.has_side_effects(compressor);
        });
        def_has_side_effects(AST_ObjectSetter, function(compressor) {
          return this.computed_key() && this.key.has_side_effects(compressor);
        });
        def_has_side_effects(AST_Array, function(compressor) {
          return any(this.elements, compressor);
        });
        def_has_side_effects(AST_Dot, function(compressor) {
          if (is_nullish(this, compressor)) {
            return this.expression.has_side_effects(compressor);
          }
          if (!this.optional && this.expression.may_throw_on_access(compressor)) {
            return true;
          }
          return this.expression.has_side_effects(compressor);
        });
        def_has_side_effects(AST_Sub, function(compressor) {
          if (is_nullish(this, compressor)) {
            return this.expression.has_side_effects(compressor);
          }
          if (!this.optional && this.expression.may_throw_on_access(compressor)) {
            return true;
          }
          var property = this.property.has_side_effects(compressor);
          if (property && this.optional)
            return true;
          return property || this.expression.has_side_effects(compressor);
        });
        def_has_side_effects(AST_Chain, function(compressor) {
          return this.expression.has_side_effects(compressor);
        });
        def_has_side_effects(AST_Sequence, function(compressor) {
          return any(this.expressions, compressor);
        });
        def_has_side_effects(AST_Definitions, function(compressor) {
          return any(this.definitions, compressor);
        });
        def_has_side_effects(AST_VarDef, function() {
          return this.value;
        });
        def_has_side_effects(AST_TemplateSegment, return_false);
        def_has_side_effects(AST_TemplateString, function(compressor) {
          return any(this.segments, compressor);
        });
      })(function(node, func) {
        node.DEFMETHOD("has_side_effects", func);
      });
      (function(def_may_throw) {
        def_may_throw(AST_Node, return_true);
        def_may_throw(AST_Constant, return_false);
        def_may_throw(AST_EmptyStatement, return_false);
        def_may_throw(AST_Lambda, return_false);
        def_may_throw(AST_SymbolDeclaration, return_false);
        def_may_throw(AST_This, return_false);
        def_may_throw(AST_ImportMeta, return_false);
        function any(list, compressor) {
          for (var i = list.length; --i >= 0; )
            if (list[i].may_throw(compressor))
              return true;
          return false;
        }
        def_may_throw(AST_Class, function(compressor) {
          if (this.extends && this.extends.may_throw(compressor))
            return true;
          return any(this.properties, compressor);
        });
        def_may_throw(AST_ClassStaticBlock, function(compressor) {
          return any(this.body, compressor);
        });
        def_may_throw(AST_Array, function(compressor) {
          return any(this.elements, compressor);
        });
        def_may_throw(AST_Assign, function(compressor) {
          if (this.right.may_throw(compressor))
            return true;
          if (!compressor.has_directive("use strict") && this.operator == "=" && this.left instanceof AST_SymbolRef) {
            return false;
          }
          return this.left.may_throw(compressor);
        });
        def_may_throw(AST_Binary, function(compressor) {
          return this.left.may_throw(compressor) || this.right.may_throw(compressor);
        });
        def_may_throw(AST_Block, function(compressor) {
          return any(this.body, compressor);
        });
        def_may_throw(AST_Call, function(compressor) {
          if (is_nullish(this, compressor))
            return false;
          if (any(this.args, compressor))
            return true;
          if (this.is_callee_pure(compressor))
            return false;
          if (this.expression.may_throw(compressor))
            return true;
          return !(this.expression instanceof AST_Lambda) || any(this.expression.body, compressor);
        });
        def_may_throw(AST_Case, function(compressor) {
          return this.expression.may_throw(compressor) || any(this.body, compressor);
        });
        def_may_throw(AST_Conditional, function(compressor) {
          return this.condition.may_throw(compressor) || this.consequent.may_throw(compressor) || this.alternative.may_throw(compressor);
        });
        def_may_throw(AST_Definitions, function(compressor) {
          return any(this.definitions, compressor);
        });
        def_may_throw(AST_If, function(compressor) {
          return this.condition.may_throw(compressor) || this.body && this.body.may_throw(compressor) || this.alternative && this.alternative.may_throw(compressor);
        });
        def_may_throw(AST_LabeledStatement, function(compressor) {
          return this.body.may_throw(compressor);
        });
        def_may_throw(AST_Object, function(compressor) {
          return any(this.properties, compressor);
        });
        def_may_throw(AST_ObjectProperty, function(compressor) {
          return this.value ? this.value.may_throw(compressor) : false;
        });
        def_may_throw(AST_ClassProperty, function(compressor) {
          return this.computed_key() && this.key.may_throw(compressor) || this.static && this.value && this.value.may_throw(compressor);
        });
        def_may_throw(AST_ConciseMethod, function(compressor) {
          return this.computed_key() && this.key.may_throw(compressor);
        });
        def_may_throw(AST_ObjectGetter, function(compressor) {
          return this.computed_key() && this.key.may_throw(compressor);
        });
        def_may_throw(AST_ObjectSetter, function(compressor) {
          return this.computed_key() && this.key.may_throw(compressor);
        });
        def_may_throw(AST_Return, function(compressor) {
          return this.value && this.value.may_throw(compressor);
        });
        def_may_throw(AST_Sequence, function(compressor) {
          return any(this.expressions, compressor);
        });
        def_may_throw(AST_SimpleStatement, function(compressor) {
          return this.body.may_throw(compressor);
        });
        def_may_throw(AST_Dot, function(compressor) {
          if (is_nullish(this, compressor))
            return false;
          return !this.optional && this.expression.may_throw_on_access(compressor) || this.expression.may_throw(compressor);
        });
        def_may_throw(AST_Sub, function(compressor) {
          if (is_nullish(this, compressor))
            return false;
          return !this.optional && this.expression.may_throw_on_access(compressor) || this.expression.may_throw(compressor) || this.property.may_throw(compressor);
        });
        def_may_throw(AST_Chain, function(compressor) {
          return this.expression.may_throw(compressor);
        });
        def_may_throw(AST_Switch, function(compressor) {
          return this.expression.may_throw(compressor) || any(this.body, compressor);
        });
        def_may_throw(AST_SymbolRef, function(compressor) {
          return !this.is_declared(compressor) && !pure_prop_access_globals.has(this.name);
        });
        def_may_throw(AST_SymbolClassProperty, return_false);
        def_may_throw(AST_Try, function(compressor) {
          return this.bcatch ? this.bcatch.may_throw(compressor) : this.body.may_throw(compressor) || this.bfinally && this.bfinally.may_throw(compressor);
        });
        def_may_throw(AST_Unary, function(compressor) {
          if (this.operator == "typeof" && this.expression instanceof AST_SymbolRef)
            return false;
          return this.expression.may_throw(compressor);
        });
        def_may_throw(AST_VarDef, function(compressor) {
          if (!this.value)
            return false;
          return this.value.may_throw(compressor);
        });
      })(function(node, func) {
        node.DEFMETHOD("may_throw", func);
      });
      (function(def_is_constant_expression) {
        function all_refs_local(scope) {
          let result = true;
          walk(this, (node) => {
            if (node instanceof AST_SymbolRef) {
              if (has_flag(this, INLINED)) {
                result = false;
                return walk_abort;
              }
              var def = node.definition();
              if (member(def, this.enclosed) && !this.variables.has(def.name)) {
                if (scope) {
                  var scope_def = scope.find_variable(node);
                  if (def.undeclared ? !scope_def : scope_def === def) {
                    result = "f";
                    return true;
                  }
                }
                result = false;
                return walk_abort;
              }
              return true;
            }
            if (node instanceof AST_This && this instanceof AST_Arrow) {
              result = false;
              return walk_abort;
            }
          });
          return result;
        }
        def_is_constant_expression(AST_Node, return_false);
        def_is_constant_expression(AST_Constant, return_true);
        def_is_constant_expression(AST_Class, function(scope) {
          if (this.extends && !this.extends.is_constant_expression(scope)) {
            return false;
          }
          for (const prop of this.properties) {
            if (prop.computed_key() && !prop.key.is_constant_expression(scope)) {
              return false;
            }
            if (prop.static && prop.value && !prop.value.is_constant_expression(scope)) {
              return false;
            }
            if (prop instanceof AST_ClassStaticBlock) {
              return false;
            }
          }
          return all_refs_local.call(this, scope);
        });
        def_is_constant_expression(AST_Lambda, all_refs_local);
        def_is_constant_expression(AST_Unary, function() {
          return this.expression.is_constant_expression();
        });
        def_is_constant_expression(AST_Binary, function() {
          return this.left.is_constant_expression() && this.right.is_constant_expression();
        });
        def_is_constant_expression(AST_Array, function() {
          return this.elements.every((l2) => l2.is_constant_expression());
        });
        def_is_constant_expression(AST_Object, function() {
          return this.properties.every((l2) => l2.is_constant_expression());
        });
        def_is_constant_expression(AST_ObjectProperty, function() {
          return !!(!(this.key instanceof AST_Node) && this.value && this.value.is_constant_expression());
        });
      })(function(node, func) {
        node.DEFMETHOD("is_constant_expression", func);
      });
      (function(def_may_throw_on_access) {
        AST_Node.DEFMETHOD("may_throw_on_access", function(compressor) {
          return !compressor.option("pure_getters") || this._dot_throw(compressor);
        });
        function is_strict(compressor) {
          return /strict/.test(compressor.option("pure_getters"));
        }
        def_may_throw_on_access(AST_Node, is_strict);
        def_may_throw_on_access(AST_Null, return_true);
        def_may_throw_on_access(AST_Undefined, return_true);
        def_may_throw_on_access(AST_Constant, return_false);
        def_may_throw_on_access(AST_Array, return_false);
        def_may_throw_on_access(AST_Object, function(compressor) {
          if (!is_strict(compressor))
            return false;
          for (var i = this.properties.length; --i >= 0; )
            if (this.properties[i]._dot_throw(compressor))
              return true;
          return false;
        });
        def_may_throw_on_access(AST_Class, return_false);
        def_may_throw_on_access(AST_ObjectProperty, return_false);
        def_may_throw_on_access(AST_ObjectGetter, return_true);
        def_may_throw_on_access(AST_Expansion, function(compressor) {
          return this.expression._dot_throw(compressor);
        });
        def_may_throw_on_access(AST_Function, return_false);
        def_may_throw_on_access(AST_Arrow, return_false);
        def_may_throw_on_access(AST_UnaryPostfix, return_false);
        def_may_throw_on_access(AST_UnaryPrefix, function() {
          return this.operator == "void";
        });
        def_may_throw_on_access(AST_Binary, function(compressor) {
          return (this.operator == "&&" || this.operator == "||" || this.operator == "??") && (this.left._dot_throw(compressor) || this.right._dot_throw(compressor));
        });
        def_may_throw_on_access(AST_Assign, function(compressor) {
          if (this.logical)
            return true;
          return this.operator == "=" && this.right._dot_throw(compressor);
        });
        def_may_throw_on_access(AST_Conditional, function(compressor) {
          return this.consequent._dot_throw(compressor) || this.alternative._dot_throw(compressor);
        });
        def_may_throw_on_access(AST_Dot, function(compressor) {
          if (!is_strict(compressor))
            return false;
          if (this.property == "prototype") {
            return !(this.expression instanceof AST_Function || this.expression instanceof AST_Class);
          }
          return true;
        });
        def_may_throw_on_access(AST_Chain, function(compressor) {
          return this.expression._dot_throw(compressor);
        });
        def_may_throw_on_access(AST_Sequence, function(compressor) {
          return this.tail_node()._dot_throw(compressor);
        });
        def_may_throw_on_access(AST_SymbolRef, function(compressor) {
          if (this.name === "arguments" && this.scope instanceof AST_Lambda)
            return false;
          if (has_flag(this, UNDEFINED))
            return true;
          if (!is_strict(compressor))
            return false;
          if (is_undeclared_ref(this) && this.is_declared(compressor))
            return false;
          if (this.is_immutable())
            return false;
          var fixed = this.fixed_value();
          return !fixed || fixed._dot_throw(compressor);
        });
      })(function(node, func) {
        node.DEFMETHOD("_dot_throw", func);
      });
      function is_lhs(node, parent) {
        if (parent instanceof AST_Unary && unary_side_effects.has(parent.operator))
          return parent.expression;
        if (parent instanceof AST_Assign && parent.left === node)
          return node;
        if (parent instanceof AST_ForIn && parent.init === node)
          return node;
      }
      (function(def_negate) {
        function basic_negation(exp) {
          return make_node(AST_UnaryPrefix, exp, {
            operator: "!",
            expression: exp
          });
        }
        function best(orig, alt, first_in_statement2) {
          var negated = basic_negation(orig);
          if (first_in_statement2) {
            var stat = make_node(AST_SimpleStatement, alt, {
              body: alt
            });
            return best_of_expression(negated, stat) === stat ? alt : negated;
          }
          return best_of_expression(negated, alt);
        }
        def_negate(AST_Node, function() {
          return basic_negation(this);
        });
        def_negate(AST_Statement, function() {
          throw new Error("Cannot negate a statement");
        });
        def_negate(AST_Function, function() {
          return basic_negation(this);
        });
        def_negate(AST_Class, function() {
          return basic_negation(this);
        });
        def_negate(AST_Arrow, function() {
          return basic_negation(this);
        });
        def_negate(AST_UnaryPrefix, function() {
          if (this.operator == "!")
            return this.expression;
          return basic_negation(this);
        });
        def_negate(AST_Sequence, function(compressor) {
          var expressions = this.expressions.slice();
          expressions.push(expressions.pop().negate(compressor));
          return make_sequence(this, expressions);
        });
        def_negate(AST_Conditional, function(compressor, first_in_statement2) {
          var self2 = this.clone();
          self2.consequent = self2.consequent.negate(compressor);
          self2.alternative = self2.alternative.negate(compressor);
          return best(this, self2, first_in_statement2);
        });
        def_negate(AST_Binary, function(compressor, first_in_statement2) {
          var self2 = this.clone(), op = this.operator;
          if (compressor.option("unsafe_comps")) {
            switch (op) {
              case "<=":
                self2.operator = ">";
                return self2;
              case "<":
                self2.operator = ">=";
                return self2;
              case ">=":
                self2.operator = "<";
                return self2;
              case ">":
                self2.operator = "<=";
                return self2;
            }
          }
          switch (op) {
            case "==":
              self2.operator = "!=";
              return self2;
            case "!=":
              self2.operator = "==";
              return self2;
            case "===":
              self2.operator = "!==";
              return self2;
            case "!==":
              self2.operator = "===";
              return self2;
            case "&&":
              self2.operator = "||";
              self2.left = self2.left.negate(compressor, first_in_statement2);
              self2.right = self2.right.negate(compressor);
              return best(this, self2, first_in_statement2);
            case "||":
              self2.operator = "&&";
              self2.left = self2.left.negate(compressor, first_in_statement2);
              self2.right = self2.right.negate(compressor);
              return best(this, self2, first_in_statement2);
          }
          return basic_negation(this);
        });
      })(function(node, func) {
        node.DEFMETHOD("negate", function(compressor, first_in_statement2) {
          return func.call(this, compressor, first_in_statement2);
        });
      });
      (function(def_bitwise_negate) {
        function basic_negation(exp) {
          return make_node(AST_UnaryPrefix, exp, {
            operator: "~",
            expression: exp
          });
        }
        def_bitwise_negate(AST_Node, function() {
          return basic_negation(this);
        });
        def_bitwise_negate(AST_Number, function() {
          const neg = ~this.value;
          if (neg.toString().length > this.value.toString().length) {
            return basic_negation(this);
          }
          return make_node(AST_Number, this, { value: neg });
        });
        def_bitwise_negate(AST_UnaryPrefix, function(in_32_bit_context) {
          if (this.operator == "~" && (in_32_bit_context || this.expression.is_32_bit_integer())) {
            return this.expression;
          } else {
            return basic_negation(this);
          }
        });
      })(function(node, func) {
        node.DEFMETHOD("bitwise_negate", func);
      });
      var global_pure_fns = makePredicate("Boolean decodeURI decodeURIComponent Date encodeURI encodeURIComponent Error escape EvalError isFinite isNaN Number Object parseFloat parseInt RangeError ReferenceError String SyntaxError TypeError unescape URIError");
      AST_Call.DEFMETHOD("is_callee_pure", function(compressor) {
        if (compressor.option("unsafe")) {
          var expr = this.expression;
          var first_arg = this.args && this.args[0] && this.args[0].evaluate(compressor);
          if (expr.expression && expr.expression.name === "hasOwnProperty" && (first_arg == null || first_arg.thedef && first_arg.thedef.undeclared)) {
            return false;
          }
          if (is_undeclared_ref(expr) && global_pure_fns.has(expr.name))
            return true;
          if (expr instanceof AST_Dot && is_undeclared_ref(expr.expression) && is_pure_native_fn(expr.expression.name, expr.property)) {
            return true;
          }
        }
        if (this instanceof AST_New && compressor.option("pure_new")) {
          return true;
        }
        if (compressor.option("side_effects") && has_annotation(this, _PURE)) {
          return true;
        }
        return !compressor.pure_funcs(this);
      });
      AST_Node.DEFMETHOD("is_call_pure", return_false);
      AST_Dot.DEFMETHOD("is_call_pure", function(compressor) {
        if (!compressor.option("unsafe"))
          return;
        const expr = this.expression;
        let native_obj;
        if (expr instanceof AST_Array) {
          native_obj = "Array";
        } else if (expr.is_boolean()) {
          native_obj = "Boolean";
        } else if (expr.is_number(compressor)) {
          native_obj = "Number";
        } else if (expr instanceof AST_RegExp) {
          native_obj = "RegExp";
        } else if (expr.is_string(compressor)) {
          native_obj = "String";
        } else if (!this.may_throw_on_access(compressor)) {
          native_obj = "Object";
        }
        return native_obj != null && is_pure_native_method(native_obj, this.property);
      });
      const aborts = (thing) => thing && thing.aborts();
      (function(def_aborts) {
        def_aborts(AST_Statement, return_null);
        def_aborts(AST_Jump, return_this);
        function block_aborts() {
          for (var i = 0; i < this.body.length; i++) {
            if (aborts(this.body[i])) {
              return this.body[i];
            }
          }
          return null;
        }
        def_aborts(AST_Import, return_null);
        def_aborts(AST_BlockStatement, block_aborts);
        def_aborts(AST_SwitchBranch, block_aborts);
        def_aborts(AST_DefClass, function() {
          for (const prop of this.properties) {
            if (prop instanceof AST_ClassStaticBlock) {
              if (prop.aborts())
                return prop;
            }
          }
          return null;
        });
        def_aborts(AST_ClassStaticBlock, block_aborts);
        def_aborts(AST_If, function() {
          return this.alternative && aborts(this.body) && aborts(this.alternative) && this;
        });
      })(function(node, func) {
        node.DEFMETHOD("aborts", func);
      });
      AST_Node.DEFMETHOD("contains_this", function() {
        return walk(this, (node) => {
          if (node instanceof AST_This)
            return walk_abort;
          if (node !== this && node instanceof AST_Scope && !(node instanceof AST_Arrow)) {
            return true;
          }
        });
      });
      function is_modified(compressor, tw, node, value, level, immutable) {
        var parent = tw.parent(level);
        var lhs = is_lhs(node, parent);
        if (lhs)
          return lhs;
        if (!immutable && parent instanceof AST_Call && parent.expression === node && !(value instanceof AST_Arrow) && !(value instanceof AST_Class) && !parent.is_callee_pure(compressor) && (!(value instanceof AST_Function) || !(parent instanceof AST_New) && value.contains_this())) {
          return true;
        }
        if (parent instanceof AST_Array) {
          return is_modified(compressor, tw, parent, parent, level + 1);
        }
        if (parent instanceof AST_ObjectKeyVal && node === parent.value) {
          var obj = tw.parent(level + 1);
          return is_modified(compressor, tw, obj, obj, level + 2);
        }
        if (parent instanceof AST_PropAccess && parent.expression === node) {
          var prop = read_property(value, parent.property);
          return !immutable && is_modified(compressor, tw, parent, prop, level + 1);
        }
      }
      function def_eval(node, func) {
        node.DEFMETHOD("_eval", func);
      }
      const nullish = Symbol("This AST_Chain is nullish");
      AST_Node.DEFMETHOD("evaluate", function(compressor) {
        if (!compressor.option("evaluate"))
          return this;
        var val = this._eval(compressor, 1);
        if (!val || val instanceof RegExp)
          return val;
        if (typeof val == "function" || typeof val == "object" || val == nullish)
          return this;
        if (typeof val === "string") {
          const unevaluated_size = this.size(compressor);
          if (val.length + 2 > unevaluated_size)
            return this;
        }
        return val;
      });
      var unaryPrefix = makePredicate("! ~ - + void");
      AST_Node.DEFMETHOD("is_constant", function() {
        if (this instanceof AST_Constant) {
          return !(this instanceof AST_RegExp);
        } else {
          return this instanceof AST_UnaryPrefix && this.expression instanceof AST_Constant && unaryPrefix.has(this.operator);
        }
      });
      def_eval(AST_Statement, function() {
        throw new Error(string_template("Cannot evaluate a statement [{file}:{line},{col}]", this.start));
      });
      def_eval(AST_Lambda, return_this);
      def_eval(AST_Class, return_this);
      def_eval(AST_Node, return_this);
      def_eval(AST_Constant, function() {
        return this.getValue();
      });
      const supports_bigint = typeof BigInt === "function";
      def_eval(AST_BigInt, function() {
        if (supports_bigint) {
          return BigInt(this.value);
        } else {
          return this;
        }
      });
      def_eval(AST_RegExp, function(compressor) {
        let evaluated = compressor.evaluated_regexps.get(this.value);
        if (evaluated === void 0 && regexp_is_safe(this.value.source)) {
          try {
            const { source, flags } = this.value;
            evaluated = new RegExp(source, flags);
          } catch (e) {
            evaluated = null;
          }
          compressor.evaluated_regexps.set(this.value, evaluated);
        }
        return evaluated || this;
      });
      def_eval(AST_TemplateString, function() {
        if (this.segments.length !== 1)
          return this;
        return this.segments[0].value;
      });
      def_eval(AST_Function, function(compressor) {
        if (compressor.option("unsafe")) {
          var fn = function() {
          };
          fn.node = this;
          fn.toString = () => this.print_to_string();
          return fn;
        }
        return this;
      });
      def_eval(AST_Array, function(compressor, depth) {
        if (compressor.option("unsafe")) {
          var elements = [];
          for (var i = 0, len = this.elements.length; i < len; i++) {
            var element = this.elements[i];
            var value = element._eval(compressor, depth);
            if (element === value)
              return this;
            elements.push(value);
          }
          return elements;
        }
        return this;
      });
      def_eval(AST_Object, function(compressor, depth) {
        if (compressor.option("unsafe")) {
          var val = {};
          for (var i = 0, len = this.properties.length; i < len; i++) {
            var prop = this.properties[i];
            if (prop instanceof AST_Expansion)
              return this;
            var key = prop.key;
            if (key instanceof AST_Symbol) {
              key = key.name;
            } else if (key instanceof AST_Node) {
              key = key._eval(compressor, depth);
              if (key === prop.key)
                return this;
            }
            if (typeof Object.prototype[key] === "function") {
              return this;
            }
            if (prop.value instanceof AST_Function)
              continue;
            val[key] = prop.value._eval(compressor, depth);
            if (val[key] === prop.value)
              return this;
          }
          return val;
        }
        return this;
      });
      var non_converting_unary = makePredicate("! typeof void");
      def_eval(AST_UnaryPrefix, function(compressor, depth) {
        var e = this.expression;
        if (compressor.option("typeofs") && this.operator == "typeof" && (e instanceof AST_Lambda || e instanceof AST_SymbolRef && e.fixed_value() instanceof AST_Lambda)) {
          return "function";
        }
        if (!non_converting_unary.has(this.operator))
          depth++;
        e = e._eval(compressor, depth);
        if (e === this.expression)
          return this;
        switch (this.operator) {
          case "!":
            return !e;
          case "typeof":
            if (e instanceof RegExp)
              return this;
            return typeof e;
          case "void":
            return void 0;
          case "~":
            return ~e;
          case "-":
            return -e;
          case "+":
            return +e;
        }
        return this;
      });
      var non_converting_binary = makePredicate("&& || ?? === !==");
      const identity_comparison = makePredicate("== != === !==");
      const has_identity = (value) => typeof value === "object" || typeof value === "function" || typeof value === "symbol";
      def_eval(AST_Binary, function(compressor, depth) {
        if (!non_converting_binary.has(this.operator))
          depth++;
        var left = this.left._eval(compressor, depth);
        if (left === this.left)
          return this;
        var right = this.right._eval(compressor, depth);
        if (right === this.right)
          return this;
        if (left != null && right != null && identity_comparison.has(this.operator) && has_identity(left) && has_identity(right) && typeof left === typeof right) {
          return this;
        }
        if (typeof left === "bigint" !== (typeof right === "bigint") || typeof left === "bigint" && (this.operator === ">>>" || this.operator === "/" && Number(right) === 0)) {
          return this;
        }
        var result;
        switch (this.operator) {
          case "&&":
            result = left && right;
            break;
          case "||":
            result = left || right;
            break;
          case "??":
            result = left != null ? left : right;
            break;
          case "|":
            result = left | right;
            break;
          case "&":
            result = left & right;
            break;
          case "^":
            result = left ^ right;
            break;
          case "+":
            result = left + right;
            break;
          case "*":
            result = left * right;
            break;
          case "**":
            result = left ** right;
            break;
          case "/":
            result = left / right;
            break;
          case "%":
            result = left % right;
            break;
          case "-":
            result = left - right;
            break;
          case "<<":
            result = left << right;
            break;
          case ">>":
            result = left >> right;
            break;
          case ">>>":
            result = left >>> right;
            break;
          case "==":
            result = left == right;
            break;
          case "===":
            result = left === right;
            break;
          case "!=":
            result = left != right;
            break;
          case "!==":
            result = left !== right;
            break;
          case "<":
            result = left < right;
            break;
          case "<=":
            result = left <= right;
            break;
          case ">":
            result = left > right;
            break;
          case ">=":
            result = left >= right;
            break;
          default:
            return this;
        }
        if (typeof result === "number" && isNaN(result) && compressor.find_parent(AST_With)) {
          return this;
        }
        return result;
      });
      def_eval(AST_Conditional, function(compressor, depth) {
        var condition = this.condition._eval(compressor, depth);
        if (condition === this.condition)
          return this;
        var node = condition ? this.consequent : this.alternative;
        var value = node._eval(compressor, depth);
        return value === node ? this : value;
      });
      const reentrant_ref_eval = /* @__PURE__ */ new Set();
      def_eval(AST_SymbolRef, function(compressor, depth) {
        if (reentrant_ref_eval.has(this))
          return this;
        var fixed = this.fixed_value();
        if (!fixed)
          return this;
        reentrant_ref_eval.add(this);
        const value = fixed._eval(compressor, depth);
        reentrant_ref_eval.delete(this);
        if (value === fixed)
          return this;
        if (value && typeof value == "object") {
          var escaped = this.definition().escaped;
          if (escaped && depth > escaped)
            return this;
        }
        return value;
      });
      const global_objs = { Array, Math, Number, Object, String };
      const regexp_flags = /* @__PURE__ */ new Set([
        "dotAll",
        "global",
        "ignoreCase",
        "multiline",
        "sticky",
        "unicode"
      ]);
      def_eval(AST_PropAccess, function(compressor, depth) {
        let obj = this.expression._eval(compressor, depth + 1);
        if (obj === nullish || this.optional && obj == null)
          return nullish;
        if (this.property === "length") {
          if (typeof obj === "string") {
            return obj.length;
          }
          const is_spreadless_array = obj instanceof AST_Array && obj.elements.every((el) => !(el instanceof AST_Expansion));
          if (is_spreadless_array && obj.elements.every((el) => !el.has_side_effects(compressor))) {
            return obj.elements.length;
          }
        }
        if (compressor.option("unsafe")) {
          var key = this.property;
          if (key instanceof AST_Node) {
            key = key._eval(compressor, depth);
            if (key === this.property)
              return this;
          }
          var exp = this.expression;
          if (is_undeclared_ref(exp)) {
            var aa;
            var first_arg = exp.name === "hasOwnProperty" && key === "call" && (aa = compressor.parent() && compressor.parent().args) && (aa && aa[0] && aa[0].evaluate(compressor));
            first_arg = first_arg instanceof AST_Dot ? first_arg.expression : first_arg;
            if (first_arg == null || first_arg.thedef && first_arg.thedef.undeclared) {
              return this.clone();
            }
            if (!is_pure_native_value(exp.name, key))
              return this;
            obj = global_objs[exp.name];
          } else {
            if (obj instanceof RegExp) {
              if (key == "source") {
                return regexp_source_fix(obj.source);
              } else if (key == "flags" || regexp_flags.has(key)) {
                return obj[key];
              }
            }
            if (!obj || obj === exp || !HOP(obj, key))
              return this;
            if (typeof obj == "function")
              switch (key) {
                case "name":
                  return obj.node.name ? obj.node.name.name : "";
                case "length":
                  return obj.node.length_property();
                default:
                  return this;
              }
          }
          return obj[key];
        }
        return this;
      });
      def_eval(AST_Chain, function(compressor, depth) {
        const evaluated = this.expression._eval(compressor, depth);
        return evaluated === nullish ? void 0 : evaluated === this.expression ? this : evaluated;
      });
      def_eval(AST_Call, function(compressor, depth) {
        var exp = this.expression;
        const callee = exp._eval(compressor, depth);
        if (callee === nullish || this.optional && callee == null)
          return nullish;
        if (compressor.option("unsafe") && exp instanceof AST_PropAccess) {
          var key = exp.property;
          if (key instanceof AST_Node) {
            key = key._eval(compressor, depth);
            if (key === exp.property)
              return this;
          }
          var val;
          var e = exp.expression;
          if (is_undeclared_ref(e)) {
            var first_arg = e.name === "hasOwnProperty" && key === "call" && (this.args[0] && this.args[0].evaluate(compressor));
            first_arg = first_arg instanceof AST_Dot ? first_arg.expression : first_arg;
            if (first_arg == null || first_arg.thedef && first_arg.thedef.undeclared) {
              return this.clone();
            }
            if (!is_pure_native_fn(e.name, key))
              return this;
            val = global_objs[e.name];
          } else {
            val = e._eval(compressor, depth + 1);
            if (val === e || !val)
              return this;
            if (!is_pure_native_method(val.constructor.name, key))
              return this;
          }
          var args = [];
          for (var i = 0, len = this.args.length; i < len; i++) {
            var arg = this.args[i];
            var value = arg._eval(compressor, depth);
            if (arg === value)
              return this;
            if (arg instanceof AST_Lambda)
              return this;
            args.push(value);
          }
          try {
            return val[key].apply(val, args);
          } catch (ex) {
          }
        }
        return this;
      });
      def_eval(AST_New, return_this);
      function def_drop_side_effect_free(node, func) {
        node.DEFMETHOD("drop_side_effect_free", func);
      }
      function trim(nodes, compressor, first_in_statement2) {
        var len = nodes.length;
        if (!len)
          return null;
        var ret = [], changed = false;
        for (var i = 0; i < len; i++) {
          var node = nodes[i].drop_side_effect_free(compressor, first_in_statement2);
          changed |= node !== nodes[i];
          if (node) {
            ret.push(node);
            first_in_statement2 = false;
          }
        }
        return changed ? ret.length ? ret : null : nodes;
      }
      def_drop_side_effect_free(AST_Node, return_this);
      def_drop_side_effect_free(AST_Constant, return_null);
      def_drop_side_effect_free(AST_This, return_null);
      def_drop_side_effect_free(AST_Call, function(compressor, first_in_statement2) {
        if (is_nullish_shortcircuited(this, compressor)) {
          return this.expression.drop_side_effect_free(compressor, first_in_statement2);
        }
        if (!this.is_callee_pure(compressor)) {
          if (this.expression.is_call_pure(compressor)) {
            var exprs = this.args.slice();
            exprs.unshift(this.expression.expression);
            exprs = trim(exprs, compressor, first_in_statement2);
            return exprs && make_sequence(this, exprs);
          }
          if (is_func_expr(this.expression) && (!this.expression.name || !this.expression.name.definition().references.length)) {
            var node = this.clone();
            node.expression.process_expression(false, compressor);
            return node;
          }
          return this;
        }
        var args = trim(this.args, compressor, first_in_statement2);
        return args && make_sequence(this, args);
      });
      def_drop_side_effect_free(AST_Accessor, return_null);
      def_drop_side_effect_free(AST_Function, return_null);
      def_drop_side_effect_free(AST_Arrow, return_null);
      def_drop_side_effect_free(AST_Class, function(compressor) {
        const with_effects = [];
        const trimmed_extends = this.extends && this.extends.drop_side_effect_free(compressor);
        if (trimmed_extends)
          with_effects.push(trimmed_extends);
        for (const prop of this.properties) {
          if (prop instanceof AST_ClassStaticBlock) {
            if (prop.has_side_effects(compressor)) {
              return this;
            }
          } else {
            const trimmed_prop = prop.drop_side_effect_free(compressor);
            if (trimmed_prop) {
              if (trimmed_prop.contains_this())
                return this;
              with_effects.push(trimmed_prop);
            }
          }
        }
        if (!with_effects.length)
          return null;
        const exprs = make_sequence(this, with_effects);
        if (this instanceof AST_DefClass) {
          return make_node(AST_SimpleStatement, this, { body: exprs });
        } else {
          return exprs;
        }
      });
      def_drop_side_effect_free(AST_ClassProperty, function(compressor) {
        const key = this.computed_key() && this.key.drop_side_effect_free(compressor);
        const value = this.static && this.value && this.value.drop_side_effect_free(compressor);
        if (key && value)
          return make_sequence(this, [key, value]);
        return key || value || null;
      });
      def_drop_side_effect_free(AST_Binary, function(compressor, first_in_statement2) {
        var right = this.right.drop_side_effect_free(compressor);
        if (!right)
          return this.left.drop_side_effect_free(compressor, first_in_statement2);
        if (lazy_op.has(this.operator)) {
          if (right === this.right)
            return this;
          var node = this.clone();
          node.right = right;
          return node;
        } else {
          var left = this.left.drop_side_effect_free(compressor, first_in_statement2);
          if (!left)
            return this.right.drop_side_effect_free(compressor, first_in_statement2);
          return make_sequence(this, [left, right]);
        }
      });
      def_drop_side_effect_free(AST_Assign, function(compressor) {
        if (this.logical)
          return this;
        var left = this.left;
        if (left.has_side_effects(compressor) || compressor.has_directive("use strict") && left instanceof AST_PropAccess && left.expression.is_constant()) {
          return this;
        }
        set_flag(this, WRITE_ONLY);
        while (left instanceof AST_PropAccess) {
          left = left.expression;
        }
        if (left.is_constant_expression(compressor.find_parent(AST_Scope))) {
          return this.right.drop_side_effect_free(compressor);
        }
        return this;
      });
      def_drop_side_effect_free(AST_Conditional, function(compressor) {
        var consequent = this.consequent.drop_side_effect_free(compressor);
        var alternative = this.alternative.drop_side_effect_free(compressor);
        if (consequent === this.consequent && alternative === this.alternative)
          return this;
        if (!consequent)
          return alternative ? make_node(AST_Binary, this, {
            operator: "||",
            left: this.condition,
            right: alternative
          }) : this.condition.drop_side_effect_free(compressor);
        if (!alternative)
          return make_node(AST_Binary, this, {
            operator: "&&",
            left: this.condition,
            right: consequent
          });
        var node = this.clone();
        node.consequent = consequent;
        node.alternative = alternative;
        return node;
      });
      def_drop_side_effect_free(AST_Unary, function(compressor, first_in_statement2) {
        if (unary_side_effects.has(this.operator)) {
          if (!this.expression.has_side_effects(compressor)) {
            set_flag(this, WRITE_ONLY);
          } else {
            clear_flag(this, WRITE_ONLY);
          }
          return this;
        }
        if (this.operator == "typeof" && this.expression instanceof AST_SymbolRef)
          return null;
        var expression = this.expression.drop_side_effect_free(compressor, first_in_statement2);
        if (first_in_statement2 && expression && is_iife_call(expression)) {
          if (expression === this.expression && this.operator == "!")
            return this;
          return expression.negate(compressor, first_in_statement2);
        }
        return expression;
      });
      def_drop_side_effect_free(AST_SymbolRef, function(compressor) {
        const safe_access = this.is_declared(compressor) || pure_prop_access_globals.has(this.name);
        return safe_access ? null : this;
      });
      def_drop_side_effect_free(AST_Object, function(compressor, first_in_statement2) {
        var values = trim(this.properties, compressor, first_in_statement2);
        return values && make_sequence(this, values);
      });
      def_drop_side_effect_free(AST_ObjectProperty, function(compressor, first_in_statement2) {
        const computed_key = this instanceof AST_ObjectKeyVal && this.key instanceof AST_Node;
        const key = computed_key && this.key.drop_side_effect_free(compressor, first_in_statement2);
        const value = this.value && this.value.drop_side_effect_free(compressor, first_in_statement2);
        if (key && value) {
          return make_sequence(this, [key, value]);
        }
        return key || value;
      });
      def_drop_side_effect_free(AST_ConciseMethod, function() {
        return this.computed_key() ? this.key : null;
      });
      def_drop_side_effect_free(AST_ObjectGetter, function() {
        return this.computed_key() ? this.key : null;
      });
      def_drop_side_effect_free(AST_ObjectSetter, function() {
        return this.computed_key() ? this.key : null;
      });
      def_drop_side_effect_free(AST_Array, function(compressor, first_in_statement2) {
        var values = trim(this.elements, compressor, first_in_statement2);
        return values && make_sequence(this, values);
      });
      def_drop_side_effect_free(AST_Dot, function(compressor, first_in_statement2) {
        if (is_nullish_shortcircuited(this, compressor)) {
          return this.expression.drop_side_effect_free(compressor, first_in_statement2);
        }
        if (!this.optional && this.expression.may_throw_on_access(compressor)) {
          return this;
        }
        return this.expression.drop_side_effect_free(compressor, first_in_statement2);
      });
      def_drop_side_effect_free(AST_Sub, function(compressor, first_in_statement2) {
        if (is_nullish_shortcircuited(this, compressor)) {
          return this.expression.drop_side_effect_free(compressor, first_in_statement2);
        }
        if (!this.optional && this.expression.may_throw_on_access(compressor)) {
          return this;
        }
        var property = this.property.drop_side_effect_free(compressor);
        if (property && this.optional)
          return this;
        var expression = this.expression.drop_side_effect_free(compressor, first_in_statement2);
        if (expression && property)
          return make_sequence(this, [expression, property]);
        return expression || property;
      });
      def_drop_side_effect_free(AST_Chain, function(compressor, first_in_statement2) {
        return this.expression.drop_side_effect_free(compressor, first_in_statement2);
      });
      def_drop_side_effect_free(AST_Sequence, function(compressor) {
        var last = this.tail_node();
        var expr = last.drop_side_effect_free(compressor);
        if (expr === last)
          return this;
        var expressions = this.expressions.slice(0, -1);
        if (expr)
          expressions.push(expr);
        if (!expressions.length) {
          return make_node(AST_Number, this, { value: 0 });
        }
        return make_sequence(this, expressions);
      });
      def_drop_side_effect_free(AST_Expansion, function(compressor, first_in_statement2) {
        return this.expression.drop_side_effect_free(compressor, first_in_statement2);
      });
      def_drop_side_effect_free(AST_TemplateSegment, return_null);
      def_drop_side_effect_free(AST_TemplateString, function(compressor) {
        var values = trim(this.segments, compressor, first_in_statement);
        return values && make_sequence(this, values);
      });
      const r_keep_assign = /keep_assign/;
      AST_Scope.DEFMETHOD("drop_unused", function(compressor) {
        if (!compressor.option("unused"))
          return;
        if (compressor.has_directive("use asm"))
          return;
        if (!this.variables)
          return;
        var self2 = this;
        if (self2.pinned())
          return;
        var drop_funcs = !(self2 instanceof AST_Toplevel) || compressor.toplevel.funcs;
        var drop_vars = !(self2 instanceof AST_Toplevel) || compressor.toplevel.vars;
        const assign_as_unused = r_keep_assign.test(compressor.option("unused")) ? return_false : function(node) {
          if (node instanceof AST_Assign && !node.logical && (has_flag(node, WRITE_ONLY) || node.operator == "=")) {
            return node.left;
          }
          if (node instanceof AST_Unary && has_flag(node, WRITE_ONLY)) {
            return node.expression;
          }
        };
        var this_def = null;
        var in_use_ids = /* @__PURE__ */ new Map();
        var fixed_ids = /* @__PURE__ */ new Map();
        if (self2 instanceof AST_Toplevel && compressor.top_retain) {
          self2.variables.forEach(function(def) {
            if (compressor.top_retain(def)) {
              in_use_ids.set(def.id, def);
            }
          });
        }
        var var_defs_by_id = /* @__PURE__ */ new Map();
        var initializations = /* @__PURE__ */ new Map();
        var scope = this;
        var tw = new TreeWalker(function(node, descend) {
          if (node instanceof AST_Lambda && node.uses_arguments && !tw.has_directive("use strict")) {
            node.argnames.forEach(function(argname) {
              if (!(argname instanceof AST_SymbolDeclaration))
                return;
              var def = argname.definition();
              in_use_ids.set(def.id, def);
            });
          }
          if (node === self2)
            return;
          if (node instanceof AST_Defun || node instanceof AST_DefClass) {
            var node_def = node.name.definition();
            const in_export = tw.parent() instanceof AST_Export;
            if (in_export || !drop_funcs && scope === self2) {
              if (node_def.global) {
                in_use_ids.set(node_def.id, node_def);
              }
            }
            if (node instanceof AST_DefClass && node.has_side_effects(compressor)) {
              const save_this_def = this_def;
              this_def = node_def;
              node.visit_nondeferred_class_parts(tw);
              this_def = save_this_def;
            }
            map_add(initializations, node_def.id, node);
            return true;
          }
          const in_root_scope = scope === self2;
          if (node instanceof AST_This && this_def && in_root_scope) {
            in_use_ids.set(this_def.id, this_def);
            return true;
          }
          if (node instanceof AST_SymbolFunarg && in_root_scope) {
            map_add(var_defs_by_id, node.definition().id, node);
          }
          if (node instanceof AST_Definitions && in_root_scope) {
            const in_export = tw.parent() instanceof AST_Export;
            node.definitions.forEach(function(def) {
              if (def.name instanceof AST_SymbolVar) {
                map_add(var_defs_by_id, def.name.definition().id, def);
              }
              if (in_export || !drop_vars) {
                walk(def.name, (node2) => {
                  if (node2 instanceof AST_SymbolDeclaration) {
                    const def2 = node2.definition();
                    if (def2.global) {
                      in_use_ids.set(def2.id, def2);
                    }
                  }
                });
              }
              if (def.name instanceof AST_Destructuring) {
                def.walk(tw);
              }
              if (def.name instanceof AST_SymbolDeclaration && def.value) {
                var node_def2 = def.name.definition();
                map_add(initializations, node_def2.id, def.value);
                if (!node_def2.chained && def.name.fixed_value() === def.value) {
                  fixed_ids.set(node_def2.id, def);
                }
                if (def.value.has_side_effects(compressor)) {
                  def.value.walk(tw);
                }
              }
            });
            return true;
          }
          return scan_ref_scoped(node, descend);
        });
        self2.walk(tw);
        tw = new TreeWalker(scan_ref_scoped);
        in_use_ids.forEach(function(def) {
          var init = initializations.get(def.id);
          if (init)
            init.forEach(function(init2) {
              init2.walk(tw);
            });
        });
        var tt = new TreeTransformer(
          function before(node, descend, in_list) {
            var parent = tt.parent();
            if (drop_vars) {
              const sym2 = assign_as_unused(node);
              if (sym2 instanceof AST_SymbolRef) {
                var def = sym2.definition();
                var in_use = in_use_ids.has(def.id);
                if (node instanceof AST_Assign) {
                  if (!in_use || fixed_ids.has(def.id) && fixed_ids.get(def.id) !== node) {
                    return maintain_this_binding(parent, node, node.right.transform(tt));
                  }
                } else if (!in_use) {
                  return in_list ? MAP.skip : make_node(AST_Number, node, { value: 0 });
                }
              }
            }
            if (scope !== self2)
              return;
            var def;
            if (node.name && (node instanceof AST_ClassExpression && !keep_name(compressor.option("keep_classnames"), (def = node.name.definition()).name) || node instanceof AST_Function && !keep_name(compressor.option("keep_fnames"), (def = node.name.definition()).name))) {
              if (!in_use_ids.has(def.id) || def.orig.length > 1)
                node.name = null;
            }
            if (node instanceof AST_Lambda && !(node instanceof AST_Accessor)) {
              var trim2 = !compressor.option("keep_fargs");
              for (var a = node.argnames, i = a.length; --i >= 0; ) {
                var sym = a[i];
                if (sym instanceof AST_Expansion) {
                  sym = sym.expression;
                }
                if (sym instanceof AST_DefaultAssign) {
                  sym = sym.left;
                }
                if (!(sym instanceof AST_Destructuring) && !in_use_ids.has(sym.definition().id)) {
                  set_flag(sym, UNUSED);
                  if (trim2) {
                    a.pop();
                  }
                } else {
                  trim2 = false;
                }
              }
            }
            if (node instanceof AST_DefClass && node !== self2) {
              const def2 = node.name.definition();
              descend(node, this);
              const keep_class = def2.global && !drop_funcs || in_use_ids.has(def2.id);
              if (!keep_class) {
                const kept = node.drop_side_effect_free(compressor);
                if (kept == null) {
                  def2.eliminated++;
                  return in_list ? MAP.skip : make_node(AST_EmptyStatement, node);
                }
                return kept;
              }
              return node;
            }
            if (node instanceof AST_Defun && node !== self2) {
              const def2 = node.name.definition();
              const keep = def2.global && !drop_funcs || in_use_ids.has(def2.id);
              if (!keep) {
                def2.eliminated++;
                return in_list ? MAP.skip : make_node(AST_EmptyStatement, node);
              }
            }
            if (node instanceof AST_Definitions && !(parent instanceof AST_ForIn && parent.init === node)) {
              var drop_block = !(parent instanceof AST_Toplevel) && !(node instanceof AST_Var);
              var body = [], head = [], tail = [];
              var side_effects = [];
              node.definitions.forEach(function(def2) {
                if (def2.value)
                  def2.value = def2.value.transform(tt);
                var is_destructure = def2.name instanceof AST_Destructuring;
                var sym2 = is_destructure ? new SymbolDef(null, { name: "<destructure>" }) : def2.name.definition();
                if (drop_block && sym2.global)
                  return tail.push(def2);
                if (!(drop_vars || drop_block) || is_destructure && (def2.name.names.length || def2.name.is_array || compressor.option("pure_getters") != true) || in_use_ids.has(sym2.id)) {
                  if (def2.value && fixed_ids.has(sym2.id) && fixed_ids.get(sym2.id) !== def2) {
                    def2.value = def2.value.drop_side_effect_free(compressor);
                  }
                  if (def2.name instanceof AST_SymbolVar) {
                    var var_defs = var_defs_by_id.get(sym2.id);
                    if (var_defs.length > 1 && (!def2.value || sym2.orig.indexOf(def2.name) > sym2.eliminated)) {
                      if (def2.value) {
                        var ref = make_node(AST_SymbolRef, def2.name, def2.name);
                        sym2.references.push(ref);
                        var assign = make_node(AST_Assign, def2, {
                          operator: "=",
                          logical: false,
                          left: ref,
                          right: def2.value
                        });
                        if (fixed_ids.get(sym2.id) === def2) {
                          fixed_ids.set(sym2.id, assign);
                        }
                        side_effects.push(assign.transform(tt));
                      }
                      remove(var_defs, def2);
                      sym2.eliminated++;
                      return;
                    }
                  }
                  if (def2.value) {
                    if (side_effects.length > 0) {
                      if (tail.length > 0) {
                        side_effects.push(def2.value);
                        def2.value = make_sequence(def2.value, side_effects);
                      } else {
                        body.push(make_node(AST_SimpleStatement, node, {
                          body: make_sequence(node, side_effects)
                        }));
                      }
                      side_effects = [];
                    }
                    tail.push(def2);
                  } else {
                    head.push(def2);
                  }
                } else if (sym2.orig[0] instanceof AST_SymbolCatch) {
                  var value = def2.value && def2.value.drop_side_effect_free(compressor);
                  if (value)
                    side_effects.push(value);
                  def2.value = null;
                  head.push(def2);
                } else {
                  var value = def2.value && def2.value.drop_side_effect_free(compressor);
                  if (value) {
                    side_effects.push(value);
                  }
                  sym2.eliminated++;
                }
              });
              if (head.length > 0 || tail.length > 0) {
                node.definitions = head.concat(tail);
                body.push(node);
              }
              if (side_effects.length > 0) {
                body.push(make_node(AST_SimpleStatement, node, {
                  body: make_sequence(node, side_effects)
                }));
              }
              switch (body.length) {
                case 0:
                  return in_list ? MAP.skip : make_node(AST_EmptyStatement, node);
                case 1:
                  return body[0];
                default:
                  return in_list ? MAP.splice(body) : make_node(AST_BlockStatement, node, { body });
              }
            }
            if (node instanceof AST_For) {
              descend(node, this);
              var block;
              if (node.init instanceof AST_BlockStatement) {
                block = node.init;
                node.init = block.body.pop();
                block.body.push(node);
              }
              if (node.init instanceof AST_SimpleStatement) {
                node.init = node.init.body;
              } else if (is_empty(node.init)) {
                node.init = null;
              }
              return !block ? node : in_list ? MAP.splice(block.body) : block;
            }
            if (node instanceof AST_LabeledStatement && node.body instanceof AST_For) {
              descend(node, this);
              if (node.body instanceof AST_BlockStatement) {
                var block = node.body;
                node.body = block.body.pop();
                block.body.push(node);
                return in_list ? MAP.splice(block.body) : block;
              }
              return node;
            }
            if (node instanceof AST_BlockStatement) {
              descend(node, this);
              if (in_list && node.body.every(can_be_evicted_from_block)) {
                return MAP.splice(node.body);
              }
              return node;
            }
            if (node instanceof AST_Scope && !(node instanceof AST_ClassStaticBlock)) {
              const save_scope = scope;
              scope = node;
              descend(node, this);
              scope = save_scope;
              return node;
            }
          }
        );
        self2.transform(tt);
        function scan_ref_scoped(node, descend) {
          var node_def;
          const sym = assign_as_unused(node);
          if (sym instanceof AST_SymbolRef && !is_ref_of(node.left, AST_SymbolBlockDeclaration) && self2.variables.get(sym.name) === (node_def = sym.definition())) {
            if (node instanceof AST_Assign) {
              node.right.walk(tw);
              if (!node_def.chained && node.left.fixed_value() === node.right) {
                fixed_ids.set(node_def.id, node);
              }
            }
            return true;
          }
          if (node instanceof AST_SymbolRef) {
            node_def = node.definition();
            if (!in_use_ids.has(node_def.id)) {
              in_use_ids.set(node_def.id, node_def);
              if (node_def.orig[0] instanceof AST_SymbolCatch) {
                const redef = node_def.scope.is_block_scope() && node_def.scope.get_defun_scope().variables.get(node_def.name);
                if (redef)
                  in_use_ids.set(redef.id, redef);
              }
            }
            return true;
          }
          if (node instanceof AST_Class) {
            descend();
            return true;
          }
          if (node instanceof AST_Scope && !(node instanceof AST_ClassStaticBlock)) {
            var save_scope = scope;
            scope = node;
            descend();
            scope = save_scope;
            return true;
          }
        }
      });
      function def_reduce_vars(node, func) {
        node.DEFMETHOD("reduce_vars", func);
      }
      def_reduce_vars(AST_Node, noop);
      function reset_def(compressor, def) {
        def.assignments = 0;
        def.chained = false;
        def.direct_access = false;
        def.escaped = 0;
        def.recursive_refs = 0;
        def.references = [];
        def.single_use = void 0;
        if (def.scope.pinned() || def.orig[0] instanceof AST_SymbolFunarg && def.scope.uses_arguments) {
          def.fixed = false;
        } else if (def.orig[0] instanceof AST_SymbolConst || !compressor.exposed(def)) {
          def.fixed = def.init;
        } else {
          def.fixed = false;
        }
      }
      function reset_variables(tw, compressor, node) {
        node.variables.forEach(function(def) {
          reset_def(compressor, def);
          if (def.fixed === null) {
            tw.defs_to_safe_ids.set(def.id, tw.safe_ids);
            mark(tw, def, true);
          } else if (def.fixed) {
            tw.loop_ids.set(def.id, tw.in_loop);
            mark(tw, def, true);
          }
        });
      }
      function reset_block_variables(compressor, node) {
        if (node.block_scope)
          node.block_scope.variables.forEach((def) => {
            reset_def(compressor, def);
          });
      }
      function push(tw) {
        tw.safe_ids = Object.create(tw.safe_ids);
      }
      function pop(tw) {
        tw.safe_ids = Object.getPrototypeOf(tw.safe_ids);
      }
      function mark(tw, def, safe) {
        tw.safe_ids[def.id] = safe;
      }
      function safe_to_read(tw, def) {
        if (def.single_use == "m")
          return false;
        if (tw.safe_ids[def.id]) {
          if (def.fixed == null) {
            var orig = def.orig[0];
            if (orig instanceof AST_SymbolFunarg || orig.name == "arguments")
              return false;
            def.fixed = make_node(AST_Undefined, orig);
          }
          return true;
        }
        return def.fixed instanceof AST_Defun;
      }
      function safe_to_assign(tw, def, scope, value) {
        if (def.fixed === void 0)
          return true;
        let def_safe_ids;
        if (def.fixed === null && (def_safe_ids = tw.defs_to_safe_ids.get(def.id))) {
          def_safe_ids[def.id] = false;
          tw.defs_to_safe_ids.delete(def.id);
          return true;
        }
        if (!HOP(tw.safe_ids, def.id))
          return false;
        if (!safe_to_read(tw, def))
          return false;
        if (def.fixed === false)
          return false;
        if (def.fixed != null && (!value || def.references.length > def.assignments))
          return false;
        if (def.fixed instanceof AST_Defun) {
          return value instanceof AST_Node && def.fixed.parent_scope === scope;
        }
        return def.orig.every((sym) => {
          return !(sym instanceof AST_SymbolConst || sym instanceof AST_SymbolDefun || sym instanceof AST_SymbolLambda);
        });
      }
      function ref_once(tw, compressor, def) {
        return compressor.option("unused") && !def.scope.pinned() && def.references.length - def.recursive_refs == 1 && tw.loop_ids.get(def.id) === tw.in_loop;
      }
      function is_immutable(value) {
        if (!value)
          return false;
        return value.is_constant() || value instanceof AST_Lambda || value instanceof AST_This;
      }
      function mark_escaped(tw, d, scope, node, value, level = 0, depth = 1) {
        var parent = tw.parent(level);
        if (value) {
          if (value.is_constant())
            return;
          if (value instanceof AST_ClassExpression)
            return;
        }
        if (parent instanceof AST_Assign && (parent.operator === "=" || parent.logical) && node === parent.right || parent instanceof AST_Call && (node !== parent.expression || parent instanceof AST_New) || parent instanceof AST_Exit && node === parent.value && node.scope !== d.scope || parent instanceof AST_VarDef && node === parent.value || parent instanceof AST_Yield && node === parent.value && node.scope !== d.scope) {
          if (depth > 1 && !(value && value.is_constant_expression(scope)))
            depth = 1;
          if (!d.escaped || d.escaped > depth)
            d.escaped = depth;
          return;
        } else if (parent instanceof AST_Array || parent instanceof AST_Await || parent instanceof AST_Binary && lazy_op.has(parent.operator) || parent instanceof AST_Conditional && node !== parent.condition || parent instanceof AST_Expansion || parent instanceof AST_Sequence && node === parent.tail_node()) {
          mark_escaped(tw, d, scope, parent, parent, level + 1, depth);
        } else if (parent instanceof AST_ObjectKeyVal && node === parent.value) {
          var obj = tw.parent(level + 1);
          mark_escaped(tw, d, scope, obj, obj, level + 2, depth);
        } else if (parent instanceof AST_PropAccess && node === parent.expression) {
          value = read_property(value, parent.property);
          mark_escaped(tw, d, scope, parent, value, level + 1, depth + 1);
          if (value)
            return;
        }
        if (level > 0)
          return;
        if (parent instanceof AST_Sequence && node !== parent.tail_node())
          return;
        if (parent instanceof AST_SimpleStatement)
          return;
        d.direct_access = true;
      }
      const suppress = (node) => walk(node, (node2) => {
        if (!(node2 instanceof AST_Symbol))
          return;
        var d = node2.definition();
        if (!d)
          return;
        if (node2 instanceof AST_SymbolRef)
          d.references.push(node2);
        d.fixed = false;
      });
      def_reduce_vars(AST_Accessor, function(tw, descend, compressor) {
        push(tw);
        reset_variables(tw, compressor, this);
        descend();
        pop(tw);
        return true;
      });
      def_reduce_vars(AST_Assign, function(tw, descend, compressor) {
        var node = this;
        if (node.left instanceof AST_Destructuring) {
          suppress(node.left);
          return;
        }
        const finish_walk = () => {
          if (node.logical) {
            node.left.walk(tw);
            push(tw);
            node.right.walk(tw);
            pop(tw);
            return true;
          }
        };
        var sym = node.left;
        if (!(sym instanceof AST_SymbolRef))
          return finish_walk();
        var def = sym.definition();
        var safe = safe_to_assign(tw, def, sym.scope, node.right);
        def.assignments++;
        if (!safe)
          return finish_walk();
        var fixed = def.fixed;
        if (!fixed && node.operator != "=" && !node.logical)
          return finish_walk();
        var eq = node.operator == "=";
        var value = eq ? node.right : node;
        if (is_modified(compressor, tw, node, value, 0))
          return finish_walk();
        def.references.push(sym);
        if (!node.logical) {
          if (!eq)
            def.chained = true;
          def.fixed = eq ? function() {
            return node.right;
          } : function() {
            return make_node(AST_Binary, node, {
              operator: node.operator.slice(0, -1),
              left: fixed instanceof AST_Node ? fixed : fixed(),
              right: node.right
            });
          };
        }
        if (node.logical) {
          mark(tw, def, false);
          push(tw);
          node.right.walk(tw);
          pop(tw);
          return true;
        }
        mark(tw, def, false);
        node.right.walk(tw);
        mark(tw, def, true);
        mark_escaped(tw, def, sym.scope, node, value, 0, 1);
        return true;
      });
      def_reduce_vars(AST_Binary, function(tw) {
        if (!lazy_op.has(this.operator))
          return;
        this.left.walk(tw);
        push(tw);
        this.right.walk(tw);
        pop(tw);
        return true;
      });
      def_reduce_vars(AST_Block, function(tw, descend, compressor) {
        reset_block_variables(compressor, this);
      });
      def_reduce_vars(AST_Case, function(tw) {
        push(tw);
        this.expression.walk(tw);
        pop(tw);
        push(tw);
        walk_body(this, tw);
        pop(tw);
        return true;
      });
      def_reduce_vars(AST_Class, function(tw, descend) {
        clear_flag(this, INLINED);
        push(tw);
        descend();
        pop(tw);
        return true;
      });
      def_reduce_vars(AST_ClassStaticBlock, function(tw, descend, compressor) {
        reset_block_variables(compressor, this);
      });
      def_reduce_vars(AST_Conditional, function(tw) {
        this.condition.walk(tw);
        push(tw);
        this.consequent.walk(tw);
        pop(tw);
        push(tw);
        this.alternative.walk(tw);
        pop(tw);
        return true;
      });
      def_reduce_vars(AST_Chain, function(tw, descend) {
        const safe_ids = tw.safe_ids;
        descend();
        tw.safe_ids = safe_ids;
        return true;
      });
      def_reduce_vars(AST_Call, function(tw) {
        this.expression.walk(tw);
        if (this.optional) {
          push(tw);
        }
        for (const arg of this.args)
          arg.walk(tw);
        return true;
      });
      def_reduce_vars(AST_PropAccess, function(tw) {
        if (!this.optional)
          return;
        this.expression.walk(tw);
        push(tw);
        if (this.property instanceof AST_Node)
          this.property.walk(tw);
        return true;
      });
      def_reduce_vars(AST_Default, function(tw, descend) {
        push(tw);
        descend();
        pop(tw);
        return true;
      });
      function mark_lambda(tw, descend, compressor) {
        clear_flag(this, INLINED);
        push(tw);
        reset_variables(tw, compressor, this);
        var iife;
        if (!this.name && !this.uses_arguments && !this.pinned() && (iife = tw.parent()) instanceof AST_Call && iife.expression === this && !iife.args.some((arg) => arg instanceof AST_Expansion) && this.argnames.every((arg_name) => arg_name instanceof AST_Symbol)) {
          this.argnames.forEach((arg, i) => {
            if (!arg.definition)
              return;
            var d = arg.definition();
            if (d.orig.length > 1)
              return;
            if (d.fixed === void 0 && (!this.uses_arguments || tw.has_directive("use strict"))) {
              d.fixed = function() {
                return iife.args[i] || make_node(AST_Undefined, iife);
              };
              tw.loop_ids.set(d.id, tw.in_loop);
              mark(tw, d, true);
            } else {
              d.fixed = false;
            }
          });
        }
        descend();
        pop(tw);
        handle_defined_after_hoist(this);
        return true;
      }
      function handle_defined_after_hoist(parent) {
        const defuns = [];
        walk(parent, (node) => {
          if (node === parent)
            return;
          if (node instanceof AST_Defun)
            defuns.push(node);
          if (node instanceof AST_Scope || node instanceof AST_SimpleStatement)
            return true;
        });
        const symbols_of_interest = /* @__PURE__ */ new Set();
        const defuns_of_interest = /* @__PURE__ */ new Set();
        const potential_conflicts = [];
        for (const defun of defuns) {
          const fname_def = defun.name.definition();
          const found_self_ref_in_other_defuns = defuns.some(
            (d) => d !== defun && d.enclosed.indexOf(fname_def) !== -1
          );
          for (const def of defun.enclosed) {
            if (def.fixed === false || def === fname_def || def.scope.get_defun_scope() !== parent) {
              continue;
            }
            if (def.assignments === 0 && def.orig.length === 1 && def.orig[0] instanceof AST_SymbolDefun) {
              continue;
            }
            if (found_self_ref_in_other_defuns) {
              def.fixed = false;
              continue;
            }
            potential_conflicts.push({ defun, def, fname_def });
            symbols_of_interest.add(def.id);
            symbols_of_interest.add(fname_def.id);
            defuns_of_interest.add(defun);
          }
        }
        if (potential_conflicts.length) {
          const found_symbols = [];
          const found_symbol_writes = /* @__PURE__ */ new Set();
          const defun_ranges = /* @__PURE__ */ new Map();
          let tw;
          parent.walk(tw = new TreeWalker((node, descend) => {
            if (node instanceof AST_Defun && defuns_of_interest.has(node)) {
              const start = found_symbols.length;
              descend();
              const end = found_symbols.length;
              defun_ranges.set(node, { start, end });
              return true;
            }
            if (node instanceof AST_Symbol && node.thedef) {
              const id = node.definition().id;
              if (symbols_of_interest.has(id)) {
                if (node instanceof AST_SymbolDeclaration || is_lhs(node, tw)) {
                  found_symbol_writes.add(found_symbols.length);
                }
                found_symbols.push(id);
              }
            }
          }));
          for (const { def, defun, fname_def } of potential_conflicts) {
            const defun_range = defun_ranges.get(defun);
            const find = (sym_id, starting_at = 0, must_be_write = false) => {
              let index = starting_at;
              for (; ; ) {
                index = found_symbols.indexOf(sym_id, index);
                if (index === -1) {
                  break;
                } else if (index >= defun_range.start && index < defun_range.end) {
                  index = defun_range.end;
                  continue;
                } else if (must_be_write && !found_symbol_writes.has(index)) {
                  index++;
                  continue;
                } else {
                  break;
                }
              }
              return index;
            };
            const read_defun_at = find(fname_def.id);
            const wrote_def_at = find(def.id, read_defun_at + 1, true);
            const wrote_def_after_reading_defun = read_defun_at != -1 && wrote_def_at != -1 && wrote_def_at > read_defun_at;
            if (wrote_def_after_reading_defun) {
              def.fixed = false;
            }
          }
        }
      }
      def_reduce_vars(AST_Lambda, mark_lambda);
      def_reduce_vars(AST_Do, function(tw, descend, compressor) {
        reset_block_variables(compressor, this);
        const saved_loop = tw.in_loop;
        tw.in_loop = this;
        push(tw);
        this.body.walk(tw);
        if (has_break_or_continue(this)) {
          pop(tw);
          push(tw);
        }
        this.condition.walk(tw);
        pop(tw);
        tw.in_loop = saved_loop;
        return true;
      });
      def_reduce_vars(AST_For, function(tw, descend, compressor) {
        reset_block_variables(compressor, this);
        if (this.init)
          this.init.walk(tw);
        const saved_loop = tw.in_loop;
        tw.in_loop = this;
        push(tw);
        if (this.condition)
          this.condition.walk(tw);
        this.body.walk(tw);
        if (this.step) {
          if (has_break_or_continue(this)) {
            pop(tw);
            push(tw);
          }
          this.step.walk(tw);
        }
        pop(tw);
        tw.in_loop = saved_loop;
        return true;
      });
      def_reduce_vars(AST_ForIn, function(tw, descend, compressor) {
        reset_block_variables(compressor, this);
        suppress(this.init);
        this.object.walk(tw);
        const saved_loop = tw.in_loop;
        tw.in_loop = this;
        push(tw);
        this.body.walk(tw);
        pop(tw);
        tw.in_loop = saved_loop;
        return true;
      });
      def_reduce_vars(AST_If, function(tw) {
        this.condition.walk(tw);
        push(tw);
        this.body.walk(tw);
        pop(tw);
        if (this.alternative) {
          push(tw);
          this.alternative.walk(tw);
          pop(tw);
        }
        return true;
      });
      def_reduce_vars(AST_LabeledStatement, function(tw) {
        push(tw);
        this.body.walk(tw);
        pop(tw);
        return true;
      });
      def_reduce_vars(AST_SymbolCatch, function() {
        this.definition().fixed = false;
      });
      def_reduce_vars(AST_SymbolRef, function(tw, descend, compressor) {
        var d = this.definition();
        d.references.push(this);
        if (d.references.length == 1 && !d.fixed && d.orig[0] instanceof AST_SymbolDefun) {
          tw.loop_ids.set(d.id, tw.in_loop);
        }
        var fixed_value;
        if (d.fixed === void 0 || !safe_to_read(tw, d)) {
          d.fixed = false;
        } else if (d.fixed) {
          fixed_value = this.fixed_value();
          if (fixed_value instanceof AST_Lambda && is_recursive_ref(tw, d)) {
            d.recursive_refs++;
          } else if (fixed_value && !compressor.exposed(d) && ref_once(tw, compressor, d)) {
            d.single_use = fixed_value instanceof AST_Lambda && !fixed_value.pinned() || fixed_value instanceof AST_Class || d.scope === this.scope && fixed_value.is_constant_expression();
          } else {
            d.single_use = false;
          }
          if (is_modified(compressor, tw, this, fixed_value, 0, is_immutable(fixed_value))) {
            if (d.single_use) {
              d.single_use = "m";
            } else {
              d.fixed = false;
            }
          }
        }
        mark_escaped(tw, d, this.scope, this, fixed_value, 0, 1);
      });
      def_reduce_vars(AST_Toplevel, function(tw, descend, compressor) {
        this.globals.forEach(function(def) {
          reset_def(compressor, def);
        });
        reset_variables(tw, compressor, this);
        descend();
        handle_defined_after_hoist(this);
        return true;
      });
      def_reduce_vars(AST_Try, function(tw, descend, compressor) {
        reset_block_variables(compressor, this);
        push(tw);
        this.body.walk(tw);
        pop(tw);
        if (this.bcatch) {
          push(tw);
          this.bcatch.walk(tw);
          pop(tw);
        }
        if (this.bfinally)
          this.bfinally.walk(tw);
        return true;
      });
      def_reduce_vars(AST_Unary, function(tw) {
        var node = this;
        if (node.operator !== "++" && node.operator !== "--")
          return;
        var exp = node.expression;
        if (!(exp instanceof AST_SymbolRef))
          return;
        var def = exp.definition();
        var safe = safe_to_assign(tw, def, exp.scope, true);
        def.assignments++;
        if (!safe)
          return;
        var fixed = def.fixed;
        if (!fixed)
          return;
        def.references.push(exp);
        def.chained = true;
        def.fixed = function() {
          return make_node(AST_Binary, node, {
            operator: node.operator.slice(0, -1),
            left: make_node(AST_UnaryPrefix, node, {
              operator: "+",
              expression: fixed instanceof AST_Node ? fixed : fixed()
            }),
            right: make_node(AST_Number, node, {
              value: 1
            })
          });
        };
        mark(tw, def, true);
        return true;
      });
      def_reduce_vars(AST_VarDef, function(tw, descend) {
        var node = this;
        if (node.name instanceof AST_Destructuring) {
          suppress(node.name);
          return;
        }
        var d = node.name.definition();
        if (node.value) {
          if (safe_to_assign(tw, d, node.name.scope, node.value)) {
            d.fixed = function() {
              return node.value;
            };
            tw.loop_ids.set(d.id, tw.in_loop);
            mark(tw, d, false);
            descend();
            mark(tw, d, true);
            return true;
          } else {
            d.fixed = false;
          }
        }
      });
      def_reduce_vars(AST_While, function(tw, descend, compressor) {
        reset_block_variables(compressor, this);
        const saved_loop = tw.in_loop;
        tw.in_loop = this;
        push(tw);
        descend();
        pop(tw);
        tw.in_loop = saved_loop;
        return true;
      });
      function loop_body(x) {
        if (x instanceof AST_IterationStatement) {
          return x.body instanceof AST_BlockStatement ? x.body : x;
        }
        return x;
      }
      function is_lhs_read_only(lhs) {
        if (lhs instanceof AST_This)
          return true;
        if (lhs instanceof AST_SymbolRef)
          return lhs.definition().orig[0] instanceof AST_SymbolLambda;
        if (lhs instanceof AST_PropAccess) {
          lhs = lhs.expression;
          if (lhs instanceof AST_SymbolRef) {
            if (lhs.is_immutable())
              return false;
            lhs = lhs.fixed_value();
          }
          if (!lhs)
            return true;
          if (lhs instanceof AST_RegExp)
            return false;
          if (lhs instanceof AST_Constant)
            return true;
          return is_lhs_read_only(lhs);
        }
        return false;
      }
      function remove_initializers(var_statement) {
        var decls = [];
        var_statement.definitions.forEach(function(def) {
          if (def.name instanceof AST_SymbolDeclaration) {
            def.value = null;
            decls.push(def);
          } else {
            def.declarations_as_names().forEach((name) => {
              decls.push(make_node(AST_VarDef, def, {
                name,
                value: null
              }));
            });
          }
        });
        return decls.length ? make_node(AST_Var, var_statement, { definitions: decls }) : null;
      }
      function trim_unreachable_code(compressor, stat, target) {
        walk(stat, (node) => {
          if (node instanceof AST_Var) {
            const no_initializers = remove_initializers(node);
            if (no_initializers)
              target.push(no_initializers);
            return true;
          }
          if (node instanceof AST_Defun && (node === stat || !compressor.has_directive("use strict"))) {
            target.push(node === stat ? node : make_node(AST_Var, node, {
              definitions: [
                make_node(AST_VarDef, node, {
                  name: make_node(AST_SymbolVar, node.name, node.name),
                  value: null
                })
              ]
            }));
            return true;
          }
          if (node instanceof AST_Export || node instanceof AST_Import) {
            target.push(node);
            return true;
          }
          if (node instanceof AST_Scope) {
            return true;
          }
        });
      }
      function tighten_body(statements, compressor) {
        const nearest_scope = compressor.find_scope();
        const defun_scope = nearest_scope.get_defun_scope();
        const { in_loop, in_try } = find_loop_scope_try();
        var CHANGED, max_iter = 10;
        do {
          CHANGED = false;
          eliminate_spurious_blocks(statements);
          if (compressor.option("dead_code")) {
            eliminate_dead_code(statements, compressor);
          }
          if (compressor.option("if_return")) {
            handle_if_return(statements, compressor);
          }
          if (compressor.sequences_limit > 0) {
            sequencesize(statements, compressor);
            sequencesize_2(statements, compressor);
          }
          if (compressor.option("join_vars")) {
            join_consecutive_vars(statements);
          }
          if (compressor.option("collapse_vars")) {
            collapse(statements, compressor);
          }
        } while (CHANGED && max_iter-- > 0);
        function find_loop_scope_try() {
          var node = compressor.self(), level = 0, in_loop2 = false, in_try2 = false;
          do {
            if (node instanceof AST_IterationStatement) {
              in_loop2 = true;
            } else if (node instanceof AST_Scope) {
              break;
            } else if (node instanceof AST_TryBlock) {
              in_try2 = true;
            }
          } while (node = compressor.parent(level++));
          return { in_loop: in_loop2, in_try: in_try2 };
        }
        function collapse(statements2, compressor2) {
          if (nearest_scope.pinned() || defun_scope.pinned())
            return statements2;
          var args;
          var candidates = [];
          var stat_index = statements2.length;
          var scanner = new TreeTransformer(function(node) {
            if (abort)
              return node;
            if (!hit) {
              if (node !== hit_stack[hit_index])
                return node;
              hit_index++;
              if (hit_index < hit_stack.length)
                return handle_custom_scan_order(node);
              hit = true;
              stop_after = find_stop(node, 0);
              if (stop_after === node)
                abort = true;
              return node;
            }
            var parent = scanner.parent();
            if (node instanceof AST_Assign && (node.logical || node.operator != "=" && lhs.equivalent_to(node.left)) || node instanceof AST_Await || node instanceof AST_Call && lhs instanceof AST_PropAccess && lhs.equivalent_to(node.expression) || (node instanceof AST_Call || node instanceof AST_PropAccess) && node.optional || node instanceof AST_Debugger || node instanceof AST_Destructuring || node instanceof AST_Expansion && node.expression instanceof AST_Symbol && (node.expression instanceof AST_This || node.expression.definition().references.length > 1) || node instanceof AST_IterationStatement && !(node instanceof AST_For) || node instanceof AST_LoopControl || node instanceof AST_Try || node instanceof AST_With || node instanceof AST_Yield || node instanceof AST_Export || node instanceof AST_Class || parent instanceof AST_For && node !== parent.init || !replace_all && (node instanceof AST_SymbolRef && !node.is_declared(compressor2) && !pure_prop_access_globals.has(node)) || node instanceof AST_SymbolRef && parent instanceof AST_Call && has_annotation(parent, _NOINLINE)) {
              abort = true;
              return node;
            }
            if (!stop_if_hit && (!lhs_local || !replace_all) && (parent instanceof AST_Binary && lazy_op.has(parent.operator) && parent.left !== node || parent instanceof AST_Conditional && parent.condition !== node || parent instanceof AST_If && parent.condition !== node)) {
              stop_if_hit = parent;
            }
            if (can_replace && !(node instanceof AST_SymbolDeclaration) && lhs.equivalent_to(node) && !shadows(scanner.find_scope() || nearest_scope, lvalues)) {
              if (stop_if_hit) {
                abort = true;
                return node;
              }
              if (is_lhs(node, parent)) {
                if (value_def)
                  replaced++;
                return node;
              } else {
                replaced++;
                if (value_def && candidate instanceof AST_VarDef)
                  return node;
              }
              CHANGED = abort = true;
              if (candidate instanceof AST_UnaryPostfix) {
                return make_node(AST_UnaryPrefix, candidate, candidate);
              }
              if (candidate instanceof AST_VarDef) {
                var def2 = candidate.name.definition();
                var value = candidate.value;
                if (def2.references.length - def2.replaced == 1 && !compressor2.exposed(def2)) {
                  def2.replaced++;
                  if (funarg && is_identifier_atom(value)) {
                    return value.transform(compressor2);
                  } else {
                    return maintain_this_binding(parent, node, value);
                  }
                }
                return make_node(AST_Assign, candidate, {
                  operator: "=",
                  logical: false,
                  left: make_node(AST_SymbolRef, candidate.name, candidate.name),
                  right: value
                });
              }
              clear_flag(candidate, WRITE_ONLY);
              return candidate;
            }
            var sym;
            if (node instanceof AST_Call || node instanceof AST_Exit && (side_effects || lhs instanceof AST_PropAccess || may_modify(lhs)) || node instanceof AST_PropAccess && (side_effects || node.expression.may_throw_on_access(compressor2)) || node instanceof AST_SymbolRef && (lvalues.has(node.name) && lvalues.get(node.name).modified || side_effects && may_modify(node)) || node instanceof AST_VarDef && node.value && (lvalues.has(node.name.name) || side_effects && may_modify(node.name)) || (sym = is_lhs(node.left, node)) && (sym instanceof AST_PropAccess || lvalues.has(sym.name)) || may_throw && (in_try ? node.has_side_effects(compressor2) : side_effects_external(node))) {
              stop_after = node;
              if (node instanceof AST_Scope)
                abort = true;
            }
            return handle_custom_scan_order(node);
          }, function(node) {
            if (abort)
              return;
            if (stop_after === node)
              abort = true;
            if (stop_if_hit === node)
              stop_if_hit = null;
          });
          var multi_replacer = new TreeTransformer(function(node) {
            if (abort)
              return node;
            if (!hit) {
              if (node !== hit_stack[hit_index])
                return node;
              hit_index++;
              if (hit_index < hit_stack.length)
                return;
              hit = true;
              return node;
            }
            if (node instanceof AST_SymbolRef && node.name == def.name) {
              if (!--replaced)
                abort = true;
              if (is_lhs(node, multi_replacer.parent()))
                return node;
              def.replaced++;
              value_def.replaced--;
              return candidate.value;
            }
            if (node instanceof AST_Default || node instanceof AST_Scope)
              return node;
          });
          while (--stat_index >= 0) {
            if (stat_index == 0 && compressor2.option("unused"))
              extract_args();
            var hit_stack = [];
            extract_candidates(statements2[stat_index]);
            while (candidates.length > 0) {
              hit_stack = candidates.pop();
              var hit_index = 0;
              var candidate = hit_stack[hit_stack.length - 1];
              var value_def = null;
              var stop_after = null;
              var stop_if_hit = null;
              var lhs = get_lhs(candidate);
              if (!lhs || is_lhs_read_only(lhs) || lhs.has_side_effects(compressor2))
                continue;
              var lvalues = get_lvalues(candidate);
              var lhs_local = is_lhs_local(lhs);
              if (lhs instanceof AST_SymbolRef) {
                lvalues.set(lhs.name, { def: lhs.definition(), modified: false });
              }
              var side_effects = value_has_side_effects(candidate);
              var replace_all = replace_all_symbols();
              var may_throw = candidate.may_throw(compressor2);
              var funarg = candidate.name instanceof AST_SymbolFunarg;
              var hit = funarg;
              var abort = false, replaced = 0, can_replace = !args || !hit;
              if (!can_replace) {
                for (let j = compressor2.self().argnames.lastIndexOf(candidate.name) + 1; !abort && j < args.length; j++) {
                  args[j].transform(scanner);
                }
                can_replace = true;
              }
              for (var i = stat_index; !abort && i < statements2.length; i++) {
                statements2[i].transform(scanner);
              }
              if (value_def) {
                var def = candidate.name.definition();
                if (abort && def.references.length - def.replaced > replaced)
                  replaced = false;
                else {
                  abort = false;
                  hit_index = 0;
                  hit = funarg;
                  for (var i = stat_index; !abort && i < statements2.length; i++) {
                    statements2[i].transform(multi_replacer);
                  }
                  value_def.single_use = false;
                }
              }
              if (replaced && !remove_candidate(candidate))
                statements2.splice(stat_index, 1);
            }
          }
          function handle_custom_scan_order(node) {
            if (node instanceof AST_Scope)
              return node;
            if (node instanceof AST_Switch) {
              node.expression = node.expression.transform(scanner);
              for (var i2 = 0, len = node.body.length; !abort && i2 < len; i2++) {
                var branch = node.body[i2];
                if (branch instanceof AST_Case) {
                  if (!hit) {
                    if (branch !== hit_stack[hit_index])
                      continue;
                    hit_index++;
                  }
                  branch.expression = branch.expression.transform(scanner);
                  if (!replace_all)
                    break;
                }
              }
              abort = true;
              return node;
            }
          }
          function redefined_within_scope(def2, scope) {
            if (def2.global)
              return false;
            let cur_scope = def2.scope;
            while (cur_scope && cur_scope !== scope) {
              if (cur_scope.variables.has(def2.name)) {
                return true;
              }
              cur_scope = cur_scope.parent_scope;
            }
            return false;
          }
          function has_overlapping_symbol(fn, arg, fn_strict) {
            var found = false, scan_this = !(fn instanceof AST_Arrow);
            arg.walk(new TreeWalker(function(node, descend) {
              if (found)
                return true;
              if (node instanceof AST_SymbolRef && (fn.variables.has(node.name) || redefined_within_scope(node.definition(), fn))) {
                var s = node.definition().scope;
                if (s !== defun_scope)
                  while (s = s.parent_scope) {
                    if (s === defun_scope)
                      return true;
                  }
                return found = true;
              }
              if ((fn_strict || scan_this) && node instanceof AST_This) {
                return found = true;
              }
              if (node instanceof AST_Scope && !(node instanceof AST_Arrow)) {
                var prev = scan_this;
                scan_this = false;
                descend();
                scan_this = prev;
                return true;
              }
            }));
            return found;
          }
          function arg_is_injectable(arg) {
            if (arg instanceof AST_Expansion)
              return false;
            const contains_await = walk(arg, (node) => {
              if (node instanceof AST_Await)
                return walk_abort;
            });
            if (contains_await)
              return false;
            return true;
          }
          function extract_args() {
            var iife, fn = compressor2.self();
            if (is_func_expr(fn) && !fn.name && !fn.uses_arguments && !fn.pinned() && (iife = compressor2.parent()) instanceof AST_Call && iife.expression === fn && iife.args.every(arg_is_injectable)) {
              var fn_strict = compressor2.has_directive("use strict");
              if (fn_strict && !member(fn_strict, fn.body))
                fn_strict = false;
              var len = fn.argnames.length;
              args = iife.args.slice(len);
              var names = /* @__PURE__ */ new Set();
              for (var i2 = len; --i2 >= 0; ) {
                var sym = fn.argnames[i2];
                var arg = iife.args[i2];
                const def2 = sym.definition && sym.definition();
                const is_reassigned = def2 && def2.orig.length > 1;
                if (is_reassigned)
                  continue;
                args.unshift(make_node(AST_VarDef, sym, {
                  name: sym,
                  value: arg
                }));
                if (names.has(sym.name))
                  continue;
                names.add(sym.name);
                if (sym instanceof AST_Expansion) {
                  var elements = iife.args.slice(i2);
                  if (elements.every(
                    (arg2) => !has_overlapping_symbol(fn, arg2, fn_strict)
                  )) {
                    candidates.unshift([make_node(AST_VarDef, sym, {
                      name: sym.expression,
                      value: make_node(AST_Array, iife, {
                        elements
                      })
                    })]);
                  }
                } else {
                  if (!arg) {
                    arg = make_node(AST_Undefined, sym).transform(compressor2);
                  } else if (arg instanceof AST_Lambda && arg.pinned() || has_overlapping_symbol(fn, arg, fn_strict)) {
                    arg = null;
                  }
                  if (arg)
                    candidates.unshift([make_node(AST_VarDef, sym, {
                      name: sym,
                      value: arg
                    })]);
                }
              }
            }
          }
          function extract_candidates(expr) {
            hit_stack.push(expr);
            if (expr instanceof AST_Assign) {
              if (!expr.left.has_side_effects(compressor2) && !(expr.right instanceof AST_Chain)) {
                candidates.push(hit_stack.slice());
              }
              extract_candidates(expr.right);
            } else if (expr instanceof AST_Binary) {
              extract_candidates(expr.left);
              extract_candidates(expr.right);
            } else if (expr instanceof AST_Call && !has_annotation(expr, _NOINLINE)) {
              extract_candidates(expr.expression);
              expr.args.forEach(extract_candidates);
            } else if (expr instanceof AST_Case) {
              extract_candidates(expr.expression);
            } else if (expr instanceof AST_Conditional) {
              extract_candidates(expr.condition);
              extract_candidates(expr.consequent);
              extract_candidates(expr.alternative);
            } else if (expr instanceof AST_Definitions) {
              var len = expr.definitions.length;
              var i2 = len - 200;
              if (i2 < 0)
                i2 = 0;
              for (; i2 < len; i2++) {
                extract_candidates(expr.definitions[i2]);
              }
            } else if (expr instanceof AST_DWLoop) {
              extract_candidates(expr.condition);
              if (!(expr.body instanceof AST_Block)) {
                extract_candidates(expr.body);
              }
            } else if (expr instanceof AST_Exit) {
              if (expr.value)
                extract_candidates(expr.value);
            } else if (expr instanceof AST_For) {
              if (expr.init)
                extract_candidates(expr.init);
              if (expr.condition)
                extract_candidates(expr.condition);
              if (expr.step)
                extract_candidates(expr.step);
              if (!(expr.body instanceof AST_Block)) {
                extract_candidates(expr.body);
              }
            } else if (expr instanceof AST_ForIn) {
              extract_candidates(expr.object);
              if (!(expr.body instanceof AST_Block)) {
                extract_candidates(expr.body);
              }
            } else if (expr instanceof AST_If) {
              extract_candidates(expr.condition);
              if (!(expr.body instanceof AST_Block)) {
                extract_candidates(expr.body);
              }
              if (expr.alternative && !(expr.alternative instanceof AST_Block)) {
                extract_candidates(expr.alternative);
              }
            } else if (expr instanceof AST_Sequence) {
              expr.expressions.forEach(extract_candidates);
            } else if (expr instanceof AST_SimpleStatement) {
              extract_candidates(expr.body);
            } else if (expr instanceof AST_Switch) {
              extract_candidates(expr.expression);
              expr.body.forEach(extract_candidates);
            } else if (expr instanceof AST_Unary) {
              if (expr.operator == "++" || expr.operator == "--") {
                candidates.push(hit_stack.slice());
              }
            } else if (expr instanceof AST_VarDef) {
              if (expr.value && !(expr.value instanceof AST_Chain)) {
                candidates.push(hit_stack.slice());
                extract_candidates(expr.value);
              }
            }
            hit_stack.pop();
          }
          function find_stop(node, level, write_only) {
            var parent = scanner.parent(level);
            if (parent instanceof AST_Assign) {
              if (write_only && !parent.logical && !(parent.left instanceof AST_PropAccess || lvalues.has(parent.left.name))) {
                return find_stop(parent, level + 1, write_only);
              }
              return node;
            }
            if (parent instanceof AST_Binary) {
              if (write_only && (!lazy_op.has(parent.operator) || parent.left === node)) {
                return find_stop(parent, level + 1, write_only);
              }
              return node;
            }
            if (parent instanceof AST_Call)
              return node;
            if (parent instanceof AST_Case)
              return node;
            if (parent instanceof AST_Conditional) {
              if (write_only && parent.condition === node) {
                return find_stop(parent, level + 1, write_only);
              }
              return node;
            }
            if (parent instanceof AST_Definitions) {
              return find_stop(parent, level + 1, true);
            }
            if (parent instanceof AST_Exit) {
              return write_only ? find_stop(parent, level + 1, write_only) : node;
            }
            if (parent instanceof AST_If) {
              if (write_only && parent.condition === node) {
                return find_stop(parent, level + 1, write_only);
              }
              return node;
            }
            if (parent instanceof AST_IterationStatement)
              return node;
            if (parent instanceof AST_Sequence) {
              return find_stop(parent, level + 1, parent.tail_node() !== node);
            }
            if (parent instanceof AST_SimpleStatement) {
              return find_stop(parent, level + 1, true);
            }
            if (parent instanceof AST_Switch)
              return node;
            if (parent instanceof AST_VarDef)
              return node;
            return null;
          }
          function mangleable_var(var_def) {
            var value = var_def.value;
            if (!(value instanceof AST_SymbolRef))
              return;
            if (value.name == "arguments")
              return;
            var def2 = value.definition();
            if (def2.undeclared)
              return;
            return value_def = def2;
          }
          function get_lhs(expr) {
            if (expr instanceof AST_Assign && expr.logical) {
              return false;
            } else if (expr instanceof AST_VarDef && expr.name instanceof AST_SymbolDeclaration) {
              var def2 = expr.name.definition();
              if (!member(expr.name, def2.orig))
                return;
              var referenced = def2.references.length - def2.replaced;
              if (!referenced)
                return;
              var declared = def2.orig.length - def2.eliminated;
              if (declared > 1 && !(expr.name instanceof AST_SymbolFunarg) || (referenced > 1 ? mangleable_var(expr) : !compressor2.exposed(def2))) {
                return make_node(AST_SymbolRef, expr.name, expr.name);
              }
            } else {
              const lhs2 = expr instanceof AST_Assign ? expr.left : expr.expression;
              return !is_ref_of(lhs2, AST_SymbolConst) && !is_ref_of(lhs2, AST_SymbolLet) && lhs2;
            }
          }
          function get_rvalue(expr) {
            if (expr instanceof AST_Assign) {
              return expr.right;
            } else {
              return expr.value;
            }
          }
          function get_lvalues(expr) {
            var lvalues2 = /* @__PURE__ */ new Map();
            if (expr instanceof AST_Unary)
              return lvalues2;
            var tw = new TreeWalker(function(node) {
              var sym = node;
              while (sym instanceof AST_PropAccess)
                sym = sym.expression;
              if (sym instanceof AST_SymbolRef) {
                const prev = lvalues2.get(sym.name);
                if (!prev || !prev.modified) {
                  lvalues2.set(sym.name, {
                    def: sym.definition(),
                    modified: is_modified(compressor2, tw, node, node, 0)
                  });
                }
              }
            });
            get_rvalue(expr).walk(tw);
            return lvalues2;
          }
          function remove_candidate(expr) {
            if (expr.name instanceof AST_SymbolFunarg) {
              var iife = compressor2.parent(), argnames = compressor2.self().argnames;
              var index = argnames.indexOf(expr.name);
              if (index < 0) {
                iife.args.length = Math.min(iife.args.length, argnames.length - 1);
              } else {
                var args2 = iife.args;
                if (args2[index])
                  args2[index] = make_node(AST_Number, args2[index], {
                    value: 0
                  });
              }
              return true;
            }
            var found = false;
            return statements2[stat_index].transform(new TreeTransformer(function(node, descend, in_list) {
              if (found)
                return node;
              if (node === expr || node.body === expr) {
                found = true;
                if (node instanceof AST_VarDef) {
                  node.value = node.name instanceof AST_SymbolConst ? make_node(AST_Undefined, node.value) : null;
                  return node;
                }
                return in_list ? MAP.skip : null;
              }
            }, function(node) {
              if (node instanceof AST_Sequence)
                switch (node.expressions.length) {
                  case 0:
                    return null;
                  case 1:
                    return node.expressions[0];
                }
            }));
          }
          function is_lhs_local(lhs2) {
            while (lhs2 instanceof AST_PropAccess)
              lhs2 = lhs2.expression;
            return lhs2 instanceof AST_SymbolRef && lhs2.definition().scope.get_defun_scope() === defun_scope && !(in_loop && (lvalues.has(lhs2.name) || candidate instanceof AST_Unary || candidate instanceof AST_Assign && !candidate.logical && candidate.operator != "="));
          }
          function value_has_side_effects(expr) {
            if (expr instanceof AST_Unary)
              return unary_side_effects.has(expr.operator);
            return get_rvalue(expr).has_side_effects(compressor2);
          }
          function replace_all_symbols() {
            if (side_effects)
              return false;
            if (value_def)
              return true;
            if (lhs instanceof AST_SymbolRef) {
              var def2 = lhs.definition();
              if (def2.references.length - def2.replaced == (candidate instanceof AST_VarDef ? 1 : 2)) {
                return true;
              }
            }
            return false;
          }
          function may_modify(sym) {
            if (!sym.definition)
              return true;
            var def2 = sym.definition();
            if (def2.orig.length == 1 && def2.orig[0] instanceof AST_SymbolDefun)
              return false;
            if (def2.scope.get_defun_scope() !== defun_scope)
              return true;
            return def2.references.some(
              (ref) => ref.scope.get_defun_scope() !== defun_scope
            );
          }
          function side_effects_external(node, lhs2) {
            if (node instanceof AST_Assign)
              return side_effects_external(node.left, true);
            if (node instanceof AST_Unary)
              return side_effects_external(node.expression, true);
            if (node instanceof AST_VarDef)
              return node.value && side_effects_external(node.value);
            if (lhs2) {
              if (node instanceof AST_Dot)
                return side_effects_external(node.expression, true);
              if (node instanceof AST_Sub)
                return side_effects_external(node.expression, true);
              if (node instanceof AST_SymbolRef)
                return node.definition().scope.get_defun_scope() !== defun_scope;
            }
            return false;
          }
          function shadows(my_scope, lvalues2) {
            for (const { def: def2 } of lvalues2.values()) {
              const looked_up = my_scope.find_variable(def2.name);
              if (looked_up) {
                if (looked_up === def2)
                  continue;
                return true;
              }
            }
            return false;
          }
        }
        function eliminate_spurious_blocks(statements2) {
          var seen_dirs = [];
          for (var i = 0; i < statements2.length; ) {
            var stat = statements2[i];
            if (stat instanceof AST_BlockStatement && stat.body.every(can_be_evicted_from_block)) {
              CHANGED = true;
              eliminate_spurious_blocks(stat.body);
              statements2.splice(i, 1, ...stat.body);
              i += stat.body.length;
            } else if (stat instanceof AST_EmptyStatement) {
              CHANGED = true;
              statements2.splice(i, 1);
            } else if (stat instanceof AST_Directive) {
              if (seen_dirs.indexOf(stat.value) < 0) {
                i++;
                seen_dirs.push(stat.value);
              } else {
                CHANGED = true;
                statements2.splice(i, 1);
              }
            } else
              i++;
          }
        }
        function handle_if_return(statements2, compressor2) {
          var self2 = compressor2.self();
          var multiple_if_returns = has_multiple_if_returns(statements2);
          var in_lambda = self2 instanceof AST_Lambda;
          const iteration_start = Math.min(statements2.length, 500);
          for (var i = iteration_start; --i >= 0; ) {
            var stat = statements2[i];
            var j = next_index(i);
            var next = statements2[j];
            if (in_lambda && !next && stat instanceof AST_Return) {
              if (!stat.value) {
                CHANGED = true;
                statements2.splice(i, 1);
                continue;
              }
              if (stat.value instanceof AST_UnaryPrefix && stat.value.operator == "void") {
                CHANGED = true;
                statements2[i] = make_node(AST_SimpleStatement, stat, {
                  body: stat.value.expression
                });
                continue;
              }
            }
            if (stat instanceof AST_If) {
              let ab, new_else;
              ab = aborts(stat.body);
              if (can_merge_flow(ab) && (new_else = as_statement_array_with_return(stat.body, ab))) {
                if (ab.label) {
                  remove(ab.label.thedef.references, ab);
                }
                CHANGED = true;
                stat = stat.clone();
                stat.condition = stat.condition.negate(compressor2);
                stat.body = make_node(AST_BlockStatement, stat, {
                  body: as_statement_array(stat.alternative).concat(extract_functions())
                });
                stat.alternative = make_node(AST_BlockStatement, stat, {
                  body: new_else
                });
                statements2[i] = stat.transform(compressor2);
                continue;
              }
              ab = aborts(stat.alternative);
              if (can_merge_flow(ab) && (new_else = as_statement_array_with_return(stat.alternative, ab))) {
                if (ab.label) {
                  remove(ab.label.thedef.references, ab);
                }
                CHANGED = true;
                stat = stat.clone();
                stat.body = make_node(AST_BlockStatement, stat.body, {
                  body: as_statement_array(stat.body).concat(extract_functions())
                });
                stat.alternative = make_node(AST_BlockStatement, stat.alternative, {
                  body: new_else
                });
                statements2[i] = stat.transform(compressor2);
                continue;
              }
            }
            if (stat instanceof AST_If && stat.body instanceof AST_Return) {
              var value = stat.body.value;
              if (!value && !stat.alternative && (in_lambda && !next || next instanceof AST_Return && !next.value)) {
                CHANGED = true;
                statements2[i] = make_node(AST_SimpleStatement, stat.condition, {
                  body: stat.condition
                });
                continue;
              }
              if (value && !stat.alternative && next instanceof AST_Return && next.value) {
                CHANGED = true;
                stat = stat.clone();
                stat.alternative = next;
                statements2[i] = stat.transform(compressor2);
                statements2.splice(j, 1);
                continue;
              }
              if (value && !stat.alternative && (!next && in_lambda && multiple_if_returns || next instanceof AST_Return)) {
                CHANGED = true;
                stat = stat.clone();
                stat.alternative = next || make_node(AST_Return, stat, {
                  value: null
                });
                statements2[i] = stat.transform(compressor2);
                if (next)
                  statements2.splice(j, 1);
                continue;
              }
              var prev = statements2[prev_index(i)];
              if (compressor2.option("sequences") && in_lambda && !stat.alternative && prev instanceof AST_If && prev.body instanceof AST_Return && next_index(j) == statements2.length && next instanceof AST_SimpleStatement) {
                CHANGED = true;
                stat = stat.clone();
                stat.alternative = make_node(AST_BlockStatement, next, {
                  body: [
                    next,
                    make_node(AST_Return, next, {
                      value: null
                    })
                  ]
                });
                statements2[i] = stat.transform(compressor2);
                statements2.splice(j, 1);
                continue;
              }
            }
          }
          function has_multiple_if_returns(statements3) {
            var n2 = 0;
            for (var i2 = statements3.length; --i2 >= 0; ) {
              var stat2 = statements3[i2];
              if (stat2 instanceof AST_If && stat2.body instanceof AST_Return) {
                if (++n2 > 1)
                  return true;
              }
            }
            return false;
          }
          function is_return_void(value2) {
            return !value2 || value2 instanceof AST_UnaryPrefix && value2.operator == "void";
          }
          function can_merge_flow(ab) {
            if (!ab)
              return false;
            for (var j2 = i + 1, len = statements2.length; j2 < len; j2++) {
              var stat2 = statements2[j2];
              if (stat2 instanceof AST_Const || stat2 instanceof AST_Let)
                return false;
            }
            var lct = ab instanceof AST_LoopControl ? compressor2.loopcontrol_target(ab) : null;
            return ab instanceof AST_Return && in_lambda && is_return_void(ab.value) || ab instanceof AST_Continue && self2 === loop_body(lct) || ab instanceof AST_Break && lct instanceof AST_BlockStatement && self2 === lct;
          }
          function extract_functions() {
            var tail = statements2.slice(i + 1);
            statements2.length = i + 1;
            return tail.filter(function(stat2) {
              if (stat2 instanceof AST_Defun) {
                statements2.push(stat2);
                return false;
              }
              return true;
            });
          }
          function as_statement_array_with_return(node, ab) {
            var body = as_statement_array(node);
            if (ab !== body[body.length - 1]) {
              return void 0;
            }
            body = body.slice(0, -1);
            if (ab.value) {
              body.push(make_node(AST_SimpleStatement, ab.value, {
                body: ab.value.expression
              }));
            }
            return body;
          }
          function next_index(i2) {
            for (var j2 = i2 + 1, len = statements2.length; j2 < len; j2++) {
              var stat2 = statements2[j2];
              if (!(stat2 instanceof AST_Var && declarations_only(stat2))) {
                break;
              }
            }
            return j2;
          }
          function prev_index(i2) {
            for (var j2 = i2; --j2 >= 0; ) {
              var stat2 = statements2[j2];
              if (!(stat2 instanceof AST_Var && declarations_only(stat2))) {
                break;
              }
            }
            return j2;
          }
        }
        function eliminate_dead_code(statements2, compressor2) {
          var has_quit;
          var self2 = compressor2.self();
          for (var i = 0, n2 = 0, len = statements2.length; i < len; i++) {
            var stat = statements2[i];
            if (stat instanceof AST_LoopControl) {
              var lct = compressor2.loopcontrol_target(stat);
              if (stat instanceof AST_Break && !(lct instanceof AST_IterationStatement) && loop_body(lct) === self2 || stat instanceof AST_Continue && loop_body(lct) === self2) {
                if (stat.label) {
                  remove(stat.label.thedef.references, stat);
                }
              } else {
                statements2[n2++] = stat;
              }
            } else {
              statements2[n2++] = stat;
            }
            if (aborts(stat)) {
              has_quit = statements2.slice(i + 1);
              break;
            }
          }
          statements2.length = n2;
          CHANGED = n2 != len;
          if (has_quit)
            has_quit.forEach(function(stat2) {
              trim_unreachable_code(compressor2, stat2, statements2);
            });
        }
        function declarations_only(node) {
          return node.definitions.every((var_def) => !var_def.value);
        }
        function sequencesize(statements2, compressor2) {
          if (statements2.length < 2)
            return;
          var seq = [], n2 = 0;
          function push_seq() {
            if (!seq.length)
              return;
            var body2 = make_sequence(seq[0], seq);
            statements2[n2++] = make_node(AST_SimpleStatement, body2, { body: body2 });
            seq = [];
          }
          for (var i = 0, len = statements2.length; i < len; i++) {
            var stat = statements2[i];
            if (stat instanceof AST_SimpleStatement) {
              if (seq.length >= compressor2.sequences_limit)
                push_seq();
              var body = stat.body;
              if (seq.length > 0)
                body = body.drop_side_effect_free(compressor2);
              if (body)
                merge_sequence(seq, body);
            } else if (stat instanceof AST_Definitions && declarations_only(stat) || stat instanceof AST_Defun) {
              statements2[n2++] = stat;
            } else {
              push_seq();
              statements2[n2++] = stat;
            }
          }
          push_seq();
          statements2.length = n2;
          if (n2 != len)
            CHANGED = true;
        }
        function to_simple_statement(block, decls) {
          if (!(block instanceof AST_BlockStatement))
            return block;
          var stat = null;
          for (var i = 0, len = block.body.length; i < len; i++) {
            var line = block.body[i];
            if (line instanceof AST_Var && declarations_only(line)) {
              decls.push(line);
            } else if (stat || line instanceof AST_Const || line instanceof AST_Let) {
              return false;
            } else {
              stat = line;
            }
          }
          return stat;
        }
        function sequencesize_2(statements2, compressor2) {
          function cons_seq(right) {
            n2--;
            CHANGED = true;
            var left = prev.body;
            return make_sequence(left, [left, right]).transform(compressor2);
          }
          var n2 = 0, prev;
          for (var i = 0; i < statements2.length; i++) {
            var stat = statements2[i];
            if (prev) {
              if (stat instanceof AST_Exit) {
                stat.value = cons_seq(stat.value || make_node(AST_Undefined, stat).transform(compressor2));
              } else if (stat instanceof AST_For) {
                if (!(stat.init instanceof AST_Definitions)) {
                  const abort = walk(prev.body, (node) => {
                    if (node instanceof AST_Scope)
                      return true;
                    if (node instanceof AST_Binary && node.operator === "in") {
                      return walk_abort;
                    }
                  });
                  if (!abort) {
                    if (stat.init)
                      stat.init = cons_seq(stat.init);
                    else {
                      stat.init = prev.body;
                      n2--;
                      CHANGED = true;
                    }
                  }
                }
              } else if (stat instanceof AST_ForIn) {
                if (!(stat.init instanceof AST_Const) && !(stat.init instanceof AST_Let)) {
                  stat.object = cons_seq(stat.object);
                }
              } else if (stat instanceof AST_If) {
                stat.condition = cons_seq(stat.condition);
              } else if (stat instanceof AST_Switch) {
                stat.expression = cons_seq(stat.expression);
              } else if (stat instanceof AST_With) {
                stat.expression = cons_seq(stat.expression);
              }
            }
            if (compressor2.option("conditionals") && stat instanceof AST_If) {
              var decls = [];
              var body = to_simple_statement(stat.body, decls);
              var alt = to_simple_statement(stat.alternative, decls);
              if (body !== false && alt !== false && decls.length > 0) {
                var len = decls.length;
                decls.push(make_node(AST_If, stat, {
                  condition: stat.condition,
                  body: body || make_node(AST_EmptyStatement, stat.body),
                  alternative: alt
                }));
                decls.unshift(n2, 1);
                [].splice.apply(statements2, decls);
                i += len;
                n2 += len + 1;
                prev = null;
                CHANGED = true;
                continue;
              }
            }
            statements2[n2++] = stat;
            prev = stat instanceof AST_SimpleStatement ? stat : null;
          }
          statements2.length = n2;
        }
        function join_object_assignments(defn, body) {
          if (!(defn instanceof AST_Definitions))
            return;
          var def = defn.definitions[defn.definitions.length - 1];
          if (!(def.value instanceof AST_Object))
            return;
          var exprs;
          if (body instanceof AST_Assign && !body.logical) {
            exprs = [body];
          } else if (body instanceof AST_Sequence) {
            exprs = body.expressions.slice();
          }
          if (!exprs)
            return;
          var trimmed = false;
          do {
            var node = exprs[0];
            if (!(node instanceof AST_Assign))
              break;
            if (node.operator != "=")
              break;
            if (!(node.left instanceof AST_PropAccess))
              break;
            var sym = node.left.expression;
            if (!(sym instanceof AST_SymbolRef))
              break;
            if (def.name.name != sym.name)
              break;
            if (!node.right.is_constant_expression(nearest_scope))
              break;
            var prop = node.left.property;
            if (prop instanceof AST_Node) {
              prop = prop.evaluate(compressor);
            }
            if (prop instanceof AST_Node)
              break;
            prop = "" + prop;
            var diff = compressor.option("ecma") < 2015 && compressor.has_directive("use strict") ? function(node2) {
              return node2.key != prop && (node2.key && node2.key.name != prop);
            } : function(node2) {
              return node2.key && node2.key.name != prop;
            };
            if (!def.value.properties.every(diff))
              break;
            var p2 = def.value.properties.filter(function(p3) {
              return p3.key === prop;
            })[0];
            if (!p2) {
              def.value.properties.push(make_node(AST_ObjectKeyVal, node, {
                key: prop,
                value: node.right
              }));
            } else {
              p2.value = new AST_Sequence({
                start: p2.start,
                expressions: [p2.value.clone(), node.right.clone()],
                end: p2.end
              });
            }
            exprs.shift();
            trimmed = true;
          } while (exprs.length);
          return trimmed && exprs;
        }
        function join_consecutive_vars(statements2) {
          var defs;
          for (var i = 0, j = -1, len = statements2.length; i < len; i++) {
            var stat = statements2[i];
            var prev = statements2[j];
            if (stat instanceof AST_Definitions) {
              if (prev && prev.TYPE == stat.TYPE) {
                prev.definitions = prev.definitions.concat(stat.definitions);
                CHANGED = true;
              } else if (defs && defs.TYPE == stat.TYPE && declarations_only(stat)) {
                defs.definitions = defs.definitions.concat(stat.definitions);
                CHANGED = true;
              } else {
                statements2[++j] = stat;
                defs = stat;
              }
            } else if (stat instanceof AST_Exit) {
              stat.value = extract_object_assignments(stat.value);
            } else if (stat instanceof AST_For) {
              var exprs = join_object_assignments(prev, stat.init);
              if (exprs) {
                CHANGED = true;
                stat.init = exprs.length ? make_sequence(stat.init, exprs) : null;
                statements2[++j] = stat;
              } else if (prev instanceof AST_Var && (!stat.init || stat.init.TYPE == prev.TYPE)) {
                if (stat.init) {
                  prev.definitions = prev.definitions.concat(stat.init.definitions);
                }
                stat.init = prev;
                statements2[j] = stat;
                CHANGED = true;
              } else if (defs instanceof AST_Var && stat.init instanceof AST_Var && declarations_only(stat.init)) {
                defs.definitions = defs.definitions.concat(stat.init.definitions);
                stat.init = null;
                statements2[++j] = stat;
                CHANGED = true;
              } else {
                statements2[++j] = stat;
              }
            } else if (stat instanceof AST_ForIn) {
              stat.object = extract_object_assignments(stat.object);
            } else if (stat instanceof AST_If) {
              stat.condition = extract_object_assignments(stat.condition);
            } else if (stat instanceof AST_SimpleStatement) {
              var exprs = join_object_assignments(prev, stat.body);
              if (exprs) {
                CHANGED = true;
                if (!exprs.length)
                  continue;
                stat.body = make_sequence(stat.body, exprs);
              }
              statements2[++j] = stat;
            } else if (stat instanceof AST_Switch) {
              stat.expression = extract_object_assignments(stat.expression);
            } else if (stat instanceof AST_With) {
              stat.expression = extract_object_assignments(stat.expression);
            } else {
              statements2[++j] = stat;
            }
          }
          statements2.length = j + 1;
          function extract_object_assignments(value) {
            statements2[++j] = stat;
            var exprs2 = join_object_assignments(prev, value);
            if (exprs2) {
              CHANGED = true;
              if (exprs2.length) {
                return make_sequence(value, exprs2);
              } else if (value instanceof AST_Sequence) {
                return value.tail_node().left;
              } else {
                return value.left;
              }
            }
            return value;
          }
        }
      }
      function within_array_or_object_literal(compressor) {
        var node, level = 0;
        while (node = compressor.parent(level++)) {
          if (node instanceof AST_Statement)
            return false;
          if (node instanceof AST_Array || node instanceof AST_ObjectKeyVal || node instanceof AST_Object) {
            return true;
          }
        }
        return false;
      }
      function scope_encloses_variables_in_this_scope(scope, pulled_scope) {
        for (const enclosed of pulled_scope.enclosed) {
          if (pulled_scope.variables.has(enclosed.name)) {
            continue;
          }
          const looked_up = scope.find_variable(enclosed.name);
          if (looked_up) {
            if (looked_up === enclosed)
              continue;
            return true;
          }
        }
        return false;
      }
      function is_const_symbol_short_than_init_value(def, fixed_value) {
        if (def.orig.length === 1 && fixed_value) {
          const init_value_length = fixed_value.size();
          const identifer_length = def.name.length;
          return init_value_length > identifer_length;
        }
        return true;
      }
      function inline_into_symbolref(self2, compressor) {
        const parent = compressor.parent();
        const def = self2.definition();
        const nearest_scope = compressor.find_scope();
        let fixed = self2.fixed_value();
        if (compressor.top_retain && def.global && compressor.top_retain(def) && // when identifier is in top_retain option dose not mean we can always inline it.
        // if identifier name is longer then init value, we can replace it.
        is_const_symbol_short_than_init_value(def, fixed)) {
          def.fixed = false;
          def.single_use = false;
          return self2;
        }
        let single_use = def.single_use && !(parent instanceof AST_Call && parent.is_callee_pure(compressor) || has_annotation(parent, _NOINLINE)) && !(parent instanceof AST_Export && fixed instanceof AST_Lambda && fixed.name);
        if (single_use && fixed instanceof AST_Node) {
          single_use = !fixed.has_side_effects(compressor) && !fixed.may_throw(compressor);
        }
        if (fixed instanceof AST_Class && def.scope !== self2.scope) {
          return self2;
        }
        if (single_use && (fixed instanceof AST_Lambda || fixed instanceof AST_Class)) {
          if (retain_top_func(fixed, compressor)) {
            single_use = false;
          } else if (def.scope !== self2.scope && (def.escaped == 1 || has_flag(fixed, INLINED) || within_array_or_object_literal(compressor) || !compressor.option("reduce_funcs"))) {
            single_use = false;
          } else if (is_recursive_ref(compressor, def)) {
            single_use = false;
          } else if (def.scope !== self2.scope || def.orig[0] instanceof AST_SymbolFunarg) {
            single_use = fixed.is_constant_expression(self2.scope);
            if (single_use == "f") {
              var scope = self2.scope;
              do {
                if (scope instanceof AST_Defun || is_func_expr(scope)) {
                  set_flag(scope, INLINED);
                }
              } while (scope = scope.parent_scope);
            }
          }
        }
        if (single_use && (fixed instanceof AST_Lambda || fixed instanceof AST_Class)) {
          single_use = def.scope === self2.scope && !scope_encloses_variables_in_this_scope(nearest_scope, fixed) || parent instanceof AST_Call && parent.expression === self2 && !scope_encloses_variables_in_this_scope(nearest_scope, fixed) && !(fixed.name && fixed.name.definition().recursive_refs > 0);
        }
        if (single_use && fixed) {
          if (fixed instanceof AST_DefClass) {
            set_flag(fixed, SQUEEZED);
            fixed = make_node(AST_ClassExpression, fixed, fixed);
          }
          if (fixed instanceof AST_Defun) {
            set_flag(fixed, SQUEEZED);
            fixed = make_node(AST_Function, fixed, fixed);
          }
          if (def.recursive_refs > 0 && fixed.name instanceof AST_SymbolDefun) {
            const defun_def = fixed.name.definition();
            let lambda_def = fixed.variables.get(fixed.name.name);
            let name = lambda_def && lambda_def.orig[0];
            if (!(name instanceof AST_SymbolLambda)) {
              name = make_node(AST_SymbolLambda, fixed.name, fixed.name);
              name.scope = fixed;
              fixed.name = name;
              lambda_def = fixed.def_function(name);
            }
            walk(fixed, (node) => {
              if (node instanceof AST_SymbolRef && node.definition() === defun_def) {
                node.thedef = lambda_def;
                lambda_def.references.push(node);
              }
            });
          }
          if ((fixed instanceof AST_Lambda || fixed instanceof AST_Class) && fixed.parent_scope !== nearest_scope) {
            fixed = fixed.clone(true, compressor.get_toplevel());
            nearest_scope.add_child_scope(fixed);
          }
          return fixed.optimize(compressor);
        }
        if (fixed) {
          let replace;
          if (fixed instanceof AST_This) {
            if (!(def.orig[0] instanceof AST_SymbolFunarg) && def.references.every(
              (ref) => def.scope === ref.scope
            )) {
              replace = fixed;
            }
          } else {
            var ev = fixed.evaluate(compressor);
            if (ev !== fixed && (compressor.option("unsafe_regexp") || !(ev instanceof RegExp))) {
              replace = make_node_from_constant(ev, fixed);
            }
          }
          if (replace) {
            const name_length = self2.size(compressor);
            const replace_size = replace.size(compressor);
            let overhead = 0;
            if (compressor.option("unused") && !compressor.exposed(def)) {
              overhead = (name_length + 2 + replace_size) / (def.references.length - def.assignments);
            }
            if (replace_size <= name_length + overhead) {
              return replace;
            }
          }
        }
        return self2;
      }
      function inline_into_call(self2, compressor) {
        var exp = self2.expression;
        var fn = exp;
        var simple_args = self2.args.every((arg) => !(arg instanceof AST_Expansion));
        if (compressor.option("reduce_vars") && fn instanceof AST_SymbolRef && !has_annotation(self2, _NOINLINE)) {
          const fixed = fn.fixed_value();
          if (retain_top_func(fixed, compressor) || !compressor.toplevel.funcs && exp.definition().global) {
            return self2;
          }
          fn = fixed;
        }
        var is_func = fn instanceof AST_Lambda;
        var stat = is_func && fn.body[0];
        var is_regular_func = is_func && !fn.is_generator && !fn.async;
        var can_inline = is_regular_func && compressor.option("inline") && !self2.is_callee_pure(compressor);
        if (can_inline && stat instanceof AST_Return) {
          let returned = stat.value;
          if (!returned || returned.is_constant_expression()) {
            if (returned) {
              returned = returned.clone(true);
            } else {
              returned = make_node(AST_Undefined, self2);
            }
            const args2 = self2.args.concat(returned);
            return make_sequence(self2, args2).optimize(compressor);
          }
          if (fn.argnames.length === 1 && fn.argnames[0] instanceof AST_SymbolFunarg && self2.args.length < 2 && !(self2.args[0] instanceof AST_Expansion) && returned instanceof AST_SymbolRef && returned.name === fn.argnames[0].name) {
            const replacement = (self2.args[0] || make_node(AST_Undefined)).optimize(compressor);
            let parent;
            if (replacement instanceof AST_PropAccess && (parent = compressor.parent()) instanceof AST_Call && parent.expression === self2) {
              return make_sequence(self2, [
                make_node(AST_Number, self2, { value: 0 }),
                replacement
              ]);
            }
            return replacement;
          }
        }
        if (can_inline) {
          var scope, in_loop, level = -1;
          let def;
          let returned_value;
          let nearest_scope;
          if (simple_args && !fn.uses_arguments && !(compressor.parent() instanceof AST_Class) && !(fn.name && fn instanceof AST_Function) && (returned_value = can_flatten_body(stat)) && (exp === fn || has_annotation(self2, _INLINE) || compressor.option("unused") && (def = exp.definition()).references.length == 1 && !is_recursive_ref(compressor, def) && fn.is_constant_expression(exp.scope)) && !has_annotation(self2, _PURE | _NOINLINE) && !fn.contains_this() && can_inject_symbols() && (nearest_scope = compressor.find_scope()) && !scope_encloses_variables_in_this_scope(nearest_scope, fn) && !function in_default_assign() {
            let i = 0;
            let p2;
            while (p2 = compressor.parent(i++)) {
              if (p2 instanceof AST_DefaultAssign)
                return true;
              if (p2 instanceof AST_Block)
                break;
            }
            return false;
          }() && !(scope instanceof AST_Class)) {
            set_flag(fn, SQUEEZED);
            nearest_scope.add_child_scope(fn);
            return make_sequence(self2, flatten_fn(returned_value)).optimize(compressor);
          }
        }
        if (can_inline && has_annotation(self2, _INLINE)) {
          set_flag(fn, SQUEEZED);
          fn = make_node(fn.CTOR === AST_Defun ? AST_Function : fn.CTOR, fn, fn);
          fn = fn.clone(true);
          fn.figure_out_scope({}, {
            parent_scope: compressor.find_scope(),
            toplevel: compressor.get_toplevel()
          });
          return make_node(AST_Call, self2, {
            expression: fn,
            args: self2.args
          }).optimize(compressor);
        }
        const can_drop_this_call = is_regular_func && compressor.option("side_effects") && fn.body.every(is_empty);
        if (can_drop_this_call) {
          var args = self2.args.concat(make_node(AST_Undefined, self2));
          return make_sequence(self2, args).optimize(compressor);
        }
        if (compressor.option("negate_iife") && compressor.parent() instanceof AST_SimpleStatement && is_iife_call(self2)) {
          return self2.negate(compressor, true);
        }
        var ev = self2.evaluate(compressor);
        if (ev !== self2) {
          ev = make_node_from_constant(ev, self2).optimize(compressor);
          return best_of(compressor, ev, self2);
        }
        return self2;
        function return_value(stat2) {
          if (!stat2)
            return make_node(AST_Undefined, self2);
          if (stat2 instanceof AST_Return) {
            if (!stat2.value)
              return make_node(AST_Undefined, self2);
            return stat2.value.clone(true);
          }
          if (stat2 instanceof AST_SimpleStatement) {
            return make_node(AST_UnaryPrefix, stat2, {
              operator: "void",
              expression: stat2.body.clone(true)
            });
          }
        }
        function can_flatten_body(stat2) {
          var body = fn.body;
          var len = body.length;
          if (compressor.option("inline") < 3) {
            return len == 1 && return_value(stat2);
          }
          stat2 = null;
          for (var i = 0; i < len; i++) {
            var line = body[i];
            if (line instanceof AST_Var) {
              if (stat2 && !line.definitions.every(
                (var_def) => !var_def.value
              )) {
                return false;
              }
            } else if (stat2) {
              return false;
            } else if (!(line instanceof AST_EmptyStatement)) {
              stat2 = line;
            }
          }
          return return_value(stat2);
        }
        function can_inject_args(block_scoped, safe_to_inject) {
          for (var i = 0, len = fn.argnames.length; i < len; i++) {
            var arg = fn.argnames[i];
            if (arg instanceof AST_DefaultAssign) {
              if (has_flag(arg.left, UNUSED))
                continue;
              return false;
            }
            if (arg instanceof AST_Destructuring)
              return false;
            if (arg instanceof AST_Expansion) {
              if (has_flag(arg.expression, UNUSED))
                continue;
              return false;
            }
            if (has_flag(arg, UNUSED))
              continue;
            if (!safe_to_inject || block_scoped.has(arg.name) || identifier_atom.has(arg.name) || scope.conflicting_def(arg.name)) {
              return false;
            }
            if (in_loop)
              in_loop.push(arg.definition());
          }
          return true;
        }
        function can_inject_vars(block_scoped, safe_to_inject) {
          var len = fn.body.length;
          for (var i = 0; i < len; i++) {
            var stat2 = fn.body[i];
            if (!(stat2 instanceof AST_Var))
              continue;
            if (!safe_to_inject)
              return false;
            for (var j = stat2.definitions.length; --j >= 0; ) {
              var name = stat2.definitions[j].name;
              if (name instanceof AST_Destructuring || block_scoped.has(name.name) || identifier_atom.has(name.name) || scope.conflicting_def(name.name)) {
                return false;
              }
              if (in_loop)
                in_loop.push(name.definition());
            }
          }
          return true;
        }
        function can_inject_symbols() {
          var block_scoped = /* @__PURE__ */ new Set();
          do {
            scope = compressor.parent(++level);
            if (scope.is_block_scope() && scope.block_scope) {
              scope.block_scope.variables.forEach(function(variable) {
                block_scoped.add(variable.name);
              });
            }
            if (scope instanceof AST_Catch) {
              if (scope.argname) {
                block_scoped.add(scope.argname.name);
              }
            } else if (scope instanceof AST_IterationStatement) {
              in_loop = [];
            } else if (scope instanceof AST_SymbolRef) {
              if (scope.fixed_value() instanceof AST_Scope)
                return false;
            }
          } while (!(scope instanceof AST_Scope));
          var safe_to_inject = !(scope instanceof AST_Toplevel) || compressor.toplevel.vars;
          var inline = compressor.option("inline");
          if (!can_inject_vars(block_scoped, inline >= 3 && safe_to_inject))
            return false;
          if (!can_inject_args(block_scoped, inline >= 2 && safe_to_inject))
            return false;
          return !in_loop || in_loop.length == 0 || !is_reachable(fn, in_loop);
        }
        function append_var(decls, expressions, name, value) {
          var def = name.definition();
          const already_appended = scope.variables.has(name.name);
          if (!already_appended) {
            scope.variables.set(name.name, def);
            scope.enclosed.push(def);
            decls.push(make_node(AST_VarDef, name, {
              name,
              value: null
            }));
          }
          var sym = make_node(AST_SymbolRef, name, name);
          def.references.push(sym);
          if (value)
            expressions.push(make_node(AST_Assign, self2, {
              operator: "=",
              logical: false,
              left: sym,
              right: value.clone()
            }));
        }
        function flatten_args(decls, expressions) {
          var len = fn.argnames.length;
          for (var i = self2.args.length; --i >= len; ) {
            expressions.push(self2.args[i]);
          }
          for (i = len; --i >= 0; ) {
            var name = fn.argnames[i];
            var value = self2.args[i];
            if (has_flag(name, UNUSED) || !name.name || scope.conflicting_def(name.name)) {
              if (value)
                expressions.push(value);
            } else {
              var symbol = make_node(AST_SymbolVar, name, name);
              name.definition().orig.push(symbol);
              if (!value && in_loop)
                value = make_node(AST_Undefined, self2);
              append_var(decls, expressions, symbol, value);
            }
          }
          decls.reverse();
          expressions.reverse();
        }
        function flatten_vars(decls, expressions) {
          var pos = expressions.length;
          for (var i = 0, lines = fn.body.length; i < lines; i++) {
            var stat2 = fn.body[i];
            if (!(stat2 instanceof AST_Var))
              continue;
            for (var j = 0, defs = stat2.definitions.length; j < defs; j++) {
              var var_def = stat2.definitions[j];
              var name = var_def.name;
              append_var(decls, expressions, name, var_def.value);
              if (in_loop && fn.argnames.every(
                (argname) => argname.name != name.name
              )) {
                var def = fn.variables.get(name.name);
                var sym = make_node(AST_SymbolRef, name, name);
                def.references.push(sym);
                expressions.splice(pos++, 0, make_node(AST_Assign, var_def, {
                  operator: "=",
                  logical: false,
                  left: sym,
                  right: make_node(AST_Undefined, name)
                }));
              }
            }
          }
        }
        function flatten_fn(returned_value) {
          var decls = [];
          var expressions = [];
          flatten_args(decls, expressions);
          flatten_vars(decls, expressions);
          expressions.push(returned_value);
          if (decls.length) {
            const i = scope.body.indexOf(compressor.parent(level - 1)) + 1;
            scope.body.splice(i, 0, make_node(AST_Var, fn, {
              definitions: decls
            }));
          }
          return expressions.map((exp2) => exp2.clone(true));
        }
      }
      (function(def_find_defs) {
        function to_node(value, orig) {
          if (value instanceof AST_Node) {
            if (!(value instanceof AST_Constant)) {
              value = value.clone(true);
            }
            return make_node(value.CTOR, orig, value);
          }
          if (Array.isArray(value))
            return make_node(AST_Array, orig, {
              elements: value.map(function(value2) {
                return to_node(value2, orig);
              })
            });
          if (value && typeof value == "object") {
            var props = [];
            for (var key in value)
              if (HOP(value, key)) {
                props.push(make_node(AST_ObjectKeyVal, orig, {
                  key,
                  value: to_node(value[key], orig)
                }));
              }
            return make_node(AST_Object, orig, {
              properties: props
            });
          }
          return make_node_from_constant(value, orig);
        }
        AST_Toplevel.DEFMETHOD("resolve_defines", function(compressor) {
          if (!compressor.option("global_defs"))
            return this;
          this.figure_out_scope({ ie8: compressor.option("ie8") });
          return this.transform(new TreeTransformer(function(node) {
            var def = node._find_defs(compressor, "");
            if (!def)
              return;
            var level = 0, child = node, parent;
            while (parent = this.parent(level++)) {
              if (!(parent instanceof AST_PropAccess))
                break;
              if (parent.expression !== child)
                break;
              child = parent;
            }
            if (is_lhs(child, parent)) {
              return;
            }
            return def;
          }));
        });
        def_find_defs(AST_Node, noop);
        def_find_defs(AST_Chain, function(compressor, suffix) {
          return this.expression._find_defs(compressor, suffix);
        });
        def_find_defs(AST_Dot, function(compressor, suffix) {
          return this.expression._find_defs(compressor, "." + this.property + suffix);
        });
        def_find_defs(AST_SymbolDeclaration, function() {
          if (!this.global())
            return;
        });
        def_find_defs(AST_SymbolRef, function(compressor, suffix) {
          if (!this.global())
            return;
          var defines = compressor.option("global_defs");
          var name = this.name + suffix;
          if (HOP(defines, name))
            return to_node(defines[name], this);
        });
        def_find_defs(AST_ImportMeta, function(compressor, suffix) {
          var defines = compressor.option("global_defs");
          var name = "import.meta" + suffix;
          if (HOP(defines, name))
            return to_node(defines[name], this);
        });
      })(function(node, func) {
        node.DEFMETHOD("_find_defs", func);
      });
      class Compressor extends TreeWalker {
        constructor(options, { false_by_default = false, mangle_options: mangle_options2 = false }) {
          super();
          if (options.defaults !== void 0 && !options.defaults)
            false_by_default = true;
          this.options = defaults(options, {
            arguments: false,
            arrows: !false_by_default,
            booleans: !false_by_default,
            booleans_as_integers: false,
            collapse_vars: !false_by_default,
            comparisons: !false_by_default,
            computed_props: !false_by_default,
            conditionals: !false_by_default,
            dead_code: !false_by_default,
            defaults: true,
            directives: !false_by_default,
            drop_console: false,
            drop_debugger: !false_by_default,
            ecma: 5,
            evaluate: !false_by_default,
            expression: false,
            global_defs: false,
            hoist_funs: false,
            hoist_props: !false_by_default,
            hoist_vars: false,
            ie8: false,
            if_return: !false_by_default,
            inline: !false_by_default,
            join_vars: !false_by_default,
            keep_classnames: false,
            keep_fargs: true,
            keep_fnames: false,
            keep_infinity: false,
            lhs_constants: !false_by_default,
            loops: !false_by_default,
            module: false,
            negate_iife: !false_by_default,
            passes: 1,
            properties: !false_by_default,
            pure_getters: !false_by_default && "strict",
            pure_funcs: null,
            pure_new: false,
            reduce_funcs: !false_by_default,
            reduce_vars: !false_by_default,
            sequences: !false_by_default,
            side_effects: !false_by_default,
            switches: !false_by_default,
            top_retain: null,
            toplevel: !!(options && options["top_retain"]),
            typeofs: !false_by_default,
            unsafe: false,
            unsafe_arrows: false,
            unsafe_comps: false,
            unsafe_Function: false,
            unsafe_math: false,
            unsafe_symbols: false,
            unsafe_methods: false,
            unsafe_proto: false,
            unsafe_regexp: false,
            unsafe_undefined: false,
            unused: !false_by_default,
            warnings: false
            // legacy
          }, true);
          var global_defs = this.options["global_defs"];
          if (typeof global_defs == "object")
            for (var key in global_defs) {
              if (key[0] === "@" && HOP(global_defs, key)) {
                global_defs[key.slice(1)] = parse(global_defs[key], {
                  expression: true
                });
              }
            }
          if (this.options["inline"] === true)
            this.options["inline"] = 3;
          var pure_funcs = this.options["pure_funcs"];
          if (typeof pure_funcs == "function") {
            this.pure_funcs = pure_funcs;
          } else {
            this.pure_funcs = pure_funcs ? function(node) {
              return !pure_funcs.includes(node.expression.print_to_string());
            } : return_true;
          }
          var top_retain = this.options["top_retain"];
          if (top_retain instanceof RegExp) {
            this.top_retain = function(def) {
              return top_retain.test(def.name);
            };
          } else if (typeof top_retain == "function") {
            this.top_retain = top_retain;
          } else if (top_retain) {
            if (typeof top_retain == "string") {
              top_retain = top_retain.split(/,/);
            }
            this.top_retain = function(def) {
              return top_retain.includes(def.name);
            };
          }
          if (this.options["module"]) {
            this.directives["use strict"] = true;
            this.options["toplevel"] = true;
          }
          var toplevel = this.options["toplevel"];
          this.toplevel = typeof toplevel == "string" ? {
            funcs: /funcs/.test(toplevel),
            vars: /vars/.test(toplevel)
          } : {
            funcs: toplevel,
            vars: toplevel
          };
          var sequences = this.options["sequences"];
          this.sequences_limit = sequences == 1 ? 800 : sequences | 0;
          this.evaluated_regexps = /* @__PURE__ */ new Map();
          this._toplevel = void 0;
          this._mangle_options = mangle_options2 ? format_mangler_options(mangle_options2) : mangle_options2;
        }
        mangle_options() {
          var nth_identifier = this._mangle_options && this._mangle_options.nth_identifier || base54;
          var module2 = this._mangle_options && this._mangle_options.module || this.option("module");
          return { ie8: this.option("ie8"), nth_identifier, module: module2 };
        }
        option(key) {
          return this.options[key];
        }
        exposed(def) {
          if (def.export)
            return true;
          if (def.global) {
            for (var i = 0, len = def.orig.length; i < len; i++)
              if (!this.toplevel[def.orig[i] instanceof AST_SymbolDefun ? "funcs" : "vars"])
                return true;
          }
          return false;
        }
        in_boolean_context() {
          if (!this.option("booleans"))
            return false;
          var self2 = this.self();
          for (var i = 0, p2; p2 = this.parent(i); i++) {
            if (p2 instanceof AST_SimpleStatement || p2 instanceof AST_Conditional && p2.condition === self2 || p2 instanceof AST_DWLoop && p2.condition === self2 || p2 instanceof AST_For && p2.condition === self2 || p2 instanceof AST_If && p2.condition === self2 || p2 instanceof AST_UnaryPrefix && p2.operator == "!" && p2.expression === self2) {
              return true;
            }
            if (p2 instanceof AST_Binary && (p2.operator == "&&" || p2.operator == "||" || p2.operator == "??") || p2 instanceof AST_Conditional || p2.tail_node() === self2) {
              self2 = p2;
            } else {
              return false;
            }
          }
        }
        in_32_bit_context() {
          if (!this.option("evaluate"))
            return false;
          var self2 = this.self();
          for (var i = 0, p2; p2 = this.parent(i); i++) {
            if (p2 instanceof AST_Binary && bitwise_binop.has(p2.operator)) {
              return true;
            }
            if (p2 instanceof AST_UnaryPrefix) {
              return p2.operator === "~";
            }
            if (p2 instanceof AST_Binary && (p2.operator == "&&" || p2.operator == "||" || p2.operator == "??") || p2 instanceof AST_Conditional && p2.condition !== self2 || p2.tail_node() === self2) {
              self2 = p2;
            } else {
              return false;
            }
          }
        }
        get_toplevel() {
          return this._toplevel;
        }
        compress(toplevel) {
          toplevel = toplevel.resolve_defines(this);
          this._toplevel = toplevel;
          if (this.option("expression")) {
            this._toplevel.process_expression(true);
          }
          var passes = +this.options.passes || 1;
          var min_count = 1 / 0;
          var stopping = false;
          var mangle = this.mangle_options();
          for (var pass = 0; pass < passes; pass++) {
            this._toplevel.figure_out_scope(mangle);
            if (pass === 0 && this.option("drop_console")) {
              this._toplevel = this._toplevel.drop_console(this.option("drop_console"));
            }
            if (pass > 0 || this.option("reduce_vars")) {
              this._toplevel.reset_opt_flags(this);
            }
            this._toplevel = this._toplevel.transform(this);
            if (passes > 1) {
              let count = 0;
              walk(this._toplevel, () => {
                count++;
              });
              if (count < min_count) {
                min_count = count;
                stopping = false;
              } else if (stopping) {
                break;
              } else {
                stopping = true;
              }
            }
          }
          if (this.option("expression")) {
            this._toplevel.process_expression(false);
          }
          toplevel = this._toplevel;
          this._toplevel = void 0;
          return toplevel;
        }
        before(node, descend) {
          if (has_flag(node, SQUEEZED))
            return node;
          var was_scope = false;
          if (node instanceof AST_Scope) {
            node = node.hoist_properties(this);
            node = node.hoist_declarations(this);
            was_scope = true;
          }
          descend(node, this);
          descend(node, this);
          var opt = node.optimize(this);
          if (was_scope && opt instanceof AST_Scope) {
            opt.drop_unused(this);
            descend(opt, this);
          }
          if (opt === node)
            set_flag(opt, SQUEEZED);
          return opt;
        }
        /** Alternative to plain is_lhs() which doesn't work within .optimize() */
        is_lhs() {
          const self2 = this.stack[this.stack.length - 1];
          const parent = this.stack[this.stack.length - 2];
          return is_lhs(self2, parent);
        }
      }
      function def_optimize(node, optimizer) {
        node.DEFMETHOD("optimize", function(compressor) {
          var self2 = this;
          if (has_flag(self2, OPTIMIZED))
            return self2;
          if (compressor.has_directive("use asm"))
            return self2;
          var opt = optimizer(self2, compressor);
          set_flag(opt, OPTIMIZED);
          return opt;
        });
      }
      def_optimize(AST_Node, function(self2) {
        return self2;
      });
      AST_Toplevel.DEFMETHOD("drop_console", function(options) {
        var isArray = Array.isArray(options);
        return this.transform(new TreeTransformer(function(self2) {
          if (self2.TYPE !== "Call") {
            return;
          }
          var exp = self2.expression;
          if (!(exp instanceof AST_PropAccess)) {
            return;
          }
          if (isArray && options.indexOf(exp.property) === -1) {
            return;
          }
          var name = exp.expression;
          while (name.expression) {
            name = name.expression;
          }
          if (is_undeclared_ref(name) && name.name == "console") {
            return make_node(AST_Undefined, self2);
          }
        }));
      });
      AST_Node.DEFMETHOD("equivalent_to", function(node) {
        return equivalent_to(this, node);
      });
      AST_Scope.DEFMETHOD("process_expression", function(insert, compressor) {
        var self2 = this;
        var tt = new TreeTransformer(function(node) {
          if (insert && node instanceof AST_SimpleStatement) {
            return make_node(AST_Return, node, {
              value: node.body
            });
          }
          if (!insert && node instanceof AST_Return) {
            if (compressor) {
              var value = node.value && node.value.drop_side_effect_free(compressor, true);
              return value ? make_node(AST_SimpleStatement, node, { body: value }) : make_node(AST_EmptyStatement, node);
            }
            return make_node(AST_SimpleStatement, node, {
              body: node.value || make_node(AST_UnaryPrefix, node, {
                operator: "void",
                expression: make_node(AST_Number, node, {
                  value: 0
                })
              })
            });
          }
          if (node instanceof AST_Class || node instanceof AST_Lambda && node !== self2) {
            return node;
          }
          if (node instanceof AST_Block) {
            var index = node.body.length - 1;
            if (index >= 0) {
              node.body[index] = node.body[index].transform(tt);
            }
          } else if (node instanceof AST_If) {
            node.body = node.body.transform(tt);
            if (node.alternative) {
              node.alternative = node.alternative.transform(tt);
            }
          } else if (node instanceof AST_With) {
            node.body = node.body.transform(tt);
          }
          return node;
        });
        self2.transform(tt);
      });
      AST_Toplevel.DEFMETHOD("reset_opt_flags", function(compressor) {
        const self2 = this;
        const reduce_vars = compressor.option("reduce_vars");
        const preparation = new TreeWalker(function(node, descend) {
          clear_flag(node, CLEAR_BETWEEN_PASSES);
          if (reduce_vars) {
            if (compressor.top_retain && node instanceof AST_Defun && preparation.parent() === self2) {
              set_flag(node, TOP);
            }
            return node.reduce_vars(preparation, descend, compressor);
          }
        });
        preparation.safe_ids = /* @__PURE__ */ Object.create(null);
        preparation.in_loop = null;
        preparation.loop_ids = /* @__PURE__ */ new Map();
        preparation.defs_to_safe_ids = /* @__PURE__ */ new Map();
        self2.walk(preparation);
      });
      AST_Symbol.DEFMETHOD("fixed_value", function() {
        var fixed = this.thedef.fixed;
        if (!fixed || fixed instanceof AST_Node)
          return fixed;
        return fixed();
      });
      AST_SymbolRef.DEFMETHOD("is_immutable", function() {
        var orig = this.definition().orig;
        return orig.length == 1 && orig[0] instanceof AST_SymbolLambda;
      });
      function find_variable(compressor, name) {
        var scope, i = 0;
        while (scope = compressor.parent(i++)) {
          if (scope instanceof AST_Scope)
            break;
          if (scope instanceof AST_Catch && scope.argname) {
            scope = scope.argname.definition().scope;
            break;
          }
        }
        return scope.find_variable(name);
      }
      var global_names = makePredicate("Array Boolean clearInterval clearTimeout console Date decodeURI decodeURIComponent encodeURI encodeURIComponent Error escape eval EvalError Function isFinite isNaN JSON Math Number parseFloat parseInt RangeError ReferenceError RegExp Object setInterval setTimeout String SyntaxError TypeError unescape URIError");
      AST_SymbolRef.DEFMETHOD("is_declared", function(compressor) {
        return !this.definition().undeclared || compressor.option("unsafe") && global_names.has(this.name);
      });
      var directives = /* @__PURE__ */ new Set(["use asm", "use strict"]);
      def_optimize(AST_Directive, function(self2, compressor) {
        if (compressor.option("directives") && (!directives.has(self2.value) || compressor.has_directive(self2.value) !== self2)) {
          return make_node(AST_EmptyStatement, self2);
        }
        return self2;
      });
      def_optimize(AST_Debugger, function(self2, compressor) {
        if (compressor.option("drop_debugger"))
          return make_node(AST_EmptyStatement, self2);
        return self2;
      });
      def_optimize(AST_LabeledStatement, function(self2, compressor) {
        if (self2.body instanceof AST_Break && compressor.loopcontrol_target(self2.body) === self2.body) {
          return make_node(AST_EmptyStatement, self2);
        }
        return self2.label.references.length == 0 ? self2.body : self2;
      });
      def_optimize(AST_Block, function(self2, compressor) {
        tighten_body(self2.body, compressor);
        return self2;
      });
      function can_be_extracted_from_if_block(node) {
        return !(node instanceof AST_Const || node instanceof AST_Let || node instanceof AST_Class);
      }
      def_optimize(AST_BlockStatement, function(self2, compressor) {
        tighten_body(self2.body, compressor);
        switch (self2.body.length) {
          case 1:
            if (!compressor.has_directive("use strict") && compressor.parent() instanceof AST_If && can_be_extracted_from_if_block(self2.body[0]) || can_be_evicted_from_block(self2.body[0])) {
              return self2.body[0];
            }
            break;
          case 0:
            return make_node(AST_EmptyStatement, self2);
        }
        return self2;
      });
      function opt_AST_Lambda(self2, compressor) {
        tighten_body(self2.body, compressor);
        if (compressor.option("side_effects") && self2.body.length == 1 && self2.body[0] === compressor.has_directive("use strict")) {
          self2.body.length = 0;
        }
        return self2;
      }
      def_optimize(AST_Lambda, opt_AST_Lambda);
      AST_Scope.DEFMETHOD("hoist_declarations", function(compressor) {
        var self2 = this;
        if (compressor.has_directive("use asm"))
          return self2;
        var hoist_funs = compressor.option("hoist_funs");
        var hoist_vars = compressor.option("hoist_vars");
        if (hoist_funs || hoist_vars) {
          var dirs = [];
          var hoisted = [];
          var vars = /* @__PURE__ */ new Map(), vars_found = 0, var_decl = 0;
          walk(self2, (node) => {
            if (node instanceof AST_Scope && node !== self2)
              return true;
            if (node instanceof AST_Var) {
              ++var_decl;
              return true;
            }
          });
          hoist_vars = hoist_vars && var_decl > 1;
          var tt = new TreeTransformer(
            function before(node) {
              if (node !== self2) {
                if (node instanceof AST_Directive) {
                  dirs.push(node);
                  return make_node(AST_EmptyStatement, node);
                }
                if (hoist_funs && node instanceof AST_Defun && !(tt.parent() instanceof AST_Export) && tt.parent() === self2) {
                  hoisted.push(node);
                  return make_node(AST_EmptyStatement, node);
                }
                if (hoist_vars && node instanceof AST_Var && !node.definitions.some((def3) => def3.name instanceof AST_Destructuring)) {
                  node.definitions.forEach(function(def3) {
                    vars.set(def3.name.name, def3);
                    ++vars_found;
                  });
                  var seq = node.to_assignments(compressor);
                  var p2 = tt.parent();
                  if (p2 instanceof AST_ForIn && p2.init === node) {
                    if (seq == null) {
                      var def2 = node.definitions[0].name;
                      return make_node(AST_SymbolRef, def2, def2);
                    }
                    return seq;
                  }
                  if (p2 instanceof AST_For && p2.init === node) {
                    return seq;
                  }
                  if (!seq)
                    return make_node(AST_EmptyStatement, node);
                  return make_node(AST_SimpleStatement, node, {
                    body: seq
                  });
                }
                if (node instanceof AST_Scope)
                  return node;
              }
            }
          );
          self2 = self2.transform(tt);
          if (vars_found > 0) {
            var defs = [];
            const is_lambda = self2 instanceof AST_Lambda;
            const args_as_names = is_lambda ? self2.args_as_names() : null;
            vars.forEach((def2, name) => {
              if (is_lambda && args_as_names.some((x) => x.name === def2.name.name)) {
                vars.delete(name);
              } else {
                def2 = def2.clone();
                def2.value = null;
                defs.push(def2);
                vars.set(name, def2);
              }
            });
            if (defs.length > 0) {
              for (var i = 0; i < self2.body.length; ) {
                if (self2.body[i] instanceof AST_SimpleStatement) {
                  var expr = self2.body[i].body, sym, assign;
                  if (expr instanceof AST_Assign && expr.operator == "=" && (sym = expr.left) instanceof AST_Symbol && vars.has(sym.name)) {
                    var def = vars.get(sym.name);
                    if (def.value)
                      break;
                    def.value = expr.right;
                    remove(defs, def);
                    defs.push(def);
                    self2.body.splice(i, 1);
                    continue;
                  }
                  if (expr instanceof AST_Sequence && (assign = expr.expressions[0]) instanceof AST_Assign && assign.operator == "=" && (sym = assign.left) instanceof AST_Symbol && vars.has(sym.name)) {
                    var def = vars.get(sym.name);
                    if (def.value)
                      break;
                    def.value = assign.right;
                    remove(defs, def);
                    defs.push(def);
                    self2.body[i].body = make_sequence(expr, expr.expressions.slice(1));
                    continue;
                  }
                }
                if (self2.body[i] instanceof AST_EmptyStatement) {
                  self2.body.splice(i, 1);
                  continue;
                }
                if (self2.body[i] instanceof AST_BlockStatement) {
                  self2.body.splice(i, 1, ...self2.body[i].body);
                  continue;
                }
                break;
              }
              defs = make_node(AST_Var, self2, {
                definitions: defs
              });
              hoisted.push(defs);
            }
          }
          self2.body = dirs.concat(hoisted, self2.body);
        }
        return self2;
      });
      AST_Scope.DEFMETHOD("hoist_properties", function(compressor) {
        var self2 = this;
        if (!compressor.option("hoist_props") || compressor.has_directive("use asm"))
          return self2;
        var top_retain = self2 instanceof AST_Toplevel && compressor.top_retain || return_false;
        var defs_by_id = /* @__PURE__ */ new Map();
        var hoister = new TreeTransformer(function(node, descend) {
          if (node instanceof AST_VarDef) {
            const sym = node.name;
            let def;
            let value;
            if (sym.scope === self2 && (def = sym.definition()).escaped != 1 && !def.assignments && !def.direct_access && !def.single_use && !compressor.exposed(def) && !top_retain(def) && (value = sym.fixed_value()) === node.value && value instanceof AST_Object && !value.properties.some(
              (prop) => prop instanceof AST_Expansion || prop.computed_key()
            )) {
              descend(node, this);
              const defs = /* @__PURE__ */ new Map();
              const assignments = [];
              value.properties.forEach(({ key, value: value2 }) => {
                const scope = hoister.find_scope();
                const symbol = self2.create_symbol(sym.CTOR, {
                  source: sym,
                  scope,
                  conflict_scopes: /* @__PURE__ */ new Set([
                    scope,
                    ...sym.definition().references.map((ref) => ref.scope)
                  ]),
                  tentative_name: sym.name + "_" + key
                });
                defs.set(String(key), symbol.definition());
                assignments.push(make_node(AST_VarDef, node, {
                  name: symbol,
                  value: value2
                }));
              });
              defs_by_id.set(def.id, defs);
              return MAP.splice(assignments);
            }
          } else if (node instanceof AST_PropAccess && node.expression instanceof AST_SymbolRef) {
            const defs = defs_by_id.get(node.expression.definition().id);
            if (defs) {
              const def = defs.get(String(get_simple_key(node.property)));
              const sym = make_node(AST_SymbolRef, node, {
                name: def.name,
                scope: node.expression.scope,
                thedef: def
              });
              sym.reference({});
              return sym;
            }
          }
        });
        return self2.transform(hoister);
      });
      def_optimize(AST_SimpleStatement, function(self2, compressor) {
        if (compressor.option("side_effects")) {
          var body = self2.body;
          var node = body.drop_side_effect_free(compressor, true);
          if (!node) {
            return make_node(AST_EmptyStatement, self2);
          }
          if (node !== body) {
            return make_node(AST_SimpleStatement, self2, { body: node });
          }
        }
        return self2;
      });
      def_optimize(AST_While, function(self2, compressor) {
        return compressor.option("loops") ? make_node(AST_For, self2, self2).optimize(compressor) : self2;
      });
      def_optimize(AST_Do, function(self2, compressor) {
        if (!compressor.option("loops"))
          return self2;
        var cond = self2.condition.tail_node().evaluate(compressor);
        if (!(cond instanceof AST_Node)) {
          if (cond)
            return make_node(AST_For, self2, {
              body: make_node(AST_BlockStatement, self2.body, {
                body: [
                  self2.body,
                  make_node(AST_SimpleStatement, self2.condition, {
                    body: self2.condition
                  })
                ]
              })
            }).optimize(compressor);
          if (!has_break_or_continue(self2, compressor.parent())) {
            return make_node(AST_BlockStatement, self2.body, {
              body: [
                self2.body,
                make_node(AST_SimpleStatement, self2.condition, {
                  body: self2.condition
                })
              ]
            }).optimize(compressor);
          }
        }
        return self2;
      });
      function if_break_in_loop(self2, compressor) {
        var first = self2.body instanceof AST_BlockStatement ? self2.body.body[0] : self2.body;
        if (compressor.option("dead_code") && is_break(first)) {
          var body = [];
          if (self2.init instanceof AST_Statement) {
            body.push(self2.init);
          } else if (self2.init) {
            body.push(make_node(AST_SimpleStatement, self2.init, {
              body: self2.init
            }));
          }
          if (self2.condition) {
            body.push(make_node(AST_SimpleStatement, self2.condition, {
              body: self2.condition
            }));
          }
          trim_unreachable_code(compressor, self2.body, body);
          return make_node(AST_BlockStatement, self2, {
            body
          });
        }
        if (first instanceof AST_If) {
          if (is_break(first.body)) {
            if (self2.condition) {
              self2.condition = make_node(AST_Binary, self2.condition, {
                left: self2.condition,
                operator: "&&",
                right: first.condition.negate(compressor)
              });
            } else {
              self2.condition = first.condition.negate(compressor);
            }
            drop_it(first.alternative);
          } else if (is_break(first.alternative)) {
            if (self2.condition) {
              self2.condition = make_node(AST_Binary, self2.condition, {
                left: self2.condition,
                operator: "&&",
                right: first.condition
              });
            } else {
              self2.condition = first.condition;
            }
            drop_it(first.body);
          }
        }
        return self2;
        function is_break(node) {
          return node instanceof AST_Break && compressor.loopcontrol_target(node) === compressor.self();
        }
        function drop_it(rest) {
          rest = as_statement_array(rest);
          if (self2.body instanceof AST_BlockStatement) {
            self2.body = self2.body.clone();
            self2.body.body = rest.concat(self2.body.body.slice(1));
            self2.body = self2.body.transform(compressor);
          } else {
            self2.body = make_node(AST_BlockStatement, self2.body, {
              body: rest
            }).transform(compressor);
          }
          self2 = if_break_in_loop(self2, compressor);
        }
      }
      def_optimize(AST_For, function(self2, compressor) {
        if (!compressor.option("loops"))
          return self2;
        if (compressor.option("side_effects") && self2.init) {
          self2.init = self2.init.drop_side_effect_free(compressor);
        }
        if (self2.condition) {
          var cond = self2.condition.evaluate(compressor);
          if (!(cond instanceof AST_Node)) {
            if (cond)
              self2.condition = null;
            else if (!compressor.option("dead_code")) {
              var orig = self2.condition;
              self2.condition = make_node_from_constant(cond, self2.condition);
              self2.condition = best_of_expression(self2.condition.transform(compressor), orig);
            }
          }
          if (compressor.option("dead_code")) {
            if (cond instanceof AST_Node)
              cond = self2.condition.tail_node().evaluate(compressor);
            if (!cond) {
              var body = [];
              trim_unreachable_code(compressor, self2.body, body);
              if (self2.init instanceof AST_Statement) {
                body.push(self2.init);
              } else if (self2.init) {
                body.push(make_node(AST_SimpleStatement, self2.init, {
                  body: self2.init
                }));
              }
              body.push(make_node(AST_SimpleStatement, self2.condition, {
                body: self2.condition
              }));
              return make_node(AST_BlockStatement, self2, { body }).optimize(compressor);
            }
          }
        }
        return if_break_in_loop(self2, compressor);
      });
      def_optimize(AST_If, function(self2, compressor) {
        if (is_empty(self2.alternative))
          self2.alternative = null;
        if (!compressor.option("conditionals"))
          return self2;
        var cond = self2.condition.evaluate(compressor);
        if (!compressor.option("dead_code") && !(cond instanceof AST_Node)) {
          var orig = self2.condition;
          self2.condition = make_node_from_constant(cond, orig);
          self2.condition = best_of_expression(self2.condition.transform(compressor), orig);
        }
        if (compressor.option("dead_code")) {
          if (cond instanceof AST_Node)
            cond = self2.condition.tail_node().evaluate(compressor);
          if (!cond) {
            var body = [];
            trim_unreachable_code(compressor, self2.body, body);
            body.push(make_node(AST_SimpleStatement, self2.condition, {
              body: self2.condition
            }));
            if (self2.alternative)
              body.push(self2.alternative);
            return make_node(AST_BlockStatement, self2, { body }).optimize(compressor);
          } else if (!(cond instanceof AST_Node)) {
            var body = [];
            body.push(make_node(AST_SimpleStatement, self2.condition, {
              body: self2.condition
            }));
            body.push(self2.body);
            if (self2.alternative) {
              trim_unreachable_code(compressor, self2.alternative, body);
            }
            return make_node(AST_BlockStatement, self2, { body }).optimize(compressor);
          }
        }
        var negated = self2.condition.negate(compressor);
        var self_condition_length = self2.condition.size();
        var negated_length = negated.size();
        var negated_is_best = negated_length < self_condition_length;
        if (self2.alternative && negated_is_best) {
          negated_is_best = false;
          self2.condition = negated;
          var tmp = self2.body;
          self2.body = self2.alternative || make_node(AST_EmptyStatement, self2);
          self2.alternative = tmp;
        }
        if (is_empty(self2.body) && is_empty(self2.alternative)) {
          return make_node(AST_SimpleStatement, self2.condition, {
            body: self2.condition.clone()
          }).optimize(compressor);
        }
        if (self2.body instanceof AST_SimpleStatement && self2.alternative instanceof AST_SimpleStatement) {
          return make_node(AST_SimpleStatement, self2, {
            body: make_node(AST_Conditional, self2, {
              condition: self2.condition,
              consequent: self2.body.body,
              alternative: self2.alternative.body
            })
          }).optimize(compressor);
        }
        if (is_empty(self2.alternative) && self2.body instanceof AST_SimpleStatement) {
          if (self_condition_length === negated_length && !negated_is_best && self2.condition instanceof AST_Binary && self2.condition.operator == "||") {
            negated_is_best = true;
          }
          if (negated_is_best)
            return make_node(AST_SimpleStatement, self2, {
              body: make_node(AST_Binary, self2, {
                operator: "||",
                left: negated,
                right: self2.body.body
              })
            }).optimize(compressor);
          return make_node(AST_SimpleStatement, self2, {
            body: make_node(AST_Binary, self2, {
              operator: "&&",
              left: self2.condition,
              right: self2.body.body
            })
          }).optimize(compressor);
        }
        if (self2.body instanceof AST_EmptyStatement && self2.alternative instanceof AST_SimpleStatement) {
          return make_node(AST_SimpleStatement, self2, {
            body: make_node(AST_Binary, self2, {
              operator: "||",
              left: self2.condition,
              right: self2.alternative.body
            })
          }).optimize(compressor);
        }
        if (self2.body instanceof AST_Exit && self2.alternative instanceof AST_Exit && self2.body.TYPE == self2.alternative.TYPE) {
          return make_node(self2.body.CTOR, self2, {
            value: make_node(AST_Conditional, self2, {
              condition: self2.condition,
              consequent: self2.body.value || make_node(AST_Undefined, self2.body),
              alternative: self2.alternative.value || make_node(AST_Undefined, self2.alternative)
            }).transform(compressor)
          }).optimize(compressor);
        }
        if (self2.body instanceof AST_If && !self2.body.alternative && !self2.alternative) {
          self2 = make_node(AST_If, self2, {
            condition: make_node(AST_Binary, self2.condition, {
              operator: "&&",
              left: self2.condition,
              right: self2.body.condition
            }),
            body: self2.body.body,
            alternative: null
          });
        }
        if (aborts(self2.body)) {
          if (self2.alternative) {
            var alt = self2.alternative;
            self2.alternative = null;
            return make_node(AST_BlockStatement, self2, {
              body: [self2, alt]
            }).optimize(compressor);
          }
        }
        if (aborts(self2.alternative)) {
          var body = self2.body;
          self2.body = self2.alternative;
          self2.condition = negated_is_best ? negated : self2.condition.negate(compressor);
          self2.alternative = null;
          return make_node(AST_BlockStatement, self2, {
            body: [self2, body]
          }).optimize(compressor);
        }
        return self2;
      });
      def_optimize(AST_Switch, function(self2, compressor) {
        if (!compressor.option("switches"))
          return self2;
        var branch;
        var value = self2.expression.evaluate(compressor);
        if (!(value instanceof AST_Node)) {
          var orig = self2.expression;
          self2.expression = make_node_from_constant(value, orig);
          self2.expression = best_of_expression(self2.expression.transform(compressor), orig);
        }
        if (!compressor.option("dead_code"))
          return self2;
        if (value instanceof AST_Node) {
          value = self2.expression.tail_node().evaluate(compressor);
        }
        var decl = [];
        var body = [];
        var default_branch;
        var exact_match;
        for (var i = 0, len = self2.body.length; i < len && !exact_match; i++) {
          branch = self2.body[i];
          if (branch instanceof AST_Default) {
            if (!default_branch) {
              default_branch = branch;
            } else {
              eliminate_branch(branch, body[body.length - 1]);
            }
          } else if (!(value instanceof AST_Node)) {
            var exp = branch.expression.evaluate(compressor);
            if (!(exp instanceof AST_Node) && exp !== value) {
              eliminate_branch(branch, body[body.length - 1]);
              continue;
            }
            if (exp instanceof AST_Node)
              exp = branch.expression.tail_node().evaluate(compressor);
            if (exp === value) {
              exact_match = branch;
              if (default_branch) {
                var default_index = body.indexOf(default_branch);
                body.splice(default_index, 1);
                eliminate_branch(default_branch, body[default_index - 1]);
                default_branch = null;
              }
            }
          }
          body.push(branch);
        }
        while (i < len)
          eliminate_branch(self2.body[i++], body[body.length - 1]);
        self2.body = body;
        let default_or_exact = default_branch || exact_match;
        default_branch = null;
        exact_match = null;
        if (body.every((branch2, i2) => (branch2 === default_or_exact || branch2.expression instanceof AST_Constant) && (branch2.body.length === 0 || aborts(branch2) || body.length - 1 === i2))) {
          for (let i2 = 0; i2 < body.length; i2++) {
            const branch2 = body[i2];
            for (let j = i2 + 1; j < body.length; j++) {
              const next = body[j];
              if (next.body.length === 0)
                continue;
              const last_branch = j === body.length - 1;
              const equivalentBranch = branches_equivalent(next, branch2, false);
              if (equivalentBranch || last_branch && branches_equivalent(next, branch2, true)) {
                if (!equivalentBranch && last_branch) {
                  next.body.push(make_node(AST_Break));
                }
                let x = j - 1;
                let fallthroughDepth = 0;
                while (x > i2) {
                  if (is_inert_body(body[x--])) {
                    fallthroughDepth++;
                  } else {
                    break;
                  }
                }
                const plucked = body.splice(j - fallthroughDepth, 1 + fallthroughDepth);
                body.splice(i2 + 1, 0, ...plucked);
                i2 += plucked.length;
              }
            }
          }
        }
        for (let i2 = 0; i2 < body.length; i2++) {
          let branch2 = body[i2];
          if (branch2.body.length === 0)
            continue;
          if (!aborts(branch2))
            continue;
          for (let j = i2 + 1; j < body.length; i2++, j++) {
            let next = body[j];
            if (next.body.length === 0)
              continue;
            if (branches_equivalent(next, branch2, false) || j === body.length - 1 && branches_equivalent(next, branch2, true)) {
              branch2.body = [];
              branch2 = next;
              continue;
            }
            break;
          }
        }
        {
          let i2 = body.length - 1;
          for (; i2 >= 0; i2--) {
            let bbody = body[i2].body;
            if (is_break(bbody[bbody.length - 1], compressor))
              bbody.pop();
            if (!is_inert_body(body[i2]))
              break;
          }
          i2++;
          if (!default_or_exact || body.indexOf(default_or_exact) >= i2) {
            for (let j = body.length - 1; j >= i2; j--) {
              let branch2 = body[j];
              if (branch2 === default_or_exact) {
                default_or_exact = null;
                body.pop();
              } else if (!branch2.expression.has_side_effects(compressor)) {
                body.pop();
              } else {
                break;
              }
            }
          }
        }
        DEFAULT:
          if (default_or_exact) {
            let default_index2 = body.indexOf(default_or_exact);
            let default_body_index = default_index2;
            for (; default_body_index < body.length - 1; default_body_index++) {
              if (!is_inert_body(body[default_body_index]))
                break;
            }
            if (default_body_index < body.length - 1) {
              break DEFAULT;
            }
            let side_effect_index = body.length - 1;
            for (; side_effect_index >= 0; side_effect_index--) {
              let branch2 = body[side_effect_index];
              if (branch2 === default_or_exact)
                continue;
              if (branch2.expression.has_side_effects(compressor))
                break;
            }
            if (default_body_index > side_effect_index) {
              let prev_body_index = default_index2 - 1;
              for (; prev_body_index >= 0; prev_body_index--) {
                if (!is_inert_body(body[prev_body_index]))
                  break;
              }
              let before = Math.max(side_effect_index, prev_body_index) + 1;
              let after = default_index2;
              if (side_effect_index > default_index2) {
                after = side_effect_index;
                body[side_effect_index].body = body[default_body_index].body;
              } else {
                default_or_exact.body = body[default_body_index].body;
              }
              body.splice(after + 1, default_body_index - after);
              body.splice(before, default_index2 - before);
            }
          }
        DEFAULT:
          if (default_or_exact) {
            let i2 = body.findIndex((branch2) => !is_inert_body(branch2));
            let caseBody;
            if (i2 === body.length - 1) {
              let branch2 = body[i2];
              if (has_nested_break(self2))
                break DEFAULT;
              caseBody = make_node(AST_BlockStatement, branch2, {
                body: branch2.body
              });
              branch2.body = [];
            } else if (i2 !== -1) {
              break DEFAULT;
            }
            let sideEffect = body.find((branch2) => {
              return branch2 !== default_or_exact && branch2.expression.has_side_effects(compressor);
            });
            if (!sideEffect) {
              return make_node(AST_BlockStatement, self2, {
                body: decl.concat(
                  statement(self2.expression),
                  default_or_exact.expression ? statement(default_or_exact.expression) : [],
                  caseBody || []
                )
              }).optimize(compressor);
            }
            const default_index2 = body.indexOf(default_or_exact);
            body.splice(default_index2, 1);
            default_or_exact = null;
            if (caseBody) {
              return make_node(AST_BlockStatement, self2, {
                body: decl.concat(self2, caseBody)
              }).optimize(compressor);
            }
          }
        if (body.length > 0) {
          body[0].body = decl.concat(body[0].body);
        }
        if (body.length == 0) {
          return make_node(AST_BlockStatement, self2, {
            body: decl.concat(statement(self2.expression))
          }).optimize(compressor);
        }
        if (body.length == 1 && !has_nested_break(self2)) {
          let branch2 = body[0];
          return make_node(AST_If, self2, {
            condition: make_node(AST_Binary, self2, {
              operator: "===",
              left: self2.expression,
              right: branch2.expression
            }),
            body: make_node(AST_BlockStatement, branch2, {
              body: branch2.body
            }),
            alternative: null
          }).optimize(compressor);
        }
        if (body.length === 2 && default_or_exact && !has_nested_break(self2)) {
          let branch2 = body[0] === default_or_exact ? body[1] : body[0];
          let exact_exp = default_or_exact.expression && statement(default_or_exact.expression);
          if (aborts(body[0])) {
            let first = body[0];
            if (is_break(first.body[first.body.length - 1], compressor)) {
              first.body.pop();
            }
            return make_node(AST_If, self2, {
              condition: make_node(AST_Binary, self2, {
                operator: "===",
                left: self2.expression,
                right: branch2.expression
              }),
              body: make_node(AST_BlockStatement, branch2, {
                body: branch2.body
              }),
              alternative: make_node(AST_BlockStatement, default_or_exact, {
                body: [].concat(
                  exact_exp || [],
                  default_or_exact.body
                )
              })
            }).optimize(compressor);
          }
          let operator = "===";
          let consequent = make_node(AST_BlockStatement, branch2, {
            body: branch2.body
          });
          let always = make_node(AST_BlockStatement, default_or_exact, {
            body: [].concat(
              exact_exp || [],
              default_or_exact.body
            )
          });
          if (body[0] === default_or_exact) {
            operator = "!==";
            let tmp = always;
            always = consequent;
            consequent = tmp;
          }
          return make_node(AST_BlockStatement, self2, {
            body: [
              make_node(AST_If, self2, {
                condition: make_node(AST_Binary, self2, {
                  operator,
                  left: self2.expression,
                  right: branch2.expression
                }),
                body: consequent,
                alternative: null
              })
            ].concat(always)
          }).optimize(compressor);
        }
        return self2;
        function eliminate_branch(branch2, prev) {
          if (prev && !aborts(prev)) {
            prev.body = prev.body.concat(branch2.body);
          } else {
            trim_unreachable_code(compressor, branch2, decl);
          }
        }
        function branches_equivalent(branch2, prev, insertBreak) {
          let bbody = branch2.body;
          let pbody = prev.body;
          if (insertBreak) {
            bbody = bbody.concat(make_node(AST_Break));
          }
          if (bbody.length !== pbody.length)
            return false;
          let bblock = make_node(AST_BlockStatement, branch2, { body: bbody });
          let pblock = make_node(AST_BlockStatement, prev, { body: pbody });
          return bblock.equivalent_to(pblock);
        }
        function statement(expression) {
          return make_node(AST_SimpleStatement, expression, {
            body: expression
          });
        }
        function has_nested_break(root) {
          let has_break = false;
          let tw = new TreeWalker((node) => {
            if (has_break)
              return true;
            if (node instanceof AST_Lambda)
              return true;
            if (node instanceof AST_SimpleStatement)
              return true;
            if (!is_break(node, tw))
              return;
            let parent = tw.parent();
            if (parent instanceof AST_SwitchBranch && parent.body[parent.body.length - 1] === node) {
              return;
            }
            has_break = true;
          });
          root.walk(tw);
          return has_break;
        }
        function is_break(node, stack) {
          return node instanceof AST_Break && stack.loopcontrol_target(node) === self2;
        }
        function is_inert_body(branch2) {
          return !aborts(branch2) && !make_node(AST_BlockStatement, branch2, {
            body: branch2.body
          }).has_side_effects(compressor);
        }
      });
      def_optimize(AST_Try, function(self2, compressor) {
        if (self2.bcatch && self2.bfinally && self2.bfinally.body.every(is_empty))
          self2.bfinally = null;
        if (compressor.option("dead_code") && self2.body.body.every(is_empty)) {
          var body = [];
          if (self2.bcatch) {
            trim_unreachable_code(compressor, self2.bcatch, body);
          }
          if (self2.bfinally)
            body.push(...self2.bfinally.body);
          return make_node(AST_BlockStatement, self2, {
            body
          }).optimize(compressor);
        }
        return self2;
      });
      AST_Definitions.DEFMETHOD("to_assignments", function(compressor) {
        var reduce_vars = compressor.option("reduce_vars");
        var assignments = [];
        for (const def of this.definitions) {
          if (def.value) {
            var name = make_node(AST_SymbolRef, def.name, def.name);
            assignments.push(make_node(AST_Assign, def, {
              operator: "=",
              logical: false,
              left: name,
              right: def.value
            }));
            if (reduce_vars)
              name.definition().fixed = false;
          }
          const thedef = def.name.definition();
          thedef.eliminated++;
          thedef.replaced--;
        }
        if (assignments.length == 0)
          return null;
        return make_sequence(this, assignments);
      });
      def_optimize(AST_Definitions, function(self2) {
        if (self2.definitions.length == 0) {
          return make_node(AST_EmptyStatement, self2);
        }
        return self2;
      });
      def_optimize(AST_VarDef, function(self2, compressor) {
        if (self2.name instanceof AST_SymbolLet && self2.value != null && is_undefined(self2.value, compressor)) {
          self2.value = null;
        }
        return self2;
      });
      def_optimize(AST_Import, function(self2) {
        return self2;
      });
      def_optimize(AST_Call, function(self2, compressor) {
        var exp = self2.expression;
        var fn = exp;
        inline_array_like_spread(self2.args);
        var simple_args = self2.args.every((arg2) => !(arg2 instanceof AST_Expansion));
        if (compressor.option("reduce_vars") && fn instanceof AST_SymbolRef) {
          fn = fn.fixed_value();
        }
        var is_func = fn instanceof AST_Lambda;
        if (is_func && fn.pinned())
          return self2;
        if (compressor.option("unused") && simple_args && is_func && !fn.uses_arguments) {
          var pos = 0, last = 0;
          for (var i = 0, len = self2.args.length; i < len; i++) {
            if (fn.argnames[i] instanceof AST_Expansion) {
              if (has_flag(fn.argnames[i].expression, UNUSED))
                while (i < len) {
                  var node = self2.args[i++].drop_side_effect_free(compressor);
                  if (node) {
                    self2.args[pos++] = node;
                  }
                }
              else
                while (i < len) {
                  self2.args[pos++] = self2.args[i++];
                }
              last = pos;
              break;
            }
            var trim2 = i >= fn.argnames.length;
            if (trim2 || has_flag(fn.argnames[i], UNUSED)) {
              var node = self2.args[i].drop_side_effect_free(compressor);
              if (node) {
                self2.args[pos++] = node;
              } else if (!trim2) {
                self2.args[pos++] = make_node(AST_Number, self2.args[i], {
                  value: 0
                });
                continue;
              }
            } else {
              self2.args[pos++] = self2.args[i];
            }
            last = pos;
          }
          self2.args.length = last;
        }
        if (compressor.option("unsafe") && !exp.contains_optional()) {
          if (exp instanceof AST_Dot && exp.start.value === "Array" && exp.property === "from" && self2.args.length === 1) {
            const [argument] = self2.args;
            if (argument instanceof AST_Array) {
              return make_node(AST_Array, argument, {
                elements: argument.elements
              }).optimize(compressor);
            }
          }
          if (is_undeclared_ref(exp))
            switch (exp.name) {
              case "Array":
                if (self2.args.length != 1) {
                  return make_node(AST_Array, self2, {
                    elements: self2.args
                  }).optimize(compressor);
                } else if (self2.args[0] instanceof AST_Number && self2.args[0].value <= 11) {
                  const elements2 = [];
                  for (let i2 = 0; i2 < self2.args[0].value; i2++)
                    elements2.push(new AST_Hole());
                  return new AST_Array({ elements: elements2 });
                }
                break;
              case "Object":
                if (self2.args.length == 0) {
                  return make_node(AST_Object, self2, {
                    properties: []
                  });
                }
                break;
              case "String":
                if (self2.args.length == 0)
                  return make_node(AST_String, self2, {
                    value: ""
                  });
                if (self2.args.length <= 1)
                  return make_node(AST_Binary, self2, {
                    left: self2.args[0],
                    operator: "+",
                    right: make_node(AST_String, self2, { value: "" })
                  }).optimize(compressor);
                break;
              case "Number":
                if (self2.args.length == 0)
                  return make_node(AST_Number, self2, {
                    value: 0
                  });
                if (self2.args.length == 1 && compressor.option("unsafe_math")) {
                  return make_node(AST_UnaryPrefix, self2, {
                    expression: self2.args[0],
                    operator: "+"
                  }).optimize(compressor);
                }
                break;
              case "Symbol":
                if (self2.args.length == 1 && self2.args[0] instanceof AST_String && compressor.option("unsafe_symbols"))
                  self2.args.length = 0;
                break;
              case "Boolean":
                if (self2.args.length == 0)
                  return make_node(AST_False, self2);
                if (self2.args.length == 1)
                  return make_node(AST_UnaryPrefix, self2, {
                    expression: make_node(AST_UnaryPrefix, self2, {
                      expression: self2.args[0],
                      operator: "!"
                    }),
                    operator: "!"
                  }).optimize(compressor);
                break;
              case "RegExp":
                var params = [];
                if (self2.args.length >= 1 && self2.args.length <= 2 && self2.args.every((arg2) => {
                  var value2 = arg2.evaluate(compressor);
                  params.push(value2);
                  return arg2 !== value2;
                }) && regexp_is_safe(params[0])) {
                  let [source, flags] = params;
                  source = regexp_source_fix(new RegExp(source).source);
                  const rx = make_node(AST_RegExp, self2, {
                    value: { source, flags }
                  });
                  if (rx._eval(compressor) !== rx) {
                    return rx;
                  }
                }
                break;
            }
          else if (exp instanceof AST_Dot)
            switch (exp.property) {
              case "toString":
                if (self2.args.length == 0 && !exp.expression.may_throw_on_access(compressor)) {
                  return make_node(AST_Binary, self2, {
                    left: make_node(AST_String, self2, { value: "" }),
                    operator: "+",
                    right: exp.expression
                  }).optimize(compressor);
                }
                break;
              case "join":
                if (exp.expression instanceof AST_Array)
                  EXIT: {
                    var separator;
                    if (self2.args.length > 0) {
                      separator = self2.args[0].evaluate(compressor);
                      if (separator === self2.args[0])
                        break EXIT;
                    }
                    var elements = [];
                    var consts = [];
                    for (var i = 0, len = exp.expression.elements.length; i < len; i++) {
                      var el = exp.expression.elements[i];
                      if (el instanceof AST_Expansion)
                        break EXIT;
                      var value = el.evaluate(compressor);
                      if (value !== el) {
                        consts.push(value);
                      } else {
                        if (consts.length > 0) {
                          elements.push(make_node(AST_String, self2, {
                            value: consts.join(separator)
                          }));
                          consts.length = 0;
                        }
                        elements.push(el);
                      }
                    }
                    if (consts.length > 0) {
                      elements.push(make_node(AST_String, self2, {
                        value: consts.join(separator)
                      }));
                    }
                    if (elements.length == 0)
                      return make_node(AST_String, self2, { value: "" });
                    if (elements.length == 1) {
                      if (elements[0].is_string(compressor)) {
                        return elements[0];
                      }
                      return make_node(AST_Binary, elements[0], {
                        operator: "+",
                        left: make_node(AST_String, self2, { value: "" }),
                        right: elements[0]
                      });
                    }
                    if (separator == "") {
                      var first;
                      if (elements[0].is_string(compressor) || elements[1].is_string(compressor)) {
                        first = elements.shift();
                      } else {
                        first = make_node(AST_String, self2, { value: "" });
                      }
                      return elements.reduce(function(prev, el2) {
                        return make_node(AST_Binary, el2, {
                          operator: "+",
                          left: prev,
                          right: el2
                        });
                      }, first).optimize(compressor);
                    }
                    var node = self2.clone();
                    node.expression = node.expression.clone();
                    node.expression.expression = node.expression.expression.clone();
                    node.expression.expression.elements = elements;
                    return best_of(compressor, self2, node);
                  }
                break;
              case "charAt":
                if (exp.expression.is_string(compressor)) {
                  var arg = self2.args[0];
                  var index = arg ? arg.evaluate(compressor) : 0;
                  if (index !== arg) {
                    return make_node(AST_Sub, exp, {
                      expression: exp.expression,
                      property: make_node_from_constant(index | 0, arg || exp)
                    }).optimize(compressor);
                  }
                }
                break;
              case "apply":
                if (self2.args.length == 2 && self2.args[1] instanceof AST_Array) {
                  var args = self2.args[1].elements.slice();
                  args.unshift(self2.args[0]);
                  return make_node(AST_Call, self2, {
                    expression: make_node(AST_Dot, exp, {
                      expression: exp.expression,
                      optional: false,
                      property: "call"
                    }),
                    args
                  }).optimize(compressor);
                }
                break;
              case "call":
                var func = exp.expression;
                if (func instanceof AST_SymbolRef) {
                  func = func.fixed_value();
                }
                if (func instanceof AST_Lambda && !func.contains_this()) {
                  return (self2.args.length ? make_sequence(this, [
                    self2.args[0],
                    make_node(AST_Call, self2, {
                      expression: exp.expression,
                      args: self2.args.slice(1)
                    })
                  ]) : make_node(AST_Call, self2, {
                    expression: exp.expression,
                    args: []
                  })).optimize(compressor);
                }
                break;
            }
        }
        if (compressor.option("unsafe_Function") && is_undeclared_ref(exp) && exp.name == "Function") {
          if (self2.args.length == 0)
            return make_node(AST_Function, self2, {
              argnames: [],
              body: []
            }).optimize(compressor);
          if (self2.args.every((x) => x instanceof AST_String)) {
            try {
              var code = "n(function(" + self2.args.slice(0, -1).map(function(arg2) {
                return arg2.value;
              }).join(",") + "){" + self2.args[self2.args.length - 1].value + "})";
              var ast = parse(code);
              var mangle = compressor.mangle_options();
              ast.figure_out_scope(mangle);
              var comp = new Compressor(compressor.options, {
                mangle_options: compressor._mangle_options
              });
              ast = ast.transform(comp);
              ast.figure_out_scope(mangle);
              ast.compute_char_frequency(mangle);
              ast.mangle_names(mangle);
              var fun;
              walk(ast, (node2) => {
                if (is_func_expr(node2)) {
                  fun = node2;
                  return walk_abort;
                }
              });
              var code = OutputStream();
              AST_BlockStatement.prototype._codegen.call(fun, fun, code);
              self2.args = [
                make_node(AST_String, self2, {
                  value: fun.argnames.map(function(arg2) {
                    return arg2.print_to_string();
                  }).join(",")
                }),
                make_node(AST_String, self2.args[self2.args.length - 1], {
                  value: code.get().replace(/^{|}$/g, "")
                })
              ];
              return self2;
            } catch (ex) {
              if (!(ex instanceof JS_Parse_Error)) {
                throw ex;
              }
            }
          }
        }
        return inline_into_call(self2, compressor);
      });
      AST_Node.DEFMETHOD("contains_optional", function() {
        if (this instanceof AST_PropAccess || this instanceof AST_Call || this instanceof AST_Chain) {
          if (this.optional) {
            return true;
          } else {
            return this.expression.contains_optional();
          }
        } else {
          return false;
        }
      });
      def_optimize(AST_New, function(self2, compressor) {
        if (compressor.option("unsafe") && is_undeclared_ref(self2.expression) && ["Object", "RegExp", "Function", "Error", "Array"].includes(self2.expression.name))
          return make_node(AST_Call, self2, self2).transform(compressor);
        return self2;
      });
      def_optimize(AST_Sequence, function(self2, compressor) {
        if (!compressor.option("side_effects"))
          return self2;
        var expressions = [];
        filter_for_side_effects();
        var end = expressions.length - 1;
        trim_right_for_undefined();
        if (end == 0) {
          self2 = maintain_this_binding(compressor.parent(), compressor.self(), expressions[0]);
          if (!(self2 instanceof AST_Sequence))
            self2 = self2.optimize(compressor);
          return self2;
        }
        self2.expressions = expressions;
        return self2;
        function filter_for_side_effects() {
          var first = first_in_statement(compressor);
          var last = self2.expressions.length - 1;
          self2.expressions.forEach(function(expr, index) {
            if (index < last)
              expr = expr.drop_side_effect_free(compressor, first);
            if (expr) {
              merge_sequence(expressions, expr);
              first = false;
            }
          });
        }
        function trim_right_for_undefined() {
          while (end > 0 && is_undefined(expressions[end], compressor))
            end--;
          if (end < expressions.length - 1) {
            expressions[end] = make_node(AST_UnaryPrefix, self2, {
              operator: "void",
              expression: expressions[end]
            });
            expressions.length = end + 1;
          }
        }
      });
      AST_Unary.DEFMETHOD("lift_sequences", function(compressor) {
        if (compressor.option("sequences")) {
          if (this.expression instanceof AST_Sequence) {
            var x = this.expression.expressions.slice();
            var e = this.clone();
            e.expression = x.pop();
            x.push(e);
            return make_sequence(this, x).optimize(compressor);
          }
        }
        return this;
      });
      def_optimize(AST_UnaryPostfix, function(self2, compressor) {
        return self2.lift_sequences(compressor);
      });
      def_optimize(AST_UnaryPrefix, function(self2, compressor) {
        var e = self2.expression;
        if (self2.operator == "delete" && !(e instanceof AST_SymbolRef || e instanceof AST_PropAccess || e instanceof AST_Chain || is_identifier_atom(e))) {
          return make_sequence(self2, [e, make_node(AST_True, self2)]).optimize(compressor);
        }
        var seq = self2.lift_sequences(compressor);
        if (seq !== self2) {
          return seq;
        }
        if (compressor.option("side_effects") && self2.operator == "void") {
          e = e.drop_side_effect_free(compressor);
          if (e) {
            self2.expression = e;
            return self2;
          } else {
            return make_node(AST_Undefined, self2).optimize(compressor);
          }
        }
        if (compressor.in_boolean_context()) {
          switch (self2.operator) {
            case "!":
              if (e instanceof AST_UnaryPrefix && e.operator == "!") {
                return e.expression;
              }
              if (e instanceof AST_Binary) {
                self2 = best_of(compressor, self2, e.negate(compressor, first_in_statement(compressor)));
              }
              break;
            case "typeof":
              return (e instanceof AST_SymbolRef ? make_node(AST_True, self2) : make_sequence(self2, [
                e,
                make_node(AST_True, self2)
              ])).optimize(compressor);
          }
        }
        if (self2.operator == "-" && e instanceof AST_Infinity) {
          e = e.transform(compressor);
        }
        if (e instanceof AST_Binary && (self2.operator == "+" || self2.operator == "-") && (e.operator == "*" || e.operator == "/" || e.operator == "%")) {
          return make_node(AST_Binary, self2, {
            operator: e.operator,
            left: make_node(AST_UnaryPrefix, e.left, {
              operator: self2.operator,
              expression: e.left
            }),
            right: e.right
          });
        }
        if (compressor.option("evaluate")) {
          if (self2.operator === "~" && self2.expression instanceof AST_UnaryPrefix && self2.expression.operator === "~" && (compressor.in_32_bit_context() || self2.expression.expression.is_32_bit_integer())) {
            return self2.expression.expression;
          }
          if (self2.operator === "~" && e instanceof AST_Binary && e.operator === "^") {
            if (e.left instanceof AST_UnaryPrefix && e.left.operator === "~") {
              e.left = e.left.bitwise_negate(true);
            } else {
              e.right = e.right.bitwise_negate(true);
            }
            return e;
          }
        }
        if (self2.operator != "-" || !(e instanceof AST_Number || e instanceof AST_Infinity || e instanceof AST_BigInt)) {
          var ev = self2.evaluate(compressor);
          if (ev !== self2) {
            ev = make_node_from_constant(ev, self2).optimize(compressor);
            return best_of(compressor, ev, self2);
          }
        }
        return self2;
      });
      AST_Binary.DEFMETHOD("lift_sequences", function(compressor) {
        if (compressor.option("sequences")) {
          if (this.left instanceof AST_Sequence) {
            var x = this.left.expressions.slice();
            var e = this.clone();
            e.left = x.pop();
            x.push(e);
            return make_sequence(this, x).optimize(compressor);
          }
          if (this.right instanceof AST_Sequence && !this.left.has_side_effects(compressor)) {
            var assign = this.operator == "=" && this.left instanceof AST_SymbolRef;
            var x = this.right.expressions;
            var last = x.length - 1;
            for (var i = 0; i < last; i++) {
              if (!assign && x[i].has_side_effects(compressor))
                break;
            }
            if (i == last) {
              x = x.slice();
              var e = this.clone();
              e.right = x.pop();
              x.push(e);
              return make_sequence(this, x).optimize(compressor);
            } else if (i > 0) {
              var e = this.clone();
              e.right = make_sequence(this.right, x.slice(i));
              x = x.slice(0, i);
              x.push(e);
              return make_sequence(this, x).optimize(compressor);
            }
          }
        }
        return this;
      });
      var commutativeOperators = makePredicate("== === != !== * & | ^");
      function is_object(node) {
        return node instanceof AST_Array || node instanceof AST_Lambda || node instanceof AST_Object || node instanceof AST_Class;
      }
      def_optimize(AST_Binary, function(self2, compressor) {
        function reversible() {
          return self2.left.is_constant() || self2.right.is_constant() || !self2.left.has_side_effects(compressor) && !self2.right.has_side_effects(compressor);
        }
        function reverse(op) {
          if (reversible()) {
            if (op)
              self2.operator = op;
            var tmp = self2.left;
            self2.left = self2.right;
            self2.right = tmp;
          }
        }
        if (compressor.option("lhs_constants") && commutativeOperators.has(self2.operator)) {
          if (self2.right.is_constant() && !self2.left.is_constant()) {
            if (!(self2.left instanceof AST_Binary && PRECEDENCE[self2.left.operator] >= PRECEDENCE[self2.operator])) {
              reverse();
            }
          }
        }
        self2 = self2.lift_sequences(compressor);
        if (compressor.option("comparisons"))
          switch (self2.operator) {
            case "===":
            case "!==":
              var is_strict_comparison = true;
              if (self2.left.is_string(compressor) && self2.right.is_string(compressor) || self2.left.is_number(compressor) && self2.right.is_number(compressor) || self2.left.is_boolean() && self2.right.is_boolean() || self2.left.equivalent_to(self2.right)) {
                self2.operator = self2.operator.substr(0, 2);
              }
            case "==":
            case "!=":
              if (!is_strict_comparison && is_undefined(self2.left, compressor)) {
                self2.left = make_node(AST_Null, self2.left);
              } else if (!is_strict_comparison && is_undefined(self2.right, compressor)) {
                self2.right = make_node(AST_Null, self2.right);
              } else if (compressor.option("typeofs") && self2.left instanceof AST_String && self2.left.value == "undefined" && self2.right instanceof AST_UnaryPrefix && self2.right.operator == "typeof") {
                var expr = self2.right.expression;
                if (expr instanceof AST_SymbolRef ? expr.is_declared(compressor) : !(expr instanceof AST_PropAccess && compressor.option("ie8"))) {
                  self2.right = expr;
                  self2.left = make_node(AST_Undefined, self2.left).optimize(compressor);
                  if (self2.operator.length == 2)
                    self2.operator += "=";
                }
              } else if (compressor.option("typeofs") && self2.left instanceof AST_UnaryPrefix && self2.left.operator == "typeof" && self2.right instanceof AST_String && self2.right.value == "undefined") {
                var expr = self2.left.expression;
                if (expr instanceof AST_SymbolRef ? expr.is_declared(compressor) : !(expr instanceof AST_PropAccess && compressor.option("ie8"))) {
                  self2.left = expr;
                  self2.right = make_node(AST_Undefined, self2.right).optimize(compressor);
                  if (self2.operator.length == 2)
                    self2.operator += "=";
                }
              } else if (self2.left instanceof AST_SymbolRef && self2.right instanceof AST_SymbolRef && self2.left.definition() === self2.right.definition() && is_object(self2.left.fixed_value())) {
                return make_node(self2.operator[0] == "=" ? AST_True : AST_False, self2);
              } else if (self2.left.is_32_bit_integer() && self2.right.is_32_bit_integer()) {
                const not = (node) => make_node(AST_UnaryPrefix, node, {
                  operator: "!",
                  expression: node
                });
                const booleanify = (node, truthy) => {
                  if (truthy) {
                    return compressor.in_boolean_context() ? node : not(not(node));
                  } else {
                    return not(node);
                  }
                };
                if (self2.left instanceof AST_Number && self2.left.value === 0) {
                  return booleanify(self2.right, self2.operator[0] === "!");
                }
                if (self2.right instanceof AST_Number && self2.right.value === 0) {
                  return booleanify(self2.left, self2.operator[0] === "!");
                }
                let and_op, x, mask;
                if ((and_op = self2.left instanceof AST_Binary ? self2.left : self2.right instanceof AST_Binary ? self2.right : null) && (mask = and_op === self2.left ? self2.right : self2.left) && and_op.operator === "&" && mask instanceof AST_Number && mask.is_32_bit_integer() && (x = and_op.left.equivalent_to(mask) ? and_op.right : and_op.right.equivalent_to(mask) ? and_op.left : null)) {
                  let optimized = booleanify(make_node(AST_Binary, self2, {
                    operator: "&",
                    left: mask,
                    right: make_node(AST_UnaryPrefix, self2, {
                      operator: "~",
                      expression: x
                    })
                  }), self2.operator[0] === "=");
                  return best_of(compressor, optimized, self2);
                }
              }
              break;
            case "&&":
            case "||":
              var lhs = self2.left;
              if (lhs.operator == self2.operator) {
                lhs = lhs.right;
              }
              if (lhs instanceof AST_Binary && lhs.operator == (self2.operator == "&&" ? "!==" : "===") && self2.right instanceof AST_Binary && lhs.operator == self2.right.operator && (is_undefined(lhs.left, compressor) && self2.right.left instanceof AST_Null || lhs.left instanceof AST_Null && is_undefined(self2.right.left, compressor)) && !lhs.right.has_side_effects(compressor) && lhs.right.equivalent_to(self2.right.right)) {
                var combined = make_node(AST_Binary, self2, {
                  operator: lhs.operator.slice(0, -1),
                  left: make_node(AST_Null, self2),
                  right: lhs.right
                });
                if (lhs !== self2.left) {
                  combined = make_node(AST_Binary, self2, {
                    operator: self2.operator,
                    left: self2.left.left,
                    right: combined
                  });
                }
                return combined;
              }
              break;
          }
        if (self2.operator == "+" && compressor.in_boolean_context()) {
          var ll = self2.left.evaluate(compressor);
          var rr = self2.right.evaluate(compressor);
          if (ll && typeof ll == "string") {
            return make_sequence(self2, [
              self2.right,
              make_node(AST_True, self2)
            ]).optimize(compressor);
          }
          if (rr && typeof rr == "string") {
            return make_sequence(self2, [
              self2.left,
              make_node(AST_True, self2)
            ]).optimize(compressor);
          }
        }
        if (compressor.option("comparisons") && self2.is_boolean()) {
          if (!(compressor.parent() instanceof AST_Binary) || compressor.parent() instanceof AST_Assign) {
            var negated = make_node(AST_UnaryPrefix, self2, {
              operator: "!",
              expression: self2.negate(compressor, first_in_statement(compressor))
            });
            self2 = best_of(compressor, self2, negated);
          }
          if (compressor.option("unsafe_comps")) {
            switch (self2.operator) {
              case "<":
                reverse(">");
                break;
              case "<=":
                reverse(">=");
                break;
            }
          }
        }
        if (self2.operator == "+") {
          if (self2.right instanceof AST_String && self2.right.getValue() == "" && self2.left.is_string(compressor)) {
            return self2.left;
          }
          if (self2.left instanceof AST_String && self2.left.getValue() == "" && self2.right.is_string(compressor)) {
            return self2.right;
          }
          if (self2.left instanceof AST_Binary && self2.left.operator == "+" && self2.left.left instanceof AST_String && self2.left.left.getValue() == "" && self2.right.is_string(compressor)) {
            self2.left = self2.left.right;
            return self2;
          }
        }
        if (compressor.option("evaluate")) {
          switch (self2.operator) {
            case "&&":
              var ll = has_flag(self2.left, TRUTHY) ? true : has_flag(self2.left, FALSY) ? false : self2.left.evaluate(compressor);
              if (!ll) {
                return maintain_this_binding(compressor.parent(), compressor.self(), self2.left).optimize(compressor);
              } else if (!(ll instanceof AST_Node)) {
                return make_sequence(self2, [self2.left, self2.right]).optimize(compressor);
              }
              var rr = self2.right.evaluate(compressor);
              if (!rr) {
                if (compressor.in_boolean_context()) {
                  return make_sequence(self2, [
                    self2.left,
                    make_node(AST_False, self2)
                  ]).optimize(compressor);
                } else {
                  set_flag(self2, FALSY);
                }
              } else if (!(rr instanceof AST_Node)) {
                var parent = compressor.parent();
                if (parent.operator == "&&" && parent.left === compressor.self() || compressor.in_boolean_context()) {
                  return self2.left.optimize(compressor);
                }
              }
              if (self2.left.operator == "||") {
                var lr = self2.left.right.evaluate(compressor);
                if (!lr)
                  return make_node(AST_Conditional, self2, {
                    condition: self2.left.left,
                    consequent: self2.right,
                    alternative: self2.left.right
                  }).optimize(compressor);
              }
              break;
            case "||":
              var ll = has_flag(self2.left, TRUTHY) ? true : has_flag(self2.left, FALSY) ? false : self2.left.evaluate(compressor);
              if (!ll) {
                return make_sequence(self2, [self2.left, self2.right]).optimize(compressor);
              } else if (!(ll instanceof AST_Node)) {
                return maintain_this_binding(compressor.parent(), compressor.self(), self2.left).optimize(compressor);
              }
              var rr = self2.right.evaluate(compressor);
              if (!rr) {
                var parent = compressor.parent();
                if (parent.operator == "||" && parent.left === compressor.self() || compressor.in_boolean_context()) {
                  return self2.left.optimize(compressor);
                }
              } else if (!(rr instanceof AST_Node)) {
                if (compressor.in_boolean_context()) {
                  return make_sequence(self2, [
                    self2.left,
                    make_node(AST_True, self2)
                  ]).optimize(compressor);
                } else {
                  set_flag(self2, TRUTHY);
                }
              }
              if (self2.left.operator == "&&") {
                var lr = self2.left.right.evaluate(compressor);
                if (lr && !(lr instanceof AST_Node))
                  return make_node(AST_Conditional, self2, {
                    condition: self2.left.left,
                    consequent: self2.left.right,
                    alternative: self2.right
                  }).optimize(compressor);
              }
              break;
            case "??":
              if (is_nullish(self2.left, compressor)) {
                return self2.right;
              }
              var ll = self2.left.evaluate(compressor);
              if (!(ll instanceof AST_Node)) {
                return ll == null ? self2.right : self2.left;
              }
              if (compressor.in_boolean_context()) {
                const rr2 = self2.right.evaluate(compressor);
                if (!(rr2 instanceof AST_Node) && !rr2) {
                  return self2.left;
                }
              }
          }
          var associative = true;
          switch (self2.operator) {
            case "+":
              if (self2.right instanceof AST_Constant && self2.left instanceof AST_Binary && self2.left.operator == "+" && self2.left.is_string(compressor)) {
                var binary = make_node(AST_Binary, self2, {
                  operator: "+",
                  left: self2.left.right,
                  right: self2.right
                });
                var r2 = binary.optimize(compressor);
                if (binary !== r2) {
                  self2 = make_node(AST_Binary, self2, {
                    operator: "+",
                    left: self2.left.left,
                    right: r2
                  });
                }
              }
              if (self2.left instanceof AST_Binary && self2.left.operator == "+" && self2.left.is_string(compressor) && self2.right instanceof AST_Binary && self2.right.operator == "+" && self2.right.is_string(compressor)) {
                var binary = make_node(AST_Binary, self2, {
                  operator: "+",
                  left: self2.left.right,
                  right: self2.right.left
                });
                var m2 = binary.optimize(compressor);
                if (binary !== m2) {
                  self2 = make_node(AST_Binary, self2, {
                    operator: "+",
                    left: make_node(AST_Binary, self2.left, {
                      operator: "+",
                      left: self2.left.left,
                      right: m2
                    }),
                    right: self2.right.right
                  });
                }
              }
              if (self2.right instanceof AST_UnaryPrefix && self2.right.operator == "-" && self2.left.is_number(compressor)) {
                self2 = make_node(AST_Binary, self2, {
                  operator: "-",
                  left: self2.left,
                  right: self2.right.expression
                });
                break;
              }
              if (self2.left instanceof AST_UnaryPrefix && self2.left.operator == "-" && reversible() && self2.right.is_number(compressor)) {
                self2 = make_node(AST_Binary, self2, {
                  operator: "-",
                  left: self2.right,
                  right: self2.left.expression
                });
                break;
              }
              if (self2.left instanceof AST_TemplateString) {
                var l2 = self2.left;
                var r2 = self2.right.evaluate(compressor);
                if (r2 != self2.right) {
                  l2.segments[l2.segments.length - 1].value += String(r2);
                  return l2;
                }
              }
              if (self2.right instanceof AST_TemplateString) {
                var r2 = self2.right;
                var l2 = self2.left.evaluate(compressor);
                if (l2 != self2.left) {
                  r2.segments[0].value = String(l2) + r2.segments[0].value;
                  return r2;
                }
              }
              if (self2.left instanceof AST_TemplateString && self2.right instanceof AST_TemplateString) {
                var l2 = self2.left;
                var segments = l2.segments;
                var r2 = self2.right;
                segments[segments.length - 1].value += r2.segments[0].value;
                for (var i = 1; i < r2.segments.length; i++) {
                  segments.push(r2.segments[i]);
                }
                return l2;
              }
            case "*":
              associative = compressor.option("unsafe_math");
            case "&":
            case "|":
            case "^":
              if (self2.left.is_number(compressor) && self2.right.is_number(compressor) && reversible() && !(self2.left instanceof AST_Binary && self2.left.operator != self2.operator && PRECEDENCE[self2.left.operator] >= PRECEDENCE[self2.operator])) {
                var reversed = make_node(AST_Binary, self2, {
                  operator: self2.operator,
                  left: self2.right,
                  right: self2.left
                });
                if (self2.right instanceof AST_Constant && !(self2.left instanceof AST_Constant)) {
                  self2 = best_of(compressor, reversed, self2);
                } else {
                  self2 = best_of(compressor, self2, reversed);
                }
              }
              if (associative && self2.is_number(compressor)) {
                if (self2.right instanceof AST_Binary && self2.right.operator == self2.operator) {
                  self2 = make_node(AST_Binary, self2, {
                    operator: self2.operator,
                    left: make_node(AST_Binary, self2.left, {
                      operator: self2.operator,
                      left: self2.left,
                      right: self2.right.left,
                      start: self2.left.start,
                      end: self2.right.left.end
                    }),
                    right: self2.right.right
                  });
                }
                if (self2.right instanceof AST_Constant && self2.left instanceof AST_Binary && self2.left.operator == self2.operator) {
                  if (self2.left.left instanceof AST_Constant) {
                    self2 = make_node(AST_Binary, self2, {
                      operator: self2.operator,
                      left: make_node(AST_Binary, self2.left, {
                        operator: self2.operator,
                        left: self2.left.left,
                        right: self2.right,
                        start: self2.left.left.start,
                        end: self2.right.end
                      }),
                      right: self2.left.right
                    });
                  } else if (self2.left.right instanceof AST_Constant) {
                    self2 = make_node(AST_Binary, self2, {
                      operator: self2.operator,
                      left: make_node(AST_Binary, self2.left, {
                        operator: self2.operator,
                        left: self2.left.right,
                        right: self2.right,
                        start: self2.left.right.start,
                        end: self2.right.end
                      }),
                      right: self2.left.left
                    });
                  }
                }
                if (self2.left instanceof AST_Binary && self2.left.operator == self2.operator && self2.left.right instanceof AST_Constant && self2.right instanceof AST_Binary && self2.right.operator == self2.operator && self2.right.left instanceof AST_Constant) {
                  self2 = make_node(AST_Binary, self2, {
                    operator: self2.operator,
                    left: make_node(AST_Binary, self2.left, {
                      operator: self2.operator,
                      left: make_node(AST_Binary, self2.left.left, {
                        operator: self2.operator,
                        left: self2.left.right,
                        right: self2.right.left,
                        start: self2.left.right.start,
                        end: self2.right.left.end
                      }),
                      right: self2.left.left
                    }),
                    right: self2.right.right
                  });
                }
              }
          }
          if (bitwise_binop.has(self2.operator)) {
            let y, z, x_node, y_node, z_node = self2.left;
            if (self2.operator === "&" && self2.right instanceof AST_Binary && self2.right.operator === "|" && typeof (z = self2.left.evaluate(compressor)) === "number") {
              if (typeof (y = self2.right.right.evaluate(compressor)) === "number") {
                x_node = self2.right.left;
                y_node = self2.right.right;
              } else if (typeof (y = self2.right.left.evaluate(compressor)) === "number") {
                x_node = self2.right.right;
                y_node = self2.right.left;
              }
              if ((y & z) === 0) {
                self2 = make_node(AST_Binary, self2, {
                  operator: self2.operator,
                  left: z_node,
                  right: x_node
                });
              } else {
                const reordered_ops = make_node(AST_Binary, self2, {
                  operator: "|",
                  left: make_node(AST_Binary, self2, {
                    operator: "&",
                    left: x_node,
                    right: z_node
                  }),
                  right: make_node_from_constant(y & z, y_node)
                });
                self2 = best_of(compressor, self2, reordered_ops);
              }
            }
            const same_operands = self2.left.equivalent_to(self2.right) && !self2.left.has_side_effects(compressor);
            if (same_operands) {
              if (self2.operator === "^") {
                return make_node(AST_Number, self2, { value: 0 });
              }
              if (self2.operator === "|" || self2.operator === "&") {
                self2.left = make_node(AST_Number, self2, { value: 0 });
                self2.operator = "|";
              }
            }
            if ((self2.operator === "<<" || self2.operator === ">>") && self2.right instanceof AST_Number && self2.right.value === 0) {
              self2.operator = "|";
            }
            const zero_side = self2.right instanceof AST_Number && self2.right.value === 0 ? self2.right : self2.left instanceof AST_Number && self2.left.value === 0 ? self2.left : null;
            const non_zero_side = zero_side && (zero_side === self2.right ? self2.left : self2.right);
            if (zero_side && (self2.operator === "|" || self2.operator === "^") && (non_zero_side.is_32_bit_integer() || compressor.in_32_bit_context())) {
              return non_zero_side;
            }
            if (zero_side && self2.operator === "&" && !non_zero_side.has_side_effects(compressor)) {
              return zero_side;
            }
            const is_full_mask = (node) => node instanceof AST_Number && node.value === -1 || node instanceof AST_UnaryPrefix && (node.operator === "-" && node.expression instanceof AST_Number && node.expression.value === 1 || node.operator === "~" && node.expression instanceof AST_Number && node.expression.value === 0);
            const full_mask = is_full_mask(self2.right) ? self2.right : is_full_mask(self2.left) ? self2.left : null;
            const non_full_mask_side = full_mask && (full_mask === self2.right ? self2.left : self2.right);
            switch (self2.operator) {
              case "|":
                if (full_mask && !non_full_mask_side.has_side_effects(compressor)) {
                  return full_mask;
                }
                break;
              case "&":
                if (full_mask && (non_full_mask_side.is_32_bit_integer() || compressor.in_32_bit_context())) {
                  return non_full_mask_side;
                }
                break;
              case "^":
                if (full_mask) {
                  return non_full_mask_side.bitwise_negate(compressor.in_32_bit_context());
                }
                if (self2.left instanceof AST_UnaryPrefix && self2.left.operator === "~" && self2.right instanceof AST_UnaryPrefix && self2.right.operator === "~") {
                  self2 = make_node(AST_Binary, self2, {
                    operator: "^",
                    left: self2.left.expression,
                    right: self2.right.expression
                  });
                }
                break;
            }
          }
        }
        if (self2.right instanceof AST_Binary && self2.right.operator == self2.operator && (lazy_op.has(self2.operator) || self2.operator == "+" && (self2.right.left.is_string(compressor) || self2.left.is_string(compressor) && self2.right.right.is_string(compressor)))) {
          self2.left = make_node(AST_Binary, self2.left, {
            operator: self2.operator,
            left: self2.left.transform(compressor),
            right: self2.right.left.transform(compressor)
          });
          self2.right = self2.right.right.transform(compressor);
          return self2.transform(compressor);
        }
        var ev = self2.evaluate(compressor);
        if (ev !== self2) {
          ev = make_node_from_constant(ev, self2).optimize(compressor);
          return best_of(compressor, ev, self2);
        }
        return self2;
      });
      def_optimize(AST_SymbolExport, function(self2) {
        return self2;
      });
      def_optimize(AST_SymbolRef, function(self2, compressor) {
        if (!compressor.option("ie8") && is_undeclared_ref(self2) && !compressor.find_parent(AST_With)) {
          switch (self2.name) {
            case "undefined":
              return make_node(AST_Undefined, self2).optimize(compressor);
            case "NaN":
              return make_node(AST_NaN, self2).optimize(compressor);
            case "Infinity":
              return make_node(AST_Infinity, self2).optimize(compressor);
          }
        }
        if (compressor.option("reduce_vars") && !compressor.is_lhs()) {
          return inline_into_symbolref(self2, compressor);
        } else {
          return self2;
        }
      });
      function is_atomic(lhs, self2) {
        return lhs instanceof AST_SymbolRef || lhs.TYPE === self2.TYPE;
      }
      def_optimize(AST_Undefined, function(self2, compressor) {
        if (compressor.option("unsafe_undefined")) {
          var undef = find_variable(compressor, "undefined");
          if (undef) {
            var ref = make_node(AST_SymbolRef, self2, {
              name: "undefined",
              scope: undef.scope,
              thedef: undef
            });
            set_flag(ref, UNDEFINED);
            return ref;
          }
        }
        var lhs = compressor.is_lhs();
        if (lhs && is_atomic(lhs, self2))
          return self2;
        return make_node(AST_UnaryPrefix, self2, {
          operator: "void",
          expression: make_node(AST_Number, self2, {
            value: 0
          })
        });
      });
      def_optimize(AST_Infinity, function(self2, compressor) {
        var lhs = compressor.is_lhs();
        if (lhs && is_atomic(lhs, self2))
          return self2;
        if (compressor.option("keep_infinity") && !(lhs && !is_atomic(lhs, self2)) && !find_variable(compressor, "Infinity")) {
          return self2;
        }
        return make_node(AST_Binary, self2, {
          operator: "/",
          left: make_node(AST_Number, self2, {
            value: 1
          }),
          right: make_node(AST_Number, self2, {
            value: 0
          })
        });
      });
      def_optimize(AST_NaN, function(self2, compressor) {
        var lhs = compressor.is_lhs();
        if (lhs && !is_atomic(lhs, self2) || find_variable(compressor, "NaN")) {
          return make_node(AST_Binary, self2, {
            operator: "/",
            left: make_node(AST_Number, self2, {
              value: 0
            }),
            right: make_node(AST_Number, self2, {
              value: 0
            })
          });
        }
        return self2;
      });
      const ASSIGN_OPS = makePredicate("+ - / * % >> << >>> | ^ &");
      const ASSIGN_OPS_COMMUTATIVE = makePredicate("* | ^ &");
      def_optimize(AST_Assign, function(self2, compressor) {
        if (self2.logical) {
          return self2.lift_sequences(compressor);
        }
        var def;
        if (self2.operator === "=" && self2.left instanceof AST_SymbolRef && self2.left.name !== "arguments" && !(def = self2.left.definition()).undeclared && self2.right.equivalent_to(self2.left)) {
          return self2.right;
        }
        if (compressor.option("dead_code") && self2.left instanceof AST_SymbolRef && (def = self2.left.definition()).scope === compressor.find_parent(AST_Lambda)) {
          var level = 0, node, parent = self2;
          do {
            node = parent;
            parent = compressor.parent(level++);
            if (parent instanceof AST_Exit) {
              if (in_try(level, parent))
                break;
              if (is_reachable(def.scope, [def]))
                break;
              if (self2.operator == "=")
                return self2.right;
              def.fixed = false;
              return make_node(AST_Binary, self2, {
                operator: self2.operator.slice(0, -1),
                left: self2.left,
                right: self2.right
              }).optimize(compressor);
            }
          } while (parent instanceof AST_Binary && parent.right === node || parent instanceof AST_Sequence && parent.tail_node() === node);
        }
        self2 = self2.lift_sequences(compressor);
        if (self2.operator == "=" && self2.left instanceof AST_SymbolRef && self2.right instanceof AST_Binary) {
          if (self2.right.left instanceof AST_SymbolRef && self2.right.left.name == self2.left.name && ASSIGN_OPS.has(self2.right.operator)) {
            self2.operator = self2.right.operator + "=";
            self2.right = self2.right.right;
          } else if (self2.right.right instanceof AST_SymbolRef && self2.right.right.name == self2.left.name && ASSIGN_OPS_COMMUTATIVE.has(self2.right.operator) && !self2.right.left.has_side_effects(compressor)) {
            self2.operator = self2.right.operator + "=";
            self2.right = self2.right.left;
          }
        }
        return self2;
        function in_try(level2, node2) {
          function may_assignment_throw() {
            const right = self2.right;
            self2.right = make_node(AST_Null, right);
            const may_throw = node2.may_throw(compressor);
            self2.right = right;
            return may_throw;
          }
          var stop_at = self2.left.definition().scope.get_defun_scope();
          var parent2;
          while ((parent2 = compressor.parent(level2++)) !== stop_at) {
            if (parent2 instanceof AST_Try) {
              if (parent2.bfinally)
                return true;
              if (parent2.bcatch && may_assignment_throw())
                return true;
            }
          }
        }
      });
      def_optimize(AST_DefaultAssign, function(self2, compressor) {
        if (!compressor.option("evaluate")) {
          return self2;
        }
        var evaluateRight = self2.right.evaluate(compressor);
        let lambda, iife;
        if (evaluateRight === void 0) {
          if ((lambda = compressor.parent()) instanceof AST_Lambda ? compressor.option("keep_fargs") === false || (iife = compressor.parent(1)).TYPE === "Call" && iife.expression === lambda : true) {
            self2 = self2.left;
          }
        } else if (evaluateRight !== self2.right) {
          evaluateRight = make_node_from_constant(evaluateRight, self2.right);
          self2.right = best_of_expression(evaluateRight, self2.right);
        }
        return self2;
      });
      function is_nullish_check(check, check_subject, compressor) {
        if (check_subject.may_throw(compressor))
          return false;
        let nullish_side;
        if (check instanceof AST_Binary && check.operator === "==" && ((nullish_side = is_nullish(check.left, compressor) && check.left) || (nullish_side = is_nullish(check.right, compressor) && check.right)) && (nullish_side === check.left ? check.right : check.left).equivalent_to(check_subject)) {
          return true;
        }
        if (check instanceof AST_Binary && check.operator === "||") {
          let null_cmp;
          let undefined_cmp;
          const find_comparison = (cmp) => {
            if (!(cmp instanceof AST_Binary && (cmp.operator === "===" || cmp.operator === "=="))) {
              return false;
            }
            let found = 0;
            let defined_side;
            if (cmp.left instanceof AST_Null) {
              found++;
              null_cmp = cmp;
              defined_side = cmp.right;
            }
            if (cmp.right instanceof AST_Null) {
              found++;
              null_cmp = cmp;
              defined_side = cmp.left;
            }
            if (is_undefined(cmp.left, compressor)) {
              found++;
              undefined_cmp = cmp;
              defined_side = cmp.right;
            }
            if (is_undefined(cmp.right, compressor)) {
              found++;
              undefined_cmp = cmp;
              defined_side = cmp.left;
            }
            if (found !== 1) {
              return false;
            }
            if (!defined_side.equivalent_to(check_subject)) {
              return false;
            }
            return true;
          };
          if (!find_comparison(check.left))
            return false;
          if (!find_comparison(check.right))
            return false;
          if (null_cmp && undefined_cmp && null_cmp !== undefined_cmp) {
            return true;
          }
        }
        return false;
      }
      def_optimize(AST_Conditional, function(self2, compressor) {
        if (!compressor.option("conditionals"))
          return self2;
        if (self2.condition instanceof AST_Sequence) {
          var expressions = self2.condition.expressions.slice();
          self2.condition = expressions.pop();
          expressions.push(self2);
          return make_sequence(self2, expressions);
        }
        var cond = self2.condition.evaluate(compressor);
        if (cond !== self2.condition) {
          if (cond) {
            return maintain_this_binding(compressor.parent(), compressor.self(), self2.consequent);
          } else {
            return maintain_this_binding(compressor.parent(), compressor.self(), self2.alternative);
          }
        }
        var negated = cond.negate(compressor, first_in_statement(compressor));
        if (best_of(compressor, cond, negated) === negated) {
          self2 = make_node(AST_Conditional, self2, {
            condition: negated,
            consequent: self2.alternative,
            alternative: self2.consequent
          });
        }
        var condition = self2.condition;
        var consequent = self2.consequent;
        var alternative = self2.alternative;
        if (condition instanceof AST_SymbolRef && consequent instanceof AST_SymbolRef && condition.definition() === consequent.definition()) {
          return make_node(AST_Binary, self2, {
            operator: "||",
            left: condition,
            right: alternative
          });
        }
        if (consequent instanceof AST_Assign && alternative instanceof AST_Assign && consequent.operator === alternative.operator && consequent.logical === alternative.logical && consequent.left.equivalent_to(alternative.left) && (!self2.condition.has_side_effects(compressor) || consequent.operator == "=" && !consequent.left.has_side_effects(compressor))) {
          return make_node(AST_Assign, self2, {
            operator: consequent.operator,
            left: consequent.left,
            logical: consequent.logical,
            right: make_node(AST_Conditional, self2, {
              condition: self2.condition,
              consequent: consequent.right,
              alternative: alternative.right
            })
          });
        }
        var arg_index;
        if (consequent instanceof AST_Call && alternative.TYPE === consequent.TYPE && consequent.args.length > 0 && consequent.args.length == alternative.args.length && consequent.expression.equivalent_to(alternative.expression) && !self2.condition.has_side_effects(compressor) && !consequent.expression.has_side_effects(compressor) && typeof (arg_index = single_arg_diff()) == "number") {
          var node = consequent.clone();
          node.args[arg_index] = make_node(AST_Conditional, self2, {
            condition: self2.condition,
            consequent: consequent.args[arg_index],
            alternative: alternative.args[arg_index]
          });
          return node;
        }
        if (alternative instanceof AST_Conditional && consequent.equivalent_to(alternative.consequent)) {
          return make_node(AST_Conditional, self2, {
            condition: make_node(AST_Binary, self2, {
              operator: "||",
              left: condition,
              right: alternative.condition
            }),
            consequent,
            alternative: alternative.alternative
          }).optimize(compressor);
        }
        if (compressor.option("ecma") >= 2020 && is_nullish_check(condition, alternative, compressor)) {
          return make_node(AST_Binary, self2, {
            operator: "??",
            left: alternative,
            right: consequent
          }).optimize(compressor);
        }
        if (alternative instanceof AST_Sequence && consequent.equivalent_to(alternative.expressions[alternative.expressions.length - 1])) {
          return make_sequence(self2, [
            make_node(AST_Binary, self2, {
              operator: "||",
              left: condition,
              right: make_sequence(self2, alternative.expressions.slice(0, -1))
            }),
            consequent
          ]).optimize(compressor);
        }
        if (alternative instanceof AST_Binary && alternative.operator == "&&" && consequent.equivalent_to(alternative.right)) {
          return make_node(AST_Binary, self2, {
            operator: "&&",
            left: make_node(AST_Binary, self2, {
              operator: "||",
              left: condition,
              right: alternative.left
            }),
            right: consequent
          }).optimize(compressor);
        }
        if (consequent instanceof AST_Conditional && consequent.alternative.equivalent_to(alternative)) {
          return make_node(AST_Conditional, self2, {
            condition: make_node(AST_Binary, self2, {
              left: self2.condition,
              operator: "&&",
              right: consequent.condition
            }),
            consequent: consequent.consequent,
            alternative
          });
        }
        if (consequent.equivalent_to(alternative)) {
          return make_sequence(self2, [
            self2.condition,
            consequent
          ]).optimize(compressor);
        }
        if (consequent instanceof AST_Binary && consequent.operator == "||" && consequent.right.equivalent_to(alternative)) {
          return make_node(AST_Binary, self2, {
            operator: "||",
            left: make_node(AST_Binary, self2, {
              operator: "&&",
              left: self2.condition,
              right: consequent.left
            }),
            right: alternative
          }).optimize(compressor);
        }
        const in_bool = compressor.in_boolean_context();
        if (is_true(self2.consequent)) {
          if (is_false(self2.alternative)) {
            return booleanize(self2.condition);
          }
          return make_node(AST_Binary, self2, {
            operator: "||",
            left: booleanize(self2.condition),
            right: self2.alternative
          });
        }
        if (is_false(self2.consequent)) {
          if (is_true(self2.alternative)) {
            return booleanize(self2.condition.negate(compressor));
          }
          return make_node(AST_Binary, self2, {
            operator: "&&",
            left: booleanize(self2.condition.negate(compressor)),
            right: self2.alternative
          });
        }
        if (is_true(self2.alternative)) {
          return make_node(AST_Binary, self2, {
            operator: "||",
            left: booleanize(self2.condition.negate(compressor)),
            right: self2.consequent
          });
        }
        if (is_false(self2.alternative)) {
          return make_node(AST_Binary, self2, {
            operator: "&&",
            left: booleanize(self2.condition),
            right: self2.consequent
          });
        }
        return self2;
        function booleanize(node2) {
          if (node2.is_boolean())
            return node2;
          return make_node(AST_UnaryPrefix, node2, {
            operator: "!",
            expression: node2.negate(compressor)
          });
        }
        function is_true(node2) {
          return node2 instanceof AST_True || in_bool && node2 instanceof AST_Constant && node2.getValue() || node2 instanceof AST_UnaryPrefix && node2.operator == "!" && node2.expression instanceof AST_Constant && !node2.expression.getValue();
        }
        function is_false(node2) {
          return node2 instanceof AST_False || in_bool && node2 instanceof AST_Constant && !node2.getValue() || node2 instanceof AST_UnaryPrefix && node2.operator == "!" && node2.expression instanceof AST_Constant && node2.expression.getValue();
        }
        function single_arg_diff() {
          var a = consequent.args;
          var b = alternative.args;
          for (var i = 0, len = a.length; i < len; i++) {
            if (a[i] instanceof AST_Expansion)
              return;
            if (!a[i].equivalent_to(b[i])) {
              if (b[i] instanceof AST_Expansion)
                return;
              for (var j = i + 1; j < len; j++) {
                if (a[j] instanceof AST_Expansion)
                  return;
                if (!a[j].equivalent_to(b[j]))
                  return;
              }
              return i;
            }
          }
        }
      });
      def_optimize(AST_Boolean, function(self2, compressor) {
        if (compressor.in_boolean_context())
          return make_node(AST_Number, self2, {
            value: +self2.value
          });
        var p2 = compressor.parent();
        if (compressor.option("booleans_as_integers")) {
          if (p2 instanceof AST_Binary && (p2.operator == "===" || p2.operator == "!==")) {
            p2.operator = p2.operator.replace(/=$/, "");
          }
          return make_node(AST_Number, self2, {
            value: +self2.value
          });
        }
        if (compressor.option("booleans")) {
          if (p2 instanceof AST_Binary && (p2.operator == "==" || p2.operator == "!=")) {
            return make_node(AST_Number, self2, {
              value: +self2.value
            });
          }
          return make_node(AST_UnaryPrefix, self2, {
            operator: "!",
            expression: make_node(AST_Number, self2, {
              value: 1 - self2.value
            })
          });
        }
        return self2;
      });
      function safe_to_flatten(value, compressor) {
        if (value instanceof AST_SymbolRef) {
          value = value.fixed_value();
        }
        if (!value)
          return false;
        if (!(value instanceof AST_Lambda || value instanceof AST_Class))
          return true;
        if (!(value instanceof AST_Lambda && value.contains_this()))
          return true;
        return compressor.parent() instanceof AST_New;
      }
      AST_PropAccess.DEFMETHOD("flatten_object", function(key, compressor) {
        if (!compressor.option("properties"))
          return;
        if (key === "__proto__")
          return;
        var arrows = compressor.option("unsafe_arrows") && compressor.option("ecma") >= 2015;
        var expr = this.expression;
        if (expr instanceof AST_Object) {
          var props = expr.properties;
          for (var i = props.length; --i >= 0; ) {
            var prop = props[i];
            if ("" + (prop instanceof AST_ConciseMethod ? prop.key.name : prop.key) == key) {
              const all_props_flattenable = props.every(
                (p2) => (p2 instanceof AST_ObjectKeyVal || arrows && p2 instanceof AST_ConciseMethod && !p2.is_generator) && !p2.computed_key()
              );
              if (!all_props_flattenable)
                return;
              if (!safe_to_flatten(prop.value, compressor))
                return;
              return make_node(AST_Sub, this, {
                expression: make_node(AST_Array, expr, {
                  elements: props.map(function(prop2) {
                    var v = prop2.value;
                    if (v instanceof AST_Accessor) {
                      v = make_node(AST_Function, v, v);
                    }
                    var k = prop2.key;
                    if (k instanceof AST_Node && !(k instanceof AST_SymbolMethod)) {
                      return make_sequence(prop2, [k, v]);
                    }
                    return v;
                  })
                }),
                property: make_node(AST_Number, this, {
                  value: i
                })
              });
            }
          }
        }
      });
      def_optimize(AST_Sub, function(self2, compressor) {
        var expr = self2.expression;
        var prop = self2.property;
        if (compressor.option("properties")) {
          var key = prop.evaluate(compressor);
          if (key !== prop) {
            if (typeof key == "string") {
              if (key == "undefined") {
                key = void 0;
              } else {
                var value = parseFloat(key);
                if (value.toString() == key) {
                  key = value;
                }
              }
            }
            prop = self2.property = best_of_expression(
              prop,
              make_node_from_constant(key, prop).transform(compressor)
            );
            var property = "" + key;
            if (is_basic_identifier_string(property) && property.length <= prop.size() + 1) {
              return make_node(AST_Dot, self2, {
                expression: expr,
                optional: self2.optional,
                property,
                quote: prop.quote
              }).optimize(compressor);
            }
          }
        }
        var fn;
        OPT_ARGUMENTS:
          if (compressor.option("arguments") && expr instanceof AST_SymbolRef && expr.name == "arguments" && expr.definition().orig.length == 1 && (fn = expr.scope) instanceof AST_Lambda && fn.uses_arguments && !(fn instanceof AST_Arrow) && prop instanceof AST_Number) {
            var index = prop.getValue();
            var params = /* @__PURE__ */ new Set();
            var argnames = fn.argnames;
            for (var n2 = 0; n2 < argnames.length; n2++) {
              if (!(argnames[n2] instanceof AST_SymbolFunarg)) {
                break OPT_ARGUMENTS;
              }
              var param = argnames[n2].name;
              if (params.has(param)) {
                break OPT_ARGUMENTS;
              }
              params.add(param);
            }
            var argname = fn.argnames[index];
            if (argname && compressor.has_directive("use strict")) {
              var def = argname.definition();
              if (!compressor.option("reduce_vars") || def.assignments || def.orig.length > 1) {
                argname = null;
              }
            } else if (!argname && !compressor.option("keep_fargs") && index < fn.argnames.length + 5) {
              while (index >= fn.argnames.length) {
                argname = fn.create_symbol(AST_SymbolFunarg, {
                  source: fn,
                  scope: fn,
                  tentative_name: "argument_" + fn.argnames.length
                });
                fn.argnames.push(argname);
              }
            }
            if (argname) {
              var sym = make_node(AST_SymbolRef, self2, argname);
              sym.reference({});
              clear_flag(argname, UNUSED);
              return sym;
            }
          }
        if (compressor.is_lhs())
          return self2;
        if (key !== prop) {
          var sub = self2.flatten_object(property, compressor);
          if (sub) {
            expr = self2.expression = sub.expression;
            prop = self2.property = sub.property;
          }
        }
        if (compressor.option("properties") && compressor.option("side_effects") && prop instanceof AST_Number && expr instanceof AST_Array) {
          var index = prop.getValue();
          var elements = expr.elements;
          var retValue = elements[index];
          FLATTEN:
            if (safe_to_flatten(retValue, compressor)) {
              var flatten = true;
              var values = [];
              for (var i = elements.length; --i > index; ) {
                var value = elements[i].drop_side_effect_free(compressor);
                if (value) {
                  values.unshift(value);
                  if (flatten && value.has_side_effects(compressor))
                    flatten = false;
                }
              }
              if (retValue instanceof AST_Expansion)
                break FLATTEN;
              retValue = retValue instanceof AST_Hole ? make_node(AST_Undefined, retValue) : retValue;
              if (!flatten)
                values.unshift(retValue);
              while (--i >= 0) {
                var value = elements[i];
                if (value instanceof AST_Expansion)
                  break FLATTEN;
                value = value.drop_side_effect_free(compressor);
                if (value)
                  values.unshift(value);
                else
                  index--;
              }
              if (flatten) {
                values.push(retValue);
                return make_sequence(self2, values).optimize(compressor);
              } else
                return make_node(AST_Sub, self2, {
                  expression: make_node(AST_Array, expr, {
                    elements: values
                  }),
                  property: make_node(AST_Number, prop, {
                    value: index
                  })
                });
            }
        }
        var ev = self2.evaluate(compressor);
        if (ev !== self2) {
          ev = make_node_from_constant(ev, self2).optimize(compressor);
          return best_of(compressor, ev, self2);
        }
        return self2;
      });
      def_optimize(AST_Chain, function(self2, compressor) {
        if (is_nullish(self2.expression, compressor)) {
          let parent = compressor.parent();
          if (parent instanceof AST_UnaryPrefix && parent.operator === "delete") {
            return make_node_from_constant(0, self2);
          }
          return make_node(AST_Undefined, self2);
        }
        return self2;
      });
      def_optimize(AST_Dot, function(self2, compressor) {
        const parent = compressor.parent();
        if (compressor.is_lhs())
          return self2;
        if (compressor.option("unsafe_proto") && self2.expression instanceof AST_Dot && self2.expression.property == "prototype") {
          var exp = self2.expression.expression;
          if (is_undeclared_ref(exp))
            switch (exp.name) {
              case "Array":
                self2.expression = make_node(AST_Array, self2.expression, {
                  elements: []
                });
                break;
              case "Function":
                self2.expression = make_node(AST_Function, self2.expression, {
                  argnames: [],
                  body: []
                });
                break;
              case "Number":
                self2.expression = make_node(AST_Number, self2.expression, {
                  value: 0
                });
                break;
              case "Object":
                self2.expression = make_node(AST_Object, self2.expression, {
                  properties: []
                });
                break;
              case "RegExp":
                self2.expression = make_node(AST_RegExp, self2.expression, {
                  value: { source: "t", flags: "" }
                });
                break;
              case "String":
                self2.expression = make_node(AST_String, self2.expression, {
                  value: ""
                });
                break;
            }
        }
        if (!(parent instanceof AST_Call) || !has_annotation(parent, _NOINLINE)) {
          const sub = self2.flatten_object(self2.property, compressor);
          if (sub)
            return sub.optimize(compressor);
        }
        if (self2.expression instanceof AST_PropAccess && parent instanceof AST_PropAccess) {
          return self2;
        }
        let ev = self2.evaluate(compressor);
        if (ev !== self2) {
          ev = make_node_from_constant(ev, self2).optimize(compressor);
          return best_of(compressor, ev, self2);
        }
        return self2;
      });
      function literals_in_boolean_context(self2, compressor) {
        if (compressor.in_boolean_context()) {
          return best_of(compressor, self2, make_sequence(self2, [
            self2,
            make_node(AST_True, self2)
          ]).optimize(compressor));
        }
        return self2;
      }
      function inline_array_like_spread(elements) {
        for (var i = 0; i < elements.length; i++) {
          var el = elements[i];
          if (el instanceof AST_Expansion) {
            var expr = el.expression;
            if (expr instanceof AST_Array && !expr.elements.some((elm) => elm instanceof AST_Hole)) {
              elements.splice(i, 1, ...expr.elements);
              i--;
            }
          }
        }
      }
      def_optimize(AST_Array, function(self2, compressor) {
        var optimized = literals_in_boolean_context(self2, compressor);
        if (optimized !== self2) {
          return optimized;
        }
        inline_array_like_spread(self2.elements);
        return self2;
      });
      function inline_object_prop_spread(props, compressor) {
        for (var i = 0; i < props.length; i++) {
          var prop = props[i];
          if (prop instanceof AST_Expansion) {
            const expr = prop.expression;
            if (expr instanceof AST_Object && expr.properties.every((prop2) => prop2 instanceof AST_ObjectKeyVal)) {
              props.splice(i, 1, ...expr.properties);
              i--;
            } else if (expr instanceof AST_Constant && !(expr instanceof AST_String)) {
              props.splice(i, 1);
              i--;
            } else if (is_nullish(expr, compressor)) {
              props.splice(i, 1);
              i--;
            }
          }
        }
      }
      def_optimize(AST_Object, function(self2, compressor) {
        var optimized = literals_in_boolean_context(self2, compressor);
        if (optimized !== self2) {
          return optimized;
        }
        inline_object_prop_spread(self2.properties, compressor);
        return self2;
      });
      def_optimize(AST_RegExp, literals_in_boolean_context);
      def_optimize(AST_Return, function(self2, compressor) {
        if (self2.value && is_undefined(self2.value, compressor)) {
          self2.value = null;
        }
        return self2;
      });
      def_optimize(AST_Arrow, opt_AST_Lambda);
      def_optimize(AST_Function, function(self2, compressor) {
        self2 = opt_AST_Lambda(self2, compressor);
        if (compressor.option("unsafe_arrows") && compressor.option("ecma") >= 2015 && !self2.name && !self2.is_generator && !self2.uses_arguments && !self2.pinned()) {
          const uses_this = walk(self2, (node) => {
            if (node instanceof AST_This)
              return walk_abort;
          });
          if (!uses_this)
            return make_node(AST_Arrow, self2, self2).optimize(compressor);
        }
        return self2;
      });
      def_optimize(AST_Class, function(self2) {
        for (let i = 0; i < self2.properties.length; i++) {
          const prop = self2.properties[i];
          if (prop instanceof AST_ClassStaticBlock && prop.body.length == 0) {
            self2.properties.splice(i, 1);
            i--;
          }
        }
        return self2;
      });
      def_optimize(AST_ClassStaticBlock, function(self2, compressor) {
        tighten_body(self2.body, compressor);
        return self2;
      });
      def_optimize(AST_Yield, function(self2, compressor) {
        if (self2.expression && !self2.is_star && is_undefined(self2.expression, compressor)) {
          self2.expression = null;
        }
        return self2;
      });
      def_optimize(AST_TemplateString, function(self2, compressor) {
        if (!compressor.option("evaluate") || compressor.parent() instanceof AST_PrefixedTemplateString) {
          return self2;
        }
        var segments = [];
        for (var i = 0; i < self2.segments.length; i++) {
          var segment = self2.segments[i];
          if (segment instanceof AST_Node) {
            var result = segment.evaluate(compressor);
            if (result !== segment && (result + "").length <= segment.size() + "${}".length) {
              segments[segments.length - 1].value = segments[segments.length - 1].value + result + self2.segments[++i].value;
              continue;
            }
            if (segment instanceof AST_TemplateString) {
              var inners = segment.segments;
              segments[segments.length - 1].value += inners[0].value;
              for (var j = 1; j < inners.length; j++) {
                segment = inners[j];
                segments.push(segment);
              }
              continue;
            }
          }
          segments.push(segment);
        }
        self2.segments = segments;
        if (segments.length == 1) {
          return make_node(AST_String, self2, segments[0]);
        }
        if (segments.length === 3 && segments[1] instanceof AST_Node && (segments[1].is_string(compressor) || segments[1].is_number(compressor) || is_nullish(segments[1], compressor) || compressor.option("unsafe"))) {
          if (segments[2].value === "") {
            return make_node(AST_Binary, self2, {
              operator: "+",
              left: make_node(AST_String, self2, {
                value: segments[0].value
              }),
              right: segments[1]
            });
          }
          if (segments[0].value === "") {
            return make_node(AST_Binary, self2, {
              operator: "+",
              left: segments[1],
              right: make_node(AST_String, self2, {
                value: segments[2].value
              })
            });
          }
        }
        return self2;
      });
      def_optimize(AST_PrefixedTemplateString, function(self2) {
        return self2;
      });
      function lift_key(self2, compressor) {
        if (!compressor.option("computed_props"))
          return self2;
        if (!(self2.key instanceof AST_Constant))
          return self2;
        if (self2.key instanceof AST_String || self2.key instanceof AST_Number) {
          if (self2.key.value === "__proto__")
            return self2;
          if (self2.key.value == "constructor" && compressor.parent() instanceof AST_Class)
            return self2;
          if (self2 instanceof AST_ObjectKeyVal) {
            self2.quote = self2.key.quote;
            self2.key = self2.key.value;
          } else if (self2 instanceof AST_ClassProperty) {
            self2.quote = self2.key.quote;
            self2.key = make_node(AST_SymbolClassProperty, self2.key, {
              name: self2.key.value
            });
          } else {
            self2.quote = self2.key.quote;
            self2.key = make_node(AST_SymbolMethod, self2.key, {
              name: self2.key.value
            });
          }
        }
        return self2;
      }
      def_optimize(AST_ObjectProperty, lift_key);
      def_optimize(AST_ConciseMethod, function(self2, compressor) {
        lift_key(self2, compressor);
        if (compressor.option("arrows") && compressor.parent() instanceof AST_Object && !self2.is_generator && !self2.value.uses_arguments && !self2.value.pinned() && self2.value.body.length == 1 && self2.value.body[0] instanceof AST_Return && self2.value.body[0].value && !self2.value.contains_this()) {
          var arrow = make_node(AST_Arrow, self2.value, self2.value);
          arrow.async = self2.async;
          arrow.is_generator = self2.is_generator;
          return make_node(AST_ObjectKeyVal, self2, {
            key: self2.key instanceof AST_SymbolMethod ? self2.key.name : self2.key,
            value: arrow,
            quote: self2.quote
          });
        }
        return self2;
      });
      def_optimize(AST_ObjectKeyVal, function(self2, compressor) {
        lift_key(self2, compressor);
        var unsafe_methods = compressor.option("unsafe_methods");
        if (unsafe_methods && compressor.option("ecma") >= 2015 && (!(unsafe_methods instanceof RegExp) || unsafe_methods.test(self2.key + ""))) {
          var key = self2.key;
          var value = self2.value;
          var is_arrow_with_block = value instanceof AST_Arrow && Array.isArray(value.body) && !value.contains_this();
          if ((is_arrow_with_block || value instanceof AST_Function) && !value.name) {
            return make_node(AST_ConciseMethod, self2, {
              async: value.async,
              is_generator: value.is_generator,
              key: key instanceof AST_Node ? key : make_node(AST_SymbolMethod, self2, {
                name: key
              }),
              value: make_node(AST_Accessor, value, value),
              quote: self2.quote
            });
          }
        }
        return self2;
      });
      def_optimize(AST_Destructuring, function(self2, compressor) {
        if (compressor.option("pure_getters") == true && compressor.option("unused") && !self2.is_array && Array.isArray(self2.names) && !is_destructuring_export_decl(compressor) && !(self2.names[self2.names.length - 1] instanceof AST_Expansion)) {
          var keep = [];
          for (var i = 0; i < self2.names.length; i++) {
            var elem = self2.names[i];
            if (!(elem instanceof AST_ObjectKeyVal && typeof elem.key == "string" && elem.value instanceof AST_SymbolDeclaration && !should_retain(compressor, elem.value.definition()))) {
              keep.push(elem);
            }
          }
          if (keep.length != self2.names.length) {
            self2.names = keep;
          }
        }
        return self2;
        function is_destructuring_export_decl(compressor2) {
          var ancestors = [/^VarDef$/, /^(Const|Let|Var)$/, /^Export$/];
          for (var a = 0, p2 = 0, len = ancestors.length; a < len; p2++) {
            var parent = compressor2.parent(p2);
            if (!parent)
              return false;
            if (a === 0 && parent.TYPE == "Destructuring")
              continue;
            if (!ancestors[a].test(parent.TYPE)) {
              return false;
            }
            a++;
          }
          return true;
        }
        function should_retain(compressor2, def) {
          if (def.references.length)
            return true;
          if (!def.global)
            return false;
          if (compressor2.toplevel.vars) {
            if (compressor2.top_retain) {
              return compressor2.top_retain(def);
            }
            return false;
          }
          return true;
        }
      });
      function* SourceMap(options) {
        options = defaults(options, {
          file: null,
          root: null,
          orig: null,
          files: {}
        });
        var orig_map;
        var generator = new sourceMap.SourceMapGenerator({
          file: options.file,
          sourceRoot: options.root
        });
        let sourcesContent = { __proto__: null };
        let files = options.files;
        for (var name in files)
          if (HOP(files, name)) {
            sourcesContent[name] = files[name];
          }
        if (options.orig) {
          orig_map = yield new sourceMap.SourceMapConsumer(options.orig);
          if (orig_map.sourcesContent) {
            orig_map.sources.forEach(function(source, i) {
              var content = orig_map.sourcesContent[i];
              if (content) {
                sourcesContent[source] = content;
              }
            });
          }
        }
        function add(source, gen_line, gen_col, orig_line, orig_col, name2) {
          let generatedPos = { line: gen_line, column: gen_col };
          if (orig_map) {
            var info = orig_map.originalPositionFor({
              line: orig_line,
              column: orig_col
            });
            if (info.source === null) {
              generator.addMapping({
                generated: generatedPos,
                original: null,
                source: null,
                name: null
              });
              return;
            }
            source = info.source;
            orig_line = info.line;
            orig_col = info.column;
            name2 = info.name || name2;
          }
          generator.addMapping({
            generated: generatedPos,
            original: { line: orig_line, column: orig_col },
            source,
            name: name2
          });
          generator.setSourceContent(source, sourcesContent[source]);
        }
        function clean(map) {
          const allNull = map.sourcesContent && map.sourcesContent.every((c2) => c2 == null);
          if (allNull)
            delete map.sourcesContent;
          if (map.file === void 0)
            delete map.file;
          if (map.sourceRoot === void 0)
            delete map.sourceRoot;
          return map;
        }
        function getDecoded() {
          if (!generator.toDecodedMap)
            return null;
          return clean(generator.toDecodedMap());
        }
        function getEncoded() {
          return clean(generator.toJSON());
        }
        function destroy() {
          if (orig_map && orig_map.destroy)
            orig_map.destroy();
        }
        return {
          add,
          getDecoded,
          getEncoded,
          destroy
        };
      }
      var domprops = [
        "$&",
        "$'",
        "$*",
        "$+",
        "$1",
        "$2",
        "$3",
        "$4",
        "$5",
        "$6",
        "$7",
        "$8",
        "$9",
        "$_",
        "$`",
        "$input",
        "-moz-animation",
        "-moz-animation-delay",
        "-moz-animation-direction",
        "-moz-animation-duration",
        "-moz-animation-fill-mode",
        "-moz-animation-iteration-count",
        "-moz-animation-name",
        "-moz-animation-play-state",
        "-moz-animation-timing-function",
        "-moz-appearance",
        "-moz-backface-visibility",
        "-moz-border-end",
        "-moz-border-end-color",
        "-moz-border-end-style",
        "-moz-border-end-width",
        "-moz-border-image",
        "-moz-border-start",
        "-moz-border-start-color",
        "-moz-border-start-style",
        "-moz-border-start-width",
        "-moz-box-align",
        "-moz-box-direction",
        "-moz-box-flex",
        "-moz-box-ordinal-group",
        "-moz-box-orient",
        "-moz-box-pack",
        "-moz-box-sizing",
        "-moz-float-edge",
        "-moz-font-feature-settings",
        "-moz-font-language-override",
        "-moz-force-broken-image-icon",
        "-moz-hyphens",
        "-moz-image-region",
        "-moz-margin-end",
        "-moz-margin-start",
        "-moz-orient",
        "-moz-osx-font-smoothing",
        "-moz-outline-radius",
        "-moz-outline-radius-bottomleft",
        "-moz-outline-radius-bottomright",
        "-moz-outline-radius-topleft",
        "-moz-outline-radius-topright",
        "-moz-padding-end",
        "-moz-padding-start",
        "-moz-perspective",
        "-moz-perspective-origin",
        "-moz-tab-size",
        "-moz-text-size-adjust",
        "-moz-transform",
        "-moz-transform-origin",
        "-moz-transform-style",
        "-moz-transition",
        "-moz-transition-delay",
        "-moz-transition-duration",
        "-moz-transition-property",
        "-moz-transition-timing-function",
        "-moz-user-focus",
        "-moz-user-input",
        "-moz-user-modify",
        "-moz-user-select",
        "-moz-window-dragging",
        "-webkit-align-content",
        "-webkit-align-items",
        "-webkit-align-self",
        "-webkit-animation",
        "-webkit-animation-delay",
        "-webkit-animation-direction",
        "-webkit-animation-duration",
        "-webkit-animation-fill-mode",
        "-webkit-animation-iteration-count",
        "-webkit-animation-name",
        "-webkit-animation-play-state",
        "-webkit-animation-timing-function",
        "-webkit-appearance",
        "-webkit-backface-visibility",
        "-webkit-background-clip",
        "-webkit-background-origin",
        "-webkit-background-size",
        "-webkit-border-bottom-left-radius",
        "-webkit-border-bottom-right-radius",
        "-webkit-border-image",
        "-webkit-border-radius",
        "-webkit-border-top-left-radius",
        "-webkit-border-top-right-radius",
        "-webkit-box-align",
        "-webkit-box-direction",
        "-webkit-box-flex",
        "-webkit-box-ordinal-group",
        "-webkit-box-orient",
        "-webkit-box-pack",
        "-webkit-box-shadow",
        "-webkit-box-sizing",
        "-webkit-filter",
        "-webkit-flex",
        "-webkit-flex-basis",
        "-webkit-flex-direction",
        "-webkit-flex-flow",
        "-webkit-flex-grow",
        "-webkit-flex-shrink",
        "-webkit-flex-wrap",
        "-webkit-justify-content",
        "-webkit-line-clamp",
        "-webkit-mask",
        "-webkit-mask-clip",
        "-webkit-mask-composite",
        "-webkit-mask-image",
        "-webkit-mask-origin",
        "-webkit-mask-position",
        "-webkit-mask-position-x",
        "-webkit-mask-position-y",
        "-webkit-mask-repeat",
        "-webkit-mask-size",
        "-webkit-order",
        "-webkit-perspective",
        "-webkit-perspective-origin",
        "-webkit-text-fill-color",
        "-webkit-text-size-adjust",
        "-webkit-text-stroke",
        "-webkit-text-stroke-color",
        "-webkit-text-stroke-width",
        "-webkit-transform",
        "-webkit-transform-origin",
        "-webkit-transform-style",
        "-webkit-transition",
        "-webkit-transition-delay",
        "-webkit-transition-duration",
        "-webkit-transition-property",
        "-webkit-transition-timing-function",
        "-webkit-user-select",
        "0",
        "1",
        "10",
        "11",
        "12",
        "13",
        "14",
        "15",
        "16",
        "17",
        "18",
        "19",
        "2",
        "20",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "@@iterator",
        "ABORT_ERR",
        "ACTIVE",
        "ACTIVE_ATTRIBUTES",
        "ACTIVE_TEXTURE",
        "ACTIVE_UNIFORMS",
        "ACTIVE_UNIFORM_BLOCKS",
        "ADDITION",
        "ALIASED_LINE_WIDTH_RANGE",
        "ALIASED_POINT_SIZE_RANGE",
        "ALL",
        "ALLOW_KEYBOARD_INPUT",
        "ALLPASS",
        "ALPHA",
        "ALPHA_BITS",
        "ALREADY_SIGNALED",
        "ALT_MASK",
        "ALWAYS",
        "ANY_SAMPLES_PASSED",
        "ANY_SAMPLES_PASSED_CONSERVATIVE",
        "ANY_TYPE",
        "ANY_UNORDERED_NODE_TYPE",
        "ARRAY_BUFFER",
        "ARRAY_BUFFER_BINDING",
        "ATTACHED_SHADERS",
        "ATTRIBUTE_NODE",
        "AT_TARGET",
        "AbortController",
        "AbortSignal",
        "AbsoluteOrientationSensor",
        "AbstractRange",
        "Accelerometer",
        "AddSearchProvider",
        "AggregateError",
        "AnalyserNode",
        "Animation",
        "AnimationEffect",
        "AnimationEvent",
        "AnimationPlaybackEvent",
        "AnimationTimeline",
        "AnonXMLHttpRequest",
        "Any",
        "ApplicationCache",
        "ApplicationCacheErrorEvent",
        "Array",
        "ArrayBuffer",
        "ArrayType",
        "Atomics",
        "Attr",
        "Audio",
        "AudioBuffer",
        "AudioBufferSourceNode",
        "AudioContext",
        "AudioDestinationNode",
        "AudioListener",
        "AudioNode",
        "AudioParam",
        "AudioParamMap",
        "AudioProcessingEvent",
        "AudioScheduledSourceNode",
        "AudioStreamTrack",
        "AudioWorklet",
        "AudioWorkletNode",
        "AuthenticatorAssertionResponse",
        "AuthenticatorAttestationResponse",
        "AuthenticatorResponse",
        "AutocompleteErrorEvent",
        "BACK",
        "BAD_BOUNDARYPOINTS_ERR",
        "BAD_REQUEST",
        "BANDPASS",
        "BLEND",
        "BLEND_COLOR",
        "BLEND_DST_ALPHA",
        "BLEND_DST_RGB",
        "BLEND_EQUATION",
        "BLEND_EQUATION_ALPHA",
        "BLEND_EQUATION_RGB",
        "BLEND_SRC_ALPHA",
        "BLEND_SRC_RGB",
        "BLUE",
        "BLUE_BITS",
        "BLUR",
        "BOOL",
        "BOOLEAN_TYPE",
        "BOOL_VEC2",
        "BOOL_VEC3",
        "BOOL_VEC4",
        "BOTH",
        "BROWSER_DEFAULT_WEBGL",
        "BUBBLING_PHASE",
        "BUFFER_SIZE",
        "BUFFER_USAGE",
        "BYTE",
        "BYTES_PER_ELEMENT",
        "BackgroundFetchManager",
        "BackgroundFetchRecord",
        "BackgroundFetchRegistration",
        "BarProp",
        "BarcodeDetector",
        "BaseAudioContext",
        "BaseHref",
        "BatteryManager",
        "BeforeInstallPromptEvent",
        "BeforeLoadEvent",
        "BeforeUnloadEvent",
        "BigInt",
        "BigInt64Array",
        "BigUint64Array",
        "BiquadFilterNode",
        "Blob",
        "BlobEvent",
        "Bluetooth",
        "BluetoothCharacteristicProperties",
        "BluetoothDevice",
        "BluetoothRemoteGATTCharacteristic",
        "BluetoothRemoteGATTDescriptor",
        "BluetoothRemoteGATTServer",
        "BluetoothRemoteGATTService",
        "BluetoothUUID",
        "Boolean",
        "BroadcastChannel",
        "ByteLengthQueuingStrategy",
        "CAPTURING_PHASE",
        "CCW",
        "CDATASection",
        "CDATA_SECTION_NODE",
        "CHANGE",
        "CHARSET_RULE",
        "CHECKING",
        "CLAMP_TO_EDGE",
        "CLICK",
        "CLOSED",
        "CLOSING",
        "COLOR",
        "COLOR_ATTACHMENT0",
        "COLOR_ATTACHMENT1",
        "COLOR_ATTACHMENT10",
        "COLOR_ATTACHMENT11",
        "COLOR_ATTACHMENT12",
        "COLOR_ATTACHMENT13",
        "COLOR_ATTACHMENT14",
        "COLOR_ATTACHMENT15",
        "COLOR_ATTACHMENT2",
        "COLOR_ATTACHMENT3",
        "COLOR_ATTACHMENT4",
        "COLOR_ATTACHMENT5",
        "COLOR_ATTACHMENT6",
        "COLOR_ATTACHMENT7",
        "COLOR_ATTACHMENT8",
        "COLOR_ATTACHMENT9",
        "COLOR_BUFFER_BIT",
        "COLOR_CLEAR_VALUE",
        "COLOR_WRITEMASK",
        "COMMENT_NODE",
        "COMPARE_REF_TO_TEXTURE",
        "COMPILE_STATUS",
        "COMPLETION_STATUS_KHR",
        "COMPRESSED_RGBA_S3TC_DXT1_EXT",
        "COMPRESSED_RGBA_S3TC_DXT3_EXT",
        "COMPRESSED_RGBA_S3TC_DXT5_EXT",
        "COMPRESSED_RGB_S3TC_DXT1_EXT",
        "COMPRESSED_TEXTURE_FORMATS",
        "COMPUTE",
        "CONDITION_SATISFIED",
        "CONFIGURATION_UNSUPPORTED",
        "CONNECTING",
        "CONSTANT_ALPHA",
        "CONSTANT_COLOR",
        "CONSTRAINT_ERR",
        "CONTEXT_LOST_WEBGL",
        "CONTROL_MASK",
        "COPY_DST",
        "COPY_READ_BUFFER",
        "COPY_READ_BUFFER_BINDING",
        "COPY_SRC",
        "COPY_WRITE_BUFFER",
        "COPY_WRITE_BUFFER_BINDING",
        "COUNTER_STYLE_RULE",
        "CSS",
        "CSS2Properties",
        "CSSAnimation",
        "CSSCharsetRule",
        "CSSConditionRule",
        "CSSCounterStyleRule",
        "CSSFontFaceRule",
        "CSSFontFeatureValuesRule",
        "CSSGroupingRule",
        "CSSImageValue",
        "CSSImportRule",
        "CSSKeyframeRule",
        "CSSKeyframesRule",
        "CSSKeywordValue",
        "CSSMathInvert",
        "CSSMathMax",
        "CSSMathMin",
        "CSSMathNegate",
        "CSSMathProduct",
        "CSSMathSum",
        "CSSMathValue",
        "CSSMatrixComponent",
        "CSSMediaRule",
        "CSSMozDocumentRule",
        "CSSNameSpaceRule",
        "CSSNamespaceRule",
        "CSSNumericArray",
        "CSSNumericValue",
        "CSSPageRule",
        "CSSPerspective",
        "CSSPositionValue",
        "CSSPrimitiveValue",
        "CSSRotate",
        "CSSRule",
        "CSSRuleList",
        "CSSScale",
        "CSSSkew",
        "CSSSkewX",
        "CSSSkewY",
        "CSSStyleDeclaration",
        "CSSStyleRule",
        "CSSStyleSheet",
        "CSSStyleValue",
        "CSSSupportsRule",
        "CSSTransformComponent",
        "CSSTransformValue",
        "CSSTransition",
        "CSSTranslate",
        "CSSUnitValue",
        "CSSUnknownRule",
        "CSSUnparsedValue",
        "CSSValue",
        "CSSValueList",
        "CSSVariableReferenceValue",
        "CSSVariablesDeclaration",
        "CSSVariablesRule",
        "CSSViewportRule",
        "CSS_ATTR",
        "CSS_CM",
        "CSS_COUNTER",
        "CSS_CUSTOM",
        "CSS_DEG",
        "CSS_DIMENSION",
        "CSS_EMS",
        "CSS_EXS",
        "CSS_FILTER_BLUR",
        "CSS_FILTER_BRIGHTNESS",
        "CSS_FILTER_CONTRAST",
        "CSS_FILTER_CUSTOM",
        "CSS_FILTER_DROP_SHADOW",
        "CSS_FILTER_GRAYSCALE",
        "CSS_FILTER_HUE_ROTATE",
        "CSS_FILTER_INVERT",
        "CSS_FILTER_OPACITY",
        "CSS_FILTER_REFERENCE",
        "CSS_FILTER_SATURATE",
        "CSS_FILTER_SEPIA",
        "CSS_GRAD",
        "CSS_HZ",
        "CSS_IDENT",
        "CSS_IN",
        "CSS_INHERIT",
        "CSS_KHZ",
        "CSS_MATRIX",
        "CSS_MATRIX3D",
        "CSS_MM",
        "CSS_MS",
        "CSS_NUMBER",
        "CSS_PC",
        "CSS_PERCENTAGE",
        "CSS_PERSPECTIVE",
        "CSS_PRIMITIVE_VALUE",
        "CSS_PT",
        "CSS_PX",
        "CSS_RAD",
        "CSS_RECT",
        "CSS_RGBCOLOR",
        "CSS_ROTATE",
        "CSS_ROTATE3D",
        "CSS_ROTATEX",
        "CSS_ROTATEY",
        "CSS_ROTATEZ",
        "CSS_S",
        "CSS_SCALE",
        "CSS_SCALE3D",
        "CSS_SCALEX",
        "CSS_SCALEY",
        "CSS_SCALEZ",
        "CSS_SKEW",
        "CSS_SKEWX",
        "CSS_SKEWY",
        "CSS_STRING",
        "CSS_TRANSLATE",
        "CSS_TRANSLATE3D",
        "CSS_TRANSLATEX",
        "CSS_TRANSLATEY",
        "CSS_TRANSLATEZ",
        "CSS_UNKNOWN",
        "CSS_URI",
        "CSS_VALUE_LIST",
        "CSS_VH",
        "CSS_VMAX",
        "CSS_VMIN",
        "CSS_VW",
        "CULL_FACE",
        "CULL_FACE_MODE",
        "CURRENT_PROGRAM",
        "CURRENT_QUERY",
        "CURRENT_VERTEX_ATTRIB",
        "CUSTOM",
        "CW",
        "Cache",
        "CacheStorage",
        "CanvasCaptureMediaStream",
        "CanvasCaptureMediaStreamTrack",
        "CanvasGradient",
        "CanvasPattern",
        "CanvasRenderingContext2D",
        "CaretPosition",
        "ChannelMergerNode",
        "ChannelSplitterNode",
        "CharacterData",
        "ClientRect",
        "ClientRectList",
        "Clipboard",
        "ClipboardEvent",
        "ClipboardItem",
        "CloseEvent",
        "Collator",
        "CommandEvent",
        "Comment",
        "CompileError",
        "CompositionEvent",
        "CompressionStream",
        "Console",
        "ConstantSourceNode",
        "Controllers",
        "ConvolverNode",
        "CountQueuingStrategy",
        "Counter",
        "Credential",
        "CredentialsContainer",
        "Crypto",
        "CryptoKey",
        "CustomElementRegistry",
        "CustomEvent",
        "DATABASE_ERR",
        "DATA_CLONE_ERR",
        "DATA_ERR",
        "DBLCLICK",
        "DECR",
        "DECR_WRAP",
        "DELETE_STATUS",
        "DEPTH",
        "DEPTH24_STENCIL8",
        "DEPTH32F_STENCIL8",
        "DEPTH_ATTACHMENT",
        "DEPTH_BITS",
        "DEPTH_BUFFER_BIT",
        "DEPTH_CLEAR_VALUE",
        "DEPTH_COMPONENT",
        "DEPTH_COMPONENT16",
        "DEPTH_COMPONENT24",
        "DEPTH_COMPONENT32F",
        "DEPTH_FUNC",
        "DEPTH_RANGE",
        "DEPTH_STENCIL",
        "DEPTH_STENCIL_ATTACHMENT",
        "DEPTH_TEST",
        "DEPTH_WRITEMASK",
        "DEVICE_INELIGIBLE",
        "DIRECTION_DOWN",
        "DIRECTION_LEFT",
        "DIRECTION_RIGHT",
        "DIRECTION_UP",
        "DISABLED",
        "DISPATCH_REQUEST_ERR",
        "DITHER",
        "DOCUMENT_FRAGMENT_NODE",
        "DOCUMENT_NODE",
        "DOCUMENT_POSITION_CONTAINED_BY",
        "DOCUMENT_POSITION_CONTAINS",
        "DOCUMENT_POSITION_DISCONNECTED",
        "DOCUMENT_POSITION_FOLLOWING",
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
        "DOCUMENT_POSITION_PRECEDING",
        "DOCUMENT_TYPE_NODE",
        "DOMCursor",
        "DOMError",
        "DOMException",
        "DOMImplementation",
        "DOMImplementationLS",
        "DOMMatrix",
        "DOMMatrixReadOnly",
        "DOMParser",
        "DOMPoint",
        "DOMPointReadOnly",
        "DOMQuad",
        "DOMRect",
        "DOMRectList",
        "DOMRectReadOnly",
        "DOMRequest",
        "DOMSTRING_SIZE_ERR",
        "DOMSettableTokenList",
        "DOMStringList",
        "DOMStringMap",
        "DOMTokenList",
        "DOMTransactionEvent",
        "DOM_DELTA_LINE",
        "DOM_DELTA_PAGE",
        "DOM_DELTA_PIXEL",
        "DOM_INPUT_METHOD_DROP",
        "DOM_INPUT_METHOD_HANDWRITING",
        "DOM_INPUT_METHOD_IME",
        "DOM_INPUT_METHOD_KEYBOARD",
        "DOM_INPUT_METHOD_MULTIMODAL",
        "DOM_INPUT_METHOD_OPTION",
        "DOM_INPUT_METHOD_PASTE",
        "DOM_INPUT_METHOD_SCRIPT",
        "DOM_INPUT_METHOD_UNKNOWN",
        "DOM_INPUT_METHOD_VOICE",
        "DOM_KEY_LOCATION_JOYSTICK",
        "DOM_KEY_LOCATION_LEFT",
        "DOM_KEY_LOCATION_MOBILE",
        "DOM_KEY_LOCATION_NUMPAD",
        "DOM_KEY_LOCATION_RIGHT",
        "DOM_KEY_LOCATION_STANDARD",
        "DOM_VK_0",
        "DOM_VK_1",
        "DOM_VK_2",
        "DOM_VK_3",
        "DOM_VK_4",
        "DOM_VK_5",
        "DOM_VK_6",
        "DOM_VK_7",
        "DOM_VK_8",
        "DOM_VK_9",
        "DOM_VK_A",
        "DOM_VK_ACCEPT",
        "DOM_VK_ADD",
        "DOM_VK_ALT",
        "DOM_VK_ALTGR",
        "DOM_VK_AMPERSAND",
        "DOM_VK_ASTERISK",
        "DOM_VK_AT",
        "DOM_VK_ATTN",
        "DOM_VK_B",
        "DOM_VK_BACKSPACE",
        "DOM_VK_BACK_QUOTE",
        "DOM_VK_BACK_SLASH",
        "DOM_VK_BACK_SPACE",
        "DOM_VK_C",
        "DOM_VK_CANCEL",
        "DOM_VK_CAPS_LOCK",
        "DOM_VK_CIRCUMFLEX",
        "DOM_VK_CLEAR",
        "DOM_VK_CLOSE_BRACKET",
        "DOM_VK_CLOSE_CURLY_BRACKET",
        "DOM_VK_CLOSE_PAREN",
        "DOM_VK_COLON",
        "DOM_VK_COMMA",
        "DOM_VK_CONTEXT_MENU",
        "DOM_VK_CONTROL",
        "DOM_VK_CONVERT",
        "DOM_VK_CRSEL",
        "DOM_VK_CTRL",
        "DOM_VK_D",
        "DOM_VK_DECIMAL",
        "DOM_VK_DELETE",
        "DOM_VK_DIVIDE",
        "DOM_VK_DOLLAR",
        "DOM_VK_DOUBLE_QUOTE",
        "DOM_VK_DOWN",
        "DOM_VK_E",
        "DOM_VK_EISU",
        "DOM_VK_END",
        "DOM_VK_ENTER",
        "DOM_VK_EQUALS",
        "DOM_VK_EREOF",
        "DOM_VK_ESCAPE",
        "DOM_VK_EXCLAMATION",
        "DOM_VK_EXECUTE",
        "DOM_VK_EXSEL",
        "DOM_VK_F",
        "DOM_VK_F1",
        "DOM_VK_F10",
        "DOM_VK_F11",
        "DOM_VK_F12",
        "DOM_VK_F13",
        "DOM_VK_F14",
        "DOM_VK_F15",
        "DOM_VK_F16",
        "DOM_VK_F17",
        "DOM_VK_F18",
        "DOM_VK_F19",
        "DOM_VK_F2",
        "DOM_VK_F20",
        "DOM_VK_F21",
        "DOM_VK_F22",
        "DOM_VK_F23",
        "DOM_VK_F24",
        "DOM_VK_F25",
        "DOM_VK_F26",
        "DOM_VK_F27",
        "DOM_VK_F28",
        "DOM_VK_F29",
        "DOM_VK_F3",
        "DOM_VK_F30",
        "DOM_VK_F31",
        "DOM_VK_F32",
        "DOM_VK_F33",
        "DOM_VK_F34",
        "DOM_VK_F35",
        "DOM_VK_F36",
        "DOM_VK_F4",
        "DOM_VK_F5",
        "DOM_VK_F6",
        "DOM_VK_F7",
        "DOM_VK_F8",
        "DOM_VK_F9",
        "DOM_VK_FINAL",
        "DOM_VK_FRONT",
        "DOM_VK_G",
        "DOM_VK_GREATER_THAN",
        "DOM_VK_H",
        "DOM_VK_HANGUL",
        "DOM_VK_HANJA",
        "DOM_VK_HASH",
        "DOM_VK_HELP",
        "DOM_VK_HK_TOGGLE",
        "DOM_VK_HOME",
        "DOM_VK_HYPHEN_MINUS",
        "DOM_VK_I",
        "DOM_VK_INSERT",
        "DOM_VK_J",
        "DOM_VK_JUNJA",
        "DOM_VK_K",
        "DOM_VK_KANA",
        "DOM_VK_KANJI",
        "DOM_VK_L",
        "DOM_VK_LEFT",
        "DOM_VK_LEFT_TAB",
        "DOM_VK_LESS_THAN",
        "DOM_VK_M",
        "DOM_VK_META",
        "DOM_VK_MODECHANGE",
        "DOM_VK_MULTIPLY",
        "DOM_VK_N",
        "DOM_VK_NONCONVERT",
        "DOM_VK_NUMPAD0",
        "DOM_VK_NUMPAD1",
        "DOM_VK_NUMPAD2",
        "DOM_VK_NUMPAD3",
        "DOM_VK_NUMPAD4",
        "DOM_VK_NUMPAD5",
        "DOM_VK_NUMPAD6",
        "DOM_VK_NUMPAD7",
        "DOM_VK_NUMPAD8",
        "DOM_VK_NUMPAD9",
        "DOM_VK_NUM_LOCK",
        "DOM_VK_O",
        "DOM_VK_OEM_1",
        "DOM_VK_OEM_102",
        "DOM_VK_OEM_2",
        "DOM_VK_OEM_3",
        "DOM_VK_OEM_4",
        "DOM_VK_OEM_5",
        "DOM_VK_OEM_6",
        "DOM_VK_OEM_7",
        "DOM_VK_OEM_8",
        "DOM_VK_OEM_COMMA",
        "DOM_VK_OEM_MINUS",
        "DOM_VK_OEM_PERIOD",
        "DOM_VK_OEM_PLUS",
        "DOM_VK_OPEN_BRACKET",
        "DOM_VK_OPEN_CURLY_BRACKET",
        "DOM_VK_OPEN_PAREN",
        "DOM_VK_P",
        "DOM_VK_PA1",
        "DOM_VK_PAGEDOWN",
        "DOM_VK_PAGEUP",
        "DOM_VK_PAGE_DOWN",
        "DOM_VK_PAGE_UP",
        "DOM_VK_PAUSE",
        "DOM_VK_PERCENT",
        "DOM_VK_PERIOD",
        "DOM_VK_PIPE",
        "DOM_VK_PLAY",
        "DOM_VK_PLUS",
        "DOM_VK_PRINT",
        "DOM_VK_PRINTSCREEN",
        "DOM_VK_PROCESSKEY",
        "DOM_VK_PROPERITES",
        "DOM_VK_Q",
        "DOM_VK_QUESTION_MARK",
        "DOM_VK_QUOTE",
        "DOM_VK_R",
        "DOM_VK_REDO",
        "DOM_VK_RETURN",
        "DOM_VK_RIGHT",
        "DOM_VK_S",
        "DOM_VK_SCROLL_LOCK",
        "DOM_VK_SELECT",
        "DOM_VK_SEMICOLON",
        "DOM_VK_SEPARATOR",
        "DOM_VK_SHIFT",
        "DOM_VK_SLASH",
        "DOM_VK_SLEEP",
        "DOM_VK_SPACE",
        "DOM_VK_SUBTRACT",
        "DOM_VK_T",
        "DOM_VK_TAB",
        "DOM_VK_TILDE",
        "DOM_VK_U",
        "DOM_VK_UNDERSCORE",
        "DOM_VK_UNDO",
        "DOM_VK_UNICODE",
        "DOM_VK_UP",
        "DOM_VK_V",
        "DOM_VK_VOLUME_DOWN",
        "DOM_VK_VOLUME_MUTE",
        "DOM_VK_VOLUME_UP",
        "DOM_VK_W",
        "DOM_VK_WIN",
        "DOM_VK_WINDOW",
        "DOM_VK_WIN_ICO_00",
        "DOM_VK_WIN_ICO_CLEAR",
        "DOM_VK_WIN_ICO_HELP",
        "DOM_VK_WIN_OEM_ATTN",
        "DOM_VK_WIN_OEM_AUTO",
        "DOM_VK_WIN_OEM_BACKTAB",
        "DOM_VK_WIN_OEM_CLEAR",
        "DOM_VK_WIN_OEM_COPY",
        "DOM_VK_WIN_OEM_CUSEL",
        "DOM_VK_WIN_OEM_ENLW",
        "DOM_VK_WIN_OEM_FINISH",
        "DOM_VK_WIN_OEM_FJ_JISHO",
        "DOM_VK_WIN_OEM_FJ_LOYA",
        "DOM_VK_WIN_OEM_FJ_MASSHOU",
        "DOM_VK_WIN_OEM_FJ_ROYA",
        "DOM_VK_WIN_OEM_FJ_TOUROKU",
        "DOM_VK_WIN_OEM_JUMP",
        "DOM_VK_WIN_OEM_PA1",
        "DOM_VK_WIN_OEM_PA2",
        "DOM_VK_WIN_OEM_PA3",
        "DOM_VK_WIN_OEM_RESET",
        "DOM_VK_WIN_OEM_WSCTRL",
        "DOM_VK_X",
        "DOM_VK_XF86XK_ADD_FAVORITE",
        "DOM_VK_XF86XK_APPLICATION_LEFT",
        "DOM_VK_XF86XK_APPLICATION_RIGHT",
        "DOM_VK_XF86XK_AUDIO_CYCLE_TRACK",
        "DOM_VK_XF86XK_AUDIO_FORWARD",
        "DOM_VK_XF86XK_AUDIO_LOWER_VOLUME",
        "DOM_VK_XF86XK_AUDIO_MEDIA",
        "DOM_VK_XF86XK_AUDIO_MUTE",
        "DOM_VK_XF86XK_AUDIO_NEXT",
        "DOM_VK_XF86XK_AUDIO_PAUSE",
        "DOM_VK_XF86XK_AUDIO_PLAY",
        "DOM_VK_XF86XK_AUDIO_PREV",
        "DOM_VK_XF86XK_AUDIO_RAISE_VOLUME",
        "DOM_VK_XF86XK_AUDIO_RANDOM_PLAY",
        "DOM_VK_XF86XK_AUDIO_RECORD",
        "DOM_VK_XF86XK_AUDIO_REPEAT",
        "DOM_VK_XF86XK_AUDIO_REWIND",
        "DOM_VK_XF86XK_AUDIO_STOP",
        "DOM_VK_XF86XK_AWAY",
        "DOM_VK_XF86XK_BACK",
        "DOM_VK_XF86XK_BACK_FORWARD",
        "DOM_VK_XF86XK_BATTERY",
        "DOM_VK_XF86XK_BLUE",
        "DOM_VK_XF86XK_BLUETOOTH",
        "DOM_VK_XF86XK_BOOK",
        "DOM_VK_XF86XK_BRIGHTNESS_ADJUST",
        "DOM_VK_XF86XK_CALCULATOR",
        "DOM_VK_XF86XK_CALENDAR",
        "DOM_VK_XF86XK_CD",
        "DOM_VK_XF86XK_CLOSE",
        "DOM_VK_XF86XK_COMMUNITY",
        "DOM_VK_XF86XK_CONTRAST_ADJUST",
        "DOM_VK_XF86XK_COPY",
        "DOM_VK_XF86XK_CUT",
        "DOM_VK_XF86XK_CYCLE_ANGLE",
        "DOM_VK_XF86XK_DISPLAY",
        "DOM_VK_XF86XK_DOCUMENTS",
        "DOM_VK_XF86XK_DOS",
        "DOM_VK_XF86XK_EJECT",
        "DOM_VK_XF86XK_EXCEL",
        "DOM_VK_XF86XK_EXPLORER",
        "DOM_VK_XF86XK_FAVORITES",
        "DOM_VK_XF86XK_FINANCE",
        "DOM_VK_XF86XK_FORWARD",
        "DOM_VK_XF86XK_FRAME_BACK",
        "DOM_VK_XF86XK_FRAME_FORWARD",
        "DOM_VK_XF86XK_GAME",
        "DOM_VK_XF86XK_GO",
        "DOM_VK_XF86XK_GREEN",
        "DOM_VK_XF86XK_HIBERNATE",
        "DOM_VK_XF86XK_HISTORY",
        "DOM_VK_XF86XK_HOME_PAGE",
        "DOM_VK_XF86XK_HOT_LINKS",
        "DOM_VK_XF86XK_I_TOUCH",
        "DOM_VK_XF86XK_KBD_BRIGHTNESS_DOWN",
        "DOM_VK_XF86XK_KBD_BRIGHTNESS_UP",
        "DOM_VK_XF86XK_KBD_LIGHT_ON_OFF",
        "DOM_VK_XF86XK_LAUNCH0",
        "DOM_VK_XF86XK_LAUNCH1",
        "DOM_VK_XF86XK_LAUNCH2",
        "DOM_VK_XF86XK_LAUNCH3",
        "DOM_VK_XF86XK_LAUNCH4",
        "DOM_VK_XF86XK_LAUNCH5",
        "DOM_VK_XF86XK_LAUNCH6",
        "DOM_VK_XF86XK_LAUNCH7",
        "DOM_VK_XF86XK_LAUNCH8",
        "DOM_VK_XF86XK_LAUNCH9",
        "DOM_VK_XF86XK_LAUNCH_A",
        "DOM_VK_XF86XK_LAUNCH_B",
        "DOM_VK_XF86XK_LAUNCH_C",
        "DOM_VK_XF86XK_LAUNCH_D",
        "DOM_VK_XF86XK_LAUNCH_E",
        "DOM_VK_XF86XK_LAUNCH_F",
        "DOM_VK_XF86XK_LIGHT_BULB",
        "DOM_VK_XF86XK_LOG_OFF",
        "DOM_VK_XF86XK_MAIL",
        "DOM_VK_XF86XK_MAIL_FORWARD",
        "DOM_VK_XF86XK_MARKET",
        "DOM_VK_XF86XK_MEETING",
        "DOM_VK_XF86XK_MEMO",
        "DOM_VK_XF86XK_MENU_KB",
        "DOM_VK_XF86XK_MENU_PB",
        "DOM_VK_XF86XK_MESSENGER",
        "DOM_VK_XF86XK_MON_BRIGHTNESS_DOWN",
        "DOM_VK_XF86XK_MON_BRIGHTNESS_UP",
        "DOM_VK_XF86XK_MUSIC",
        "DOM_VK_XF86XK_MY_COMPUTER",
        "DOM_VK_XF86XK_MY_SITES",
        "DOM_VK_XF86XK_NEW",
        "DOM_VK_XF86XK_NEWS",
        "DOM_VK_XF86XK_OFFICE_HOME",
        "DOM_VK_XF86XK_OPEN",
        "DOM_VK_XF86XK_OPEN_URL",
        "DOM_VK_XF86XK_OPTION",
        "DOM_VK_XF86XK_PASTE",
        "DOM_VK_XF86XK_PHONE",
        "DOM_VK_XF86XK_PICTURES",
        "DOM_VK_XF86XK_POWER_DOWN",
        "DOM_VK_XF86XK_POWER_OFF",
        "DOM_VK_XF86XK_RED",
        "DOM_VK_XF86XK_REFRESH",
        "DOM_VK_XF86XK_RELOAD",
        "DOM_VK_XF86XK_REPLY",
        "DOM_VK_XF86XK_ROCKER_DOWN",
        "DOM_VK_XF86XK_ROCKER_ENTER",
        "DOM_VK_XF86XK_ROCKER_UP",
        "DOM_VK_XF86XK_ROTATE_WINDOWS",
        "DOM_VK_XF86XK_ROTATION_KB",
        "DOM_VK_XF86XK_ROTATION_PB",
        "DOM_VK_XF86XK_SAVE",
        "DOM_VK_XF86XK_SCREEN_SAVER",
        "DOM_VK_XF86XK_SCROLL_CLICK",
        "DOM_VK_XF86XK_SCROLL_DOWN",
        "DOM_VK_XF86XK_SCROLL_UP",
        "DOM_VK_XF86XK_SEARCH",
        "DOM_VK_XF86XK_SEND",
        "DOM_VK_XF86XK_SHOP",
        "DOM_VK_XF86XK_SPELL",
        "DOM_VK_XF86XK_SPLIT_SCREEN",
        "DOM_VK_XF86XK_STANDBY",
        "DOM_VK_XF86XK_START",
        "DOM_VK_XF86XK_STOP",
        "DOM_VK_XF86XK_SUBTITLE",
        "DOM_VK_XF86XK_SUPPORT",
        "DOM_VK_XF86XK_SUSPEND",
        "DOM_VK_XF86XK_TASK_PANE",
        "DOM_VK_XF86XK_TERMINAL",
        "DOM_VK_XF86XK_TIME",
        "DOM_VK_XF86XK_TOOLS",
        "DOM_VK_XF86XK_TOP_MENU",
        "DOM_VK_XF86XK_TO_DO_LIST",
        "DOM_VK_XF86XK_TRAVEL",
        "DOM_VK_XF86XK_USER1KB",
        "DOM_VK_XF86XK_USER2KB",
        "DOM_VK_XF86XK_USER_PB",
        "DOM_VK_XF86XK_UWB",
        "DOM_VK_XF86XK_VENDOR_HOME",
        "DOM_VK_XF86XK_VIDEO",
        "DOM_VK_XF86XK_VIEW",
        "DOM_VK_XF86XK_WAKE_UP",
        "DOM_VK_XF86XK_WEB_CAM",
        "DOM_VK_XF86XK_WHEEL_BUTTON",
        "DOM_VK_XF86XK_WLAN",
        "DOM_VK_XF86XK_WORD",
        "DOM_VK_XF86XK_WWW",
        "DOM_VK_XF86XK_XFER",
        "DOM_VK_XF86XK_YELLOW",
        "DOM_VK_XF86XK_ZOOM_IN",
        "DOM_VK_XF86XK_ZOOM_OUT",
        "DOM_VK_Y",
        "DOM_VK_Z",
        "DOM_VK_ZOOM",
        "DONE",
        "DONT_CARE",
        "DOWNLOADING",
        "DRAGDROP",
        "DRAW_BUFFER0",
        "DRAW_BUFFER1",
        "DRAW_BUFFER10",
        "DRAW_BUFFER11",
        "DRAW_BUFFER12",
        "DRAW_BUFFER13",
        "DRAW_BUFFER14",
        "DRAW_BUFFER15",
        "DRAW_BUFFER2",
        "DRAW_BUFFER3",
        "DRAW_BUFFER4",
        "DRAW_BUFFER5",
        "DRAW_BUFFER6",
        "DRAW_BUFFER7",
        "DRAW_BUFFER8",
        "DRAW_BUFFER9",
        "DRAW_FRAMEBUFFER",
        "DRAW_FRAMEBUFFER_BINDING",
        "DST_ALPHA",
        "DST_COLOR",
        "DYNAMIC_COPY",
        "DYNAMIC_DRAW",
        "DYNAMIC_READ",
        "DataChannel",
        "DataTransfer",
        "DataTransferItem",
        "DataTransferItemList",
        "DataView",
        "Date",
        "DateTimeFormat",
        "DecompressionStream",
        "DelayNode",
        "DeprecationReportBody",
        "DesktopNotification",
        "DesktopNotificationCenter",
        "DeviceLightEvent",
        "DeviceMotionEvent",
        "DeviceMotionEventAcceleration",
        "DeviceMotionEventRotationRate",
        "DeviceOrientationEvent",
        "DeviceProximityEvent",
        "DeviceStorage",
        "DeviceStorageChangeEvent",
        "Directory",
        "DisplayNames",
        "Document",
        "DocumentFragment",
        "DocumentTimeline",
        "DocumentType",
        "DragEvent",
        "DynamicsCompressorNode",
        "E",
        "ELEMENT_ARRAY_BUFFER",
        "ELEMENT_ARRAY_BUFFER_BINDING",
        "ELEMENT_NODE",
        "EMPTY",
        "ENCODING_ERR",
        "ENDED",
        "END_TO_END",
        "END_TO_START",
        "ENTITY_NODE",
        "ENTITY_REFERENCE_NODE",
        "EPSILON",
        "EQUAL",
        "EQUALPOWER",
        "ERROR",
        "EXPONENTIAL_DISTANCE",
        "Element",
        "ElementInternals",
        "ElementQuery",
        "EnterPictureInPictureEvent",
        "Entity",
        "EntityReference",
        "Error",
        "ErrorEvent",
        "EvalError",
        "Event",
        "EventException",
        "EventSource",
        "EventTarget",
        "External",
        "FASTEST",
        "FIDOSDK",
        "FILTER_ACCEPT",
        "FILTER_INTERRUPT",
        "FILTER_REJECT",
        "FILTER_SKIP",
        "FINISHED_STATE",
        "FIRST_ORDERED_NODE_TYPE",
        "FLOAT",
        "FLOAT_32_UNSIGNED_INT_24_8_REV",
        "FLOAT_MAT2",
        "FLOAT_MAT2x3",
        "FLOAT_MAT2x4",
        "FLOAT_MAT3",
        "FLOAT_MAT3x2",
        "FLOAT_MAT3x4",
        "FLOAT_MAT4",
        "FLOAT_MAT4x2",
        "FLOAT_MAT4x3",
        "FLOAT_VEC2",
        "FLOAT_VEC3",
        "FLOAT_VEC4",
        "FOCUS",
        "FONT_FACE_RULE",
        "FONT_FEATURE_VALUES_RULE",
        "FRAGMENT",
        "FRAGMENT_SHADER",
        "FRAGMENT_SHADER_DERIVATIVE_HINT",
        "FRAGMENT_SHADER_DERIVATIVE_HINT_OES",
        "FRAMEBUFFER",
        "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE",
        "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE",
        "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING",
        "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE",
        "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE",
        "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE",
        "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",
        "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",
        "FRAMEBUFFER_ATTACHMENT_RED_SIZE",
        "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE",
        "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",
        "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER",
        "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",
        "FRAMEBUFFER_BINDING",
        "FRAMEBUFFER_COMPLETE",
        "FRAMEBUFFER_DEFAULT",
        "FRAMEBUFFER_INCOMPLETE_ATTACHMENT",
        "FRAMEBUFFER_INCOMPLETE_DIMENSIONS",
        "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",
        "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE",
        "FRAMEBUFFER_UNSUPPORTED",
        "FRONT",
        "FRONT_AND_BACK",
        "FRONT_FACE",
        "FUNC_ADD",
        "FUNC_REVERSE_SUBTRACT",
        "FUNC_SUBTRACT",
        "FeaturePolicy",
        "FeaturePolicyViolationReportBody",
        "FederatedCredential",
        "Feed",
        "FeedEntry",
        "File",
        "FileError",
        "FileList",
        "FileReader",
        "FileSystem",
        "FileSystemDirectoryEntry",
        "FileSystemDirectoryReader",
        "FileSystemEntry",
        "FileSystemFileEntry",
        "FinalizationRegistry",
        "FindInPage",
        "Float32Array",
        "Float64Array",
        "FocusEvent",
        "FontFace",
        "FontFaceSet",
        "FontFaceSetLoadEvent",
        "FormData",
        "FormDataEvent",
        "FragmentDirective",
        "Function",
        "GENERATE_MIPMAP_HINT",
        "GEQUAL",
        "GREATER",
        "GREEN",
        "GREEN_BITS",
        "GainNode",
        "Gamepad",
        "GamepadAxisMoveEvent",
        "GamepadButton",
        "GamepadButtonEvent",
        "GamepadEvent",
        "GamepadHapticActuator",
        "GamepadPose",
        "Geolocation",
        "GeolocationCoordinates",
        "GeolocationPosition",
        "GeolocationPositionError",
        "GestureEvent",
        "Global",
        "Gyroscope",
        "HALF_FLOAT",
        "HAVE_CURRENT_DATA",
        "HAVE_ENOUGH_DATA",
        "HAVE_FUTURE_DATA",
        "HAVE_METADATA",
        "HAVE_NOTHING",
        "HEADERS_RECEIVED",
        "HIDDEN",
        "HIERARCHY_REQUEST_ERR",
        "HIGHPASS",
        "HIGHSHELF",
        "HIGH_FLOAT",
        "HIGH_INT",
        "HORIZONTAL",
        "HORIZONTAL_AXIS",
        "HRTF",
        "HTMLAllCollection",
        "HTMLAnchorElement",
        "HTMLAppletElement",
        "HTMLAreaElement",
        "HTMLAudioElement",
        "HTMLBRElement",
        "HTMLBaseElement",
        "HTMLBaseFontElement",
        "HTMLBlockquoteElement",
        "HTMLBodyElement",
        "HTMLButtonElement",
        "HTMLCanvasElement",
        "HTMLCollection",
        "HTMLCommandElement",
        "HTMLContentElement",
        "HTMLDListElement",
        "HTMLDataElement",
        "HTMLDataListElement",
        "HTMLDetailsElement",
        "HTMLDialogElement",
        "HTMLDirectoryElement",
        "HTMLDivElement",
        "HTMLDocument",
        "HTMLElement",
        "HTMLEmbedElement",
        "HTMLFieldSetElement",
        "HTMLFontElement",
        "HTMLFormControlsCollection",
        "HTMLFormElement",
        "HTMLFrameElement",
        "HTMLFrameSetElement",
        "HTMLHRElement",
        "HTMLHeadElement",
        "HTMLHeadingElement",
        "HTMLHtmlElement",
        "HTMLIFrameElement",
        "HTMLImageElement",
        "HTMLInputElement",
        "HTMLIsIndexElement",
        "HTMLKeygenElement",
        "HTMLLIElement",
        "HTMLLabelElement",
        "HTMLLegendElement",
        "HTMLLinkElement",
        "HTMLMapElement",
        "HTMLMarqueeElement",
        "HTMLMediaElement",
        "HTMLMenuElement",
        "HTMLMenuItemElement",
        "HTMLMetaElement",
        "HTMLMeterElement",
        "HTMLModElement",
        "HTMLOListElement",
        "HTMLObjectElement",
        "HTMLOptGroupElement",
        "HTMLOptionElement",
        "HTMLOptionsCollection",
        "HTMLOutputElement",
        "HTMLParagraphElement",
        "HTMLParamElement",
        "HTMLPictureElement",
        "HTMLPreElement",
        "HTMLProgressElement",
        "HTMLPropertiesCollection",
        "HTMLQuoteElement",
        "HTMLScriptElement",
        "HTMLSelectElement",
        "HTMLShadowElement",
        "HTMLSlotElement",
        "HTMLSourceElement",
        "HTMLSpanElement",
        "HTMLStyleElement",
        "HTMLTableCaptionElement",
        "HTMLTableCellElement",
        "HTMLTableColElement",
        "HTMLTableElement",
        "HTMLTableRowElement",
        "HTMLTableSectionElement",
        "HTMLTemplateElement",
        "HTMLTextAreaElement",
        "HTMLTimeElement",
        "HTMLTitleElement",
        "HTMLTrackElement",
        "HTMLUListElement",
        "HTMLUnknownElement",
        "HTMLVideoElement",
        "HashChangeEvent",
        "Headers",
        "History",
        "Hz",
        "ICE_CHECKING",
        "ICE_CLOSED",
        "ICE_COMPLETED",
        "ICE_CONNECTED",
        "ICE_FAILED",
        "ICE_GATHERING",
        "ICE_WAITING",
        "IDBCursor",
        "IDBCursorWithValue",
        "IDBDatabase",
        "IDBDatabaseException",
        "IDBFactory",
        "IDBFileHandle",
        "IDBFileRequest",
        "IDBIndex",
        "IDBKeyRange",
        "IDBMutableFile",
        "IDBObjectStore",
        "IDBOpenDBRequest",
        "IDBRequest",
        "IDBTransaction",
        "IDBVersionChangeEvent",
        "IDLE",
        "IIRFilterNode",
        "IMPLEMENTATION_COLOR_READ_FORMAT",
        "IMPLEMENTATION_COLOR_READ_TYPE",
        "IMPORT_RULE",
        "INCR",
        "INCR_WRAP",
        "INDEX",
        "INDEX_SIZE_ERR",
        "INDIRECT",
        "INT",
        "INTERLEAVED_ATTRIBS",
        "INT_2_10_10_10_REV",
        "INT_SAMPLER_2D",
        "INT_SAMPLER_2D_ARRAY",
        "INT_SAMPLER_3D",
        "INT_SAMPLER_CUBE",
        "INT_VEC2",
        "INT_VEC3",
        "INT_VEC4",
        "INUSE_ATTRIBUTE_ERR",
        "INVALID_ACCESS_ERR",
        "INVALID_CHARACTER_ERR",
        "INVALID_ENUM",
        "INVALID_EXPRESSION_ERR",
        "INVALID_FRAMEBUFFER_OPERATION",
        "INVALID_INDEX",
        "INVALID_MODIFICATION_ERR",
        "INVALID_NODE_TYPE_ERR",
        "INVALID_OPERATION",
        "INVALID_STATE_ERR",
        "INVALID_VALUE",
        "INVERSE_DISTANCE",
        "INVERT",
        "IceCandidate",
        "IdleDeadline",
        "Image",
        "ImageBitmap",
        "ImageBitmapRenderingContext",
        "ImageCapture",
        "ImageData",
        "Infinity",
        "InputDeviceCapabilities",
        "InputDeviceInfo",
        "InputEvent",
        "InputMethodContext",
        "InstallTrigger",
        "InstallTriggerImpl",
        "Instance",
        "Int16Array",
        "Int32Array",
        "Int8Array",
        "Intent",
        "InternalError",
        "IntersectionObserver",
        "IntersectionObserverEntry",
        "Intl",
        "IsSearchProviderInstalled",
        "Iterator",
        "JSON",
        "KEEP",
        "KEYDOWN",
        "KEYFRAMES_RULE",
        "KEYFRAME_RULE",
        "KEYPRESS",
        "KEYUP",
        "KeyEvent",
        "Keyboard",
        "KeyboardEvent",
        "KeyboardLayoutMap",
        "KeyframeEffect",
        "LENGTHADJUST_SPACING",
        "LENGTHADJUST_SPACINGANDGLYPHS",
        "LENGTHADJUST_UNKNOWN",
        "LEQUAL",
        "LESS",
        "LINEAR",
        "LINEAR_DISTANCE",
        "LINEAR_MIPMAP_LINEAR",
        "LINEAR_MIPMAP_NEAREST",
        "LINES",
        "LINE_LOOP",
        "LINE_STRIP",
        "LINE_WIDTH",
        "LINK_STATUS",
        "LIVE",
        "LN10",
        "LN2",
        "LOADED",
        "LOADING",
        "LOG10E",
        "LOG2E",
        "LOWPASS",
        "LOWSHELF",
        "LOW_FLOAT",
        "LOW_INT",
        "LSException",
        "LSParserFilter",
        "LUMINANCE",
        "LUMINANCE_ALPHA",
        "LargestContentfulPaint",
        "LayoutShift",
        "LayoutShiftAttribution",
        "LinearAccelerationSensor",
        "LinkError",
        "ListFormat",
        "LocalMediaStream",
        "Locale",
        "Location",
        "Lock",
        "LockManager",
        "MAP_READ",
        "MAP_WRITE",
        "MAX",
        "MAX_3D_TEXTURE_SIZE",
        "MAX_ARRAY_TEXTURE_LAYERS",
        "MAX_CLIENT_WAIT_TIMEOUT_WEBGL",
        "MAX_COLOR_ATTACHMENTS",
        "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS",
        "MAX_COMBINED_TEXTURE_IMAGE_UNITS",
        "MAX_COMBINED_UNIFORM_BLOCKS",
        "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS",
        "MAX_CUBE_MAP_TEXTURE_SIZE",
        "MAX_DRAW_BUFFERS",
        "MAX_ELEMENTS_INDICES",
        "MAX_ELEMENTS_VERTICES",
        "MAX_ELEMENT_INDEX",
        "MAX_FRAGMENT_INPUT_COMPONENTS",
        "MAX_FRAGMENT_UNIFORM_BLOCKS",
        "MAX_FRAGMENT_UNIFORM_COMPONENTS",
        "MAX_FRAGMENT_UNIFORM_VECTORS",
        "MAX_PROGRAM_TEXEL_OFFSET",
        "MAX_RENDERBUFFER_SIZE",
        "MAX_SAFE_INTEGER",
        "MAX_SAMPLES",
        "MAX_SERVER_WAIT_TIMEOUT",
        "MAX_TEXTURE_IMAGE_UNITS",
        "MAX_TEXTURE_LOD_BIAS",
        "MAX_TEXTURE_MAX_ANISOTROPY_EXT",
        "MAX_TEXTURE_SIZE",
        "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS",
        "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS",
        "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS",
        "MAX_UNIFORM_BLOCK_SIZE",
        "MAX_UNIFORM_BUFFER_BINDINGS",
        "MAX_VALUE",
        "MAX_VARYING_COMPONENTS",
        "MAX_VARYING_VECTORS",
        "MAX_VERTEX_ATTRIBS",
        "MAX_VERTEX_OUTPUT_COMPONENTS",
        "MAX_VERTEX_TEXTURE_IMAGE_UNITS",
        "MAX_VERTEX_UNIFORM_BLOCKS",
        "MAX_VERTEX_UNIFORM_COMPONENTS",
        "MAX_VERTEX_UNIFORM_VECTORS",
        "MAX_VIEWPORT_DIMS",
        "MEDIA_ERR_ABORTED",
        "MEDIA_ERR_DECODE",
        "MEDIA_ERR_ENCRYPTED",
        "MEDIA_ERR_NETWORK",
        "MEDIA_ERR_SRC_NOT_SUPPORTED",
        "MEDIA_KEYERR_CLIENT",
        "MEDIA_KEYERR_DOMAIN",
        "MEDIA_KEYERR_HARDWARECHANGE",
        "MEDIA_KEYERR_OUTPUT",
        "MEDIA_KEYERR_SERVICE",
        "MEDIA_KEYERR_UNKNOWN",
        "MEDIA_RULE",
        "MEDIUM_FLOAT",
        "MEDIUM_INT",
        "META_MASK",
        "MIDIAccess",
        "MIDIConnectionEvent",
        "MIDIInput",
        "MIDIInputMap",
        "MIDIMessageEvent",
        "MIDIOutput",
        "MIDIOutputMap",
        "MIDIPort",
        "MIN",
        "MIN_PROGRAM_TEXEL_OFFSET",
        "MIN_SAFE_INTEGER",
        "MIN_VALUE",
        "MIRRORED_REPEAT",
        "MODE_ASYNCHRONOUS",
        "MODE_SYNCHRONOUS",
        "MODIFICATION",
        "MOUSEDOWN",
        "MOUSEDRAG",
        "MOUSEMOVE",
        "MOUSEOUT",
        "MOUSEOVER",
        "MOUSEUP",
        "MOZ_KEYFRAMES_RULE",
        "MOZ_KEYFRAME_RULE",
        "MOZ_SOURCE_CURSOR",
        "MOZ_SOURCE_ERASER",
        "MOZ_SOURCE_KEYBOARD",
        "MOZ_SOURCE_MOUSE",
        "MOZ_SOURCE_PEN",
        "MOZ_SOURCE_TOUCH",
        "MOZ_SOURCE_UNKNOWN",
        "MSGESTURE_FLAG_BEGIN",
        "MSGESTURE_FLAG_CANCEL",
        "MSGESTURE_FLAG_END",
        "MSGESTURE_FLAG_INERTIA",
        "MSGESTURE_FLAG_NONE",
        "MSPOINTER_TYPE_MOUSE",
        "MSPOINTER_TYPE_PEN",
        "MSPOINTER_TYPE_TOUCH",
        "MS_ASYNC_CALLBACK_STATUS_ASSIGN_DELEGATE",
        "MS_ASYNC_CALLBACK_STATUS_CANCEL",
        "MS_ASYNC_CALLBACK_STATUS_CHOOSEANY",
        "MS_ASYNC_CALLBACK_STATUS_ERROR",
        "MS_ASYNC_CALLBACK_STATUS_JOIN",
        "MS_ASYNC_OP_STATUS_CANCELED",
        "MS_ASYNC_OP_STATUS_ERROR",
        "MS_ASYNC_OP_STATUS_SUCCESS",
        "MS_MANIPULATION_STATE_ACTIVE",
        "MS_MANIPULATION_STATE_CANCELLED",
        "MS_MANIPULATION_STATE_COMMITTED",
        "MS_MANIPULATION_STATE_DRAGGING",
        "MS_MANIPULATION_STATE_INERTIA",
        "MS_MANIPULATION_STATE_PRESELECT",
        "MS_MANIPULATION_STATE_SELECTING",
        "MS_MANIPULATION_STATE_STOPPED",
        "MS_MEDIA_ERR_ENCRYPTED",
        "MS_MEDIA_KEYERR_CLIENT",
        "MS_MEDIA_KEYERR_DOMAIN",
        "MS_MEDIA_KEYERR_HARDWARECHANGE",
        "MS_MEDIA_KEYERR_OUTPUT",
        "MS_MEDIA_KEYERR_SERVICE",
        "MS_MEDIA_KEYERR_UNKNOWN",
        "Map",
        "Math",
        "MathMLElement",
        "MediaCapabilities",
        "MediaCapabilitiesInfo",
        "MediaController",
        "MediaDeviceInfo",
        "MediaDevices",
        "MediaElementAudioSourceNode",
        "MediaEncryptedEvent",
        "MediaError",
        "MediaKeyError",
        "MediaKeyEvent",
        "MediaKeyMessageEvent",
        "MediaKeyNeededEvent",
        "MediaKeySession",
        "MediaKeyStatusMap",
        "MediaKeySystemAccess",
        "MediaKeys",
        "MediaList",
        "MediaMetadata",
        "MediaQueryList",
        "MediaQueryListEvent",
        "MediaRecorder",
        "MediaRecorderErrorEvent",
        "MediaSession",
        "MediaSettingsRange",
        "MediaSource",
        "MediaStream",
        "MediaStreamAudioDestinationNode",
        "MediaStreamAudioSourceNode",
        "MediaStreamEvent",
        "MediaStreamTrack",
        "MediaStreamTrackAudioSourceNode",
        "MediaStreamTrackEvent",
        "Memory",
        "MessageChannel",
        "MessageEvent",
        "MessagePort",
        "Methods",
        "MimeType",
        "MimeTypeArray",
        "Module",
        "MouseEvent",
        "MouseScrollEvent",
        "MozAnimation",
        "MozAnimationDelay",
        "MozAnimationDirection",
        "MozAnimationDuration",
        "MozAnimationFillMode",
        "MozAnimationIterationCount",
        "MozAnimationName",
        "MozAnimationPlayState",
        "MozAnimationTimingFunction",
        "MozAppearance",
        "MozBackfaceVisibility",
        "MozBinding",
        "MozBorderBottomColors",
        "MozBorderEnd",
        "MozBorderEndColor",
        "MozBorderEndStyle",
        "MozBorderEndWidth",
        "MozBorderImage",
        "MozBorderLeftColors",
        "MozBorderRightColors",
        "MozBorderStart",
        "MozBorderStartColor",
        "MozBorderStartStyle",
        "MozBorderStartWidth",
        "MozBorderTopColors",
        "MozBoxAlign",
        "MozBoxDirection",
        "MozBoxFlex",
        "MozBoxOrdinalGroup",
        "MozBoxOrient",
        "MozBoxPack",
        "MozBoxSizing",
        "MozCSSKeyframeRule",
        "MozCSSKeyframesRule",
        "MozColumnCount",
        "MozColumnFill",
        "MozColumnGap",
        "MozColumnRule",
        "MozColumnRuleColor",
        "MozColumnRuleStyle",
        "MozColumnRuleWidth",
        "MozColumnWidth",
        "MozColumns",
        "MozContactChangeEvent",
        "MozFloatEdge",
        "MozFontFeatureSettings",
        "MozFontLanguageOverride",
        "MozForceBrokenImageIcon",
        "MozHyphens",
        "MozImageRegion",
        "MozMarginEnd",
        "MozMarginStart",
        "MozMmsEvent",
        "MozMmsMessage",
        "MozMobileMessageThread",
        "MozOSXFontSmoothing",
        "MozOrient",
        "MozOsxFontSmoothing",
        "MozOutlineRadius",
        "MozOutlineRadiusBottomleft",
        "MozOutlineRadiusBottomright",
        "MozOutlineRadiusTopleft",
        "MozOutlineRadiusTopright",
        "MozPaddingEnd",
        "MozPaddingStart",
        "MozPerspective",
        "MozPerspectiveOrigin",
        "MozPowerManager",
        "MozSettingsEvent",
        "MozSmsEvent",
        "MozSmsMessage",
        "MozStackSizing",
        "MozTabSize",
        "MozTextAlignLast",
        "MozTextDecorationColor",
        "MozTextDecorationLine",
        "MozTextDecorationStyle",
        "MozTextSizeAdjust",
        "MozTransform",
        "MozTransformOrigin",
        "MozTransformStyle",
        "MozTransition",
        "MozTransitionDelay",
        "MozTransitionDuration",
        "MozTransitionProperty",
        "MozTransitionTimingFunction",
        "MozUserFocus",
        "MozUserInput",
        "MozUserModify",
        "MozUserSelect",
        "MozWindowDragging",
        "MozWindowShadow",
        "MutationEvent",
        "MutationObserver",
        "MutationRecord",
        "NAMESPACE_ERR",
        "NAMESPACE_RULE",
        "NEAREST",
        "NEAREST_MIPMAP_LINEAR",
        "NEAREST_MIPMAP_NEAREST",
        "NEGATIVE_INFINITY",
        "NETWORK_EMPTY",
        "NETWORK_ERR",
        "NETWORK_IDLE",
        "NETWORK_LOADED",
        "NETWORK_LOADING",
        "NETWORK_NO_SOURCE",
        "NEVER",
        "NEW",
        "NEXT",
        "NEXT_NO_DUPLICATE",
        "NICEST",
        "NODE_AFTER",
        "NODE_BEFORE",
        "NODE_BEFORE_AND_AFTER",
        "NODE_INSIDE",
        "NONE",
        "NON_TRANSIENT_ERR",
        "NOTATION_NODE",
        "NOTCH",
        "NOTEQUAL",
        "NOT_ALLOWED_ERR",
        "NOT_FOUND_ERR",
        "NOT_READABLE_ERR",
        "NOT_SUPPORTED_ERR",
        "NO_DATA_ALLOWED_ERR",
        "NO_ERR",
        "NO_ERROR",
        "NO_MODIFICATION_ALLOWED_ERR",
        "NUMBER_TYPE",
        "NUM_COMPRESSED_TEXTURE_FORMATS",
        "NaN",
        "NamedNodeMap",
        "NavigationPreloadManager",
        "Navigator",
        "NearbyLinks",
        "NetworkInformation",
        "Node",
        "NodeFilter",
        "NodeIterator",
        "NodeList",
        "Notation",
        "Notification",
        "NotifyPaintEvent",
        "Number",
        "NumberFormat",
        "OBJECT_TYPE",
        "OBSOLETE",
        "OK",
        "ONE",
        "ONE_MINUS_CONSTANT_ALPHA",
        "ONE_MINUS_CONSTANT_COLOR",
        "ONE_MINUS_DST_ALPHA",
        "ONE_MINUS_DST_COLOR",
        "ONE_MINUS_SRC_ALPHA",
        "ONE_MINUS_SRC_COLOR",
        "OPEN",
        "OPENED",
        "OPENING",
        "ORDERED_NODE_ITERATOR_TYPE",
        "ORDERED_NODE_SNAPSHOT_TYPE",
        "OTHER_ERROR",
        "OUT_OF_MEMORY",
        "Object",
        "OfflineAudioCompletionEvent",
        "OfflineAudioContext",
        "OfflineResourceList",
        "OffscreenCanvas",
        "OffscreenCanvasRenderingContext2D",
        "Option",
        "OrientationSensor",
        "OscillatorNode",
        "OverconstrainedError",
        "OverflowEvent",
        "PACK_ALIGNMENT",
        "PACK_ROW_LENGTH",
        "PACK_SKIP_PIXELS",
        "PACK_SKIP_ROWS",
        "PAGE_RULE",
        "PARSE_ERR",
        "PATHSEG_ARC_ABS",
        "PATHSEG_ARC_REL",
        "PATHSEG_CLOSEPATH",
        "PATHSEG_CURVETO_CUBIC_ABS",
        "PATHSEG_CURVETO_CUBIC_REL",
        "PATHSEG_CURVETO_CUBIC_SMOOTH_ABS",
        "PATHSEG_CURVETO_CUBIC_SMOOTH_REL",
        "PATHSEG_CURVETO_QUADRATIC_ABS",
        "PATHSEG_CURVETO_QUADRATIC_REL",
        "PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS",
        "PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL",
        "PATHSEG_LINETO_ABS",
        "PATHSEG_LINETO_HORIZONTAL_ABS",
        "PATHSEG_LINETO_HORIZONTAL_REL",
        "PATHSEG_LINETO_REL",
        "PATHSEG_LINETO_VERTICAL_ABS",
        "PATHSEG_LINETO_VERTICAL_REL",
        "PATHSEG_MOVETO_ABS",
        "PATHSEG_MOVETO_REL",
        "PATHSEG_UNKNOWN",
        "PATH_EXISTS_ERR",
        "PEAKING",
        "PERMISSION_DENIED",
        "PERSISTENT",
        "PI",
        "PIXEL_PACK_BUFFER",
        "PIXEL_PACK_BUFFER_BINDING",
        "PIXEL_UNPACK_BUFFER",
        "PIXEL_UNPACK_BUFFER_BINDING",
        "PLAYING_STATE",
        "POINTS",
        "POLYGON_OFFSET_FACTOR",
        "POLYGON_OFFSET_FILL",
        "POLYGON_OFFSET_UNITS",
        "POSITION_UNAVAILABLE",
        "POSITIVE_INFINITY",
        "PREV",
        "PREV_NO_DUPLICATE",
        "PROCESSING_INSTRUCTION_NODE",
        "PageChangeEvent",
        "PageTransitionEvent",
        "PaintRequest",
        "PaintRequestList",
        "PannerNode",
        "PasswordCredential",
        "Path2D",
        "PaymentAddress",
        "PaymentInstruments",
        "PaymentManager",
        "PaymentMethodChangeEvent",
        "PaymentRequest",
        "PaymentRequestUpdateEvent",
        "PaymentResponse",
        "Performance",
        "PerformanceElementTiming",
        "PerformanceEntry",
        "PerformanceEventTiming",
        "PerformanceLongTaskTiming",
        "PerformanceMark",
        "PerformanceMeasure",
        "PerformanceNavigation",
        "PerformanceNavigationTiming",
        "PerformanceObserver",
        "PerformanceObserverEntryList",
        "PerformancePaintTiming",
        "PerformanceResourceTiming",
        "PerformanceServerTiming",
        "PerformanceTiming",
        "PeriodicSyncManager",
        "PeriodicWave",
        "PermissionStatus",
        "Permissions",
        "PhotoCapabilities",
        "PictureInPictureWindow",
        "Plugin",
        "PluginArray",
        "PluralRules",
        "PointerEvent",
        "PopStateEvent",
        "PopupBlockedEvent",
        "Presentation",
        "PresentationAvailability",
        "PresentationConnection",
        "PresentationConnectionAvailableEvent",
        "PresentationConnectionCloseEvent",
        "PresentationConnectionList",
        "PresentationReceiver",
        "PresentationRequest",
        "ProcessingInstruction",
        "ProgressEvent",
        "Promise",
        "PromiseRejectionEvent",
        "PropertyNodeList",
        "Proxy",
        "PublicKeyCredential",
        "PushManager",
        "PushSubscription",
        "PushSubscriptionOptions",
        "Q",
        "QUERY_RESOLVE",
        "QUERY_RESULT",
        "QUERY_RESULT_AVAILABLE",
        "QUOTA_ERR",
        "QUOTA_EXCEEDED_ERR",
        "QueryInterface",
        "R11F_G11F_B10F",
        "R16F",
        "R16I",
        "R16UI",
        "R32F",
        "R32I",
        "R32UI",
        "R8",
        "R8I",
        "R8UI",
        "R8_SNORM",
        "RASTERIZER_DISCARD",
        "READ",
        "READ_BUFFER",
        "READ_FRAMEBUFFER",
        "READ_FRAMEBUFFER_BINDING",
        "READ_ONLY",
        "READ_ONLY_ERR",
        "READ_WRITE",
        "RED",
        "RED_BITS",
        "RED_INTEGER",
        "REMOVAL",
        "RENDERBUFFER",
        "RENDERBUFFER_ALPHA_SIZE",
        "RENDERBUFFER_BINDING",
        "RENDERBUFFER_BLUE_SIZE",
        "RENDERBUFFER_DEPTH_SIZE",
        "RENDERBUFFER_GREEN_SIZE",
        "RENDERBUFFER_HEIGHT",
        "RENDERBUFFER_INTERNAL_FORMAT",
        "RENDERBUFFER_RED_SIZE",
        "RENDERBUFFER_SAMPLES",
        "RENDERBUFFER_STENCIL_SIZE",
        "RENDERBUFFER_WIDTH",
        "RENDERER",
        "RENDERING_INTENT_ABSOLUTE_COLORIMETRIC",
        "RENDERING_INTENT_AUTO",
        "RENDERING_INTENT_PERCEPTUAL",
        "RENDERING_INTENT_RELATIVE_COLORIMETRIC",
        "RENDERING_INTENT_SATURATION",
        "RENDERING_INTENT_UNKNOWN",
        "RENDER_ATTACHMENT",
        "REPEAT",
        "REPLACE",
        "RG",
        "RG16F",
        "RG16I",
        "RG16UI",
        "RG32F",
        "RG32I",
        "RG32UI",
        "RG8",
        "RG8I",
        "RG8UI",
        "RG8_SNORM",
        "RGB",
        "RGB10_A2",
        "RGB10_A2UI",
        "RGB16F",
        "RGB16I",
        "RGB16UI",
        "RGB32F",
        "RGB32I",
        "RGB32UI",
        "RGB565",
        "RGB5_A1",
        "RGB8",
        "RGB8I",
        "RGB8UI",
        "RGB8_SNORM",
        "RGB9_E5",
        "RGBA",
        "RGBA16F",
        "RGBA16I",
        "RGBA16UI",
        "RGBA32F",
        "RGBA32I",
        "RGBA32UI",
        "RGBA4",
        "RGBA8",
        "RGBA8I",
        "RGBA8UI",
        "RGBA8_SNORM",
        "RGBA_INTEGER",
        "RGBColor",
        "RGB_INTEGER",
        "RG_INTEGER",
        "ROTATION_CLOCKWISE",
        "ROTATION_COUNTERCLOCKWISE",
        "RTCCertificate",
        "RTCDTMFSender",
        "RTCDTMFToneChangeEvent",
        "RTCDataChannel",
        "RTCDataChannelEvent",
        "RTCDtlsTransport",
        "RTCError",
        "RTCErrorEvent",
        "RTCIceCandidate",
        "RTCIceTransport",
        "RTCPeerConnection",
        "RTCPeerConnectionIceErrorEvent",
        "RTCPeerConnectionIceEvent",
        "RTCRtpReceiver",
        "RTCRtpSender",
        "RTCRtpTransceiver",
        "RTCSctpTransport",
        "RTCSessionDescription",
        "RTCStatsReport",
        "RTCTrackEvent",
        "RadioNodeList",
        "Range",
        "RangeError",
        "RangeException",
        "ReadableStream",
        "ReadableStreamDefaultReader",
        "RecordErrorEvent",
        "Rect",
        "ReferenceError",
        "Reflect",
        "RegExp",
        "RelativeOrientationSensor",
        "RelativeTimeFormat",
        "RemotePlayback",
        "Report",
        "ReportBody",
        "ReportingObserver",
        "Request",
        "ResizeObserver",
        "ResizeObserverEntry",
        "ResizeObserverSize",
        "Response",
        "RuntimeError",
        "SAMPLER_2D",
        "SAMPLER_2D_ARRAY",
        "SAMPLER_2D_ARRAY_SHADOW",
        "SAMPLER_2D_SHADOW",
        "SAMPLER_3D",
        "SAMPLER_BINDING",
        "SAMPLER_CUBE",
        "SAMPLER_CUBE_SHADOW",
        "SAMPLES",
        "SAMPLE_ALPHA_TO_COVERAGE",
        "SAMPLE_BUFFERS",
        "SAMPLE_COVERAGE",
        "SAMPLE_COVERAGE_INVERT",
        "SAMPLE_COVERAGE_VALUE",
        "SAWTOOTH",
        "SCHEDULED_STATE",
        "SCISSOR_BOX",
        "SCISSOR_TEST",
        "SCROLL_PAGE_DOWN",
        "SCROLL_PAGE_UP",
        "SDP_ANSWER",
        "SDP_OFFER",
        "SDP_PRANSWER",
        "SECURITY_ERR",
        "SELECT",
        "SEPARATE_ATTRIBS",
        "SERIALIZE_ERR",
        "SEVERITY_ERROR",
        "SEVERITY_FATAL_ERROR",
        "SEVERITY_WARNING",
        "SHADER_COMPILER",
        "SHADER_TYPE",
        "SHADING_LANGUAGE_VERSION",
        "SHIFT_MASK",
        "SHORT",
        "SHOWING",
        "SHOW_ALL",
        "SHOW_ATTRIBUTE",
        "SHOW_CDATA_SECTION",
        "SHOW_COMMENT",
        "SHOW_DOCUMENT",
        "SHOW_DOCUMENT_FRAGMENT",
        "SHOW_DOCUMENT_TYPE",
        "SHOW_ELEMENT",
        "SHOW_ENTITY",
        "SHOW_ENTITY_REFERENCE",
        "SHOW_NOTATION",
        "SHOW_PROCESSING_INSTRUCTION",
        "SHOW_TEXT",
        "SIGNALED",
        "SIGNED_NORMALIZED",
        "SINE",
        "SOUNDFIELD",
        "SQLException",
        "SQRT1_2",
        "SQRT2",
        "SQUARE",
        "SRC_ALPHA",
        "SRC_ALPHA_SATURATE",
        "SRC_COLOR",
        "SRGB",
        "SRGB8",
        "SRGB8_ALPHA8",
        "START_TO_END",
        "START_TO_START",
        "STATIC_COPY",
        "STATIC_DRAW",
        "STATIC_READ",
        "STENCIL",
        "STENCIL_ATTACHMENT",
        "STENCIL_BACK_FAIL",
        "STENCIL_BACK_FUNC",
        "STENCIL_BACK_PASS_DEPTH_FAIL",
        "STENCIL_BACK_PASS_DEPTH_PASS",
        "STENCIL_BACK_REF",
        "STENCIL_BACK_VALUE_MASK",
        "STENCIL_BACK_WRITEMASK",
        "STENCIL_BITS",
        "STENCIL_BUFFER_BIT",
        "STENCIL_CLEAR_VALUE",
        "STENCIL_FAIL",
        "STENCIL_FUNC",
        "STENCIL_INDEX",
        "STENCIL_INDEX8",
        "STENCIL_PASS_DEPTH_FAIL",
        "STENCIL_PASS_DEPTH_PASS",
        "STENCIL_REF",
        "STENCIL_TEST",
        "STENCIL_VALUE_MASK",
        "STENCIL_WRITEMASK",
        "STORAGE",
        "STORAGE_BINDING",
        "STREAM_COPY",
        "STREAM_DRAW",
        "STREAM_READ",
        "STRING_TYPE",
        "STYLE_RULE",
        "SUBPIXEL_BITS",
        "SUPPORTS_RULE",
        "SVGAElement",
        "SVGAltGlyphDefElement",
        "SVGAltGlyphElement",
        "SVGAltGlyphItemElement",
        "SVGAngle",
        "SVGAnimateColorElement",
        "SVGAnimateElement",
        "SVGAnimateMotionElement",
        "SVGAnimateTransformElement",
        "SVGAnimatedAngle",
        "SVGAnimatedBoolean",
        "SVGAnimatedEnumeration",
        "SVGAnimatedInteger",
        "SVGAnimatedLength",
        "SVGAnimatedLengthList",
        "SVGAnimatedNumber",
        "SVGAnimatedNumberList",
        "SVGAnimatedPreserveAspectRatio",
        "SVGAnimatedRect",
        "SVGAnimatedString",
        "SVGAnimatedTransformList",
        "SVGAnimationElement",
        "SVGCircleElement",
        "SVGClipPathElement",
        "SVGColor",
        "SVGComponentTransferFunctionElement",
        "SVGCursorElement",
        "SVGDefsElement",
        "SVGDescElement",
        "SVGDiscardElement",
        "SVGDocument",
        "SVGElement",
        "SVGElementInstance",
        "SVGElementInstanceList",
        "SVGEllipseElement",
        "SVGException",
        "SVGFEBlendElement",
        "SVGFEColorMatrixElement",
        "SVGFEComponentTransferElement",
        "SVGFECompositeElement",
        "SVGFEConvolveMatrixElement",
        "SVGFEDiffuseLightingElement",
        "SVGFEDisplacementMapElement",
        "SVGFEDistantLightElement",
        "SVGFEDropShadowElement",
        "SVGFEFloodElement",
        "SVGFEFuncAElement",
        "SVGFEFuncBElement",
        "SVGFEFuncGElement",
        "SVGFEFuncRElement",
        "SVGFEGaussianBlurElement",
        "SVGFEImageElement",
        "SVGFEMergeElement",
        "SVGFEMergeNodeElement",
        "SVGFEMorphologyElement",
        "SVGFEOffsetElement",
        "SVGFEPointLightElement",
        "SVGFESpecularLightingElement",
        "SVGFESpotLightElement",
        "SVGFETileElement",
        "SVGFETurbulenceElement",
        "SVGFilterElement",
        "SVGFontElement",
        "SVGFontFaceElement",
        "SVGFontFaceFormatElement",
        "SVGFontFaceNameElement",
        "SVGFontFaceSrcElement",
        "SVGFontFaceUriElement",
        "SVGForeignObjectElement",
        "SVGGElement",
        "SVGGeometryElement",
        "SVGGlyphElement",
        "SVGGlyphRefElement",
        "SVGGradientElement",
        "SVGGraphicsElement",
        "SVGHKernElement",
        "SVGImageElement",
        "SVGLength",
        "SVGLengthList",
        "SVGLineElement",
        "SVGLinearGradientElement",
        "SVGMPathElement",
        "SVGMarkerElement",
        "SVGMaskElement",
        "SVGMatrix",
        "SVGMetadataElement",
        "SVGMissingGlyphElement",
        "SVGNumber",
        "SVGNumberList",
        "SVGPaint",
        "SVGPathElement",
        "SVGPathSeg",
        "SVGPathSegArcAbs",
        "SVGPathSegArcRel",
        "SVGPathSegClosePath",
        "SVGPathSegCurvetoCubicAbs",
        "SVGPathSegCurvetoCubicRel",
        "SVGPathSegCurvetoCubicSmoothAbs",
        "SVGPathSegCurvetoCubicSmoothRel",
        "SVGPathSegCurvetoQuadraticAbs",
        "SVGPathSegCurvetoQuadraticRel",
        "SVGPathSegCurvetoQuadraticSmoothAbs",
        "SVGPathSegCurvetoQuadraticSmoothRel",
        "SVGPathSegLinetoAbs",
        "SVGPathSegLinetoHorizontalAbs",
        "SVGPathSegLinetoHorizontalRel",
        "SVGPathSegLinetoRel",
        "SVGPathSegLinetoVerticalAbs",
        "SVGPathSegLinetoVerticalRel",
        "SVGPathSegList",
        "SVGPathSegMovetoAbs",
        "SVGPathSegMovetoRel",
        "SVGPatternElement",
        "SVGPoint",
        "SVGPointList",
        "SVGPolygonElement",
        "SVGPolylineElement",
        "SVGPreserveAspectRatio",
        "SVGRadialGradientElement",
        "SVGRect",
        "SVGRectElement",
        "SVGRenderingIntent",
        "SVGSVGElement",
        "SVGScriptElement",
        "SVGSetElement",
        "SVGStopElement",
        "SVGStringList",
        "SVGStyleElement",
        "SVGSwitchElement",
        "SVGSymbolElement",
        "SVGTRefElement",
        "SVGTSpanElement",
        "SVGTextContentElement",
        "SVGTextElement",
        "SVGTextPathElement",
        "SVGTextPositioningElement",
        "SVGTitleElement",
        "SVGTransform",
        "SVGTransformList",
        "SVGUnitTypes",
        "SVGUseElement",
        "SVGVKernElement",
        "SVGViewElement",
        "SVGViewSpec",
        "SVGZoomAndPan",
        "SVGZoomEvent",
        "SVG_ANGLETYPE_DEG",
        "SVG_ANGLETYPE_GRAD",
        "SVG_ANGLETYPE_RAD",
        "SVG_ANGLETYPE_UNKNOWN",
        "SVG_ANGLETYPE_UNSPECIFIED",
        "SVG_CHANNEL_A",
        "SVG_CHANNEL_B",
        "SVG_CHANNEL_G",
        "SVG_CHANNEL_R",
        "SVG_CHANNEL_UNKNOWN",
        "SVG_COLORTYPE_CURRENTCOLOR",
        "SVG_COLORTYPE_RGBCOLOR",
        "SVG_COLORTYPE_RGBCOLOR_ICCCOLOR",
        "SVG_COLORTYPE_UNKNOWN",
        "SVG_EDGEMODE_DUPLICATE",
        "SVG_EDGEMODE_NONE",
        "SVG_EDGEMODE_UNKNOWN",
        "SVG_EDGEMODE_WRAP",
        "SVG_FEBLEND_MODE_COLOR",
        "SVG_FEBLEND_MODE_COLOR_BURN",
        "SVG_FEBLEND_MODE_COLOR_DODGE",
        "SVG_FEBLEND_MODE_DARKEN",
        "SVG_FEBLEND_MODE_DIFFERENCE",
        "SVG_FEBLEND_MODE_EXCLUSION",
        "SVG_FEBLEND_MODE_HARD_LIGHT",
        "SVG_FEBLEND_MODE_HUE",
        "SVG_FEBLEND_MODE_LIGHTEN",
        "SVG_FEBLEND_MODE_LUMINOSITY",
        "SVG_FEBLEND_MODE_MULTIPLY",
        "SVG_FEBLEND_MODE_NORMAL",
        "SVG_FEBLEND_MODE_OVERLAY",
        "SVG_FEBLEND_MODE_SATURATION",
        "SVG_FEBLEND_MODE_SCREEN",
        "SVG_FEBLEND_MODE_SOFT_LIGHT",
        "SVG_FEBLEND_MODE_UNKNOWN",
        "SVG_FECOLORMATRIX_TYPE_HUEROTATE",
        "SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA",
        "SVG_FECOLORMATRIX_TYPE_MATRIX",
        "SVG_FECOLORMATRIX_TYPE_SATURATE",
        "SVG_FECOLORMATRIX_TYPE_UNKNOWN",
        "SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE",
        "SVG_FECOMPONENTTRANSFER_TYPE_GAMMA",
        "SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY",
        "SVG_FECOMPONENTTRANSFER_TYPE_LINEAR",
        "SVG_FECOMPONENTTRANSFER_TYPE_TABLE",
        "SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN",
        "SVG_FECOMPOSITE_OPERATOR_ARITHMETIC",
        "SVG_FECOMPOSITE_OPERATOR_ATOP",
        "SVG_FECOMPOSITE_OPERATOR_IN",
        "SVG_FECOMPOSITE_OPERATOR_OUT",
        "SVG_FECOMPOSITE_OPERATOR_OVER",
        "SVG_FECOMPOSITE_OPERATOR_UNKNOWN",
        "SVG_FECOMPOSITE_OPERATOR_XOR",
        "SVG_INVALID_VALUE_ERR",
        "SVG_LENGTHTYPE_CM",
        "SVG_LENGTHTYPE_EMS",
        "SVG_LENGTHTYPE_EXS",
        "SVG_LENGTHTYPE_IN",
        "SVG_LENGTHTYPE_MM",
        "SVG_LENGTHTYPE_NUMBER",
        "SVG_LENGTHTYPE_PC",
        "SVG_LENGTHTYPE_PERCENTAGE",
        "SVG_LENGTHTYPE_PT",
        "SVG_LENGTHTYPE_PX",
        "SVG_LENGTHTYPE_UNKNOWN",
        "SVG_MARKERUNITS_STROKEWIDTH",
        "SVG_MARKERUNITS_UNKNOWN",
        "SVG_MARKERUNITS_USERSPACEONUSE",
        "SVG_MARKER_ORIENT_ANGLE",
        "SVG_MARKER_ORIENT_AUTO",
        "SVG_MARKER_ORIENT_UNKNOWN",
        "SVG_MASKTYPE_ALPHA",
        "SVG_MASKTYPE_LUMINANCE",
        "SVG_MATRIX_NOT_INVERTABLE",
        "SVG_MEETORSLICE_MEET",
        "SVG_MEETORSLICE_SLICE",
        "SVG_MEETORSLICE_UNKNOWN",
        "SVG_MORPHOLOGY_OPERATOR_DILATE",
        "SVG_MORPHOLOGY_OPERATOR_ERODE",
        "SVG_MORPHOLOGY_OPERATOR_UNKNOWN",
        "SVG_PAINTTYPE_CURRENTCOLOR",
        "SVG_PAINTTYPE_NONE",
        "SVG_PAINTTYPE_RGBCOLOR",
        "SVG_PAINTTYPE_RGBCOLOR_ICCCOLOR",
        "SVG_PAINTTYPE_UNKNOWN",
        "SVG_PAINTTYPE_URI",
        "SVG_PAINTTYPE_URI_CURRENTCOLOR",
        "SVG_PAINTTYPE_URI_NONE",
        "SVG_PAINTTYPE_URI_RGBCOLOR",
        "SVG_PAINTTYPE_URI_RGBCOLOR_ICCCOLOR",
        "SVG_PRESERVEASPECTRATIO_NONE",
        "SVG_PRESERVEASPECTRATIO_UNKNOWN",
        "SVG_PRESERVEASPECTRATIO_XMAXYMAX",
        "SVG_PRESERVEASPECTRATIO_XMAXYMID",
        "SVG_PRESERVEASPECTRATIO_XMAXYMIN",
        "SVG_PRESERVEASPECTRATIO_XMIDYMAX",
        "SVG_PRESERVEASPECTRATIO_XMIDYMID",
        "SVG_PRESERVEASPECTRATIO_XMIDYMIN",
        "SVG_PRESERVEASPECTRATIO_XMINYMAX",
        "SVG_PRESERVEASPECTRATIO_XMINYMID",
        "SVG_PRESERVEASPECTRATIO_XMINYMIN",
        "SVG_SPREADMETHOD_PAD",
        "SVG_SPREADMETHOD_REFLECT",
        "SVG_SPREADMETHOD_REPEAT",
        "SVG_SPREADMETHOD_UNKNOWN",
        "SVG_STITCHTYPE_NOSTITCH",
        "SVG_STITCHTYPE_STITCH",
        "SVG_STITCHTYPE_UNKNOWN",
        "SVG_TRANSFORM_MATRIX",
        "SVG_TRANSFORM_ROTATE",
        "SVG_TRANSFORM_SCALE",
        "SVG_TRANSFORM_SKEWX",
        "SVG_TRANSFORM_SKEWY",
        "SVG_TRANSFORM_TRANSLATE",
        "SVG_TRANSFORM_UNKNOWN",
        "SVG_TURBULENCE_TYPE_FRACTALNOISE",
        "SVG_TURBULENCE_TYPE_TURBULENCE",
        "SVG_TURBULENCE_TYPE_UNKNOWN",
        "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX",
        "SVG_UNIT_TYPE_UNKNOWN",
        "SVG_UNIT_TYPE_USERSPACEONUSE",
        "SVG_WRONG_TYPE_ERR",
        "SVG_ZOOMANDPAN_DISABLE",
        "SVG_ZOOMANDPAN_MAGNIFY",
        "SVG_ZOOMANDPAN_UNKNOWN",
        "SYNC_CONDITION",
        "SYNC_FENCE",
        "SYNC_FLAGS",
        "SYNC_FLUSH_COMMANDS_BIT",
        "SYNC_GPU_COMMANDS_COMPLETE",
        "SYNC_STATUS",
        "SYNTAX_ERR",
        "SavedPages",
        "Screen",
        "ScreenOrientation",
        "Script",
        "ScriptProcessorNode",
        "ScrollAreaEvent",
        "SecurityPolicyViolationEvent",
        "Selection",
        "Sensor",
        "SensorErrorEvent",
        "ServiceWorker",
        "ServiceWorkerContainer",
        "ServiceWorkerRegistration",
        "SessionDescription",
        "Set",
        "ShadowRoot",
        "SharedArrayBuffer",
        "SharedWorker",
        "SimpleGestureEvent",
        "SourceBuffer",
        "SourceBufferList",
        "SpeechSynthesis",
        "SpeechSynthesisErrorEvent",
        "SpeechSynthesisEvent",
        "SpeechSynthesisUtterance",
        "SpeechSynthesisVoice",
        "StaticRange",
        "StereoPannerNode",
        "StopIteration",
        "Storage",
        "StorageEvent",
        "StorageManager",
        "String",
        "StructType",
        "StylePropertyMap",
        "StylePropertyMapReadOnly",
        "StyleSheet",
        "StyleSheetList",
        "SubmitEvent",
        "SubtleCrypto",
        "Symbol",
        "SyncManager",
        "SyntaxError",
        "TEMPORARY",
        "TEXTPATH_METHODTYPE_ALIGN",
        "TEXTPATH_METHODTYPE_STRETCH",
        "TEXTPATH_METHODTYPE_UNKNOWN",
        "TEXTPATH_SPACINGTYPE_AUTO",
        "TEXTPATH_SPACINGTYPE_EXACT",
        "TEXTPATH_SPACINGTYPE_UNKNOWN",
        "TEXTURE",
        "TEXTURE0",
        "TEXTURE1",
        "TEXTURE10",
        "TEXTURE11",
        "TEXTURE12",
        "TEXTURE13",
        "TEXTURE14",
        "TEXTURE15",
        "TEXTURE16",
        "TEXTURE17",
        "TEXTURE18",
        "TEXTURE19",
        "TEXTURE2",
        "TEXTURE20",
        "TEXTURE21",
        "TEXTURE22",
        "TEXTURE23",
        "TEXTURE24",
        "TEXTURE25",
        "TEXTURE26",
        "TEXTURE27",
        "TEXTURE28",
        "TEXTURE29",
        "TEXTURE3",
        "TEXTURE30",
        "TEXTURE31",
        "TEXTURE4",
        "TEXTURE5",
        "TEXTURE6",
        "TEXTURE7",
        "TEXTURE8",
        "TEXTURE9",
        "TEXTURE_2D",
        "TEXTURE_2D_ARRAY",
        "TEXTURE_3D",
        "TEXTURE_BASE_LEVEL",
        "TEXTURE_BINDING",
        "TEXTURE_BINDING_2D",
        "TEXTURE_BINDING_2D_ARRAY",
        "TEXTURE_BINDING_3D",
        "TEXTURE_BINDING_CUBE_MAP",
        "TEXTURE_COMPARE_FUNC",
        "TEXTURE_COMPARE_MODE",
        "TEXTURE_CUBE_MAP",
        "TEXTURE_CUBE_MAP_NEGATIVE_X",
        "TEXTURE_CUBE_MAP_NEGATIVE_Y",
        "TEXTURE_CUBE_MAP_NEGATIVE_Z",
        "TEXTURE_CUBE_MAP_POSITIVE_X",
        "TEXTURE_CUBE_MAP_POSITIVE_Y",
        "TEXTURE_CUBE_MAP_POSITIVE_Z",
        "TEXTURE_IMMUTABLE_FORMAT",
        "TEXTURE_IMMUTABLE_LEVELS",
        "TEXTURE_MAG_FILTER",
        "TEXTURE_MAX_ANISOTROPY_EXT",
        "TEXTURE_MAX_LEVEL",
        "TEXTURE_MAX_LOD",
        "TEXTURE_MIN_FILTER",
        "TEXTURE_MIN_LOD",
        "TEXTURE_WRAP_R",
        "TEXTURE_WRAP_S",
        "TEXTURE_WRAP_T",
        "TEXT_NODE",
        "TIMEOUT",
        "TIMEOUT_ERR",
        "TIMEOUT_EXPIRED",
        "TIMEOUT_IGNORED",
        "TOO_LARGE_ERR",
        "TRANSACTION_INACTIVE_ERR",
        "TRANSFORM_FEEDBACK",
        "TRANSFORM_FEEDBACK_ACTIVE",
        "TRANSFORM_FEEDBACK_BINDING",
        "TRANSFORM_FEEDBACK_BUFFER",
        "TRANSFORM_FEEDBACK_BUFFER_BINDING",
        "TRANSFORM_FEEDBACK_BUFFER_MODE",
        "TRANSFORM_FEEDBACK_BUFFER_SIZE",
        "TRANSFORM_FEEDBACK_BUFFER_START",
        "TRANSFORM_FEEDBACK_PAUSED",
        "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN",
        "TRANSFORM_FEEDBACK_VARYINGS",
        "TRIANGLE",
        "TRIANGLES",
        "TRIANGLE_FAN",
        "TRIANGLE_STRIP",
        "TYPE_BACK_FORWARD",
        "TYPE_ERR",
        "TYPE_MISMATCH_ERR",
        "TYPE_NAVIGATE",
        "TYPE_RELOAD",
        "TYPE_RESERVED",
        "Table",
        "TaskAttributionTiming",
        "Text",
        "TextDecoder",
        "TextDecoderStream",
        "TextEncoder",
        "TextEncoderStream",
        "TextEvent",
        "TextMetrics",
        "TextTrack",
        "TextTrackCue",
        "TextTrackCueList",
        "TextTrackList",
        "TimeEvent",
        "TimeRanges",
        "Touch",
        "TouchEvent",
        "TouchList",
        "TrackEvent",
        "TransformStream",
        "TransitionEvent",
        "TreeWalker",
        "TrustedHTML",
        "TrustedScript",
        "TrustedScriptURL",
        "TrustedTypePolicy",
        "TrustedTypePolicyFactory",
        "TypeError",
        "TypedObject",
        "U2F",
        "UIEvent",
        "UNCACHED",
        "UNIFORM",
        "UNIFORM_ARRAY_STRIDE",
        "UNIFORM_BLOCK_ACTIVE_UNIFORMS",
        "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES",
        "UNIFORM_BLOCK_BINDING",
        "UNIFORM_BLOCK_DATA_SIZE",
        "UNIFORM_BLOCK_INDEX",
        "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER",
        "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER",
        "UNIFORM_BUFFER",
        "UNIFORM_BUFFER_BINDING",
        "UNIFORM_BUFFER_OFFSET_ALIGNMENT",
        "UNIFORM_BUFFER_SIZE",
        "UNIFORM_BUFFER_START",
        "UNIFORM_IS_ROW_MAJOR",
        "UNIFORM_MATRIX_STRIDE",
        "UNIFORM_OFFSET",
        "UNIFORM_SIZE",
        "UNIFORM_TYPE",
        "UNKNOWN_ERR",
        "UNKNOWN_RULE",
        "UNMASKED_RENDERER_WEBGL",
        "UNMASKED_VENDOR_WEBGL",
        "UNORDERED_NODE_ITERATOR_TYPE",
        "UNORDERED_NODE_SNAPSHOT_TYPE",
        "UNPACK_ALIGNMENT",
        "UNPACK_COLORSPACE_CONVERSION_WEBGL",
        "UNPACK_FLIP_Y_WEBGL",
        "UNPACK_IMAGE_HEIGHT",
        "UNPACK_PREMULTIPLY_ALPHA_WEBGL",
        "UNPACK_ROW_LENGTH",
        "UNPACK_SKIP_IMAGES",
        "UNPACK_SKIP_PIXELS",
        "UNPACK_SKIP_ROWS",
        "UNSCHEDULED_STATE",
        "UNSENT",
        "UNSIGNALED",
        "UNSIGNED_BYTE",
        "UNSIGNED_INT",
        "UNSIGNED_INT_10F_11F_11F_REV",
        "UNSIGNED_INT_24_8",
        "UNSIGNED_INT_2_10_10_10_REV",
        "UNSIGNED_INT_5_9_9_9_REV",
        "UNSIGNED_INT_SAMPLER_2D",
        "UNSIGNED_INT_SAMPLER_2D_ARRAY",
        "UNSIGNED_INT_SAMPLER_3D",
        "UNSIGNED_INT_SAMPLER_CUBE",
        "UNSIGNED_INT_VEC2",
        "UNSIGNED_INT_VEC3",
        "UNSIGNED_INT_VEC4",
        "UNSIGNED_NORMALIZED",
        "UNSIGNED_SHORT",
        "UNSIGNED_SHORT_4_4_4_4",
        "UNSIGNED_SHORT_5_5_5_1",
        "UNSIGNED_SHORT_5_6_5",
        "UNSPECIFIED_EVENT_TYPE_ERR",
        "UPDATEREADY",
        "URIError",
        "URL",
        "URLSearchParams",
        "URLUnencoded",
        "URL_MISMATCH_ERR",
        "USB",
        "USBAlternateInterface",
        "USBConfiguration",
        "USBConnectionEvent",
        "USBDevice",
        "USBEndpoint",
        "USBInTransferResult",
        "USBInterface",
        "USBIsochronousInTransferPacket",
        "USBIsochronousInTransferResult",
        "USBIsochronousOutTransferPacket",
        "USBIsochronousOutTransferResult",
        "USBOutTransferResult",
        "UTC",
        "Uint16Array",
        "Uint32Array",
        "Uint8Array",
        "Uint8ClampedArray",
        "UserActivation",
        "UserMessageHandler",
        "UserMessageHandlersNamespace",
        "UserProximityEvent",
        "VALIDATE_STATUS",
        "VALIDATION_ERR",
        "VARIABLES_RULE",
        "VENDOR",
        "VERSION",
        "VERSION_CHANGE",
        "VERSION_ERR",
        "VERTEX",
        "VERTEX_ARRAY_BINDING",
        "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",
        "VERTEX_ATTRIB_ARRAY_DIVISOR",
        "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE",
        "VERTEX_ATTRIB_ARRAY_ENABLED",
        "VERTEX_ATTRIB_ARRAY_INTEGER",
        "VERTEX_ATTRIB_ARRAY_NORMALIZED",
        "VERTEX_ATTRIB_ARRAY_POINTER",
        "VERTEX_ATTRIB_ARRAY_SIZE",
        "VERTEX_ATTRIB_ARRAY_STRIDE",
        "VERTEX_ATTRIB_ARRAY_TYPE",
        "VERTEX_SHADER",
        "VERTICAL",
        "VERTICAL_AXIS",
        "VER_ERR",
        "VIEWPORT",
        "VIEWPORT_RULE",
        "VRDisplay",
        "VRDisplayCapabilities",
        "VRDisplayEvent",
        "VREyeParameters",
        "VRFieldOfView",
        "VRFrameData",
        "VRPose",
        "VRStageParameters",
        "VTTCue",
        "VTTRegion",
        "ValidityState",
        "VideoPlaybackQuality",
        "VideoStreamTrack",
        "VisualViewport",
        "WAIT_FAILED",
        "WEBKIT_FILTER_RULE",
        "WEBKIT_KEYFRAMES_RULE",
        "WEBKIT_KEYFRAME_RULE",
        "WEBKIT_REGION_RULE",
        "WRITE",
        "WRONG_DOCUMENT_ERR",
        "WakeLock",
        "WakeLockSentinel",
        "WasmAnyRef",
        "WaveShaperNode",
        "WeakMap",
        "WeakRef",
        "WeakSet",
        "WebAssembly",
        "WebGL2RenderingContext",
        "WebGLActiveInfo",
        "WebGLBuffer",
        "WebGLContextEvent",
        "WebGLFramebuffer",
        "WebGLProgram",
        "WebGLQuery",
        "WebGLRenderbuffer",
        "WebGLRenderingContext",
        "WebGLSampler",
        "WebGLShader",
        "WebGLShaderPrecisionFormat",
        "WebGLSync",
        "WebGLTexture",
        "WebGLTransformFeedback",
        "WebGLUniformLocation",
        "WebGLVertexArray",
        "WebGLVertexArrayObject",
        "WebKitAnimationEvent",
        "WebKitBlobBuilder",
        "WebKitCSSFilterRule",
        "WebKitCSSFilterValue",
        "WebKitCSSKeyframeRule",
        "WebKitCSSKeyframesRule",
        "WebKitCSSMatrix",
        "WebKitCSSRegionRule",
        "WebKitCSSTransformValue",
        "WebKitDataCue",
        "WebKitGamepad",
        "WebKitMediaKeyError",
        "WebKitMediaKeyMessageEvent",
        "WebKitMediaKeySession",
        "WebKitMediaKeys",
        "WebKitMediaSource",
        "WebKitMutationObserver",
        "WebKitNamespace",
        "WebKitPlaybackTargetAvailabilityEvent",
        "WebKitPoint",
        "WebKitShadowRoot",
        "WebKitSourceBuffer",
        "WebKitSourceBufferList",
        "WebKitTransitionEvent",
        "WebSocket",
        "WebkitAlignContent",
        "WebkitAlignItems",
        "WebkitAlignSelf",
        "WebkitAnimation",
        "WebkitAnimationDelay",
        "WebkitAnimationDirection",
        "WebkitAnimationDuration",
        "WebkitAnimationFillMode",
        "WebkitAnimationIterationCount",
        "WebkitAnimationName",
        "WebkitAnimationPlayState",
        "WebkitAnimationTimingFunction",
        "WebkitAppearance",
        "WebkitBackfaceVisibility",
        "WebkitBackgroundClip",
        "WebkitBackgroundOrigin",
        "WebkitBackgroundSize",
        "WebkitBorderBottomLeftRadius",
        "WebkitBorderBottomRightRadius",
        "WebkitBorderImage",
        "WebkitBorderRadius",
        "WebkitBorderTopLeftRadius",
        "WebkitBorderTopRightRadius",
        "WebkitBoxAlign",
        "WebkitBoxDirection",
        "WebkitBoxFlex",
        "WebkitBoxOrdinalGroup",
        "WebkitBoxOrient",
        "WebkitBoxPack",
        "WebkitBoxShadow",
        "WebkitBoxSizing",
        "WebkitFilter",
        "WebkitFlex",
        "WebkitFlexBasis",
        "WebkitFlexDirection",
        "WebkitFlexFlow",
        "WebkitFlexGrow",
        "WebkitFlexShrink",
        "WebkitFlexWrap",
        "WebkitJustifyContent",
        "WebkitLineClamp",
        "WebkitMask",
        "WebkitMaskClip",
        "WebkitMaskComposite",
        "WebkitMaskImage",
        "WebkitMaskOrigin",
        "WebkitMaskPosition",
        "WebkitMaskPositionX",
        "WebkitMaskPositionY",
        "WebkitMaskRepeat",
        "WebkitMaskSize",
        "WebkitOrder",
        "WebkitPerspective",
        "WebkitPerspectiveOrigin",
        "WebkitTextFillColor",
        "WebkitTextSizeAdjust",
        "WebkitTextStroke",
        "WebkitTextStrokeColor",
        "WebkitTextStrokeWidth",
        "WebkitTransform",
        "WebkitTransformOrigin",
        "WebkitTransformStyle",
        "WebkitTransition",
        "WebkitTransitionDelay",
        "WebkitTransitionDuration",
        "WebkitTransitionProperty",
        "WebkitTransitionTimingFunction",
        "WebkitUserSelect",
        "WheelEvent",
        "Window",
        "Worker",
        "Worklet",
        "WritableStream",
        "WritableStreamDefaultWriter",
        "XMLDocument",
        "XMLHttpRequest",
        "XMLHttpRequestEventTarget",
        "XMLHttpRequestException",
        "XMLHttpRequestProgressEvent",
        "XMLHttpRequestUpload",
        "XMLSerializer",
        "XMLStylesheetProcessingInstruction",
        "XPathEvaluator",
        "XPathException",
        "XPathExpression",
        "XPathNSResolver",
        "XPathResult",
        "XRBoundedReferenceSpace",
        "XRDOMOverlayState",
        "XRFrame",
        "XRHitTestResult",
        "XRHitTestSource",
        "XRInputSource",
        "XRInputSourceArray",
        "XRInputSourceEvent",
        "XRInputSourcesChangeEvent",
        "XRLayer",
        "XRPose",
        "XRRay",
        "XRReferenceSpace",
        "XRReferenceSpaceEvent",
        "XRRenderState",
        "XRRigidTransform",
        "XRSession",
        "XRSessionEvent",
        "XRSpace",
        "XRSystem",
        "XRTransientInputHitTestResult",
        "XRTransientInputHitTestSource",
        "XRView",
        "XRViewerPose",
        "XRViewport",
        "XRWebGLLayer",
        "XSLTProcessor",
        "ZERO",
        "_XD0M_",
        "_YD0M_",
        "__brand",
        "__defineGetter__",
        "__defineSetter__",
        "__lookupGetter__",
        "__lookupSetter__",
        "__opera",
        "__proto__",
        "_browserjsran",
        "a",
        "aLink",
        "abbr",
        "abort",
        "aborted",
        "abs",
        "absolute",
        "acceleration",
        "accelerationIncludingGravity",
        "accelerator",
        "accept",
        "acceptCharset",
        "acceptNode",
        "access",
        "accessKey",
        "accessKeyLabel",
        "accuracy",
        "acos",
        "acosh",
        "action",
        "actionURL",
        "actions",
        "activated",
        "active",
        "activeCues",
        "activeElement",
        "activeSourceBuffers",
        "activeSourceCount",
        "activeTexture",
        "activeVRDisplays",
        "actualBoundingBoxAscent",
        "actualBoundingBoxDescent",
        "actualBoundingBoxLeft",
        "actualBoundingBoxRight",
        "add",
        "addAll",
        "addBehavior",
        "addCandidate",
        "addColorStop",
        "addCue",
        "addElement",
        "addEventListener",
        "addFilter",
        "addFromString",
        "addFromUri",
        "addIceCandidate",
        "addImport",
        "addListener",
        "addModule",
        "addNamed",
        "addPageRule",
        "addPath",
        "addPointer",
        "addRange",
        "addRegion",
        "addRule",
        "addSearchEngine",
        "addSourceBuffer",
        "addStream",
        "addTextTrack",
        "addTrack",
        "addTransceiver",
        "addWakeLockListener",
        "added",
        "addedNodes",
        "additionalName",
        "additiveSymbols",
        "addons",
        "address",
        "addressLine",
        "addressModeU",
        "addressModeV",
        "addressModeW",
        "adoptNode",
        "adoptedStyleSheets",
        "adr",
        "advance",
        "after",
        "album",
        "alert",
        "algorithm",
        "align",
        "align-content",
        "align-items",
        "align-self",
        "alignContent",
        "alignItems",
        "alignSelf",
        "alignmentBaseline",
        "alinkColor",
        "all",
        "allSettled",
        "allow",
        "allowFullscreen",
        "allowPaymentRequest",
        "allowedDirections",
        "allowedFeatures",
        "allowedToPlay",
        "allowsFeature",
        "alpha",
        "alphaMode",
        "alphaToCoverageEnabled",
        "alt",
        "altGraphKey",
        "altHtml",
        "altKey",
        "altLeft",
        "alternate",
        "alternateSetting",
        "alternates",
        "altitude",
        "altitudeAccuracy",
        "amplitude",
        "ancestorOrigins",
        "anchor",
        "anchorNode",
        "anchorOffset",
        "anchors",
        "and",
        "angle",
        "angularAcceleration",
        "angularVelocity",
        "animVal",
        "animate",
        "animatedInstanceRoot",
        "animatedNormalizedPathSegList",
        "animatedPathSegList",
        "animatedPoints",
        "animation",
        "animation-delay",
        "animation-direction",
        "animation-duration",
        "animation-fill-mode",
        "animation-iteration-count",
        "animation-name",
        "animation-play-state",
        "animation-timing-function",
        "animationDelay",
        "animationDirection",
        "animationDuration",
        "animationFillMode",
        "animationIterationCount",
        "animationName",
        "animationPlayState",
        "animationStartTime",
        "animationTimingFunction",
        "animationsPaused",
        "anniversary",
        "antialias",
        "anticipatedRemoval",
        "any",
        "app",
        "appCodeName",
        "appMinorVersion",
        "appName",
        "appNotifications",
        "appVersion",
        "appearance",
        "append",
        "appendBuffer",
        "appendChild",
        "appendData",
        "appendItem",
        "appendMedium",
        "appendNamed",
        "appendRule",
        "appendStream",
        "appendWindowEnd",
        "appendWindowStart",
        "applets",
        "applicationCache",
        "applicationServerKey",
        "apply",
        "applyConstraints",
        "applyElement",
        "arc",
        "arcTo",
        "architecture",
        "archive",
        "areas",
        "arguments",
        "ariaAtomic",
        "ariaAutoComplete",
        "ariaBusy",
        "ariaChecked",
        "ariaColCount",
        "ariaColIndex",
        "ariaColSpan",
        "ariaCurrent",
        "ariaDescription",
        "ariaDisabled",
        "ariaExpanded",
        "ariaHasPopup",
        "ariaHidden",
        "ariaKeyShortcuts",
        "ariaLabel",
        "ariaLevel",
        "ariaLive",
        "ariaModal",
        "ariaMultiLine",
        "ariaMultiSelectable",
        "ariaOrientation",
        "ariaPlaceholder",
        "ariaPosInSet",
        "ariaPressed",
        "ariaReadOnly",
        "ariaRelevant",
        "ariaRequired",
        "ariaRoleDescription",
        "ariaRowCount",
        "ariaRowIndex",
        "ariaRowSpan",
        "ariaSelected",
        "ariaSetSize",
        "ariaSort",
        "ariaValueMax",
        "ariaValueMin",
        "ariaValueNow",
        "ariaValueText",
        "arrayBuffer",
        "arrayLayerCount",
        "arrayStride",
        "artist",
        "artwork",
        "as",
        "asIntN",
        "asUintN",
        "asin",
        "asinh",
        "aspect",
        "assert",
        "assign",
        "assignedElements",
        "assignedNodes",
        "assignedSlot",
        "async",
        "asyncIterator",
        "atEnd",
        "atan",
        "atan2",
        "atanh",
        "atob",
        "attachEvent",
        "attachInternals",
        "attachShader",
        "attachShadow",
        "attachments",
        "attack",
        "attestationObject",
        "attrChange",
        "attrName",
        "attributeFilter",
        "attributeName",
        "attributeNamespace",
        "attributeOldValue",
        "attributeStyleMap",
        "attributes",
        "attribution",
        "audioBitsPerSecond",
        "audioTracks",
        "audioWorklet",
        "authenticatedSignedWrites",
        "authenticatorData",
        "autoIncrement",
        "autobuffer",
        "autocapitalize",
        "autocomplete",
        "autocorrect",
        "autofocus",
        "automationRate",
        "autoplay",
        "availHeight",
        "availLeft",
        "availTop",
        "availWidth",
        "availability",
        "available",
        "aversion",
        "ax",
        "axes",
        "axis",
        "ay",
        "azimuth",
        "b",
        "back",
        "backface-visibility",
        "backfaceVisibility",
        "background",
        "background-attachment",
        "background-blend-mode",
        "background-clip",
        "background-color",
        "background-image",
        "background-origin",
        "background-position",
        "background-position-x",
        "background-position-y",
        "background-repeat",
        "background-size",
        "backgroundAttachment",
        "backgroundBlendMode",
        "backgroundClip",
        "backgroundColor",
        "backgroundFetch",
        "backgroundImage",
        "backgroundOrigin",
        "backgroundPosition",
        "backgroundPositionX",
        "backgroundPositionY",
        "backgroundRepeat",
        "backgroundSize",
        "badInput",
        "badge",
        "balance",
        "baseArrayLayer",
        "baseFrequencyX",
        "baseFrequencyY",
        "baseLatency",
        "baseLayer",
        "baseMipLevel",
        "baseNode",
        "baseOffset",
        "baseURI",
        "baseVal",
        "baselineShift",
        "battery",
        "bday",
        "before",
        "beginComputePass",
        "beginElement",
        "beginElementAt",
        "beginOcclusionQuery",
        "beginPath",
        "beginQuery",
        "beginRenderPass",
        "beginTransformFeedback",
        "beginningOfPassWriteIndex",
        "behavior",
        "behaviorCookie",
        "behaviorPart",
        "behaviorUrns",
        "beta",
        "bezierCurveTo",
        "bgColor",
        "bgProperties",
        "bias",
        "big",
        "bigint64",
        "biguint64",
        "binaryType",
        "bind",
        "bindAttribLocation",
        "bindBuffer",
        "bindBufferBase",
        "bindBufferRange",
        "bindFramebuffer",
        "bindGroupLayouts",
        "bindRenderbuffer",
        "bindSampler",
        "bindTexture",
        "bindTransformFeedback",
        "bindVertexArray",
        "binding",
        "bitness",
        "blend",
        "blendColor",
        "blendEquation",
        "blendEquationSeparate",
        "blendFunc",
        "blendFuncSeparate",
        "blink",
        "blitFramebuffer",
        "blob",
        "block-size",
        "blockDirection",
        "blockSize",
        "blockedURI",
        "blue",
        "bluetooth",
        "blur",
        "body",
        "bodyUsed",
        "bold",
        "bookmarks",
        "booleanValue",
        "border",
        "border-block",
        "border-block-color",
        "border-block-end",
        "border-block-end-color",
        "border-block-end-style",
        "border-block-end-width",
        "border-block-start",
        "border-block-start-color",
        "border-block-start-style",
        "border-block-start-width",
        "border-block-style",
        "border-block-width",
        "border-bottom",
        "border-bottom-color",
        "border-bottom-left-radius",
        "border-bottom-right-radius",
        "border-bottom-style",
        "border-bottom-width",
        "border-collapse",
        "border-color",
        "border-end-end-radius",
        "border-end-start-radius",
        "border-image",
        "border-image-outset",
        "border-image-repeat",
        "border-image-slice",
        "border-image-source",
        "border-image-width",
        "border-inline",
        "border-inline-color",
        "border-inline-end",
        "border-inline-end-color",
        "border-inline-end-style",
        "border-inline-end-width",
        "border-inline-start",
        "border-inline-start-color",
        "border-inline-start-style",
        "border-inline-start-width",
        "border-inline-style",
        "border-inline-width",
        "border-left",
        "border-left-color",
        "border-left-style",
        "border-left-width",
        "border-radius",
        "border-right",
        "border-right-color",
        "border-right-style",
        "border-right-width",
        "border-spacing",
        "border-start-end-radius",
        "border-start-start-radius",
        "border-style",
        "border-top",
        "border-top-color",
        "border-top-left-radius",
        "border-top-right-radius",
        "border-top-style",
        "border-top-width",
        "border-width",
        "borderBlock",
        "borderBlockColor",
        "borderBlockEnd",
        "borderBlockEndColor",
        "borderBlockEndStyle",
        "borderBlockEndWidth",
        "borderBlockStart",
        "borderBlockStartColor",
        "borderBlockStartStyle",
        "borderBlockStartWidth",
        "borderBlockStyle",
        "borderBlockWidth",
        "borderBottom",
        "borderBottomColor",
        "borderBottomLeftRadius",
        "borderBottomRightRadius",
        "borderBottomStyle",
        "borderBottomWidth",
        "borderBoxSize",
        "borderCollapse",
        "borderColor",
        "borderColorDark",
        "borderColorLight",
        "borderEndEndRadius",
        "borderEndStartRadius",
        "borderImage",
        "borderImageOutset",
        "borderImageRepeat",
        "borderImageSlice",
        "borderImageSource",
        "borderImageWidth",
        "borderInline",
        "borderInlineColor",
        "borderInlineEnd",
        "borderInlineEndColor",
        "borderInlineEndStyle",
        "borderInlineEndWidth",
        "borderInlineStart",
        "borderInlineStartColor",
        "borderInlineStartStyle",
        "borderInlineStartWidth",
        "borderInlineStyle",
        "borderInlineWidth",
        "borderLeft",
        "borderLeftColor",
        "borderLeftStyle",
        "borderLeftWidth",
        "borderRadius",
        "borderRight",
        "borderRightColor",
        "borderRightStyle",
        "borderRightWidth",
        "borderSpacing",
        "borderStartEndRadius",
        "borderStartStartRadius",
        "borderStyle",
        "borderTop",
        "borderTopColor",
        "borderTopLeftRadius",
        "borderTopRightRadius",
        "borderTopStyle",
        "borderTopWidth",
        "borderWidth",
        "bottom",
        "bottomMargin",
        "bound",
        "boundElements",
        "boundingClientRect",
        "boundingHeight",
        "boundingLeft",
        "boundingTop",
        "boundingWidth",
        "bounds",
        "boundsGeometry",
        "box-decoration-break",
        "box-shadow",
        "box-sizing",
        "boxDecorationBreak",
        "boxShadow",
        "boxSizing",
        "brand",
        "brands",
        "break-after",
        "break-before",
        "break-inside",
        "breakAfter",
        "breakBefore",
        "breakInside",
        "broadcast",
        "browserLanguage",
        "btoa",
        "bubbles",
        "buffer",
        "bufferData",
        "bufferDepth",
        "bufferSize",
        "bufferSubData",
        "buffered",
        "bufferedAmount",
        "bufferedAmountLowThreshold",
        "buffers",
        "buildID",
        "buildNumber",
        "button",
        "buttonID",
        "buttons",
        "byteLength",
        "byteOffset",
        "bytesPerRow",
        "bytesWritten",
        "c",
        "cache",
        "caches",
        "call",
        "caller",
        "canBeFormatted",
        "canBeMounted",
        "canBeShared",
        "canHaveChildren",
        "canHaveHTML",
        "canInsertDTMF",
        "canMakePayment",
        "canPlayType",
        "canPresent",
        "canTrickleIceCandidates",
        "cancel",
        "cancelAndHoldAtTime",
        "cancelAnimationFrame",
        "cancelBubble",
        "cancelIdleCallback",
        "cancelScheduledValues",
        "cancelVideoFrameCallback",
        "cancelWatchAvailability",
        "cancelable",
        "candidate",
        "canonicalUUID",
        "canvas",
        "capabilities",
        "caption",
        "caption-side",
        "captionSide",
        "capture",
        "captureEvents",
        "captureStackTrace",
        "captureStream",
        "caret-color",
        "caretBidiLevel",
        "caretColor",
        "caretPositionFromPoint",
        "caretRangeFromPoint",
        "cast",
        "catch",
        "category",
        "cbrt",
        "cd",
        "ceil",
        "cellIndex",
        "cellPadding",
        "cellSpacing",
        "cells",
        "ch",
        "chOff",
        "chain",
        "challenge",
        "changeType",
        "changedTouches",
        "channel",
        "channelCount",
        "channelCountMode",
        "channelInterpretation",
        "char",
        "charAt",
        "charCode",
        "charCodeAt",
        "charIndex",
        "charLength",
        "characterData",
        "characterDataOldValue",
        "characterSet",
        "characteristic",
        "charging",
        "chargingTime",
        "charset",
        "check",
        "checkEnclosure",
        "checkFramebufferStatus",
        "checkIntersection",
        "checkValidity",
        "checked",
        "childElementCount",
        "childList",
        "childNodes",
        "children",
        "chrome",
        "ciphertext",
        "cite",
        "city",
        "claimInterface",
        "claimed",
        "classList",
        "className",
        "classid",
        "clear",
        "clearAppBadge",
        "clearAttributes",
        "clearBuffer",
        "clearBufferfi",
        "clearBufferfv",
        "clearBufferiv",
        "clearBufferuiv",
        "clearColor",
        "clearData",
        "clearDepth",
        "clearHalt",
        "clearImmediate",
        "clearInterval",
        "clearLiveSeekableRange",
        "clearMarks",
        "clearMaxGCPauseAccumulator",
        "clearMeasures",
        "clearParameters",
        "clearRect",
        "clearResourceTimings",
        "clearShadow",
        "clearStencil",
        "clearTimeout",
        "clearValue",
        "clearWatch",
        "click",
        "clickCount",
        "clientDataJSON",
        "clientHeight",
        "clientInformation",
        "clientLeft",
        "clientRect",
        "clientRects",
        "clientTop",
        "clientWaitSync",
        "clientWidth",
        "clientX",
        "clientY",
        "clip",
        "clip-path",
        "clip-rule",
        "clipBottom",
        "clipLeft",
        "clipPath",
        "clipPathUnits",
        "clipRight",
        "clipRule",
        "clipTop",
        "clipboard",
        "clipboardData",
        "clone",
        "cloneContents",
        "cloneNode",
        "cloneRange",
        "close",
        "closePath",
        "closed",
        "closest",
        "clz",
        "clz32",
        "cm",
        "cmp",
        "code",
        "codeBase",
        "codePointAt",
        "codeType",
        "colSpan",
        "collapse",
        "collapseToEnd",
        "collapseToStart",
        "collapsed",
        "collect",
        "colno",
        "color",
        "color-adjust",
        "color-interpolation",
        "color-interpolation-filters",
        "colorAdjust",
        "colorAttachments",
        "colorDepth",
        "colorFormats",
        "colorInterpolation",
        "colorInterpolationFilters",
        "colorMask",
        "colorSpace",
        "colorType",
        "cols",
        "column-count",
        "column-fill",
        "column-gap",
        "column-rule",
        "column-rule-color",
        "column-rule-style",
        "column-rule-width",
        "column-span",
        "column-width",
        "columnCount",
        "columnFill",
        "columnGap",
        "columnNumber",
        "columnRule",
        "columnRuleColor",
        "columnRuleStyle",
        "columnRuleWidth",
        "columnSpan",
        "columnWidth",
        "columns",
        "command",
        "commit",
        "commitPreferences",
        "commitStyles",
        "commonAncestorContainer",
        "compact",
        "compare",
        "compareBoundaryPoints",
        "compareDocumentPosition",
        "compareEndPoints",
        "compareExchange",
        "compareNode",
        "comparePoint",
        "compatMode",
        "compatible",
        "compile",
        "compileShader",
        "compileStreaming",
        "complete",
        "component",
        "componentFromPoint",
        "composed",
        "composedPath",
        "composite",
        "compositionEndOffset",
        "compositionStartOffset",
        "compressedTexImage2D",
        "compressedTexImage3D",
        "compressedTexSubImage2D",
        "compressedTexSubImage3D",
        "compute",
        "computedStyleMap",
        "concat",
        "conditionText",
        "coneInnerAngle",
        "coneOuterAngle",
        "coneOuterGain",
        "configurable",
        "configuration",
        "configurationName",
        "configurationValue",
        "configurations",
        "configure",
        "confirm",
        "confirmComposition",
        "confirmSiteSpecificTrackingException",
        "confirmWebWideTrackingException",
        "connect",
        "connectEnd",
        "connectShark",
        "connectStart",
        "connected",
        "connection",
        "connectionList",
        "connectionSpeed",
        "connectionState",
        "connections",
        "console",
        "consolidate",
        "constants",
        "constraint",
        "constrictionActive",
        "construct",
        "constructor",
        "contactID",
        "contain",
        "containerId",
        "containerName",
        "containerSrc",
        "containerType",
        "contains",
        "containsNode",
        "content",
        "contentBoxSize",
        "contentDocument",
        "contentEditable",
        "contentHint",
        "contentOverflow",
        "contentRect",
        "contentScriptType",
        "contentStyleType",
        "contentType",
        "contentWindow",
        "context",
        "contextMenu",
        "contextmenu",
        "continue",
        "continuePrimaryKey",
        "continuous",
        "control",
        "controlTransferIn",
        "controlTransferOut",
        "controller",
        "controls",
        "controlsList",
        "convertPointFromNode",
        "convertQuadFromNode",
        "convertRectFromNode",
        "convertToBlob",
        "convertToSpecifiedUnits",
        "cookie",
        "cookieEnabled",
        "coords",
        "copyBufferSubData",
        "copyBufferToBuffer",
        "copyBufferToTexture",
        "copyExternalImageToTexture",
        "copyFromChannel",
        "copyTexImage2D",
        "copyTexSubImage2D",
        "copyTexSubImage3D",
        "copyTextureToBuffer",
        "copyTextureToTexture",
        "copyToChannel",
        "copyWithin",
        "correspondingElement",
        "correspondingUseElement",
        "corruptedVideoFrames",
        "cos",
        "cosh",
        "count",
        "countReset",
        "counter-increment",
        "counter-reset",
        "counter-set",
        "counterIncrement",
        "counterReset",
        "counterSet",
        "country",
        "cpuClass",
        "cpuSleepAllowed",
        "create",
        "createAnalyser",
        "createAnswer",
        "createAttribute",
        "createAttributeNS",
        "createBindGroup",
        "createBindGroupLayout",
        "createBiquadFilter",
        "createBuffer",
        "createBufferSource",
        "createCDATASection",
        "createCSSStyleSheet",
        "createCaption",
        "createChannelMerger",
        "createChannelSplitter",
        "createCommandEncoder",
        "createComment",
        "createComputePipeline",
        "createComputePipelineAsync",
        "createConstantSource",
        "createContextualFragment",
        "createControlRange",
        "createConvolver",
        "createDTMFSender",
        "createDataChannel",
        "createDelay",
        "createDelayNode",
        "createDocument",
        "createDocumentFragment",
        "createDocumentType",
        "createDynamicsCompressor",
        "createElement",
        "createElementNS",
        "createEntityReference",
        "createEvent",
        "createEventObject",
        "createExpression",
        "createFramebuffer",
        "createFunction",
        "createGain",
        "createGainNode",
        "createHTML",
        "createHTMLDocument",
        "createIIRFilter",
        "createImageBitmap",
        "createImageData",
        "createIndex",
        "createJavaScriptNode",
        "createLinearGradient",
        "createMediaElementSource",
        "createMediaKeys",
        "createMediaStreamDestination",
        "createMediaStreamSource",
        "createMediaStreamTrackSource",
        "createMutableFile",
        "createNSResolver",
        "createNodeIterator",
        "createNotification",
        "createObjectStore",
        "createObjectURL",
        "createOffer",
        "createOscillator",
        "createPanner",
        "createPattern",
        "createPeriodicWave",
        "createPipelineLayout",
        "createPolicy",
        "createPopup",
        "createProcessingInstruction",
        "createProgram",
        "createQuery",
        "createQuerySet",
        "createRadialGradient",
        "createRange",
        "createRangeCollection",
        "createReader",
        "createRenderBundleEncoder",
        "createRenderPipeline",
        "createRenderPipelineAsync",
        "createRenderbuffer",
        "createSVGAngle",
        "createSVGLength",
        "createSVGMatrix",
        "createSVGNumber",
        "createSVGPathSegArcAbs",
        "createSVGPathSegArcRel",
        "createSVGPathSegClosePath",
        "createSVGPathSegCurvetoCubicAbs",
        "createSVGPathSegCurvetoCubicRel",
        "createSVGPathSegCurvetoCubicSmoothAbs",
        "createSVGPathSegCurvetoCubicSmoothRel",
        "createSVGPathSegCurvetoQuadraticAbs",
        "createSVGPathSegCurvetoQuadraticRel",
        "createSVGPathSegCurvetoQuadraticSmoothAbs",
        "createSVGPathSegCurvetoQuadraticSmoothRel",
        "createSVGPathSegLinetoAbs",
        "createSVGPathSegLinetoHorizontalAbs",
        "createSVGPathSegLinetoHorizontalRel",
        "createSVGPathSegLinetoRel",
        "createSVGPathSegLinetoVerticalAbs",
        "createSVGPathSegLinetoVerticalRel",
        "createSVGPathSegMovetoAbs",
        "createSVGPathSegMovetoRel",
        "createSVGPoint",
        "createSVGRect",
        "createSVGTransform",
        "createSVGTransformFromMatrix",
        "createSampler",
        "createScript",
        "createScriptProcessor",
        "createScriptURL",
        "createSession",
        "createShader",
        "createShaderModule",
        "createShadowRoot",
        "createStereoPanner",
        "createStyleSheet",
        "createTBody",
        "createTFoot",
        "createTHead",
        "createTextNode",
        "createTextRange",
        "createTexture",
        "createTouch",
        "createTouchList",
        "createTransformFeedback",
        "createTreeWalker",
        "createVertexArray",
        "createView",
        "createWaveShaper",
        "creationTime",
        "credentials",
        "crossOrigin",
        "crossOriginIsolated",
        "crypto",
        "csi",
        "csp",
        "cssFloat",
        "cssRules",
        "cssText",
        "cssValueType",
        "ctrlKey",
        "ctrlLeft",
        "cues",
        "cullFace",
        "cullMode",
        "currentDirection",
        "currentLocalDescription",
        "currentNode",
        "currentPage",
        "currentRect",
        "currentRemoteDescription",
        "currentScale",
        "currentScript",
        "currentSrc",
        "currentState",
        "currentStyle",
        "currentTarget",
        "currentTime",
        "currentTranslate",
        "currentView",
        "cursor",
        "curve",
        "customElements",
        "customError",
        "cx",
        "cy",
        "d",
        "data",
        "dataFld",
        "dataFormatAs",
        "dataLoss",
        "dataLossMessage",
        "dataPageSize",
        "dataSrc",
        "dataTransfer",
        "database",
        "databases",
        "dataset",
        "dateTime",
        "db",
        "debug",
        "debuggerEnabled",
        "declare",
        "decode",
        "decodeAudioData",
        "decodeURI",
        "decodeURIComponent",
        "decodedBodySize",
        "decoding",
        "decodingInfo",
        "decrypt",
        "default",
        "defaultCharset",
        "defaultChecked",
        "defaultMuted",
        "defaultPlaybackRate",
        "defaultPolicy",
        "defaultPrevented",
        "defaultQueue",
        "defaultRequest",
        "defaultSelected",
        "defaultStatus",
        "defaultURL",
        "defaultValue",
        "defaultView",
        "defaultstatus",
        "defer",
        "define",
        "defineMagicFunction",
        "defineMagicVariable",
        "defineProperties",
        "defineProperty",
        "deg",
        "delay",
        "delayTime",
        "delegatesFocus",
        "delete",
        "deleteBuffer",
        "deleteCaption",
        "deleteCell",
        "deleteContents",
        "deleteData",
        "deleteDatabase",
        "deleteFramebuffer",
        "deleteFromDocument",
        "deleteIndex",
        "deleteMedium",
        "deleteObjectStore",
        "deleteProgram",
        "deleteProperty",
        "deleteQuery",
        "deleteRenderbuffer",
        "deleteRow",
        "deleteRule",
        "deleteSampler",
        "deleteShader",
        "deleteSync",
        "deleteTFoot",
        "deleteTHead",
        "deleteTexture",
        "deleteTransformFeedback",
        "deleteVertexArray",
        "deliverChangeRecords",
        "delivery",
        "deliveryInfo",
        "deliveryStatus",
        "deliveryTimestamp",
        "delta",
        "deltaMode",
        "deltaX",
        "deltaY",
        "deltaZ",
        "dependentLocality",
        "depthBias",
        "depthBiasClamp",
        "depthBiasSlopeScale",
        "depthClearValue",
        "depthCompare",
        "depthFailOp",
        "depthFar",
        "depthFunc",
        "depthLoadOp",
        "depthMask",
        "depthNear",
        "depthOrArrayLayers",
        "depthRange",
        "depthReadOnly",
        "depthStencil",
        "depthStencilAttachment",
        "depthStencilFormat",
        "depthStoreOp",
        "depthWriteEnabled",
        "deref",
        "deriveBits",
        "deriveKey",
        "description",
        "deselectAll",
        "designMode",
        "desiredSize",
        "destination",
        "destinationURL",
        "destroy",
        "detach",
        "detachEvent",
        "detachShader",
        "detail",
        "details",
        "detect",
        "detune",
        "device",
        "deviceClass",
        "deviceId",
        "deviceMemory",
        "devicePixelContentBoxSize",
        "devicePixelRatio",
        "deviceProtocol",
        "deviceSubclass",
        "deviceVersionMajor",
        "deviceVersionMinor",
        "deviceVersionSubminor",
        "deviceXDPI",
        "deviceYDPI",
        "didTimeout",
        "diffuseConstant",
        "digest",
        "dimension",
        "dimensions",
        "dir",
        "dirName",
        "direction",
        "dirxml",
        "disable",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "disableVertexAttribArray",
        "disabled",
        "dischargingTime",
        "disconnect",
        "disconnectShark",
        "dispatchEvent",
        "dispatchWorkgroups",
        "dispatchWorkgroupsIndirect",
        "display",
        "displayId",
        "displayName",
        "disposition",
        "distanceModel",
        "div",
        "divisor",
        "djsapi",
        "djsproxy",
        "doImport",
        "doNotTrack",
        "doScroll",
        "doctype",
        "document",
        "documentElement",
        "documentMode",
        "documentURI",
        "dolphin",
        "dolphinGameCenter",
        "dolphininfo",
        "dolphinmeta",
        "domComplete",
        "domContentLoadedEventEnd",
        "domContentLoadedEventStart",
        "domInteractive",
        "domLoading",
        "domOverlayState",
        "domain",
        "domainLookupEnd",
        "domainLookupStart",
        "dominant-baseline",
        "dominantBaseline",
        "done",
        "dopplerFactor",
        "dotAll",
        "downDegrees",
        "downlink",
        "download",
        "downloadTotal",
        "downloaded",
        "dpcm",
        "dpi",
        "dppx",
        "dragDrop",
        "draggable",
        "draw",
        "drawArrays",
        "drawArraysInstanced",
        "drawArraysInstancedANGLE",
        "drawBuffers",
        "drawCustomFocusRing",
        "drawElements",
        "drawElementsInstanced",
        "drawElementsInstancedANGLE",
        "drawFocusIfNeeded",
        "drawImage",
        "drawImageFromRect",
        "drawIndexed",
        "drawIndexedIndirect",
        "drawIndirect",
        "drawRangeElements",
        "drawSystemFocusRing",
        "drawingBufferHeight",
        "drawingBufferWidth",
        "dropEffect",
        "droppedVideoFrames",
        "dropzone",
        "dstFactor",
        "dtmf",
        "dump",
        "dumpProfile",
        "duplicate",
        "durability",
        "duration",
        "dvname",
        "dvnum",
        "dx",
        "dy",
        "dynsrc",
        "e",
        "edgeMode",
        "effect",
        "effectAllowed",
        "effectiveDirective",
        "effectiveType",
        "elapsedTime",
        "element",
        "elementFromPoint",
        "elementTiming",
        "elements",
        "elementsFromPoint",
        "elevation",
        "ellipse",
        "em",
        "email",
        "embeds",
        "emma",
        "empty",
        "empty-cells",
        "emptyCells",
        "emptyHTML",
        "emptyScript",
        "emulatedPosition",
        "enable",
        "enableBackground",
        "enableDelegations",
        "enableStyleSheetsForSet",
        "enableVertexAttribArray",
        "enabled",
        "enabledPlugin",
        "encode",
        "encodeInto",
        "encodeURI",
        "encodeURIComponent",
        "encodedBodySize",
        "encoding",
        "encodingInfo",
        "encrypt",
        "enctype",
        "end",
        "endContainer",
        "endElement",
        "endElementAt",
        "endOcclusionQuery",
        "endOfPassWriteIndex",
        "endOfStream",
        "endOffset",
        "endQuery",
        "endTime",
        "endTransformFeedback",
        "ended",
        "endpoint",
        "endpointNumber",
        "endpoints",
        "endsWith",
        "enterKeyHint",
        "entities",
        "entries",
        "entryPoint",
        "entryType",
        "enumerable",
        "enumerate",
        "enumerateDevices",
        "enumerateEditable",
        "environmentBlendMode",
        "equals",
        "error",
        "errorCode",
        "errorDetail",
        "errorText",
        "escape",
        "estimate",
        "eval",
        "evaluate",
        "event",
        "eventPhase",
        "every",
        "ex",
        "exception",
        "exchange",
        "exec",
        "execCommand",
        "execCommandShowHelp",
        "execScript",
        "executeBundles",
        "exitFullscreen",
        "exitPictureInPicture",
        "exitPointerLock",
        "exitPresent",
        "exp",
        "expand",
        "expandEntityReferences",
        "expando",
        "expansion",
        "expiration",
        "expirationTime",
        "expires",
        "expiryDate",
        "explicitOriginalTarget",
        "expm1",
        "exponent",
        "exponentialRampToValueAtTime",
        "exportKey",
        "exports",
        "extend",
        "extensions",
        "extentNode",
        "extentOffset",
        "external",
        "externalResourcesRequired",
        "externalTexture",
        "extractContents",
        "extractable",
        "eye",
        "f",
        "face",
        "factoryReset",
        "failOp",
        "failureReason",
        "fallback",
        "family",
        "familyName",
        "farthestViewportElement",
        "fastSeek",
        "fatal",
        "featureId",
        "featurePolicy",
        "featureSettings",
        "features",
        "fenceSync",
        "fetch",
        "fetchStart",
        "fftSize",
        "fgColor",
        "fieldOfView",
        "file",
        "fileCreatedDate",
        "fileHandle",
        "fileModifiedDate",
        "fileName",
        "fileSize",
        "fileUpdatedDate",
        "filename",
        "files",
        "filesystem",
        "fill",
        "fill-opacity",
        "fill-rule",
        "fillLightMode",
        "fillOpacity",
        "fillRect",
        "fillRule",
        "fillStyle",
        "fillText",
        "filter",
        "filterResX",
        "filterResY",
        "filterUnits",
        "filters",
        "finally",
        "find",
        "findIndex",
        "findRule",
        "findText",
        "finish",
        "finished",
        "fireEvent",
        "firesTouchEvents",
        "firstChild",
        "firstElementChild",
        "firstPage",
        "fixed",
        "flags",
        "flat",
        "flatMap",
        "flex",
        "flex-basis",
        "flex-direction",
        "flex-flow",
        "flex-grow",
        "flex-shrink",
        "flex-wrap",
        "flexBasis",
        "flexDirection",
        "flexFlow",
        "flexGrow",
        "flexShrink",
        "flexWrap",
        "flipX",
        "flipY",
        "float",
        "float32",
        "float64",
        "flood-color",
        "flood-opacity",
        "floodColor",
        "floodOpacity",
        "floor",
        "flush",
        "focus",
        "focusNode",
        "focusOffset",
        "font",
        "font-family",
        "font-feature-settings",
        "font-kerning",
        "font-language-override",
        "font-optical-sizing",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-synthesis",
        "font-variant",
        "font-variant-alternates",
        "font-variant-caps",
        "font-variant-east-asian",
        "font-variant-ligatures",
        "font-variant-numeric",
        "font-variant-position",
        "font-variation-settings",
        "font-weight",
        "fontFamily",
        "fontFeatureSettings",
        "fontKerning",
        "fontLanguageOverride",
        "fontOpticalSizing",
        "fontSize",
        "fontSizeAdjust",
        "fontSmoothingEnabled",
        "fontStretch",
        "fontStyle",
        "fontSynthesis",
        "fontVariant",
        "fontVariantAlternates",
        "fontVariantCaps",
        "fontVariantEastAsian",
        "fontVariantLigatures",
        "fontVariantNumeric",
        "fontVariantPosition",
        "fontVariationSettings",
        "fontWeight",
        "fontcolor",
        "fontfaces",
        "fonts",
        "fontsize",
        "for",
        "forEach",
        "force",
        "forceFallbackAdapter",
        "forceRedraw",
        "form",
        "formAction",
        "formData",
        "formEnctype",
        "formMethod",
        "formNoValidate",
        "formTarget",
        "format",
        "formatToParts",
        "forms",
        "forward",
        "forwardX",
        "forwardY",
        "forwardZ",
        "foundation",
        "fr",
        "fragment",
        "fragmentDirective",
        "frame",
        "frameBorder",
        "frameElement",
        "frameSpacing",
        "framebuffer",
        "framebufferHeight",
        "framebufferRenderbuffer",
        "framebufferTexture2D",
        "framebufferTextureLayer",
        "framebufferWidth",
        "frames",
        "freeSpace",
        "freeze",
        "frequency",
        "frequencyBinCount",
        "from",
        "fromCharCode",
        "fromCodePoint",
        "fromElement",
        "fromEntries",
        "fromFloat32Array",
        "fromFloat64Array",
        "fromMatrix",
        "fromPoint",
        "fromQuad",
        "fromRect",
        "frontFace",
        "fround",
        "fullPath",
        "fullScreen",
        "fullVersionList",
        "fullscreen",
        "fullscreenElement",
        "fullscreenEnabled",
        "fx",
        "fy",
        "g",
        "gain",
        "gamepad",
        "gamma",
        "gap",
        "gatheringState",
        "gatt",
        "genderIdentity",
        "generateCertificate",
        "generateKey",
        "generateMipmap",
        "generateRequest",
        "geolocation",
        "gestureObject",
        "get",
        "getActiveAttrib",
        "getActiveUniform",
        "getActiveUniformBlockName",
        "getActiveUniformBlockParameter",
        "getActiveUniforms",
        "getAdjacentText",
        "getAll",
        "getAllKeys",
        "getAllResponseHeaders",
        "getAllowlistForFeature",
        "getAnimations",
        "getAsFile",
        "getAsString",
        "getAttachedShaders",
        "getAttribLocation",
        "getAttribute",
        "getAttributeNS",
        "getAttributeNames",
        "getAttributeNode",
        "getAttributeNodeNS",
        "getAttributeType",
        "getAudioTracks",
        "getAvailability",
        "getBBox",
        "getBattery",
        "getBigInt64",
        "getBigUint64",
        "getBindGroupLayout",
        "getBlob",
        "getBookmark",
        "getBoundingClientRect",
        "getBounds",
        "getBoxQuads",
        "getBufferParameter",
        "getBufferSubData",
        "getByteFrequencyData",
        "getByteTimeDomainData",
        "getCSSCanvasContext",
        "getCTM",
        "getCandidateWindowClientRect",
        "getCanonicalLocales",
        "getCapabilities",
        "getChannelData",
        "getCharNumAtPosition",
        "getCharacteristic",
        "getCharacteristics",
        "getClientExtensionResults",
        "getClientRect",
        "getClientRects",
        "getCoalescedEvents",
        "getCompilationInfo",
        "getCompositionAlternatives",
        "getComputedStyle",
        "getComputedTextLength",
        "getComputedTiming",
        "getConfiguration",
        "getConstraints",
        "getContext",
        "getContextAttributes",
        "getContributingSources",
        "getCounterValue",
        "getCueAsHTML",
        "getCueById",
        "getCurrentPosition",
        "getCurrentTexture",
        "getCurrentTime",
        "getData",
        "getDatabaseNames",
        "getDate",
        "getDay",
        "getDefaultComputedStyle",
        "getDescriptor",
        "getDescriptors",
        "getDestinationInsertionPoints",
        "getDevices",
        "getDirectory",
        "getDisplayMedia",
        "getDistributedNodes",
        "getEditable",
        "getElementById",
        "getElementsByClassName",
        "getElementsByName",
        "getElementsByTagName",
        "getElementsByTagNameNS",
        "getEnclosureList",
        "getEndPositionOfChar",
        "getEntries",
        "getEntriesByName",
        "getEntriesByType",
        "getError",
        "getExtension",
        "getExtentOfChar",
        "getEyeParameters",
        "getFeature",
        "getFile",
        "getFiles",
        "getFilesAndDirectories",
        "getFingerprints",
        "getFloat32",
        "getFloat64",
        "getFloatFrequencyData",
        "getFloatTimeDomainData",
        "getFloatValue",
        "getFragDataLocation",
        "getFrameData",
        "getFramebufferAttachmentParameter",
        "getFrequencyResponse",
        "getFullYear",
        "getGamepads",
        "getHighEntropyValues",
        "getHitTestResults",
        "getHitTestResultsForTransientInput",
        "getHours",
        "getIdentityAssertion",
        "getIds",
        "getImageData",
        "getIndexedParameter",
        "getInstalledRelatedApps",
        "getInt16",
        "getInt32",
        "getInt8",
        "getInternalformatParameter",
        "getIntersectionList",
        "getItem",
        "getItems",
        "getKey",
        "getKeyframes",
        "getLayers",
        "getLayoutMap",
        "getLineDash",
        "getLocalCandidates",
        "getLocalParameters",
        "getLocalStreams",
        "getMappedRange",
        "getMarks",
        "getMatchedCSSRules",
        "getMaxGCPauseSinceClear",
        "getMeasures",
        "getMetadata",
        "getMilliseconds",
        "getMinutes",
        "getModifierState",
        "getMonth",
        "getNamedItem",
        "getNamedItemNS",
        "getNativeFramebufferScaleFactor",
        "getNotifications",
        "getNotifier",
        "getNumberOfChars",
        "getOffsetReferenceSpace",
        "getOutputTimestamp",
        "getOverrideHistoryNavigationMode",
        "getOverrideStyle",
        "getOwnPropertyDescriptor",
        "getOwnPropertyDescriptors",
        "getOwnPropertyNames",
        "getOwnPropertySymbols",
        "getParameter",
        "getParameters",
        "getParent",
        "getPathSegAtLength",
        "getPhotoCapabilities",
        "getPhotoSettings",
        "getPointAtLength",
        "getPose",
        "getPredictedEvents",
        "getPreference",
        "getPreferenceDefault",
        "getPreferredCanvasFormat",
        "getPresentationAttribute",
        "getPreventDefault",
        "getPrimaryService",
        "getPrimaryServices",
        "getProgramInfoLog",
        "getProgramParameter",
        "getPropertyCSSValue",
        "getPropertyPriority",
        "getPropertyShorthand",
        "getPropertyType",
        "getPropertyValue",
        "getPrototypeOf",
        "getQuery",
        "getQueryParameter",
        "getRGBColorValue",
        "getRandomValues",
        "getRangeAt",
        "getReader",
        "getReceivers",
        "getRectValue",
        "getRegistration",
        "getRegistrations",
        "getRemoteCandidates",
        "getRemoteCertificates",
        "getRemoteParameters",
        "getRemoteStreams",
        "getRenderbufferParameter",
        "getResponseHeader",
        "getRoot",
        "getRootNode",
        "getRotationOfChar",
        "getSVGDocument",
        "getSamplerParameter",
        "getScreenCTM",
        "getSeconds",
        "getSelectedCandidatePair",
        "getSelection",
        "getSenders",
        "getService",
        "getSettings",
        "getShaderInfoLog",
        "getShaderParameter",
        "getShaderPrecisionFormat",
        "getShaderSource",
        "getSimpleDuration",
        "getSiteIcons",
        "getSources",
        "getSpeculativeParserUrls",
        "getStartPositionOfChar",
        "getStartTime",
        "getState",
        "getStats",
        "getStatusForPolicy",
        "getStorageUpdates",
        "getStreamById",
        "getStringValue",
        "getSubStringLength",
        "getSubscription",
        "getSupportedConstraints",
        "getSupportedExtensions",
        "getSupportedFormats",
        "getSyncParameter",
        "getSynchronizationSources",
        "getTags",
        "getTargetRanges",
        "getTexParameter",
        "getTime",
        "getTimezoneOffset",
        "getTiming",
        "getTotalLength",
        "getTrackById",
        "getTracks",
        "getTransceivers",
        "getTransform",
        "getTransformFeedbackVarying",
        "getTransformToElement",
        "getTransports",
        "getType",
        "getTypeMapping",
        "getUTCDate",
        "getUTCDay",
        "getUTCFullYear",
        "getUTCHours",
        "getUTCMilliseconds",
        "getUTCMinutes",
        "getUTCMonth",
        "getUTCSeconds",
        "getUint16",
        "getUint32",
        "getUint8",
        "getUniform",
        "getUniformBlockIndex",
        "getUniformIndices",
        "getUniformLocation",
        "getUserMedia",
        "getVRDisplays",
        "getValues",
        "getVarDate",
        "getVariableValue",
        "getVertexAttrib",
        "getVertexAttribOffset",
        "getVideoPlaybackQuality",
        "getVideoTracks",
        "getViewerPose",
        "getViewport",
        "getVoices",
        "getWakeLockState",
        "getWriter",
        "getYear",
        "givenName",
        "global",
        "globalAlpha",
        "globalCompositeOperation",
        "globalThis",
        "glyphOrientationHorizontal",
        "glyphOrientationVertical",
        "glyphRef",
        "go",
        "gpu",
        "grabFrame",
        "grad",
        "gradientTransform",
        "gradientUnits",
        "grammars",
        "green",
        "grid",
        "grid-area",
        "grid-auto-columns",
        "grid-auto-flow",
        "grid-auto-rows",
        "grid-column",
        "grid-column-end",
        "grid-column-gap",
        "grid-column-start",
        "grid-gap",
        "grid-row",
        "grid-row-end",
        "grid-row-gap",
        "grid-row-start",
        "grid-template",
        "grid-template-areas",
        "grid-template-columns",
        "grid-template-rows",
        "gridArea",
        "gridAutoColumns",
        "gridAutoFlow",
        "gridAutoRows",
        "gridColumn",
        "gridColumnEnd",
        "gridColumnGap",
        "gridColumnStart",
        "gridGap",
        "gridRow",
        "gridRowEnd",
        "gridRowGap",
        "gridRowStart",
        "gridTemplate",
        "gridTemplateAreas",
        "gridTemplateColumns",
        "gridTemplateRows",
        "gripSpace",
        "group",
        "groups",
        "groupCollapsed",
        "groupEnd",
        "groupId",
        "hadRecentInput",
        "hand",
        "handedness",
        "hapticActuators",
        "hardwareConcurrency",
        "has",
        "hasAttribute",
        "hasAttributeNS",
        "hasAttributes",
        "hasBeenActive",
        "hasChildNodes",
        "hasComposition",
        "hasDynamicOffset",
        "hasEnrolledInstrument",
        "hasExtension",
        "hasExternalDisplay",
        "hasFeature",
        "hasFocus",
        "hasInstance",
        "hasLayout",
        "hasOrientation",
        "hasOwnProperty",
        "hasPointerCapture",
        "hasPosition",
        "hasReading",
        "hasStorageAccess",
        "hash",
        "head",
        "headers",
        "heading",
        "height",
        "hidden",
        "hide",
        "hideFocus",
        "high",
        "highWaterMark",
        "hint",
        "hints",
        "history",
        "honorificPrefix",
        "honorificSuffix",
        "horizontalOverflow",
        "host",
        "hostCandidate",
        "hostname",
        "href",
        "hrefTranslate",
        "hreflang",
        "hspace",
        "html5TagCheckInerface",
        "htmlFor",
        "htmlText",
        "httpEquiv",
        "httpRequestStatusCode",
        "hwTimestamp",
        "hyphens",
        "hypot",
        "iccId",
        "iceConnectionState",
        "iceGatheringState",
        "iceTransport",
        "icon",
        "iconURL",
        "id",
        "identifier",
        "identity",
        "idpLoginUrl",
        "ignoreBOM",
        "ignoreCase",
        "ignoreDepthValues",
        "image-orientation",
        "image-rendering",
        "imageHeight",
        "imageOrientation",
        "imageRendering",
        "imageSizes",
        "imageSmoothingEnabled",
        "imageSmoothingQuality",
        "imageSrcset",
        "imageWidth",
        "images",
        "ime-mode",
        "imeMode",
        "implementation",
        "importExternalTexture",
        "importKey",
        "importNode",
        "importStylesheet",
        "imports",
        "impp",
        "imul",
        "in",
        "in1",
        "in2",
        "inBandMetadataTrackDispatchType",
        "inRange",
        "includes",
        "incremental",
        "indeterminate",
        "index",
        "indexNames",
        "indexOf",
        "indexedDB",
        "indicate",
        "indices",
        "inert",
        "inertiaDestinationX",
        "inertiaDestinationY",
        "info",
        "init",
        "initAnimationEvent",
        "initBeforeLoadEvent",
        "initClipboardEvent",
        "initCloseEvent",
        "initCommandEvent",
        "initCompositionEvent",
        "initCustomEvent",
        "initData",
        "initDataType",
        "initDeviceMotionEvent",
        "initDeviceOrientationEvent",
        "initDragEvent",
        "initErrorEvent",
        "initEvent",
        "initFocusEvent",
        "initGestureEvent",
        "initHashChangeEvent",
        "initKeyEvent",
        "initKeyboardEvent",
        "initMSManipulationEvent",
        "initMessageEvent",
        "initMouseEvent",
        "initMouseScrollEvent",
        "initMouseWheelEvent",
        "initMutationEvent",
        "initNSMouseEvent",
        "initOverflowEvent",
        "initPageEvent",
        "initPageTransitionEvent",
        "initPointerEvent",
        "initPopStateEvent",
        "initProgressEvent",
        "initScrollAreaEvent",
        "initSimpleGestureEvent",
        "initStorageEvent",
        "initTextEvent",
        "initTimeEvent",
        "initTouchEvent",
        "initTransitionEvent",
        "initUIEvent",
        "initWebKitAnimationEvent",
        "initWebKitTransitionEvent",
        "initWebKitWheelEvent",
        "initWheelEvent",
        "initialTime",
        "initialize",
        "initiatorType",
        "inline-size",
        "inlineSize",
        "inlineVerticalFieldOfView",
        "inner",
        "innerHTML",
        "innerHeight",
        "innerText",
        "innerWidth",
        "input",
        "inputBuffer",
        "inputEncoding",
        "inputMethod",
        "inputMode",
        "inputSource",
        "inputSources",
        "inputType",
        "inputs",
        "insertAdjacentElement",
        "insertAdjacentHTML",
        "insertAdjacentText",
        "insertBefore",
        "insertCell",
        "insertDTMF",
        "insertData",
        "insertDebugMarker",
        "insertItemBefore",
        "insertNode",
        "insertRow",
        "insertRule",
        "inset",
        "inset-block",
        "inset-block-end",
        "inset-block-start",
        "inset-inline",
        "inset-inline-end",
        "inset-inline-start",
        "insetBlock",
        "insetBlockEnd",
        "insetBlockStart",
        "insetInline",
        "insetInlineEnd",
        "insetInlineStart",
        "installing",
        "instanceRoot",
        "instantiate",
        "instantiateStreaming",
        "instruments",
        "int16",
        "int32",
        "int8",
        "integrity",
        "interactionMode",
        "intercept",
        "interfaceClass",
        "interfaceName",
        "interfaceNumber",
        "interfaceProtocol",
        "interfaceSubclass",
        "interfaces",
        "interimResults",
        "internalSubset",
        "interpretation",
        "intersectionRatio",
        "intersectionRect",
        "intersectsNode",
        "interval",
        "invalidIteratorState",
        "invalidateFramebuffer",
        "invalidateSubFramebuffer",
        "inverse",
        "invertSelf",
        "is",
        "is2D",
        "isActive",
        "isAlternate",
        "isArray",
        "isBingCurrentSearchDefault",
        "isBuffer",
        "isCandidateWindowVisible",
        "isChar",
        "isCollapsed",
        "isComposing",
        "isConcatSpreadable",
        "isConnected",
        "isContentEditable",
        "isContentHandlerRegistered",
        "isContextLost",
        "isDefaultNamespace",
        "isDirectory",
        "isDisabled",
        "isEnabled",
        "isEqual",
        "isEqualNode",
        "isExtensible",
        "isExternalCTAP2SecurityKeySupported",
        "isFallbackAdapter",
        "isFile",
        "isFinite",
        "isFramebuffer",
        "isFrozen",
        "isGenerator",
        "isHTML",
        "isHistoryNavigation",
        "isId",
        "isIdentity",
        "isInjected",
        "isInteger",
        "isIntersecting",
        "isLockFree",
        "isMap",
        "isMultiLine",
        "isNaN",
        "isOpen",
        "isPointInFill",
        "isPointInPath",
        "isPointInRange",
        "isPointInStroke",
        "isPrefAlternate",
        "isPresenting",
        "isPrimary",
        "isProgram",
        "isPropertyImplicit",
        "isProtocolHandlerRegistered",
        "isPrototypeOf",
        "isQuery",
        "isRenderbuffer",
        "isSafeInteger",
        "isSameNode",
        "isSampler",
        "isScript",
        "isScriptURL",
        "isSealed",
        "isSecureContext",
        "isSessionSupported",
        "isShader",
        "isSupported",
        "isSync",
        "isTextEdit",
        "isTexture",
        "isTransformFeedback",
        "isTrusted",
        "isTypeSupported",
        "isUserVerifyingPlatformAuthenticatorAvailable",
        "isVertexArray",
        "isView",
        "isVisible",
        "isochronousTransferIn",
        "isochronousTransferOut",
        "isolation",
        "italics",
        "item",
        "itemId",
        "itemProp",
        "itemRef",
        "itemScope",
        "itemType",
        "itemValue",
        "items",
        "iterateNext",
        "iterationComposite",
        "iterator",
        "javaEnabled",
        "jobTitle",
        "join",
        "json",
        "justify-content",
        "justify-items",
        "justify-self",
        "justifyContent",
        "justifyItems",
        "justifySelf",
        "k1",
        "k2",
        "k3",
        "k4",
        "kHz",
        "keepalive",
        "kernelMatrix",
        "kernelUnitLengthX",
        "kernelUnitLengthY",
        "kerning",
        "key",
        "keyCode",
        "keyFor",
        "keyIdentifier",
        "keyLightEnabled",
        "keyLocation",
        "keyPath",
        "keyStatuses",
        "keySystem",
        "keyText",
        "keyUsage",
        "keyboard",
        "keys",
        "keytype",
        "kind",
        "knee",
        "label",
        "labels",
        "lang",
        "language",
        "languages",
        "largeArcFlag",
        "lastChild",
        "lastElementChild",
        "lastEventId",
        "lastIndex",
        "lastIndexOf",
        "lastInputTime",
        "lastMatch",
        "lastMessageSubject",
        "lastMessageType",
        "lastModified",
        "lastModifiedDate",
        "lastPage",
        "lastParen",
        "lastState",
        "lastStyleSheetSet",
        "latitude",
        "layerX",
        "layerY",
        "layout",
        "layoutFlow",
        "layoutGrid",
        "layoutGridChar",
        "layoutGridLine",
        "layoutGridMode",
        "layoutGridType",
        "lbound",
        "left",
        "leftContext",
        "leftDegrees",
        "leftMargin",
        "leftProjectionMatrix",
        "leftViewMatrix",
        "length",
        "lengthAdjust",
        "lengthComputable",
        "letter-spacing",
        "letterSpacing",
        "level",
        "lighting-color",
        "lightingColor",
        "limitingConeAngle",
        "limits",
        "line",
        "line-break",
        "line-height",
        "lineAlign",
        "lineBreak",
        "lineCap",
        "lineDashOffset",
        "lineHeight",
        "lineJoin",
        "lineNum",
        "lineNumber",
        "linePos",
        "lineTo",
        "lineWidth",
        "linearAcceleration",
        "linearRampToValueAtTime",
        "linearVelocity",
        "lineno",
        "lines",
        "link",
        "linkColor",
        "linkProgram",
        "links",
        "list",
        "list-style",
        "list-style-image",
        "list-style-position",
        "list-style-type",
        "listStyle",
        "listStyleImage",
        "listStylePosition",
        "listStyleType",
        "listener",
        "load",
        "loadEventEnd",
        "loadEventStart",
        "loadOp",
        "loadTime",
        "loadTimes",
        "loaded",
        "loading",
        "localDescription",
        "localName",
        "localService",
        "localStorage",
        "locale",
        "localeCompare",
        "location",
        "locationbar",
        "lock",
        "locked",
        "lockedFile",
        "locks",
        "lodMaxClamp",
        "lodMinClamp",
        "log",
        "log10",
        "log1p",
        "log2",
        "logicalXDPI",
        "logicalYDPI",
        "longDesc",
        "longitude",
        "lookupNamespaceURI",
        "lookupPrefix",
        "loop",
        "loopEnd",
        "loopStart",
        "looping",
        "lost",
        "low",
        "lower",
        "lowerBound",
        "lowerOpen",
        "lowsrc",
        "m11",
        "m12",
        "m13",
        "m14",
        "m21",
        "m22",
        "m23",
        "m24",
        "m31",
        "m32",
        "m33",
        "m34",
        "m41",
        "m42",
        "m43",
        "m44",
        "magFilter",
        "makeXRCompatible",
        "manifest",
        "manufacturer",
        "manufacturerName",
        "map",
        "mapAsync",
        "mapState",
        "mappedAtCreation",
        "mapping",
        "margin",
        "margin-block",
        "margin-block-end",
        "margin-block-start",
        "margin-bottom",
        "margin-inline",
        "margin-inline-end",
        "margin-inline-start",
        "margin-left",
        "margin-right",
        "margin-top",
        "marginBlock",
        "marginBlockEnd",
        "marginBlockStart",
        "marginBottom",
        "marginHeight",
        "marginInline",
        "marginInlineEnd",
        "marginInlineStart",
        "marginLeft",
        "marginRight",
        "marginTop",
        "marginWidth",
        "mark",
        "marker",
        "marker-end",
        "marker-mid",
        "marker-offset",
        "marker-start",
        "markerEnd",
        "markerHeight",
        "markerMid",
        "markerOffset",
        "markerStart",
        "markerUnits",
        "markerWidth",
        "marks",
        "mask",
        "mask-clip",
        "mask-composite",
        "mask-image",
        "mask-mode",
        "mask-origin",
        "mask-position",
        "mask-position-x",
        "mask-position-y",
        "mask-repeat",
        "mask-size",
        "mask-type",
        "maskClip",
        "maskComposite",
        "maskContentUnits",
        "maskImage",
        "maskMode",
        "maskOrigin",
        "maskPosition",
        "maskPositionX",
        "maskPositionY",
        "maskRepeat",
        "maskSize",
        "maskType",
        "maskUnits",
        "match",
        "matchAll",
        "matchMedia",
        "matchMedium",
        "matches",
        "matrix",
        "matrixTransform",
        "max",
        "max-block-size",
        "max-height",
        "max-inline-size",
        "max-width",
        "maxActions",
        "maxAlternatives",
        "maxAnisotropy",
        "maxBindGroups",
        "maxBindGroupsPlusVertexBuffers",
        "maxBindingsPerBindGroup",
        "maxBlockSize",
        "maxBufferSize",
        "maxChannelCount",
        "maxChannels",
        "maxColorAttachmentBytesPerSample",
        "maxColorAttachments",
        "maxComputeInvocationsPerWorkgroup",
        "maxComputeWorkgroupSizeX",
        "maxComputeWorkgroupSizeY",
        "maxComputeWorkgroupSizeZ",
        "maxComputeWorkgroupStorageSize",
        "maxComputeWorkgroupsPerDimension",
        "maxConnectionsPerServer",
        "maxDecibels",
        "maxDistance",
        "maxDrawCount",
        "maxDynamicStorageBuffersPerPipelineLayout",
        "maxDynamicUniformBuffersPerPipelineLayout",
        "maxHeight",
        "maxInlineSize",
        "maxInterStageShaderComponents",
        "maxInterStageShaderVariables",
        "maxLayers",
        "maxLength",
        "maxMessageSize",
        "maxPacketLifeTime",
        "maxRetransmits",
        "maxSampledTexturesPerShaderStage",
        "maxSamplersPerShaderStage",
        "maxStorageBufferBindingSize",
        "maxStorageBuffersPerShaderStage",
        "maxStorageTexturesPerShaderStage",
        "maxTextureArrayLayers",
        "maxTextureDimension1D",
        "maxTextureDimension2D",
        "maxTextureDimension3D",
        "maxTouchPoints",
        "maxUniformBufferBindingSize",
        "maxUniformBuffersPerShaderStage",
        "maxValue",
        "maxVertexAttributes",
        "maxVertexBufferArrayStride",
        "maxVertexBuffers",
        "maxWidth",
        "measure",
        "measureText",
        "media",
        "mediaCapabilities",
        "mediaDevices",
        "mediaElement",
        "mediaGroup",
        "mediaKeys",
        "mediaSession",
        "mediaStream",
        "mediaText",
        "meetOrSlice",
        "memory",
        "menubar",
        "mergeAttributes",
        "message",
        "messageClass",
        "messageHandlers",
        "messageType",
        "messages",
        "metaKey",
        "metadata",
        "method",
        "methodDetails",
        "methodName",
        "mid",
        "mimeType",
        "mimeTypes",
        "min",
        "min-block-size",
        "min-height",
        "min-inline-size",
        "min-width",
        "minBindingSize",
        "minBlockSize",
        "minDecibels",
        "minFilter",
        "minHeight",
        "minInlineSize",
        "minLength",
        "minStorageBufferOffsetAlignment",
        "minUniformBufferOffsetAlignment",
        "minValue",
        "minWidth",
        "mipLevel",
        "mipLevelCount",
        "mipmapFilter",
        "miterLimit",
        "mix-blend-mode",
        "mixBlendMode",
        "mm",
        "mobile",
        "mode",
        "model",
        "modify",
        "module",
        "mount",
        "move",
        "moveBy",
        "moveEnd",
        "moveFirst",
        "moveFocusDown",
        "moveFocusLeft",
        "moveFocusRight",
        "moveFocusUp",
        "moveNext",
        "moveRow",
        "moveStart",
        "moveTo",
        "moveToBookmark",
        "moveToElementText",
        "moveToPoint",
        "movementX",
        "movementY",
        "mozAdd",
        "mozAnimationStartTime",
        "mozAnon",
        "mozApps",
        "mozAudioCaptured",
        "mozAudioChannelType",
        "mozAutoplayEnabled",
        "mozCancelAnimationFrame",
        "mozCancelFullScreen",
        "mozCancelRequestAnimationFrame",
        "mozCaptureStream",
        "mozCaptureStreamUntilEnded",
        "mozClearDataAt",
        "mozContact",
        "mozContacts",
        "mozCreateFileHandle",
        "mozCurrentTransform",
        "mozCurrentTransformInverse",
        "mozCursor",
        "mozDash",
        "mozDashOffset",
        "mozDecodedFrames",
        "mozExitPointerLock",
        "mozFillRule",
        "mozFragmentEnd",
        "mozFrameDelay",
        "mozFullScreen",
        "mozFullScreenElement",
        "mozFullScreenEnabled",
        "mozGetAll",
        "mozGetAllKeys",
        "mozGetAsFile",
        "mozGetDataAt",
        "mozGetMetadata",
        "mozGetUserMedia",
        "mozHasAudio",
        "mozHasItem",
        "mozHidden",
        "mozImageSmoothingEnabled",
        "mozIndexedDB",
        "mozInnerScreenX",
        "mozInnerScreenY",
        "mozInputSource",
        "mozIsTextField",
        "mozItem",
        "mozItemCount",
        "mozItems",
        "mozLength",
        "mozLockOrientation",
        "mozMatchesSelector",
        "mozMovementX",
        "mozMovementY",
        "mozOpaque",
        "mozOrientation",
        "mozPaintCount",
        "mozPaintedFrames",
        "mozParsedFrames",
        "mozPay",
        "mozPointerLockElement",
        "mozPresentedFrames",
        "mozPreservesPitch",
        "mozPressure",
        "mozPrintCallback",
        "mozRTCIceCandidate",
        "mozRTCPeerConnection",
        "mozRTCSessionDescription",
        "mozRemove",
        "mozRequestAnimationFrame",
        "mozRequestFullScreen",
        "mozRequestPointerLock",
        "mozSetDataAt",
        "mozSetImageElement",
        "mozSourceNode",
        "mozSrcObject",
        "mozSystem",
        "mozTCPSocket",
        "mozTextStyle",
        "mozTypesAt",
        "mozUnlockOrientation",
        "mozUserCancelled",
        "mozVisibilityState",
        "ms",
        "msAnimation",
        "msAnimationDelay",
        "msAnimationDirection",
        "msAnimationDuration",
        "msAnimationFillMode",
        "msAnimationIterationCount",
        "msAnimationName",
        "msAnimationPlayState",
        "msAnimationStartTime",
        "msAnimationTimingFunction",
        "msBackfaceVisibility",
        "msBlockProgression",
        "msCSSOMElementFloatMetrics",
        "msCaching",
        "msCachingEnabled",
        "msCancelRequestAnimationFrame",
        "msCapsLockWarningOff",
        "msClearImmediate",
        "msClose",
        "msContentZoomChaining",
        "msContentZoomFactor",
        "msContentZoomLimit",
        "msContentZoomLimitMax",
        "msContentZoomLimitMin",
        "msContentZoomSnap",
        "msContentZoomSnapPoints",
        "msContentZoomSnapType",
        "msContentZooming",
        "msConvertURL",
        "msCrypto",
        "msDoNotTrack",
        "msElementsFromPoint",
        "msElementsFromRect",
        "msExitFullscreen",
        "msExtendedCode",
        "msFillRule",
        "msFirstPaint",
        "msFlex",
        "msFlexAlign",
        "msFlexDirection",
        "msFlexFlow",
        "msFlexItemAlign",
        "msFlexLinePack",
        "msFlexNegative",
        "msFlexOrder",
        "msFlexPack",
        "msFlexPositive",
        "msFlexPreferredSize",
        "msFlexWrap",
        "msFlowFrom",
        "msFlowInto",
        "msFontFeatureSettings",
        "msFullscreenElement",
        "msFullscreenEnabled",
        "msGetInputContext",
        "msGetRegionContent",
        "msGetUntransformedBounds",
        "msGraphicsTrustStatus",
        "msGridColumn",
        "msGridColumnAlign",
        "msGridColumnSpan",
        "msGridColumns",
        "msGridRow",
        "msGridRowAlign",
        "msGridRowSpan",
        "msGridRows",
        "msHidden",
        "msHighContrastAdjust",
        "msHyphenateLimitChars",
        "msHyphenateLimitLines",
        "msHyphenateLimitZone",
        "msHyphens",
        "msImageSmoothingEnabled",
        "msImeAlign",
        "msIndexedDB",
        "msInterpolationMode",
        "msIsStaticHTML",
        "msKeySystem",
        "msKeys",
        "msLaunchUri",
        "msLockOrientation",
        "msManipulationViewsEnabled",
        "msMatchMedia",
        "msMatchesSelector",
        "msMaxTouchPoints",
        "msOrientation",
        "msOverflowStyle",
        "msPerspective",
        "msPerspectiveOrigin",
        "msPlayToDisabled",
        "msPlayToPreferredSourceUri",
        "msPlayToPrimary",
        "msPointerEnabled",
        "msRegionOverflow",
        "msReleasePointerCapture",
        "msRequestAnimationFrame",
        "msRequestFullscreen",
        "msSaveBlob",
        "msSaveOrOpenBlob",
        "msScrollChaining",
        "msScrollLimit",
        "msScrollLimitXMax",
        "msScrollLimitXMin",
        "msScrollLimitYMax",
        "msScrollLimitYMin",
        "msScrollRails",
        "msScrollSnapPointsX",
        "msScrollSnapPointsY",
        "msScrollSnapType",
        "msScrollSnapX",
        "msScrollSnapY",
        "msScrollTranslation",
        "msSetImmediate",
        "msSetMediaKeys",
        "msSetPointerCapture",
        "msTextCombineHorizontal",
        "msTextSizeAdjust",
        "msToBlob",
        "msTouchAction",
        "msTouchSelect",
        "msTraceAsyncCallbackCompleted",
        "msTraceAsyncCallbackStarting",
        "msTraceAsyncOperationCompleted",
        "msTraceAsyncOperationStarting",
        "msTransform",
        "msTransformOrigin",
        "msTransformStyle",
        "msTransition",
        "msTransitionDelay",
        "msTransitionDuration",
        "msTransitionProperty",
        "msTransitionTimingFunction",
        "msUnlockOrientation",
        "msUpdateAsyncCallbackRelation",
        "msUserSelect",
        "msVisibilityState",
        "msWrapFlow",
        "msWrapMargin",
        "msWrapThrough",
        "msWriteProfilerMark",
        "msZoom",
        "msZoomTo",
        "mt",
        "mul",
        "multiEntry",
        "multiSelectionObj",
        "multiline",
        "multiple",
        "multiply",
        "multiplySelf",
        "multisample",
        "multisampled",
        "mutableFile",
        "muted",
        "n",
        "name",
        "nameProp",
        "namedItem",
        "namedRecordset",
        "names",
        "namespaceURI",
        "namespaces",
        "naturalHeight",
        "naturalWidth",
        "navigate",
        "navigation",
        "navigationMode",
        "navigationPreload",
        "navigationStart",
        "navigator",
        "near",
        "nearestViewportElement",
        "negative",
        "negotiated",
        "netscape",
        "networkState",
        "newScale",
        "newTranslate",
        "newURL",
        "newValue",
        "newValueSpecifiedUnits",
        "newVersion",
        "newhome",
        "next",
        "nextElementSibling",
        "nextHopProtocol",
        "nextNode",
        "nextPage",
        "nextSibling",
        "nickname",
        "noHref",
        "noModule",
        "noResize",
        "noShade",
        "noValidate",
        "noWrap",
        "node",
        "nodeName",
        "nodeType",
        "nodeValue",
        "nonce",
        "normalize",
        "normalizedPathSegList",
        "notationName",
        "notations",
        "note",
        "noteGrainOn",
        "noteOff",
        "noteOn",
        "notify",
        "now",
        "numOctaves",
        "number",
        "numberOfChannels",
        "numberOfInputs",
        "numberOfItems",
        "numberOfOutputs",
        "numberValue",
        "oMatchesSelector",
        "object",
        "object-fit",
        "object-position",
        "objectFit",
        "objectPosition",
        "objectStore",
        "objectStoreNames",
        "objectType",
        "observe",
        "occlusionQuerySet",
        "of",
        "offscreenBuffering",
        "offset",
        "offset-anchor",
        "offset-distance",
        "offset-path",
        "offset-rotate",
        "offsetAnchor",
        "offsetDistance",
        "offsetHeight",
        "offsetLeft",
        "offsetNode",
        "offsetParent",
        "offsetPath",
        "offsetRotate",
        "offsetTop",
        "offsetWidth",
        "offsetX",
        "offsetY",
        "ok",
        "oldURL",
        "oldValue",
        "oldVersion",
        "olderShadowRoot",
        "onLine",
        "onSubmittedWorkDone",
        "onabort",
        "onabsolutedeviceorientation",
        "onactivate",
        "onactive",
        "onaddsourcebuffer",
        "onaddstream",
        "onaddtrack",
        "onafterprint",
        "onafterscriptexecute",
        "onafterupdate",
        "onanimationcancel",
        "onanimationend",
        "onanimationiteration",
        "onanimationstart",
        "onappinstalled",
        "onaudioend",
        "onaudioprocess",
        "onaudiostart",
        "onautocomplete",
        "onautocompleteerror",
        "onauxclick",
        "onbeforeactivate",
        "onbeforecopy",
        "onbeforecut",
        "onbeforedeactivate",
        "onbeforeeditfocus",
        "onbeforeinstallprompt",
        "onbeforepaste",
        "onbeforeprint",
        "onbeforescriptexecute",
        "onbeforeunload",
        "onbeforeupdate",
        "onbeforexrselect",
        "onbegin",
        "onblocked",
        "onblur",
        "onbounce",
        "onboundary",
        "onbufferedamountlow",
        "oncached",
        "oncancel",
        "oncandidatewindowhide",
        "oncandidatewindowshow",
        "oncandidatewindowupdate",
        "oncanplay",
        "oncanplaythrough",
        "once",
        "oncellchange",
        "onchange",
        "oncharacteristicvaluechanged",
        "onchargingchange",
        "onchargingtimechange",
        "onchecking",
        "onclick",
        "onclose",
        "onclosing",
        "oncompassneedscalibration",
        "oncomplete",
        "onconnect",
        "onconnecting",
        "onconnectionavailable",
        "onconnectionstatechange",
        "oncontextmenu",
        "oncontrollerchange",
        "oncontrolselect",
        "oncopy",
        "oncuechange",
        "oncut",
        "ondataavailable",
        "ondatachannel",
        "ondatasetchanged",
        "ondatasetcomplete",
        "ondblclick",
        "ondeactivate",
        "ondevicechange",
        "ondevicelight",
        "ondevicemotion",
        "ondeviceorientation",
        "ondeviceorientationabsolute",
        "ondeviceproximity",
        "ondischargingtimechange",
        "ondisconnect",
        "ondisplay",
        "ondownloading",
        "ondrag",
        "ondragend",
        "ondragenter",
        "ondragexit",
        "ondragleave",
        "ondragover",
        "ondragstart",
        "ondrop",
        "ondurationchange",
        "onemptied",
        "onencrypted",
        "onend",
        "onended",
        "onenter",
        "onenterpictureinpicture",
        "onerror",
        "onerrorupdate",
        "onexit",
        "onfilterchange",
        "onfinish",
        "onfocus",
        "onfocusin",
        "onfocusout",
        "onformdata",
        "onfreeze",
        "onfullscreenchange",
        "onfullscreenerror",
        "ongatheringstatechange",
        "ongattserverdisconnected",
        "ongesturechange",
        "ongestureend",
        "ongesturestart",
        "ongotpointercapture",
        "onhashchange",
        "onhelp",
        "onicecandidate",
        "onicecandidateerror",
        "oniceconnectionstatechange",
        "onicegatheringstatechange",
        "oninactive",
        "oninput",
        "oninputsourceschange",
        "oninvalid",
        "onkeydown",
        "onkeypress",
        "onkeystatuseschange",
        "onkeyup",
        "onlanguagechange",
        "onlayoutcomplete",
        "onleavepictureinpicture",
        "onlevelchange",
        "onload",
        "onloadeddata",
        "onloadedmetadata",
        "onloadend",
        "onloading",
        "onloadingdone",
        "onloadingerror",
        "onloadstart",
        "onlosecapture",
        "onlostpointercapture",
        "only",
        "onmark",
        "onmessage",
        "onmessageerror",
        "onmidimessage",
        "onmousedown",
        "onmouseenter",
        "onmouseleave",
        "onmousemove",
        "onmouseout",
        "onmouseover",
        "onmouseup",
        "onmousewheel",
        "onmove",
        "onmoveend",
        "onmovestart",
        "onmozfullscreenchange",
        "onmozfullscreenerror",
        "onmozorientationchange",
        "onmozpointerlockchange",
        "onmozpointerlockerror",
        "onmscontentzoom",
        "onmsfullscreenchange",
        "onmsfullscreenerror",
        "onmsgesturechange",
        "onmsgesturedoubletap",
        "onmsgestureend",
        "onmsgesturehold",
        "onmsgesturestart",
        "onmsgesturetap",
        "onmsgotpointercapture",
        "onmsinertiastart",
        "onmslostpointercapture",
        "onmsmanipulationstatechanged",
        "onmsneedkey",
        "onmsorientationchange",
        "onmspointercancel",
        "onmspointerdown",
        "onmspointerenter",
        "onmspointerhover",
        "onmspointerleave",
        "onmspointermove",
        "onmspointerout",
        "onmspointerover",
        "onmspointerup",
        "onmssitemodejumplistitemremoved",
        "onmsthumbnailclick",
        "onmute",
        "onnegotiationneeded",
        "onnomatch",
        "onnoupdate",
        "onobsolete",
        "onoffline",
        "ononline",
        "onopen",
        "onorientationchange",
        "onpagechange",
        "onpagehide",
        "onpageshow",
        "onpaste",
        "onpause",
        "onpayerdetailchange",
        "onpaymentmethodchange",
        "onplay",
        "onplaying",
        "onpluginstreamstart",
        "onpointercancel",
        "onpointerdown",
        "onpointerenter",
        "onpointerleave",
        "onpointerlockchange",
        "onpointerlockerror",
        "onpointermove",
        "onpointerout",
        "onpointerover",
        "onpointerrawupdate",
        "onpointerup",
        "onpopstate",
        "onprocessorerror",
        "onprogress",
        "onpropertychange",
        "onratechange",
        "onreading",
        "onreadystatechange",
        "onrejectionhandled",
        "onrelease",
        "onremove",
        "onremovesourcebuffer",
        "onremovestream",
        "onremovetrack",
        "onrepeat",
        "onreset",
        "onresize",
        "onresizeend",
        "onresizestart",
        "onresourcetimingbufferfull",
        "onresult",
        "onresume",
        "onrowenter",
        "onrowexit",
        "onrowsdelete",
        "onrowsinserted",
        "onscroll",
        "onsearch",
        "onsecuritypolicyviolation",
        "onseeked",
        "onseeking",
        "onselect",
        "onselectedcandidatepairchange",
        "onselectend",
        "onselectionchange",
        "onselectstart",
        "onshippingaddresschange",
        "onshippingoptionchange",
        "onshow",
        "onsignalingstatechange",
        "onsoundend",
        "onsoundstart",
        "onsourceclose",
        "onsourceclosed",
        "onsourceended",
        "onsourceopen",
        "onspeechend",
        "onspeechstart",
        "onsqueeze",
        "onsqueezeend",
        "onsqueezestart",
        "onstalled",
        "onstart",
        "onstatechange",
        "onstop",
        "onstorage",
        "onstoragecommit",
        "onsubmit",
        "onsuccess",
        "onsuspend",
        "onterminate",
        "ontextinput",
        "ontimeout",
        "ontimeupdate",
        "ontoggle",
        "ontonechange",
        "ontouchcancel",
        "ontouchend",
        "ontouchmove",
        "ontouchstart",
        "ontrack",
        "ontransitioncancel",
        "ontransitionend",
        "ontransitionrun",
        "ontransitionstart",
        "onuncapturederror",
        "onunhandledrejection",
        "onunload",
        "onunmute",
        "onupdate",
        "onupdateend",
        "onupdatefound",
        "onupdateready",
        "onupdatestart",
        "onupgradeneeded",
        "onuserproximity",
        "onversionchange",
        "onvisibilitychange",
        "onvoiceschanged",
        "onvolumechange",
        "onvrdisplayactivate",
        "onvrdisplayconnect",
        "onvrdisplaydeactivate",
        "onvrdisplaydisconnect",
        "onvrdisplaypresentchange",
        "onwaiting",
        "onwaitingforkey",
        "onwarning",
        "onwebkitanimationend",
        "onwebkitanimationiteration",
        "onwebkitanimationstart",
        "onwebkitcurrentplaybacktargetiswirelesschanged",
        "onwebkitfullscreenchange",
        "onwebkitfullscreenerror",
        "onwebkitkeyadded",
        "onwebkitkeyerror",
        "onwebkitkeymessage",
        "onwebkitneedkey",
        "onwebkitorientationchange",
        "onwebkitplaybacktargetavailabilitychanged",
        "onwebkitpointerlockchange",
        "onwebkitpointerlockerror",
        "onwebkitresourcetimingbufferfull",
        "onwebkittransitionend",
        "onwheel",
        "onzoom",
        "opacity",
        "open",
        "openCursor",
        "openDatabase",
        "openKeyCursor",
        "opened",
        "opener",
        "opera",
        "operation",
        "operationType",
        "operator",
        "opr",
        "optimum",
        "options",
        "or",
        "order",
        "orderX",
        "orderY",
        "ordered",
        "org",
        "organization",
        "orient",
        "orientAngle",
        "orientType",
        "orientation",
        "orientationX",
        "orientationY",
        "orientationZ",
        "origin",
        "originalPolicy",
        "originalTarget",
        "orphans",
        "oscpu",
        "outerHTML",
        "outerHeight",
        "outerText",
        "outerWidth",
        "outline",
        "outline-color",
        "outline-offset",
        "outline-style",
        "outline-width",
        "outlineColor",
        "outlineOffset",
        "outlineStyle",
        "outlineWidth",
        "outputBuffer",
        "outputChannelCount",
        "outputLatency",
        "outputs",
        "overflow",
        "overflow-anchor",
        "overflow-block",
        "overflow-inline",
        "overflow-wrap",
        "overflow-x",
        "overflow-y",
        "overflowAnchor",
        "overflowBlock",
        "overflowInline",
        "overflowWrap",
        "overflowX",
        "overflowY",
        "overrideMimeType",
        "oversample",
        "overscroll-behavior",
        "overscroll-behavior-block",
        "overscroll-behavior-inline",
        "overscroll-behavior-x",
        "overscroll-behavior-y",
        "overscrollBehavior",
        "overscrollBehaviorBlock",
        "overscrollBehaviorInline",
        "overscrollBehaviorX",
        "overscrollBehaviorY",
        "ownKeys",
        "ownerDocument",
        "ownerElement",
        "ownerNode",
        "ownerRule",
        "ownerSVGElement",
        "owningElement",
        "p1",
        "p2",
        "p3",
        "p4",
        "packetSize",
        "packets",
        "pad",
        "padEnd",
        "padStart",
        "padding",
        "padding-block",
        "padding-block-end",
        "padding-block-start",
        "padding-bottom",
        "padding-inline",
        "padding-inline-end",
        "padding-inline-start",
        "padding-left",
        "padding-right",
        "padding-top",
        "paddingBlock",
        "paddingBlockEnd",
        "paddingBlockStart",
        "paddingBottom",
        "paddingInline",
        "paddingInlineEnd",
        "paddingInlineStart",
        "paddingLeft",
        "paddingRight",
        "paddingTop",
        "page",
        "page-break-after",
        "page-break-before",
        "page-break-inside",
        "pageBreakAfter",
        "pageBreakBefore",
        "pageBreakInside",
        "pageCount",
        "pageLeft",
        "pageTop",
        "pageX",
        "pageXOffset",
        "pageY",
        "pageYOffset",
        "pages",
        "paint-order",
        "paintOrder",
        "paintRequests",
        "paintType",
        "paintWorklet",
        "palette",
        "pan",
        "panningModel",
        "parameterData",
        "parameters",
        "parent",
        "parentElement",
        "parentNode",
        "parentRule",
        "parentStyleSheet",
        "parentTextEdit",
        "parentWindow",
        "parse",
        "parseAll",
        "parseFloat",
        "parseFromString",
        "parseInt",
        "part",
        "participants",
        "passOp",
        "passive",
        "password",
        "pasteHTML",
        "path",
        "pathLength",
        "pathSegList",
        "pathSegType",
        "pathSegTypeAsLetter",
        "pathname",
        "pattern",
        "patternContentUnits",
        "patternMismatch",
        "patternTransform",
        "patternUnits",
        "pause",
        "pauseAnimations",
        "pauseOnExit",
        "pauseProfilers",
        "pauseTransformFeedback",
        "paused",
        "payerEmail",
        "payerName",
        "payerPhone",
        "paymentManager",
        "pc",
        "peerIdentity",
        "pending",
        "pendingLocalDescription",
        "pendingRemoteDescription",
        "percent",
        "performance",
        "periodicSync",
        "permission",
        "permissionState",
        "permissions",
        "persist",
        "persisted",
        "personalbar",
        "perspective",
        "perspective-origin",
        "perspectiveOrigin",
        "phone",
        "phoneticFamilyName",
        "phoneticGivenName",
        "photo",
        "pictureInPictureElement",
        "pictureInPictureEnabled",
        "pictureInPictureWindow",
        "ping",
        "pipeThrough",
        "pipeTo",
        "pitch",
        "pixelBottom",
        "pixelDepth",
        "pixelHeight",
        "pixelLeft",
        "pixelRight",
        "pixelStorei",
        "pixelTop",
        "pixelUnitToMillimeterX",
        "pixelUnitToMillimeterY",
        "pixelWidth",
        "place-content",
        "place-items",
        "place-self",
        "placeContent",
        "placeItems",
        "placeSelf",
        "placeholder",
        "platform",
        "platformVersion",
        "platforms",
        "play",
        "playEffect",
        "playState",
        "playbackRate",
        "playbackState",
        "playbackTime",
        "played",
        "playoutDelayHint",
        "playsInline",
        "plugins",
        "pluginspage",
        "pname",
        "pointer-events",
        "pointerBeforeReferenceNode",
        "pointerEnabled",
        "pointerEvents",
        "pointerId",
        "pointerLockElement",
        "pointerType",
        "points",
        "pointsAtX",
        "pointsAtY",
        "pointsAtZ",
        "polygonOffset",
        "pop",
        "popDebugGroup",
        "popErrorScope",
        "populateMatrix",
        "popupWindowFeatures",
        "popupWindowName",
        "popupWindowURI",
        "port",
        "port1",
        "port2",
        "ports",
        "posBottom",
        "posHeight",
        "posLeft",
        "posRight",
        "posTop",
        "posWidth",
        "pose",
        "position",
        "positionAlign",
        "positionX",
        "positionY",
        "positionZ",
        "postError",
        "postMessage",
        "postalCode",
        "poster",
        "pow",
        "powerEfficient",
        "powerOff",
        "powerPreference",
        "preMultiplySelf",
        "precision",
        "preferredStyleSheetSet",
        "preferredStylesheetSet",
        "prefix",
        "preload",
        "premultipliedAlpha",
        "prepend",
        "presentation",
        "preserveAlpha",
        "preserveAspectRatio",
        "preserveAspectRatioString",
        "pressed",
        "pressure",
        "prevValue",
        "preventDefault",
        "preventExtensions",
        "preventSilentAccess",
        "previousElementSibling",
        "previousNode",
        "previousPage",
        "previousRect",
        "previousScale",
        "previousSibling",
        "previousTranslate",
        "primaryKey",
        "primitive",
        "primitiveType",
        "primitiveUnits",
        "principals",
        "print",
        "priority",
        "privateKey",
        "probablySupportsContext",
        "process",
        "processIceMessage",
        "processingEnd",
        "processingStart",
        "processorOptions",
        "product",
        "productId",
        "productName",
        "productSub",
        "profile",
        "profileEnd",
        "profiles",
        "projectionMatrix",
        "promise",
        "prompt",
        "properties",
        "propertyIsEnumerable",
        "propertyName",
        "protocol",
        "protocolLong",
        "prototype",
        "provider",
        "pseudoClass",
        "pseudoElement",
        "pt",
        "publicId",
        "publicKey",
        "published",
        "pulse",
        "push",
        "pushDebugGroup",
        "pushErrorScope",
        "pushManager",
        "pushNotification",
        "pushState",
        "put",
        "putImageData",
        "px",
        "quadraticCurveTo",
        "qualifier",
        "quaternion",
        "query",
        "queryCommandEnabled",
        "queryCommandIndeterm",
        "queryCommandState",
        "queryCommandSupported",
        "queryCommandText",
        "queryCommandValue",
        "querySelector",
        "querySelectorAll",
        "querySet",
        "queue",
        "queueMicrotask",
        "quote",
        "quotes",
        "r",
        "r1",
        "r2",
        "race",
        "rad",
        "radiogroup",
        "radiusX",
        "radiusY",
        "random",
        "range",
        "rangeCount",
        "rangeMax",
        "rangeMin",
        "rangeOffset",
        "rangeOverflow",
        "rangeParent",
        "rangeUnderflow",
        "rate",
        "ratio",
        "raw",
        "rawId",
        "read",
        "readAsArrayBuffer",
        "readAsBinaryString",
        "readAsBlob",
        "readAsDataURL",
        "readAsText",
        "readBuffer",
        "readEntries",
        "readOnly",
        "readPixels",
        "readReportRequested",
        "readText",
        "readValue",
        "readable",
        "ready",
        "readyState",
        "reason",
        "reboot",
        "receivedAlert",
        "receiver",
        "receivers",
        "recipient",
        "reconnect",
        "recordNumber",
        "recordsAvailable",
        "recordset",
        "rect",
        "red",
        "redEyeReduction",
        "redirect",
        "redirectCount",
        "redirectEnd",
        "redirectStart",
        "redirected",
        "reduce",
        "reduceRight",
        "reduction",
        "refDistance",
        "refX",
        "refY",
        "referenceNode",
        "referenceSpace",
        "referrer",
        "referrerPolicy",
        "refresh",
        "region",
        "regionAnchorX",
        "regionAnchorY",
        "regionId",
        "regions",
        "register",
        "registerContentHandler",
        "registerElement",
        "registerProperty",
        "registerProtocolHandler",
        "reject",
        "rel",
        "relList",
        "relatedAddress",
        "relatedNode",
        "relatedPort",
        "relatedTarget",
        "release",
        "releaseCapture",
        "releaseEvents",
        "releaseInterface",
        "releaseLock",
        "releasePointerCapture",
        "releaseShaderCompiler",
        "reliable",
        "reliableWrite",
        "reload",
        "rem",
        "remainingSpace",
        "remote",
        "remoteDescription",
        "remove",
        "removeAllRanges",
        "removeAttribute",
        "removeAttributeNS",
        "removeAttributeNode",
        "removeBehavior",
        "removeChild",
        "removeCue",
        "removeEventListener",
        "removeFilter",
        "removeImport",
        "removeItem",
        "removeListener",
        "removeNamedItem",
        "removeNamedItemNS",
        "removeNode",
        "removeParameter",
        "removeProperty",
        "removeRange",
        "removeRegion",
        "removeRule",
        "removeSiteSpecificTrackingException",
        "removeSourceBuffer",
        "removeStream",
        "removeTrack",
        "removeVariable",
        "removeWakeLockListener",
        "removeWebWideTrackingException",
        "removed",
        "removedNodes",
        "renderHeight",
        "renderState",
        "renderTime",
        "renderWidth",
        "renderbufferStorage",
        "renderbufferStorageMultisample",
        "renderedBuffer",
        "renderingMode",
        "renotify",
        "repeat",
        "replace",
        "replaceAdjacentText",
        "replaceAll",
        "replaceChild",
        "replaceChildren",
        "replaceData",
        "replaceId",
        "replaceItem",
        "replaceNode",
        "replaceState",
        "replaceSync",
        "replaceTrack",
        "replaceWholeText",
        "replaceWith",
        "reportValidity",
        "request",
        "requestAdapter",
        "requestAdapterInfo",
        "requestAnimationFrame",
        "requestAutocomplete",
        "requestData",
        "requestDevice",
        "requestFrame",
        "requestFullscreen",
        "requestHitTestSource",
        "requestHitTestSourceForTransientInput",
        "requestId",
        "requestIdleCallback",
        "requestMIDIAccess",
        "requestMediaKeySystemAccess",
        "requestPermission",
        "requestPictureInPicture",
        "requestPointerLock",
        "requestPresent",
        "requestReferenceSpace",
        "requestSession",
        "requestStart",
        "requestStorageAccess",
        "requestSubmit",
        "requestVideoFrameCallback",
        "requestingWindow",
        "requireInteraction",
        "required",
        "requiredExtensions",
        "requiredFeatures",
        "requiredLimits",
        "reset",
        "resetPose",
        "resetTransform",
        "resize",
        "resizeBy",
        "resizeTo",
        "resolve",
        "resolveQuerySet",
        "resolveTarget",
        "resource",
        "response",
        "responseBody",
        "responseEnd",
        "responseReady",
        "responseStart",
        "responseText",
        "responseType",
        "responseURL",
        "responseXML",
        "restartIce",
        "restore",
        "result",
        "resultIndex",
        "resultType",
        "results",
        "resume",
        "resumeProfilers",
        "resumeTransformFeedback",
        "retry",
        "returnValue",
        "rev",
        "reverse",
        "reversed",
        "revocable",
        "revokeObjectURL",
        "rgbColor",
        "right",
        "rightContext",
        "rightDegrees",
        "rightMargin",
        "rightProjectionMatrix",
        "rightViewMatrix",
        "role",
        "rolloffFactor",
        "root",
        "rootBounds",
        "rootElement",
        "rootMargin",
        "rotate",
        "rotateAxisAngle",
        "rotateAxisAngleSelf",
        "rotateFromVector",
        "rotateFromVectorSelf",
        "rotateSelf",
        "rotation",
        "rotationAngle",
        "rotationRate",
        "round",
        "roundRect",
        "row-gap",
        "rowGap",
        "rowIndex",
        "rowSpan",
        "rows",
        "rowsPerImage",
        "rtcpTransport",
        "rtt",
        "ruby-align",
        "ruby-position",
        "rubyAlign",
        "rubyOverhang",
        "rubyPosition",
        "rules",
        "runtime",
        "runtimeStyle",
        "rx",
        "ry",
        "s",
        "safari",
        "sample",
        "sampleCount",
        "sampleCoverage",
        "sampleRate",
        "sampleType",
        "sampler",
        "samplerParameterf",
        "samplerParameteri",
        "sandbox",
        "save",
        "saveData",
        "scale",
        "scale3d",
        "scale3dSelf",
        "scaleNonUniform",
        "scaleNonUniformSelf",
        "scaleSelf",
        "scheme",
        "scissor",
        "scope",
        "scopeName",
        "scoped",
        "screen",
        "screenBrightness",
        "screenEnabled",
        "screenLeft",
        "screenPixelToMillimeterX",
        "screenPixelToMillimeterY",
        "screenTop",
        "screenX",
        "screenY",
        "scriptURL",
        "scripts",
        "scroll",
        "scroll-behavior",
        "scroll-margin",
        "scroll-margin-block",
        "scroll-margin-block-end",
        "scroll-margin-block-start",
        "scroll-margin-bottom",
        "scroll-margin-inline",
        "scroll-margin-inline-end",
        "scroll-margin-inline-start",
        "scroll-margin-left",
        "scroll-margin-right",
        "scroll-margin-top",
        "scroll-padding",
        "scroll-padding-block",
        "scroll-padding-block-end",
        "scroll-padding-block-start",
        "scroll-padding-bottom",
        "scroll-padding-inline",
        "scroll-padding-inline-end",
        "scroll-padding-inline-start",
        "scroll-padding-left",
        "scroll-padding-right",
        "scroll-padding-top",
        "scroll-snap-align",
        "scroll-snap-type",
        "scrollAmount",
        "scrollBehavior",
        "scrollBy",
        "scrollByLines",
        "scrollByPages",
        "scrollDelay",
        "scrollHeight",
        "scrollIntoView",
        "scrollIntoViewIfNeeded",
        "scrollLeft",
        "scrollLeftMax",
        "scrollMargin",
        "scrollMarginBlock",
        "scrollMarginBlockEnd",
        "scrollMarginBlockStart",
        "scrollMarginBottom",
        "scrollMarginInline",
        "scrollMarginInlineEnd",
        "scrollMarginInlineStart",
        "scrollMarginLeft",
        "scrollMarginRight",
        "scrollMarginTop",
        "scrollMaxX",
        "scrollMaxY",
        "scrollPadding",
        "scrollPaddingBlock",
        "scrollPaddingBlockEnd",
        "scrollPaddingBlockStart",
        "scrollPaddingBottom",
        "scrollPaddingInline",
        "scrollPaddingInlineEnd",
        "scrollPaddingInlineStart",
        "scrollPaddingLeft",
        "scrollPaddingRight",
        "scrollPaddingTop",
        "scrollRestoration",
        "scrollSnapAlign",
        "scrollSnapType",
        "scrollTo",
        "scrollTop",
        "scrollTopMax",
        "scrollWidth",
        "scrollX",
        "scrollY",
        "scrollbar-color",
        "scrollbar-width",
        "scrollbar3dLightColor",
        "scrollbarArrowColor",
        "scrollbarBaseColor",
        "scrollbarColor",
        "scrollbarDarkShadowColor",
        "scrollbarFaceColor",
        "scrollbarHighlightColor",
        "scrollbarShadowColor",
        "scrollbarTrackColor",
        "scrollbarWidth",
        "scrollbars",
        "scrolling",
        "scrollingElement",
        "sctp",
        "sctpCauseCode",
        "sdp",
        "sdpLineNumber",
        "sdpMLineIndex",
        "sdpMid",
        "seal",
        "search",
        "searchBox",
        "searchBoxJavaBridge_",
        "searchParams",
        "sectionRowIndex",
        "secureConnectionStart",
        "security",
        "seed",
        "seekToNextFrame",
        "seekable",
        "seeking",
        "select",
        "selectAllChildren",
        "selectAlternateInterface",
        "selectConfiguration",
        "selectNode",
        "selectNodeContents",
        "selectNodes",
        "selectSingleNode",
        "selectSubString",
        "selected",
        "selectedIndex",
        "selectedOptions",
        "selectedStyleSheetSet",
        "selectedStylesheetSet",
        "selection",
        "selectionDirection",
        "selectionEnd",
        "selectionStart",
        "selector",
        "selectorText",
        "self",
        "send",
        "sendAsBinary",
        "sendBeacon",
        "sender",
        "sentAlert",
        "sentTimestamp",
        "separator",
        "serialNumber",
        "serializeToString",
        "serverTiming",
        "service",
        "serviceWorker",
        "session",
        "sessionId",
        "sessionStorage",
        "set",
        "setActionHandler",
        "setActive",
        "setAlpha",
        "setAppBadge",
        "setAttribute",
        "setAttributeNS",
        "setAttributeNode",
        "setAttributeNodeNS",
        "setBaseAndExtent",
        "setBigInt64",
        "setBigUint64",
        "setBindGroup",
        "setBingCurrentSearchDefault",
        "setBlendConstant",
        "setCapture",
        "setCodecPreferences",
        "setColor",
        "setCompositeOperation",
        "setConfiguration",
        "setCurrentTime",
        "setCustomValidity",
        "setData",
        "setDate",
        "setDragImage",
        "setEnd",
        "setEndAfter",
        "setEndBefore",
        "setEndPoint",
        "setFillColor",
        "setFilterRes",
        "setFloat32",
        "setFloat64",
        "setFloatValue",
        "setFormValue",
        "setFullYear",
        "setHeaderValue",
        "setHours",
        "setIdentityProvider",
        "setImmediate",
        "setIndexBuffer",
        "setInt16",
        "setInt32",
        "setInt8",
        "setInterval",
        "setItem",
        "setKeyframes",
        "setLineCap",
        "setLineDash",
        "setLineJoin",
        "setLineWidth",
        "setLiveSeekableRange",
        "setLocalDescription",
        "setMatrix",
        "setMatrixValue",
        "setMediaKeys",
        "setMilliseconds",
        "setMinutes",
        "setMiterLimit",
        "setMonth",
        "setNamedItem",
        "setNamedItemNS",
        "setNonUserCodeExceptions",
        "setOrientToAngle",
        "setOrientToAuto",
        "setOrientation",
        "setOverrideHistoryNavigationMode",
        "setPaint",
        "setParameter",
        "setParameters",
        "setPeriodicWave",
        "setPipeline",
        "setPointerCapture",
        "setPosition",
        "setPositionState",
        "setPreference",
        "setProperty",
        "setPrototypeOf",
        "setRGBColor",
        "setRGBColorICCColor",
        "setRadius",
        "setRangeText",
        "setRemoteDescription",
        "setRequestHeader",
        "setResizable",
        "setResourceTimingBufferSize",
        "setRotate",
        "setScale",
        "setScissorRect",
        "setSeconds",
        "setSelectionRange",
        "setServerCertificate",
        "setShadow",
        "setSinkId",
        "setSkewX",
        "setSkewY",
        "setStart",
        "setStartAfter",
        "setStartBefore",
        "setStdDeviation",
        "setStencilReference",
        "setStreams",
        "setStringValue",
        "setStrokeColor",
        "setSuggestResult",
        "setTargetAtTime",
        "setTargetValueAtTime",
        "setTime",
        "setTimeout",
        "setTransform",
        "setTranslate",
        "setUTCDate",
        "setUTCFullYear",
        "setUTCHours",
        "setUTCMilliseconds",
        "setUTCMinutes",
        "setUTCMonth",
        "setUTCSeconds",
        "setUint16",
        "setUint32",
        "setUint8",
        "setUri",
        "setValidity",
        "setValueAtTime",
        "setValueCurveAtTime",
        "setVariable",
        "setVelocity",
        "setVersion",
        "setVertexBuffer",
        "setViewport",
        "setYear",
        "settingName",
        "settingValue",
        "sex",
        "shaderLocation",
        "shaderSource",
        "shadowBlur",
        "shadowColor",
        "shadowOffsetX",
        "shadowOffsetY",
        "shadowRoot",
        "shape",
        "shape-image-threshold",
        "shape-margin",
        "shape-outside",
        "shape-rendering",
        "shapeImageThreshold",
        "shapeMargin",
        "shapeOutside",
        "shapeRendering",
        "sheet",
        "shift",
        "shiftKey",
        "shiftLeft",
        "shippingAddress",
        "shippingOption",
        "shippingType",
        "show",
        "showHelp",
        "showModal",
        "showModalDialog",
        "showModelessDialog",
        "showNotification",
        "sidebar",
        "sign",
        "signal",
        "signalingState",
        "signature",
        "silent",
        "sin",
        "singleNodeValue",
        "sinh",
        "sinkId",
        "sittingToStandingTransform",
        "size",
        "sizeToContent",
        "sizeX",
        "sizeZ",
        "sizes",
        "skewX",
        "skewXSelf",
        "skewY",
        "skewYSelf",
        "slice",
        "slope",
        "slot",
        "small",
        "smil",
        "smooth",
        "smoothingTimeConstant",
        "snapToLines",
        "snapshotItem",
        "snapshotLength",
        "some",
        "sort",
        "sortingCode",
        "source",
        "sourceBuffer",
        "sourceBuffers",
        "sourceCapabilities",
        "sourceFile",
        "sourceIndex",
        "sourceMap",
        "sources",
        "spacing",
        "span",
        "speak",
        "speakAs",
        "speaking",
        "species",
        "specified",
        "specularConstant",
        "specularExponent",
        "speechSynthesis",
        "speed",
        "speedOfSound",
        "spellcheck",
        "splice",
        "split",
        "splitText",
        "spreadMethod",
        "sqrt",
        "src",
        "srcElement",
        "srcFactor",
        "srcFilter",
        "srcObject",
        "srcUrn",
        "srcdoc",
        "srclang",
        "srcset",
        "stack",
        "stackTraceLimit",
        "stacktrace",
        "stageParameters",
        "standalone",
        "standby",
        "start",
        "startContainer",
        "startIce",
        "startMessages",
        "startNotifications",
        "startOffset",
        "startProfiling",
        "startRendering",
        "startShark",
        "startTime",
        "startsWith",
        "state",
        "status",
        "statusCode",
        "statusMessage",
        "statusText",
        "statusbar",
        "stdDeviationX",
        "stdDeviationY",
        "stencilBack",
        "stencilClearValue",
        "stencilFront",
        "stencilFunc",
        "stencilFuncSeparate",
        "stencilLoadOp",
        "stencilMask",
        "stencilMaskSeparate",
        "stencilOp",
        "stencilOpSeparate",
        "stencilReadMask",
        "stencilReadOnly",
        "stencilStoreOp",
        "stencilWriteMask",
        "step",
        "stepDown",
        "stepMismatch",
        "stepMode",
        "stepUp",
        "sticky",
        "stitchTiles",
        "stop",
        "stop-color",
        "stop-opacity",
        "stopColor",
        "stopImmediatePropagation",
        "stopNotifications",
        "stopOpacity",
        "stopProfiling",
        "stopPropagation",
        "stopShark",
        "stopped",
        "storage",
        "storageArea",
        "storageName",
        "storageStatus",
        "storageTexture",
        "store",
        "storeOp",
        "storeSiteSpecificTrackingException",
        "storeWebWideTrackingException",
        "stpVersion",
        "stream",
        "streams",
        "stretch",
        "strike",
        "string",
        "stringValue",
        "stringify",
        "stripIndexFormat",
        "stroke",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "strokeDasharray",
        "strokeDashoffset",
        "strokeLinecap",
        "strokeLinejoin",
        "strokeMiterlimit",
        "strokeOpacity",
        "strokeRect",
        "strokeStyle",
        "strokeText",
        "strokeWidth",
        "style",
        "styleFloat",
        "styleMap",
        "styleMedia",
        "styleSheet",
        "styleSheetSets",
        "styleSheets",
        "sub",
        "subarray",
        "subject",
        "submit",
        "submitFrame",
        "submitter",
        "subscribe",
        "substr",
        "substring",
        "substringData",
        "subtle",
        "subtree",
        "suffix",
        "suffixes",
        "summary",
        "sup",
        "supported",
        "supportedContentEncodings",
        "supportedEntryTypes",
        "supports",
        "supportsSession",
        "surfaceScale",
        "surroundContents",
        "suspend",
        "suspendRedraw",
        "swapCache",
        "swapNode",
        "sweepFlag",
        "symbols",
        "sync",
        "sysexEnabled",
        "system",
        "systemCode",
        "systemId",
        "systemLanguage",
        "systemXDPI",
        "systemYDPI",
        "tBodies",
        "tFoot",
        "tHead",
        "tabIndex",
        "table",
        "table-layout",
        "tableLayout",
        "tableValues",
        "tag",
        "tagName",
        "tagUrn",
        "tags",
        "taintEnabled",
        "takePhoto",
        "takeRecords",
        "tan",
        "tangentialPressure",
        "tanh",
        "target",
        "targetElement",
        "targetRayMode",
        "targetRaySpace",
        "targetTouches",
        "targetX",
        "targetY",
        "targets",
        "tcpType",
        "tee",
        "tel",
        "terminate",
        "test",
        "texImage2D",
        "texImage3D",
        "texParameterf",
        "texParameteri",
        "texStorage2D",
        "texStorage3D",
        "texSubImage2D",
        "texSubImage3D",
        "text",
        "text-align",
        "text-align-last",
        "text-anchor",
        "text-combine-upright",
        "text-decoration",
        "text-decoration-color",
        "text-decoration-line",
        "text-decoration-skip-ink",
        "text-decoration-style",
        "text-decoration-thickness",
        "text-emphasis",
        "text-emphasis-color",
        "text-emphasis-position",
        "text-emphasis-style",
        "text-indent",
        "text-justify",
        "text-orientation",
        "text-overflow",
        "text-rendering",
        "text-shadow",
        "text-transform",
        "text-underline-offset",
        "text-underline-position",
        "textAlign",
        "textAlignLast",
        "textAnchor",
        "textAutospace",
        "textBaseline",
        "textCombineUpright",
        "textContent",
        "textDecoration",
        "textDecorationBlink",
        "textDecorationColor",
        "textDecorationLine",
        "textDecorationLineThrough",
        "textDecorationNone",
        "textDecorationOverline",
        "textDecorationSkipInk",
        "textDecorationStyle",
        "textDecorationThickness",
        "textDecorationUnderline",
        "textEmphasis",
        "textEmphasisColor",
        "textEmphasisPosition",
        "textEmphasisStyle",
        "textIndent",
        "textJustify",
        "textJustifyTrim",
        "textKashida",
        "textKashidaSpace",
        "textLength",
        "textOrientation",
        "textOverflow",
        "textRendering",
        "textShadow",
        "textTracks",
        "textTransform",
        "textUnderlineOffset",
        "textUnderlinePosition",
        "texture",
        "then",
        "threadId",
        "threshold",
        "thresholds",
        "tiltX",
        "tiltY",
        "time",
        "timeEnd",
        "timeLog",
        "timeOrigin",
        "timeRemaining",
        "timeStamp",
        "timecode",
        "timeline",
        "timelineTime",
        "timeout",
        "timestamp",
        "timestampOffset",
        "timestampWrites",
        "timing",
        "title",
        "to",
        "toArray",
        "toBlob",
        "toDataURL",
        "toDateString",
        "toElement",
        "toExponential",
        "toFixed",
        "toFloat32Array",
        "toFloat64Array",
        "toGMTString",
        "toISOString",
        "toJSON",
        "toLocaleDateString",
        "toLocaleFormat",
        "toLocaleLowerCase",
        "toLocaleString",
        "toLocaleTimeString",
        "toLocaleUpperCase",
        "toLowerCase",
        "toMatrix",
        "toMethod",
        "toPrecision",
        "toPrimitive",
        "toSdp",
        "toSource",
        "toStaticHTML",
        "toString",
        "toStringTag",
        "toSum",
        "toTimeString",
        "toUTCString",
        "toUpperCase",
        "toggle",
        "toggleAttribute",
        "toggleLongPressEnabled",
        "tone",
        "toneBuffer",
        "tooLong",
        "tooShort",
        "toolbar",
        "top",
        "topMargin",
        "topology",
        "total",
        "totalFrameDelay",
        "totalVideoFrames",
        "touch-action",
        "touchAction",
        "touched",
        "touches",
        "trace",
        "track",
        "trackVisibility",
        "transaction",
        "transactions",
        "transceiver",
        "transferControlToOffscreen",
        "transferFromImageBitmap",
        "transferImageBitmap",
        "transferIn",
        "transferOut",
        "transferSize",
        "transferToImageBitmap",
        "transform",
        "transform-box",
        "transform-origin",
        "transform-style",
        "transformBox",
        "transformFeedbackVaryings",
        "transformOrigin",
        "transformPoint",
        "transformString",
        "transformStyle",
        "transformToDocument",
        "transformToFragment",
        "transition",
        "transition-delay",
        "transition-duration",
        "transition-property",
        "transition-timing-function",
        "transitionDelay",
        "transitionDuration",
        "transitionProperty",
        "transitionTimingFunction",
        "translate",
        "translateSelf",
        "translationX",
        "translationY",
        "transport",
        "trim",
        "trimEnd",
        "trimLeft",
        "trimRight",
        "trimStart",
        "trueSpeed",
        "trunc",
        "truncate",
        "trustedTypes",
        "turn",
        "twist",
        "type",
        "typeDetail",
        "typeMismatch",
        "typeMustMatch",
        "types",
        "u2f",
        "ubound",
        "uint16",
        "uint32",
        "uint8",
        "uint8Clamped",
        "unclippedDepth",
        "unconfigure",
        "undefined",
        "unescape",
        "uneval",
        "unicode",
        "unicode-bidi",
        "unicodeBidi",
        "unicodeRange",
        "uniform1f",
        "uniform1fv",
        "uniform1i",
        "uniform1iv",
        "uniform1ui",
        "uniform1uiv",
        "uniform2f",
        "uniform2fv",
        "uniform2i",
        "uniform2iv",
        "uniform2ui",
        "uniform2uiv",
        "uniform3f",
        "uniform3fv",
        "uniform3i",
        "uniform3iv",
        "uniform3ui",
        "uniform3uiv",
        "uniform4f",
        "uniform4fv",
        "uniform4i",
        "uniform4iv",
        "uniform4ui",
        "uniform4uiv",
        "uniformBlockBinding",
        "uniformMatrix2fv",
        "uniformMatrix2x3fv",
        "uniformMatrix2x4fv",
        "uniformMatrix3fv",
        "uniformMatrix3x2fv",
        "uniformMatrix3x4fv",
        "uniformMatrix4fv",
        "uniformMatrix4x2fv",
        "uniformMatrix4x3fv",
        "unique",
        "uniqueID",
        "uniqueNumber",
        "unit",
        "unitType",
        "units",
        "unloadEventEnd",
        "unloadEventStart",
        "unlock",
        "unmap",
        "unmount",
        "unobserve",
        "unpause",
        "unpauseAnimations",
        "unreadCount",
        "unregister",
        "unregisterContentHandler",
        "unregisterProtocolHandler",
        "unscopables",
        "unselectable",
        "unshift",
        "unsubscribe",
        "unsuspendRedraw",
        "unsuspendRedrawAll",
        "unwatch",
        "unwrapKey",
        "upDegrees",
        "upX",
        "upY",
        "upZ",
        "update",
        "updateCommands",
        "updateIce",
        "updateInterval",
        "updatePlaybackRate",
        "updateRenderState",
        "updateSettings",
        "updateTiming",
        "updateViaCache",
        "updateWith",
        "updated",
        "updating",
        "upgrade",
        "upload",
        "uploadTotal",
        "uploaded",
        "upper",
        "upperBound",
        "upperOpen",
        "uri",
        "url",
        "urn",
        "urns",
        "usage",
        "usages",
        "usb",
        "usbVersionMajor",
        "usbVersionMinor",
        "usbVersionSubminor",
        "useCurrentView",
        "useMap",
        "useProgram",
        "usedSpace",
        "user-select",
        "userActivation",
        "userAgent",
        "userAgentData",
        "userChoice",
        "userHandle",
        "userHint",
        "userLanguage",
        "userSelect",
        "userVisibleOnly",
        "username",
        "usernameFragment",
        "utterance",
        "uuid",
        "v8BreakIterator",
        "vAlign",
        "vLink",
        "valid",
        "validate",
        "validateProgram",
        "validationMessage",
        "validity",
        "value",
        "valueAsDate",
        "valueAsNumber",
        "valueAsString",
        "valueInSpecifiedUnits",
        "valueMissing",
        "valueOf",
        "valueText",
        "valueType",
        "values",
        "variable",
        "variant",
        "variationSettings",
        "vector-effect",
        "vectorEffect",
        "velocityAngular",
        "velocityExpansion",
        "velocityX",
        "velocityY",
        "vendor",
        "vendorId",
        "vendorSub",
        "verify",
        "version",
        "vertex",
        "vertexAttrib1f",
        "vertexAttrib1fv",
        "vertexAttrib2f",
        "vertexAttrib2fv",
        "vertexAttrib3f",
        "vertexAttrib3fv",
        "vertexAttrib4f",
        "vertexAttrib4fv",
        "vertexAttribDivisor",
        "vertexAttribDivisorANGLE",
        "vertexAttribI4i",
        "vertexAttribI4iv",
        "vertexAttribI4ui",
        "vertexAttribI4uiv",
        "vertexAttribIPointer",
        "vertexAttribPointer",
        "vertical",
        "vertical-align",
        "verticalAlign",
        "verticalOverflow",
        "vh",
        "vibrate",
        "vibrationActuator",
        "videoBitsPerSecond",
        "videoHeight",
        "videoTracks",
        "videoWidth",
        "view",
        "viewBox",
        "viewBoxString",
        "viewDimension",
        "viewFormats",
        "viewTarget",
        "viewTargetString",
        "viewport",
        "viewportAnchorX",
        "viewportAnchorY",
        "viewportElement",
        "views",
        "violatedDirective",
        "visibility",
        "visibilityState",
        "visible",
        "visualViewport",
        "vlinkColor",
        "vmax",
        "vmin",
        "voice",
        "voiceURI",
        "volume",
        "vrml",
        "vspace",
        "vw",
        "w",
        "wait",
        "waitSync",
        "waiting",
        "wake",
        "wakeLock",
        "wand",
        "warn",
        "wasClean",
        "wasDiscarded",
        "watch",
        "watchAvailability",
        "watchPosition",
        "webdriver",
        "webkitAddKey",
        "webkitAlignContent",
        "webkitAlignItems",
        "webkitAlignSelf",
        "webkitAnimation",
        "webkitAnimationDelay",
        "webkitAnimationDirection",
        "webkitAnimationDuration",
        "webkitAnimationFillMode",
        "webkitAnimationIterationCount",
        "webkitAnimationName",
        "webkitAnimationPlayState",
        "webkitAnimationTimingFunction",
        "webkitAppearance",
        "webkitAudioContext",
        "webkitAudioDecodedByteCount",
        "webkitAudioPannerNode",
        "webkitBackfaceVisibility",
        "webkitBackground",
        "webkitBackgroundAttachment",
        "webkitBackgroundClip",
        "webkitBackgroundColor",
        "webkitBackgroundImage",
        "webkitBackgroundOrigin",
        "webkitBackgroundPosition",
        "webkitBackgroundPositionX",
        "webkitBackgroundPositionY",
        "webkitBackgroundRepeat",
        "webkitBackgroundSize",
        "webkitBackingStorePixelRatio",
        "webkitBorderBottomLeftRadius",
        "webkitBorderBottomRightRadius",
        "webkitBorderImage",
        "webkitBorderImageOutset",
        "webkitBorderImageRepeat",
        "webkitBorderImageSlice",
        "webkitBorderImageSource",
        "webkitBorderImageWidth",
        "webkitBorderRadius",
        "webkitBorderTopLeftRadius",
        "webkitBorderTopRightRadius",
        "webkitBoxAlign",
        "webkitBoxDirection",
        "webkitBoxFlex",
        "webkitBoxOrdinalGroup",
        "webkitBoxOrient",
        "webkitBoxPack",
        "webkitBoxShadow",
        "webkitBoxSizing",
        "webkitCancelAnimationFrame",
        "webkitCancelFullScreen",
        "webkitCancelKeyRequest",
        "webkitCancelRequestAnimationFrame",
        "webkitClearResourceTimings",
        "webkitClosedCaptionsVisible",
        "webkitConvertPointFromNodeToPage",
        "webkitConvertPointFromPageToNode",
        "webkitCreateShadowRoot",
        "webkitCurrentFullScreenElement",
        "webkitCurrentPlaybackTargetIsWireless",
        "webkitDecodedFrameCount",
        "webkitDirectionInvertedFromDevice",
        "webkitDisplayingFullscreen",
        "webkitDroppedFrameCount",
        "webkitEnterFullScreen",
        "webkitEnterFullscreen",
        "webkitEntries",
        "webkitExitFullScreen",
        "webkitExitFullscreen",
        "webkitExitPointerLock",
        "webkitFilter",
        "webkitFlex",
        "webkitFlexBasis",
        "webkitFlexDirection",
        "webkitFlexFlow",
        "webkitFlexGrow",
        "webkitFlexShrink",
        "webkitFlexWrap",
        "webkitFullScreenKeyboardInputAllowed",
        "webkitFullscreenElement",
        "webkitFullscreenEnabled",
        "webkitGenerateKeyRequest",
        "webkitGetAsEntry",
        "webkitGetDatabaseNames",
        "webkitGetEntries",
        "webkitGetEntriesByName",
        "webkitGetEntriesByType",
        "webkitGetFlowByName",
        "webkitGetGamepads",
        "webkitGetImageDataHD",
        "webkitGetNamedFlows",
        "webkitGetRegionFlowRanges",
        "webkitGetUserMedia",
        "webkitHasClosedCaptions",
        "webkitHidden",
        "webkitIDBCursor",
        "webkitIDBDatabase",
        "webkitIDBDatabaseError",
        "webkitIDBDatabaseException",
        "webkitIDBFactory",
        "webkitIDBIndex",
        "webkitIDBKeyRange",
        "webkitIDBObjectStore",
        "webkitIDBRequest",
        "webkitIDBTransaction",
        "webkitImageSmoothingEnabled",
        "webkitIndexedDB",
        "webkitInitMessageEvent",
        "webkitIsFullScreen",
        "webkitJustifyContent",
        "webkitKeys",
        "webkitLineClamp",
        "webkitLineDashOffset",
        "webkitLockOrientation",
        "webkitMask",
        "webkitMaskClip",
        "webkitMaskComposite",
        "webkitMaskImage",
        "webkitMaskOrigin",
        "webkitMaskPosition",
        "webkitMaskPositionX",
        "webkitMaskPositionY",
        "webkitMaskRepeat",
        "webkitMaskSize",
        "webkitMatchesSelector",
        "webkitMediaStream",
        "webkitNotifications",
        "webkitOfflineAudioContext",
        "webkitOrder",
        "webkitOrientation",
        "webkitPeerConnection00",
        "webkitPersistentStorage",
        "webkitPerspective",
        "webkitPerspectiveOrigin",
        "webkitPointerLockElement",
        "webkitPostMessage",
        "webkitPreservesPitch",
        "webkitPutImageDataHD",
        "webkitRTCPeerConnection",
        "webkitRegionOverset",
        "webkitRelativePath",
        "webkitRequestAnimationFrame",
        "webkitRequestFileSystem",
        "webkitRequestFullScreen",
        "webkitRequestFullscreen",
        "webkitRequestPointerLock",
        "webkitResolveLocalFileSystemURL",
        "webkitSetMediaKeys",
        "webkitSetResourceTimingBufferSize",
        "webkitShadowRoot",
        "webkitShowPlaybackTargetPicker",
        "webkitSlice",
        "webkitSpeechGrammar",
        "webkitSpeechGrammarList",
        "webkitSpeechRecognition",
        "webkitSpeechRecognitionError",
        "webkitSpeechRecognitionEvent",
        "webkitStorageInfo",
        "webkitSupportsFullscreen",
        "webkitTemporaryStorage",
        "webkitTextFillColor",
        "webkitTextSizeAdjust",
        "webkitTextStroke",
        "webkitTextStrokeColor",
        "webkitTextStrokeWidth",
        "webkitTransform",
        "webkitTransformOrigin",
        "webkitTransformStyle",
        "webkitTransition",
        "webkitTransitionDelay",
        "webkitTransitionDuration",
        "webkitTransitionProperty",
        "webkitTransitionTimingFunction",
        "webkitURL",
        "webkitUnlockOrientation",
        "webkitUserSelect",
        "webkitVideoDecodedByteCount",
        "webkitVisibilityState",
        "webkitWirelessVideoPlaybackDisabled",
        "webkitdirectory",
        "webkitdropzone",
        "webstore",
        "weight",
        "wgslLanguageFeatures",
        "whatToShow",
        "wheelDelta",
        "wheelDeltaX",
        "wheelDeltaY",
        "whenDefined",
        "which",
        "white-space",
        "whiteSpace",
        "wholeText",
        "widows",
        "width",
        "will-change",
        "willChange",
        "willValidate",
        "window",
        "withCredentials",
        "word-break",
        "word-spacing",
        "word-wrap",
        "wordBreak",
        "wordSpacing",
        "wordWrap",
        "workerStart",
        "wow64",
        "wrap",
        "wrapKey",
        "writable",
        "writableAuxiliaries",
        "write",
        "writeBuffer",
        "writeMask",
        "writeText",
        "writeTexture",
        "writeTimestamp",
        "writeValue",
        "writeWithoutResponse",
        "writeln",
        "writing-mode",
        "writingMode",
        "x",
        "x1",
        "x2",
        "xChannelSelector",
        "xmlEncoding",
        "xmlStandalone",
        "xmlVersion",
        "xmlbase",
        "xmllang",
        "xmlspace",
        "xor",
        "xr",
        "y",
        "y1",
        "y2",
        "yChannelSelector",
        "yandex",
        "z",
        "z-index",
        "zIndex",
        "zoom",
        "zoomAndPan",
        "zoomRectScreen"
      ];
      function find_builtins(reserved) {
        domprops.forEach(add);
        var new_globals = ["Symbol", "Map", "Promise", "Proxy", "Reflect", "Set", "WeakMap", "WeakSet"];
        var objects = {};
        var global_ref = typeof global === "object" ? global : self;
        new_globals.forEach(function(new_global) {
          objects[new_global] = global_ref[new_global] || function() {
          };
        });
        [
          "null",
          "true",
          "false",
          "NaN",
          "Infinity",
          "-Infinity",
          "undefined"
        ].forEach(add);
        [
          Object,
          Array,
          Function,
          Number,
          String,
          Boolean,
          Error,
          Math,
          Date,
          RegExp,
          objects.Symbol,
          ArrayBuffer,
          DataView,
          decodeURI,
          decodeURIComponent,
          encodeURI,
          encodeURIComponent,
          eval,
          EvalError,
          Float32Array,
          Float64Array,
          Int8Array,
          Int16Array,
          Int32Array,
          isFinite,
          isNaN,
          JSON,
          objects.Map,
          parseFloat,
          parseInt,
          objects.Promise,
          objects.Proxy,
          RangeError,
          ReferenceError,
          objects.Reflect,
          objects.Set,
          SyntaxError,
          TypeError,
          Uint8Array,
          Uint8ClampedArray,
          Uint16Array,
          Uint32Array,
          URIError,
          objects.WeakMap,
          objects.WeakSet
        ].forEach(function(ctor) {
          Object.getOwnPropertyNames(ctor).map(add);
          if (ctor.prototype) {
            Object.getOwnPropertyNames(ctor.prototype).map(add);
          }
        });
        function add(name) {
          reserved.add(name);
        }
      }
      function reserve_quoted_keys(ast, reserved) {
        function add(name) {
          push_uniq(reserved, name);
        }
        ast.walk(new TreeWalker(function(node) {
          if (node instanceof AST_ObjectKeyVal && node.quote) {
            add(node.key);
          } else if (node instanceof AST_ObjectProperty && node.quote) {
            add(node.key.name);
          } else if (node instanceof AST_Sub) {
            addStrings(node.property, add);
          }
        }));
      }
      function addStrings(node, add) {
        node.walk(new TreeWalker(function(node2) {
          if (node2 instanceof AST_Sequence) {
            addStrings(node2.tail_node(), add);
          } else if (node2 instanceof AST_String) {
            add(node2.value);
          } else if (node2 instanceof AST_Conditional) {
            addStrings(node2.consequent, add);
            addStrings(node2.alternative, add);
          }
          return true;
        }));
      }
      function mangle_private_properties(ast, options) {
        var cprivate = -1;
        var private_cache = /* @__PURE__ */ new Map();
        var nth_identifier = options.nth_identifier || base54;
        ast = ast.transform(new TreeTransformer(function(node) {
          if (node instanceof AST_ClassPrivateProperty || node instanceof AST_PrivateMethod || node instanceof AST_PrivateGetter || node instanceof AST_PrivateSetter || node instanceof AST_PrivateIn) {
            node.key.name = mangle_private(node.key.name);
          } else if (node instanceof AST_DotHash) {
            node.property = mangle_private(node.property);
          }
        }));
        return ast;
        function mangle_private(name) {
          let mangled = private_cache.get(name);
          if (!mangled) {
            mangled = nth_identifier.get(++cprivate);
            private_cache.set(name, mangled);
          }
          return mangled;
        }
      }
      function find_annotated_props(ast) {
        var annotated_props = /* @__PURE__ */ new Set();
        walk(ast, (node) => {
          if (node instanceof AST_ClassPrivateProperty || node instanceof AST_PrivateMethod || node instanceof AST_PrivateGetter || node instanceof AST_PrivateSetter || node instanceof AST_DotHash)
            ;
          else if (node instanceof AST_ObjectKeyVal) {
            if (typeof node.key == "string" && has_annotation(node, _MANGLEPROP)) {
              annotated_props.add(node.key);
            }
          } else if (node instanceof AST_ObjectProperty) {
            if (has_annotation(node, _MANGLEPROP)) {
              annotated_props.add(node.key.name);
            }
          } else if (node instanceof AST_Dot) {
            if (has_annotation(node, _MANGLEPROP)) {
              annotated_props.add(node.property);
            }
          } else if (node instanceof AST_Sub) {
            if (node.property instanceof AST_String && has_annotation(node, _MANGLEPROP)) {
              annotated_props.add(node.property.value);
            }
          }
        });
        return annotated_props;
      }
      function mangle_properties(ast, options, annotated_props = find_annotated_props(ast)) {
        options = defaults(options, {
          builtins: false,
          cache: null,
          debug: false,
          keep_quoted: false,
          nth_identifier: base54,
          only_cache: false,
          regex: null,
          reserved: null,
          undeclared: false,
          only_annotated: false
        }, true);
        var nth_identifier = options.nth_identifier;
        var reserved_option = options.reserved;
        if (!Array.isArray(reserved_option))
          reserved_option = [reserved_option];
        var reserved = new Set(reserved_option);
        if (!options.builtins)
          find_builtins(reserved);
        var cname = -1;
        var cache;
        if (options.cache) {
          cache = options.cache.props;
        } else {
          cache = /* @__PURE__ */ new Map();
        }
        var only_annotated = options.only_annotated;
        var regex = options.regex && new RegExp(options.regex);
        var debug = options.debug !== false;
        var debug_name_suffix;
        if (debug) {
          debug_name_suffix = options.debug === true ? "" : options.debug;
        }
        var names_to_mangle = /* @__PURE__ */ new Set();
        var unmangleable = /* @__PURE__ */ new Set();
        cache.forEach((mangled_name) => unmangleable.add(mangled_name));
        var keep_quoted = !!options.keep_quoted;
        ast.walk(new TreeWalker(function(node) {
          if (node instanceof AST_ClassPrivateProperty || node instanceof AST_PrivateMethod || node instanceof AST_PrivateGetter || node instanceof AST_PrivateSetter || node instanceof AST_DotHash)
            ;
          else if (node instanceof AST_ObjectKeyVal) {
            if (typeof node.key == "string" && (!keep_quoted || !node.quote)) {
              add(node.key);
            }
          } else if (node instanceof AST_ObjectProperty) {
            if (!keep_quoted || !node.quote) {
              add(node.key.name);
            }
          } else if (node instanceof AST_Dot) {
            var declared = !!options.undeclared;
            if (!declared) {
              var root = node;
              while (root.expression) {
                root = root.expression;
              }
              declared = !(root.thedef && root.thedef.undeclared);
            }
            if (declared && (!keep_quoted || !node.quote)) {
              add(node.property);
            }
          } else if (node instanceof AST_Sub) {
            if (!keep_quoted) {
              addStrings(node.property, add);
            }
          } else if (node instanceof AST_Call && node.expression.print_to_string() == "Object.defineProperty") {
            addStrings(node.args[1], add);
          } else if (node instanceof AST_Binary && node.operator === "in") {
            addStrings(node.left, add);
          } else if (node instanceof AST_String && has_annotation(node, _KEY)) {
            add(node.value);
          }
        }));
        return ast.transform(new TreeTransformer(function(node) {
          if (node instanceof AST_ClassPrivateProperty || node instanceof AST_PrivateMethod || node instanceof AST_PrivateGetter || node instanceof AST_PrivateSetter || node instanceof AST_DotHash)
            ;
          else if (node instanceof AST_ObjectKeyVal) {
            if (typeof node.key == "string" && (!keep_quoted || !node.quote)) {
              node.key = mangle(node.key);
            }
          } else if (node instanceof AST_ObjectProperty) {
            if (!keep_quoted || !node.quote) {
              node.key.name = mangle(node.key.name);
            }
          } else if (node instanceof AST_Dot) {
            if (!keep_quoted || !node.quote) {
              node.property = mangle(node.property);
            }
          } else if (!keep_quoted && node instanceof AST_Sub) {
            node.property = mangleStrings(node.property);
          } else if (node instanceof AST_Call && node.expression.print_to_string() == "Object.defineProperty") {
            node.args[1] = mangleStrings(node.args[1]);
          } else if (node instanceof AST_Binary && node.operator === "in") {
            node.left = mangleStrings(node.left);
          } else if (node instanceof AST_String && has_annotation(node, _KEY)) {
            clear_annotation(node, _KEY);
            node.value = mangle(node.value);
          }
        }));
        function can_mangle(name) {
          if (unmangleable.has(name))
            return false;
          if (reserved.has(name))
            return false;
          if (options.only_cache) {
            return cache.has(name);
          }
          if (/^-?[0-9]+(\.[0-9]+)?(e[+-][0-9]+)?$/.test(name))
            return false;
          return true;
        }
        function should_mangle(name) {
          if (only_annotated && !annotated_props.has(name))
            return false;
          if (regex && !regex.test(name)) {
            return annotated_props.has(name);
          }
          if (reserved.has(name))
            return false;
          return cache.has(name) || names_to_mangle.has(name);
        }
        function add(name) {
          if (can_mangle(name)) {
            names_to_mangle.add(name);
          }
          if (!should_mangle(name)) {
            unmangleable.add(name);
          }
        }
        function mangle(name) {
          if (!should_mangle(name)) {
            return name;
          }
          var mangled = cache.get(name);
          if (!mangled) {
            if (debug) {
              var debug_mangled = "_$" + name + "$" + debug_name_suffix + "_";
              if (can_mangle(debug_mangled)) {
                mangled = debug_mangled;
              }
            }
            if (!mangled) {
              do {
                mangled = nth_identifier.get(++cname);
              } while (!can_mangle(mangled));
            }
            cache.set(name, mangled);
          }
          return mangled;
        }
        function mangleStrings(node) {
          return node.transform(new TreeTransformer(function(node2) {
            if (node2 instanceof AST_Sequence) {
              var last = node2.expressions.length - 1;
              node2.expressions[last] = mangleStrings(node2.expressions[last]);
            } else if (node2 instanceof AST_String) {
              clear_annotation(node2, _KEY);
              node2.value = mangle(node2.value);
            } else if (node2 instanceof AST_Conditional) {
              node2.consequent = mangleStrings(node2.consequent);
              node2.alternative = mangleStrings(node2.alternative);
            }
            return node2;
          }));
        }
      }
      var to_ascii = typeof Buffer !== "undefined" ? (b64) => Buffer.from(b64, "base64").toString() : (b64) => decodeURIComponent(escape(atob(b64)));
      var to_base64 = typeof Buffer !== "undefined" ? (str) => Buffer.from(str).toString("base64") : (str) => btoa(unescape(encodeURIComponent(str)));
      function read_source_map(code) {
        var match = /(?:^|[^.])\/\/# sourceMappingURL=data:application\/json(;[\w=-]*)?;base64,([+/0-9A-Za-z]*=*)\s*$/.exec(code);
        if (!match) {
          console.warn("inline source map not found");
          return null;
        }
        return to_ascii(match[2]);
      }
      function set_shorthand(name, options, keys) {
        if (options[name]) {
          keys.forEach(function(key) {
            if (options[key]) {
              if (typeof options[key] != "object")
                options[key] = {};
              if (!(name in options[key]))
                options[key][name] = options[name];
            }
          });
        }
      }
      function init_cache(cache) {
        if (!cache)
          return;
        if (!("props" in cache)) {
          cache.props = /* @__PURE__ */ new Map();
        } else if (!(cache.props instanceof Map)) {
          cache.props = map_from_object(cache.props);
        }
      }
      function cache_to_json(cache) {
        return {
          props: map_to_object(cache.props)
        };
      }
      function log_input(files, options, fs, debug_folder) {
        if (!(fs && fs.writeFileSync && fs.mkdirSync)) {
          return;
        }
        try {
          fs.mkdirSync(debug_folder);
        } catch (e) {
          if (e.code !== "EEXIST")
            throw e;
        }
        const log_path = `${debug_folder}/terser-debug-${Math.random() * 9999999 | 0}.log`;
        options = options || {};
        const options_str = JSON.stringify(options, (_key, thing) => {
          if (typeof thing === "function")
            return "[Function " + thing.toString() + "]";
          if (thing instanceof RegExp)
            return "[RegExp " + thing.toString() + "]";
          return thing;
        }, 4);
        const files_str = (file) => {
          if (typeof file === "object" && options.parse && options.parse.spidermonkey) {
            return JSON.stringify(file, null, 2);
          } else if (typeof file === "object") {
            return Object.keys(file).map((key) => key + ": " + files_str(file[key])).join("\n\n");
          } else if (typeof file === "string") {
            return "```\n" + file + "\n```";
          } else {
            return file;
          }
        };
        fs.writeFileSync(log_path, "Options: \n" + options_str + "\n\nInput files:\n\n" + files_str(files) + "\n");
      }
      function* minify_sync_or_async(files, options, _fs_module) {
        if (_fs_module && typeof process === "object" && process.env && typeof process.env.TERSER_DEBUG_DIR === "string") {
          log_input(files, options, _fs_module, process.env.TERSER_DEBUG_DIR);
        }
        options = defaults(options, {
          compress: {},
          ecma: void 0,
          enclose: false,
          ie8: false,
          keep_classnames: void 0,
          keep_fnames: false,
          mangle: {},
          module: false,
          nameCache: null,
          output: null,
          format: null,
          parse: {},
          rename: void 0,
          safari10: false,
          sourceMap: false,
          spidermonkey: false,
          timings: false,
          toplevel: false,
          warnings: false,
          wrap: false
        }, true);
        var timings = options.timings && {
          start: Date.now()
        };
        if (options.keep_classnames === void 0) {
          options.keep_classnames = options.keep_fnames;
        }
        if (options.rename === void 0) {
          options.rename = options.compress && options.mangle;
        }
        if (options.output && options.format) {
          throw new Error("Please only specify either output or format option, preferrably format.");
        }
        options.format = options.format || options.output || {};
        set_shorthand("ecma", options, ["parse", "compress", "format"]);
        set_shorthand("ie8", options, ["compress", "mangle", "format"]);
        set_shorthand("keep_classnames", options, ["compress", "mangle"]);
        set_shorthand("keep_fnames", options, ["compress", "mangle"]);
        set_shorthand("module", options, ["parse", "compress", "mangle"]);
        set_shorthand("safari10", options, ["mangle", "format"]);
        set_shorthand("toplevel", options, ["compress", "mangle"]);
        set_shorthand("warnings", options, ["compress"]);
        var quoted_props;
        if (options.mangle) {
          options.mangle = defaults(options.mangle, {
            cache: options.nameCache && (options.nameCache.vars || {}),
            eval: false,
            ie8: false,
            keep_classnames: false,
            keep_fnames: false,
            module: false,
            nth_identifier: base54,
            properties: false,
            reserved: [],
            safari10: false,
            toplevel: false
          }, true);
          if (options.mangle.properties) {
            if (typeof options.mangle.properties != "object") {
              options.mangle.properties = {};
            }
            if (options.mangle.properties.keep_quoted) {
              quoted_props = options.mangle.properties.reserved;
              if (!Array.isArray(quoted_props))
                quoted_props = [];
              options.mangle.properties.reserved = quoted_props;
            }
            if (options.nameCache && !("cache" in options.mangle.properties)) {
              options.mangle.properties.cache = options.nameCache.props || {};
            }
          }
          init_cache(options.mangle.cache);
          init_cache(options.mangle.properties.cache);
        }
        if (options.sourceMap) {
          options.sourceMap = defaults(options.sourceMap, {
            asObject: false,
            content: null,
            filename: null,
            includeSources: false,
            root: null,
            url: null
          }, true);
        }
        if (timings)
          timings.parse = Date.now();
        var toplevel;
        if (files instanceof AST_Toplevel) {
          toplevel = files;
        } else {
          if (typeof files == "string" || options.parse.spidermonkey && !Array.isArray(files)) {
            files = [files];
          }
          options.parse = options.parse || {};
          options.parse.toplevel = null;
          if (options.parse.spidermonkey) {
            options.parse.toplevel = AST_Node.from_mozilla_ast(Object.keys(files).reduce(function(toplevel2, name2) {
              if (!toplevel2)
                return files[name2];
              toplevel2.body = toplevel2.body.concat(files[name2].body);
              return toplevel2;
            }, null));
          } else {
            delete options.parse.spidermonkey;
            for (var name in files)
              if (HOP(files, name)) {
                options.parse.filename = name;
                options.parse.toplevel = parse(files[name], options.parse);
                if (options.sourceMap && options.sourceMap.content == "inline") {
                  if (Object.keys(files).length > 1)
                    throw new Error("inline source map only works with singular input");
                  options.sourceMap.content = read_source_map(files[name]);
                }
              }
          }
          if (options.parse.toplevel === null) {
            throw new Error("no source file given");
          }
          toplevel = options.parse.toplevel;
        }
        if (quoted_props && options.mangle.properties.keep_quoted !== "strict") {
          reserve_quoted_keys(toplevel, quoted_props);
        }
        var annotated_props;
        if (options.mangle && options.mangle.properties) {
          annotated_props = find_annotated_props(toplevel);
        }
        if (options.wrap) {
          toplevel = toplevel.wrap_commonjs(options.wrap);
        }
        if (options.enclose) {
          toplevel = toplevel.wrap_enclose(options.enclose);
        }
        if (timings)
          timings.rename = Date.now();
        if (timings)
          timings.compress = Date.now();
        if (options.compress) {
          toplevel = new Compressor(options.compress, {
            mangle_options: options.mangle
          }).compress(toplevel);
        }
        if (timings)
          timings.scope = Date.now();
        if (options.mangle)
          toplevel.figure_out_scope(options.mangle);
        if (timings)
          timings.mangle = Date.now();
        if (options.mangle) {
          toplevel.compute_char_frequency(options.mangle);
          toplevel.mangle_names(options.mangle);
          toplevel = mangle_private_properties(toplevel, options.mangle);
        }
        if (timings)
          timings.properties = Date.now();
        if (options.mangle && options.mangle.properties) {
          toplevel = mangle_properties(toplevel, options.mangle.properties, annotated_props);
        }
        if (timings)
          timings.format = Date.now();
        var result = {};
        if (options.format.ast) {
          result.ast = toplevel;
        }
        if (options.format.spidermonkey) {
          result.ast = toplevel.to_mozilla_ast();
        }
        let format_options;
        if (!HOP(options.format, "code") || options.format.code) {
          format_options = { ...options.format };
          if (!format_options.ast) {
            format_options._destroy_ast = true;
            walk(toplevel, (node) => {
              if (node instanceof AST_Scope) {
                node.variables = void 0;
                node.enclosed = void 0;
                node.parent_scope = void 0;
              }
              if (node.block_scope) {
                node.block_scope.variables = void 0;
                node.block_scope.enclosed = void 0;
                node.parent_scope = void 0;
              }
            });
          }
          if (options.sourceMap) {
            if (options.sourceMap.includeSources && files instanceof AST_Toplevel) {
              throw new Error("original source content unavailable");
            }
            format_options.source_map = yield* SourceMap({
              file: options.sourceMap.filename,
              orig: options.sourceMap.content,
              root: options.sourceMap.root,
              files: options.sourceMap.includeSources ? files : null
            });
          }
          delete format_options.ast;
          delete format_options.code;
          delete format_options.spidermonkey;
          var stream = OutputStream(format_options);
          toplevel.print(stream);
          result.code = stream.get();
          if (options.sourceMap) {
            Object.defineProperty(result, "map", {
              configurable: true,
              enumerable: true,
              get() {
                const map = format_options.source_map.getEncoded();
                return result.map = options.sourceMap.asObject ? map : JSON.stringify(map);
              },
              set(value) {
                Object.defineProperty(result, "map", {
                  value,
                  writable: true
                });
              }
            });
            result.decoded_map = format_options.source_map.getDecoded();
            if (options.sourceMap.url == "inline") {
              var sourceMap2 = typeof result.map === "object" ? JSON.stringify(result.map) : result.map;
              result.code += "\n//# sourceMappingURL=data:application/json;charset=utf-8;base64," + to_base64(sourceMap2);
            } else if (options.sourceMap.url) {
              result.code += "\n//# sourceMappingURL=" + options.sourceMap.url;
            }
          }
        }
        if (options.nameCache && options.mangle) {
          if (options.mangle.cache)
            options.nameCache.vars = cache_to_json(options.mangle.cache);
          if (options.mangle.properties && options.mangle.properties.cache) {
            options.nameCache.props = cache_to_json(options.mangle.properties.cache);
          }
        }
        if (format_options && format_options.source_map) {
          format_options.source_map.destroy();
        }
        if (timings) {
          timings.end = Date.now();
          result.timings = {
            parse: 1e-3 * (timings.rename - timings.parse),
            rename: 1e-3 * (timings.compress - timings.rename),
            compress: 1e-3 * (timings.scope - timings.compress),
            scope: 1e-3 * (timings.mangle - timings.scope),
            mangle: 1e-3 * (timings.properties - timings.mangle),
            properties: 1e-3 * (timings.format - timings.properties),
            format: 1e-3 * (timings.end - timings.format),
            total: 1e-3 * (timings.end - timings.start)
          };
        }
        return result;
      }
      async function minify(files, options, _fs_module) {
        const gen = minify_sync_or_async(files, options, _fs_module);
        let yielded;
        let val;
        do {
          val = gen.next(await yielded);
          yielded = val.value;
        } while (!val.done);
        return val.value;
      }
      function minify_sync(files, options, _fs_module) {
        const gen = minify_sync_or_async(files, options, _fs_module);
        let yielded;
        let val;
        do {
          if (yielded && typeof yielded.then === "function") {
            throw new Error("minify_sync cannot be used with the legacy source-map module");
          }
          val = gen.next(yielded);
          yielded = val.value;
        } while (!val.done);
        return val.value;
      }
      async function run_cli({ program, packageJson, fs, path }) {
        const skip_keys = /* @__PURE__ */ new Set(["cname", "parent_scope", "scope", "uses_eval", "uses_with"]);
        var files = {};
        var options = {
          compress: false,
          mangle: false
        };
        const default_options = await _default_options();
        program.version(packageJson.name + " " + packageJson.version);
        program.parseArgv = program.parse;
        program.parse = void 0;
        if (process.argv.includes("ast"))
          program.helpInformation = describe_ast;
        else if (process.argv.includes("options"))
          program.helpInformation = function() {
            var text = [];
            for (var option in default_options) {
              text.push("--" + (option === "sourceMap" ? "source-map" : option) + " options:");
              text.push(format_object(default_options[option]));
              text.push("");
            }
            return text.join("\n");
          };
        program.option("-p, --parse <options>", "Specify parser options.", parse_js());
        program.option("-c, --compress [options]", "Enable compressor/specify compressor options.", parse_js());
        program.option("-m, --mangle [options]", "Mangle names/specify mangler options.", parse_js());
        program.option("--mangle-props [options]", "Mangle properties/specify mangler options.", parse_js());
        program.option("-f, --format [options]", "Format options.", parse_js());
        program.option("-b, --beautify [options]", "Alias for --format.", parse_js());
        program.option("-o, --output <file>", "Output file (default STDOUT).");
        program.option("--comments [filter]", "Preserve copyright comments in the output.");
        program.option("--config-file <file>", "Read minify() options from JSON file.");
        program.option("-d, --define <expr>[=value]", "Global definitions.", parse_js("define"));
        program.option("--ecma <version>", "Specify ECMAScript release: 5, 2015, 2016 or 2017...");
        program.option("-e, --enclose [arg[,...][:value[,...]]]", "Embed output in a big function with configurable arguments and values.");
        program.option("--ie8", "Support non-standard Internet Explorer 8.");
        program.option("--keep-classnames", "Do not mangle/drop class names.");
        program.option("--keep-fnames", "Do not mangle/drop function names. Useful for code relying on Function.prototype.name.");
        program.option("--module", "Input is an ES6 module");
        program.option("--name-cache <file>", "File to hold mangled name mappings.");
        program.option("--rename", "Force symbol expansion.");
        program.option("--no-rename", "Disable symbol expansion.");
        program.option("--safari10", "Support non-standard Safari 10.");
        program.option("--source-map [options]", "Enable source map/specify source map options.", parse_js());
        program.option("--timings", "Display operations run time on STDERR.");
        program.option("--toplevel", "Compress and/or mangle variables in toplevel scope.");
        program.option("--wrap <name>", "Embed everything as a function with “exports” corresponding to “name” globally.");
        program.arguments("[files...]").parseArgv(process.argv);
        if (program.configFile) {
          options = JSON.parse(read_file(program.configFile));
        }
        if (!program.output && program.sourceMap && program.sourceMap.url != "inline") {
          fatal("ERROR: cannot write source map to STDOUT");
        }
        [
          "compress",
          "enclose",
          "ie8",
          "mangle",
          "module",
          "safari10",
          "sourceMap",
          "toplevel",
          "wrap"
        ].forEach(function(name) {
          if (name in program) {
            options[name] = program[name];
          }
        });
        if ("ecma" in program) {
          if (program.ecma != (program.ecma | 0))
            fatal("ERROR: ecma must be an integer");
          const ecma = program.ecma | 0;
          if (ecma > 5 && ecma < 2015)
            options.ecma = ecma + 2009;
          else
            options.ecma = ecma;
        }
        if (program.format || program.beautify) {
          const chosenOption = program.format || program.beautify;
          options.format = typeof chosenOption === "object" ? chosenOption : {};
        }
        if (program.comments) {
          if (typeof options.format != "object")
            options.format = {};
          options.format.comments = typeof program.comments == "string" ? program.comments == "false" ? false : program.comments : "some";
        }
        if (program.define) {
          if (typeof options.compress != "object")
            options.compress = {};
          if (typeof options.compress.global_defs != "object")
            options.compress.global_defs = {};
          for (var expr in program.define) {
            options.compress.global_defs[expr] = program.define[expr];
          }
        }
        if (program.keepClassnames) {
          options.keep_classnames = true;
        }
        if (program.keepFnames) {
          options.keep_fnames = true;
        }
        if (program.mangleProps) {
          if (program.mangleProps.domprops) {
            delete program.mangleProps.domprops;
          } else {
            if (typeof program.mangleProps != "object")
              program.mangleProps = {};
            if (!Array.isArray(program.mangleProps.reserved))
              program.mangleProps.reserved = [];
          }
          if (typeof options.mangle != "object")
            options.mangle = {};
          options.mangle.properties = program.mangleProps;
        }
        if (program.nameCache) {
          options.nameCache = JSON.parse(read_file(program.nameCache, "{}"));
        }
        if (program.output == "ast") {
          options.format = {
            ast: true,
            code: false
          };
        }
        if (program.parse) {
          if (!program.parse.acorn && !program.parse.spidermonkey) {
            options.parse = program.parse;
          } else if (program.sourceMap && program.sourceMap.content == "inline") {
            fatal("ERROR: inline source map only works with built-in parser");
          }
        }
        if (~program.rawArgs.indexOf("--rename")) {
          options.rename = true;
        } else if (!program.rename) {
          options.rename = false;
        }
        let convert_path = (name) => name;
        if (typeof program.sourceMap == "object" && "base" in program.sourceMap) {
          convert_path = function() {
            var base = program.sourceMap.base;
            delete options.sourceMap.base;
            return function(name) {
              return path.relative(base, name);
            };
          }();
        }
        let filesList;
        if (options.files && options.files.length) {
          filesList = options.files;
          delete options.files;
        } else if (program.args.length) {
          filesList = program.args;
        }
        if (filesList) {
          simple_glob(filesList).forEach(function(name) {
            files[convert_path(name)] = read_file(name);
          });
        } else {
          await new Promise((resolve) => {
            var chunks = [];
            process.stdin.setEncoding("utf8");
            process.stdin.on("data", function(chunk) {
              chunks.push(chunk);
            }).on("end", function() {
              files = [chunks.join("")];
              resolve();
            });
            process.stdin.resume();
          });
        }
        await run_cli2();
        function convert_ast(fn) {
          return AST_Node.from_mozilla_ast(Object.keys(files).reduce(fn, null));
        }
        async function run_cli2() {
          var content = program.sourceMap && program.sourceMap.content;
          if (content && content !== "inline") {
            options.sourceMap.content = read_file(content, content);
          }
          if (program.timings)
            options.timings = true;
          try {
            if (program.parse) {
              if (program.parse.acorn) {
                files = convert_ast(function(toplevel, name) {
                  return require_acorn().parse(files[name], {
                    ecmaVersion: 2018,
                    locations: true,
                    program: toplevel,
                    sourceFile: name,
                    sourceType: options.module || program.parse.module ? "module" : "script"
                  });
                });
              } else if (program.parse.spidermonkey) {
                files = convert_ast(function(toplevel, name) {
                  var obj = JSON.parse(files[name]);
                  if (!toplevel)
                    return obj;
                  toplevel.body = toplevel.body.concat(obj.body);
                  return toplevel;
                });
              }
            }
          } catch (ex) {
            fatal(ex);
          }
          let result;
          try {
            result = await minify(files, options, fs);
          } catch (ex) {
            if (ex.name == "SyntaxError") {
              print_error("Parse error at " + ex.filename + ":" + ex.line + "," + ex.col);
              var col = ex.col;
              var lines = files[ex.filename].split(/\r?\n/);
              var line = lines[ex.line - 1];
              if (!line && !col) {
                line = lines[ex.line - 2];
                col = line.length;
              }
              if (line) {
                var limit = 70;
                if (col > limit) {
                  line = line.slice(col - limit);
                  col = limit;
                }
                print_error(line.slice(0, 80));
                print_error(line.slice(0, col).replace(/\S/g, " ") + "^");
              }
            }
            if (ex.defs) {
              print_error("Supported options:");
              print_error(format_object(ex.defs));
            }
            fatal(ex);
            return;
          }
          if (program.output == "ast") {
            if (!options.compress && !options.mangle) {
              result.ast.figure_out_scope({});
            }
            console.log(JSON.stringify(result.ast, function(key, value) {
              if (value)
                switch (key) {
                  case "thedef":
                    return symdef(value);
                  case "enclosed":
                    return value.length ? value.map(symdef) : void 0;
                  case "variables":
                  case "globals":
                    return value.size ? collect_from_map(value, symdef) : void 0;
                }
              if (skip_keys.has(key))
                return;
              if (value instanceof AST_Token)
                return;
              if (value instanceof Map)
                return;
              if (value instanceof AST_Node) {
                var result2 = {
                  _class: "AST_" + value.TYPE
                };
                if (value.block_scope) {
                  result2.variables = value.block_scope.variables;
                  result2.enclosed = value.block_scope.enclosed;
                }
                value.CTOR.PROPS.forEach(function(prop) {
                  if (prop !== "block_scope") {
                    result2[prop] = value[prop];
                  }
                });
                return result2;
              }
              return value;
            }, 2));
          } else if (program.output == "spidermonkey") {
            try {
              const minified = await minify(
                result.code,
                {
                  compress: false,
                  mangle: false,
                  format: {
                    ast: true,
                    code: false
                  }
                },
                fs
              );
              console.log(JSON.stringify(minified.ast.to_mozilla_ast(), null, 2));
            } catch (ex) {
              fatal(ex);
              return;
            }
          } else if (program.output) {
            fs.writeFileSync(program.output, result.code);
            if (options.sourceMap && options.sourceMap.url !== "inline" && result.map) {
              fs.writeFileSync(program.output + ".map", result.map);
            }
          } else {
            console.log(result.code);
          }
          if (program.nameCache) {
            fs.writeFileSync(program.nameCache, JSON.stringify(options.nameCache));
          }
          if (result.timings)
            for (var phase in result.timings) {
              print_error("- " + phase + ": " + result.timings[phase].toFixed(3) + "s");
            }
        }
        function fatal(message) {
          if (message instanceof Error)
            message = message.stack.replace(/^\S*?Error:/, "ERROR:");
          print_error(message);
          process.exit(1);
        }
        function simple_glob(glob) {
          if (Array.isArray(glob)) {
            return [].concat.apply([], glob.map(simple_glob));
          }
          if (glob && glob.match(/[*?]/)) {
            var dir = path.dirname(glob);
            try {
              var entries = fs.readdirSync(dir);
            } catch (ex) {
            }
            if (entries) {
              var pattern = "^" + path.basename(glob).replace(/[.+^$[\]\\(){}]/g, "\\$&").replace(/\*/g, "[^/\\\\]*").replace(/\?/g, "[^/\\\\]") + "$";
              var mod = process.platform === "win32" ? "i" : "";
              var rx = new RegExp(pattern, mod);
              var results = entries.filter(function(name) {
                return rx.test(name);
              }).map(function(name) {
                return path.join(dir, name);
              });
              if (results.length)
                return results;
            }
          }
          return [glob];
        }
        function read_file(path2, default_value) {
          try {
            return fs.readFileSync(path2, "utf8");
          } catch (ex) {
            if ((ex.code == "ENOENT" || ex.code == "ENAMETOOLONG") && default_value != null)
              return default_value;
            fatal(ex);
          }
        }
        function parse_js(flag) {
          return function(value, options2) {
            options2 = options2 || {};
            try {
              walk(parse(value, { expression: true }), (node) => {
                if (node instanceof AST_Assign) {
                  var name = node.left.print_to_string();
                  var value2 = node.right;
                  if (flag) {
                    options2[name] = value2;
                  } else if (value2 instanceof AST_Array) {
                    options2[name] = value2.elements.map(to_string);
                  } else if (value2 instanceof AST_RegExp) {
                    value2 = value2.value;
                    options2[name] = new RegExp(value2.source, value2.flags);
                  } else {
                    options2[name] = to_string(value2);
                  }
                  return true;
                }
                if (node instanceof AST_Symbol || node instanceof AST_PropAccess) {
                  var name = node.print_to_string();
                  options2[name] = true;
                  return true;
                }
                if (!(node instanceof AST_Sequence))
                  throw node;
                function to_string(value3) {
                  return value3 instanceof AST_Constant ? value3.getValue() : value3.print_to_string({
                    quote_keys: true
                  });
                }
              });
            } catch (ex) {
              if (flag) {
                fatal("Error parsing arguments for '" + flag + "': " + value);
              } else {
                options2[value] = null;
              }
            }
            return options2;
          };
        }
        function symdef(def) {
          var ret = 1e6 + def.id + " " + def.name;
          if (def.mangled_name)
            ret += " " + def.mangled_name;
          return ret;
        }
        function collect_from_map(map, callback) {
          var result = [];
          map.forEach(function(def) {
            result.push(callback(def));
          });
          return result;
        }
        function format_object(obj) {
          var lines = [];
          var padding = "";
          Object.keys(obj).map(function(name) {
            if (padding.length < name.length)
              padding = Array(name.length + 1).join(" ");
            return [name, JSON.stringify(obj[name])];
          }).forEach(function(tokens) {
            lines.push("  " + tokens[0] + padding.slice(tokens[0].length - 2) + tokens[1]);
          });
          return lines.join("\n");
        }
        function print_error(msg) {
          process.stderr.write(msg);
          process.stderr.write("\n");
        }
        function describe_ast() {
          var out = OutputStream({ beautify: true });
          function doitem(ctor) {
            out.print("AST_" + ctor.TYPE);
            const props = ctor.SELF_PROPS.filter((prop) => !/^\$/.test(prop));
            if (props.length > 0) {
              out.space();
              out.with_parens(function() {
                props.forEach(function(prop, i) {
                  if (i)
                    out.space();
                  out.print(prop);
                });
              });
            }
            if (ctor.documentation) {
              out.space();
              out.print_string(ctor.documentation);
            }
            if (ctor.SUBCLASSES.length > 0) {
              out.space();
              out.with_block(function() {
                ctor.SUBCLASSES.forEach(function(ctor2) {
                  out.indent();
                  doitem(ctor2);
                  out.newline();
                });
              });
            }
          }
          doitem(AST_Node);
          return out + "\n";
        }
      }
      async function _default_options() {
        const defs = {};
        Object.keys(infer_options({ 0: 0 })).forEach((component) => {
          const options = infer_options({
            [component]: { 0: 0 }
          });
          if (options)
            defs[component] = options;
        });
        return defs;
      }
      async function infer_options(options) {
        try {
          await minify("", options);
        } catch (error) {
          return error.defs;
        }
      }
      exports2._default_options = _default_options;
      exports2._run_cli = run_cli;
      exports2.minify = minify;
      exports2.minify_sync = minify_sync;
    });
  }
});

// node_modules/html-minifier-terser/src/htmlminifier.js
var require_htmlminifier = __commonJS({
  "node_modules/html-minifier-terser/src/htmlminifier.js"(exports) {
    "use strict";
    var CleanCSS = require_clean_css();
    var decode = require_he().decode;
    var HTMLParser = require_htmlparser().HTMLParser;
    var endTag = require_htmlparser().endTag;
    var RelateUrl = require_lib();
    var TokenChain = require_tokenchain();
    var Terser = require_bundle_min();
    var utils = require_utils();
    function trimWhitespace(str) {
      return str && str.replace(/^[ \n\r\t\f]+/, "").replace(/[ \n\r\t\f]+$/, "");
    }
    function collapseWhitespaceAll(str) {
      return str && str.replace(/[ \n\r\t\f\xA0]+/g, function(spaces) {
        return spaces === "	" ? "	" : spaces.replace(/(^|\xA0+)[^\xA0]+/g, "$1 ");
      });
    }
    function collapseWhitespace(str, options, trimLeft, trimRight, collapseAll) {
      var lineBreakBefore = "", lineBreakAfter = "";
      if (options.preserveLineBreaks) {
        str = str.replace(/^[ \n\r\t\f]*?[\n\r][ \n\r\t\f]*/, function() {
          lineBreakBefore = "\n";
          return "";
        }).replace(/[ \n\r\t\f]*?[\n\r][ \n\r\t\f]*$/, function() {
          lineBreakAfter = "\n";
          return "";
        });
      }
      if (trimLeft) {
        str = str.replace(/^[ \n\r\t\f\xA0]+/, function(spaces) {
          var conservative = !lineBreakBefore && options.conservativeCollapse;
          if (conservative && spaces === "	") {
            return "	";
          }
          return spaces.replace(/^[^\xA0]+/, "").replace(/(\xA0+)[^\xA0]+/g, "$1 ") || (conservative ? " " : "");
        });
      }
      if (trimRight) {
        str = str.replace(/[ \n\r\t\f\xA0]+$/, function(spaces) {
          var conservative = !lineBreakAfter && options.conservativeCollapse;
          if (conservative && spaces === "	") {
            return "	";
          }
          return spaces.replace(/[^\xA0]+(\xA0+)/g, " $1").replace(/[^\xA0]+$/, "") || (conservative ? " " : "");
        });
      }
      if (collapseAll) {
        str = collapseWhitespaceAll(str);
      }
      return lineBreakBefore + str + lineBreakAfter;
    }
    var createMapFromString = utils.createMapFromString;
    var inlineTags = createMapFromString("a,abbr,acronym,b,bdi,bdo,big,button,cite,code,del,dfn,em,font,i,ins,kbd,label,mark,math,nobr,object,q,rp,rt,rtc,ruby,s,samp,select,small,span,strike,strong,sub,sup,svg,textarea,time,tt,u,var");
    var inlineTextTags = createMapFromString("a,abbr,acronym,b,big,del,em,font,i,ins,kbd,mark,nobr,rp,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var");
    var selfClosingInlineTags = createMapFromString("comment,img,input,wbr");
    function collapseWhitespaceSmart(str, prevTag, nextTag, options) {
      var trimLeft = prevTag && !selfClosingInlineTags(prevTag);
      if (trimLeft && !options.collapseInlineTagWhitespace) {
        trimLeft = prevTag.charAt(0) === "/" ? !inlineTags(prevTag.slice(1)) : !inlineTextTags(prevTag);
      }
      var trimRight = nextTag && !selfClosingInlineTags(nextTag);
      if (trimRight && !options.collapseInlineTagWhitespace) {
        trimRight = nextTag.charAt(0) === "/" ? !inlineTextTags(nextTag.slice(1)) : !inlineTags(nextTag);
      }
      return collapseWhitespace(str, options, trimLeft, trimRight, prevTag && nextTag);
    }
    function isConditionalComment(text) {
      return /^\[if\s[^\]]+]|\[endif]$/.test(text);
    }
    function isIgnoredComment(text, options) {
      for (var i = 0, len = options.ignoreCustomComments.length; i < len; i++) {
        if (options.ignoreCustomComments[i].test(text)) {
          return true;
        }
      }
      return false;
    }
    function isEventAttribute(attrName, options) {
      var patterns = options.customEventAttributes;
      if (patterns) {
        for (var i = patterns.length; i--; ) {
          if (patterns[i].test(attrName)) {
            return true;
          }
        }
        return false;
      }
      return /^on[a-z]{3,}$/.test(attrName);
    }
    function canRemoveAttributeQuotes(value) {
      return /^[^ \t\n\f\r"'`=<>]+$/.test(value);
    }
    function attributesInclude(attributes, attribute) {
      for (var i = attributes.length; i--; ) {
        if (attributes[i].name.toLowerCase() === attribute) {
          return true;
        }
      }
      return false;
    }
    function isAttributeRedundant(tag, attrName, attrValue, attrs) {
      attrValue = attrValue ? trimWhitespace(attrValue.toLowerCase()) : "";
      return tag === "script" && attrName === "language" && attrValue === "javascript" || tag === "form" && attrName === "method" && attrValue === "get" || tag === "input" && attrName === "type" && attrValue === "text" || tag === "script" && attrName === "charset" && !attributesInclude(attrs, "src") || tag === "a" && attrName === "name" && attributesInclude(attrs, "id") || tag === "area" && attrName === "shape" && attrValue === "rect";
    }
    var executableScriptsMimetypes = utils.createMap([
      "text/javascript",
      "text/ecmascript",
      "text/jscript",
      "application/javascript",
      "application/x-javascript",
      "application/ecmascript",
      "module"
    ]);
    var keepScriptsMimetypes = utils.createMap([
      "module"
    ]);
    function isScriptTypeAttribute(attrValue) {
      attrValue = trimWhitespace(attrValue.split(/;/, 2)[0]).toLowerCase();
      return attrValue === "" || executableScriptsMimetypes(attrValue);
    }
    function keepScriptTypeAttribute(attrValue) {
      attrValue = trimWhitespace(attrValue.split(/;/, 2)[0]).toLowerCase();
      return keepScriptsMimetypes(attrValue);
    }
    function isExecutableScript(tag, attrs) {
      if (tag !== "script") {
        return false;
      }
      for (var i = 0, len = attrs.length; i < len; i++) {
        var attrName = attrs[i].name.toLowerCase();
        if (attrName === "type") {
          return isScriptTypeAttribute(attrs[i].value);
        }
      }
      return true;
    }
    function isStyleLinkTypeAttribute(attrValue) {
      attrValue = trimWhitespace(attrValue).toLowerCase();
      return attrValue === "" || attrValue === "text/css";
    }
    function isStyleSheet(tag, attrs) {
      if (tag !== "style") {
        return false;
      }
      for (var i = 0, len = attrs.length; i < len; i++) {
        var attrName = attrs[i].name.toLowerCase();
        if (attrName === "type") {
          return isStyleLinkTypeAttribute(attrs[i].value);
        }
      }
      return true;
    }
    var isSimpleBoolean = createMapFromString("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible");
    var isBooleanValue = createMapFromString("true,false");
    function isBooleanAttribute(attrName, attrValue) {
      return isSimpleBoolean(attrName) || attrName === "draggable" && !isBooleanValue(attrValue);
    }
    function isUriTypeAttribute(attrName, tag) {
      return /^(?:a|area|link|base)$/.test(tag) && attrName === "href" || tag === "img" && /^(?:src|longdesc|usemap)$/.test(attrName) || tag === "object" && /^(?:classid|codebase|data|usemap)$/.test(attrName) || tag === "q" && attrName === "cite" || tag === "blockquote" && attrName === "cite" || (tag === "ins" || tag === "del") && attrName === "cite" || tag === "form" && attrName === "action" || tag === "input" && (attrName === "src" || attrName === "usemap") || tag === "head" && attrName === "profile" || tag === "script" && (attrName === "src" || attrName === "for");
    }
    function isNumberTypeAttribute(attrName, tag) {
      return /^(?:a|area|object|button)$/.test(tag) && attrName === "tabindex" || tag === "input" && (attrName === "maxlength" || attrName === "tabindex") || tag === "select" && (attrName === "size" || attrName === "tabindex") || tag === "textarea" && /^(?:rows|cols|tabindex)$/.test(attrName) || tag === "colgroup" && attrName === "span" || tag === "col" && attrName === "span" || (tag === "th" || tag === "td") && (attrName === "rowspan" || attrName === "colspan");
    }
    function isLinkType(tag, attrs, value) {
      if (tag !== "link") {
        return false;
      }
      for (var i = 0, len = attrs.length; i < len; i++) {
        if (attrs[i].name === "rel" && attrs[i].value === value) {
          return true;
        }
      }
    }
    function isMediaQuery(tag, attrs, attrName) {
      return attrName === "media" && (isLinkType(tag, attrs, "stylesheet") || isStyleSheet(tag, attrs));
    }
    var srcsetTags = createMapFromString("img,source");
    function isSrcset(attrName, tag) {
      return attrName === "srcset" && srcsetTags(tag);
    }
    async function cleanAttributeValue(tag, attrName, attrValue, options, attrs) {
      if (isEventAttribute(attrName, options)) {
        attrValue = trimWhitespace(attrValue).replace(/^javascript:\s*/i, "");
        return await options.minifyJS(attrValue, true);
      } else if (attrName === "class") {
        attrValue = trimWhitespace(attrValue);
        if (options.sortClassName) {
          attrValue = options.sortClassName(attrValue);
        } else {
          attrValue = collapseWhitespaceAll(attrValue);
        }
        return attrValue;
      } else if (isUriTypeAttribute(attrName, tag)) {
        attrValue = trimWhitespace(attrValue);
        return isLinkType(tag, attrs, "canonical") ? attrValue : options.minifyURLs(attrValue);
      } else if (isNumberTypeAttribute(attrName, tag)) {
        return trimWhitespace(attrValue);
      } else if (attrName === "style") {
        attrValue = trimWhitespace(attrValue);
        if (attrValue) {
          if (/;$/.test(attrValue) && !/&#?[0-9a-zA-Z]+;$/.test(attrValue)) {
            attrValue = attrValue.replace(/\s*;$/, ";");
          }
          attrValue = options.minifyCSS(attrValue, "inline");
        }
        return attrValue;
      } else if (isSrcset(attrName, tag)) {
        attrValue = trimWhitespace(attrValue).split(/\s+,\s*|\s*,\s+/).map(function(candidate) {
          var url = candidate;
          var descriptor = "";
          var match = candidate.match(/\s+([1-9][0-9]*w|[0-9]+(?:\.[0-9]+)?x)$/);
          if (match) {
            url = url.slice(0, -match[0].length);
            var num = +match[1].slice(0, -1);
            var suffix = match[1].slice(-1);
            if (num !== 1 || suffix !== "x") {
              descriptor = " " + num + suffix;
            }
          }
          return options.minifyURLs(url) + descriptor;
        }).join(", ");
      } else if (isMetaViewport(tag, attrs) && attrName === "content") {
        attrValue = attrValue.replace(/\s+/g, "").replace(/[0-9]+\.[0-9]+/g, function(numString) {
          return (+numString).toString();
        });
      } else if (isContentSecurityPolicy(tag, attrs) && attrName.toLowerCase() === "content") {
        return collapseWhitespaceAll(attrValue);
      } else if (options.customAttrCollapse && options.customAttrCollapse.test(attrName)) {
        attrValue = trimWhitespace(attrValue.replace(/ ?[\n\r]+ ?/g, "").replace(/\s{2,}/g, options.conservativeCollapse ? " " : ""));
      } else if (tag === "script" && attrName === "type") {
        attrValue = trimWhitespace(attrValue.replace(/\s*;\s*/g, ";"));
      } else if (isMediaQuery(tag, attrs, attrName)) {
        attrValue = trimWhitespace(attrValue);
        return options.minifyCSS(attrValue, "media");
      }
      return attrValue;
    }
    function isMetaViewport(tag, attrs) {
      if (tag !== "meta") {
        return false;
      }
      for (var i = 0, len = attrs.length; i < len; i++) {
        if (attrs[i].name === "name" && attrs[i].value === "viewport") {
          return true;
        }
      }
    }
    function isContentSecurityPolicy(tag, attrs) {
      if (tag !== "meta") {
        return false;
      }
      for (var i = 0, len = attrs.length; i < len; i++) {
        if (attrs[i].name.toLowerCase() === "http-equiv" && attrs[i].value.toLowerCase() === "content-security-policy") {
          return true;
        }
      }
    }
    function ignoreCSS(id) {
      return "/* clean-css ignore:start */" + id + "/* clean-css ignore:end */";
    }
    function wrapCSS(text, type) {
      switch (type) {
        case "inline":
          return "*{" + text + "}";
        case "media":
          return "@media " + text + "{a{top:0}}";
        default:
          return text;
      }
    }
    function unwrapCSS(text, type) {
      var matches;
      switch (type) {
        case "inline":
          matches = text.match(/^\*\{([\s\S]*)\}$/);
          break;
        case "media":
          matches = text.match(/^@media ([\s\S]*?)\s*{[\s\S]*}$/);
          break;
      }
      return matches ? matches[1] : text;
    }
    async function cleanConditionalComment(comment, options) {
      return options.processConditionalComments ? await utils.replaceAsync(comment, /^(\[if\s[^\]]+]>)([\s\S]*?)(<!\[endif])$/, async function(match, prefix, text, suffix) {
        return prefix + await minify(text, options, true) + suffix;
      }) : comment;
    }
    async function processScript(text, options, currentAttrs) {
      for (var i = 0, len = currentAttrs.length; i < len; i++) {
        if (currentAttrs[i].name.toLowerCase() === "type" && options.processScripts.indexOf(currentAttrs[i].value) > -1) {
          return await minify(text, options);
        }
      }
      return text;
    }
    var optionalStartTags = createMapFromString("html,head,body,colgroup,tbody");
    var optionalEndTags = createMapFromString("html,head,body,li,dt,dd,p,rb,rt,rtc,rp,optgroup,option,colgroup,caption,thead,tbody,tfoot,tr,td,th");
    var headerTags = createMapFromString("meta,link,script,style,template,noscript");
    var descriptionTags = createMapFromString("dt,dd");
    var pBlockTags = createMapFromString("address,article,aside,blockquote,details,div,dl,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,hr,main,menu,nav,ol,p,pre,section,table,ul");
    var pInlineTags = createMapFromString("a,audio,del,ins,map,noscript,video");
    var rubyTags = createMapFromString("rb,rt,rtc,rp");
    var rtcTag = createMapFromString("rb,rtc,rp");
    var optionTag = createMapFromString("option,optgroup");
    var tableContentTags = createMapFromString("tbody,tfoot");
    var tableSectionTags = createMapFromString("thead,tbody,tfoot");
    var cellTags = createMapFromString("td,th");
    var topLevelTags = createMapFromString("html,head,body");
    var compactTags = createMapFromString("html,body");
    var looseTags = createMapFromString("head,colgroup,caption");
    var trailingTags = createMapFromString("dt,thead");
    var htmlTags = createMapFromString("a,abbr,acronym,address,applet,area,article,aside,audio,b,base,basefont,bdi,bdo,bgsound,big,blink,blockquote,body,br,button,canvas,caption,center,cite,code,col,colgroup,command,content,data,datalist,dd,del,details,dfn,dialog,dir,div,dl,dt,element,em,embed,fieldset,figcaption,figure,font,footer,form,frame,frameset,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,i,iframe,image,img,input,ins,isindex,kbd,keygen,label,legend,li,link,listing,main,map,mark,marquee,menu,menuitem,meta,meter,multicol,nav,nobr,noembed,noframes,noscript,object,ol,optgroup,option,output,p,param,picture,plaintext,pre,progress,q,rb,rp,rt,rtc,ruby,s,samp,script,section,select,shadow,small,source,spacer,span,strike,strong,style,sub,summary,sup,table,tbody,td,template,textarea,tfoot,th,thead,time,title,tr,track,tt,u,ul,var,video,wbr,xmp");
    function canRemoveParentTag(optionalStartTag, tag) {
      switch (optionalStartTag) {
        case "html":
        case "head":
          return true;
        case "body":
          return !headerTags(tag);
        case "colgroup":
          return tag === "col";
        case "tbody":
          return tag === "tr";
      }
      return false;
    }
    function isStartTagMandatory(optionalEndTag, tag) {
      switch (tag) {
        case "colgroup":
          return optionalEndTag === "colgroup";
        case "tbody":
          return tableSectionTags(optionalEndTag);
      }
      return false;
    }
    function canRemovePrecedingTag(optionalEndTag, tag) {
      switch (optionalEndTag) {
        case "html":
        case "head":
        case "body":
        case "colgroup":
        case "caption":
          return true;
        case "li":
        case "optgroup":
        case "tr":
          return tag === optionalEndTag;
        case "dt":
        case "dd":
          return descriptionTags(tag);
        case "p":
          return pBlockTags(tag);
        case "rb":
        case "rt":
        case "rp":
          return rubyTags(tag);
        case "rtc":
          return rtcTag(tag);
        case "option":
          return optionTag(tag);
        case "thead":
        case "tbody":
          return tableContentTags(tag);
        case "tfoot":
          return tag === "tbody";
        case "td":
        case "th":
          return cellTags(tag);
      }
      return false;
    }
    var reEmptyAttribute = new RegExp(
      "^(?:class|id|style|title|lang|dir|on(?:focus|blur|change|click|dblclick|mouse(?:down|up|over|move|out)|key(?:press|down|up)))$"
    );
    function canDeleteEmptyAttribute(tag, attrName, attrValue, options) {
      var isValueEmpty = !attrValue || /^\s*$/.test(attrValue);
      if (!isValueEmpty) {
        return false;
      }
      if (typeof options.removeEmptyAttributes === "function") {
        return options.removeEmptyAttributes(attrName, tag);
      }
      return tag === "input" && attrName === "value" || reEmptyAttribute.test(attrName);
    }
    function hasAttrName(name, attrs) {
      for (var i = attrs.length - 1; i >= 0; i--) {
        if (attrs[i].name === name) {
          return true;
        }
      }
      return false;
    }
    function canRemoveElement(tag, attrs) {
      switch (tag) {
        case "textarea":
          return false;
        case "audio":
        case "script":
        case "video":
          if (hasAttrName("src", attrs)) {
            return false;
          }
          break;
        case "iframe":
          if (hasAttrName("src", attrs) || hasAttrName("srcdoc", attrs)) {
            return false;
          }
          break;
        case "object":
          if (hasAttrName("data", attrs)) {
            return false;
          }
          break;
        case "applet":
          if (hasAttrName("code", attrs)) {
            return false;
          }
          break;
      }
      return true;
    }
    function canCollapseWhitespace(tag) {
      return !/^(?:script|style|pre|textarea)$/.test(tag);
    }
    function canTrimWhitespace(tag) {
      return !/^(?:pre|textarea)$/.test(tag);
    }
    async function normalizeAttr(attr, attrs, tag, options) {
      var attrName = options.name(attr.name), attrValue = attr.value;
      if (options.decodeEntities && attrValue) {
        attrValue = decode(attrValue, { isAttributeValue: true });
      }
      if (options.removeRedundantAttributes && isAttributeRedundant(tag, attrName, attrValue, attrs) || options.removeScriptTypeAttributes && tag === "script" && attrName === "type" && isScriptTypeAttribute(attrValue) && !keepScriptTypeAttribute(attrValue) || options.removeStyleLinkTypeAttributes && (tag === "style" || tag === "link") && attrName === "type" && isStyleLinkTypeAttribute(attrValue)) {
        return;
      }
      if (attrValue) {
        attrValue = await cleanAttributeValue(tag, attrName, attrValue, options, attrs);
      }
      if (options.removeEmptyAttributes && canDeleteEmptyAttribute(tag, attrName, attrValue, options)) {
        return;
      }
      if (options.decodeEntities && attrValue) {
        attrValue = attrValue.replace(/&(#?[0-9a-zA-Z]+;)/g, "&amp;$1");
      }
      return {
        attr,
        name: attrName,
        value: attrValue
      };
    }
    function buildAttr(normalized, hasUnarySlash, options, isLast, uidAttr) {
      var attrName = normalized.name, attrValue = normalized.value, attr = normalized.attr, attrQuote = attr.quote, attrFragment, emittedAttrValue;
      if (typeof attrValue !== "undefined" && (!options.removeAttributeQuotes || ~attrValue.indexOf(uidAttr) || !canRemoveAttributeQuotes(attrValue))) {
        if (!options.preventAttributesEscaping) {
          if (typeof options.quoteCharacter === "undefined") {
            var apos = (attrValue.match(/'/g) || []).length;
            var quot = (attrValue.match(/"/g) || []).length;
            attrQuote = apos < quot ? "'" : '"';
          } else {
            attrQuote = options.quoteCharacter === "'" ? "'" : '"';
          }
          if (attrQuote === '"') {
            attrValue = attrValue.replace(/"/g, "&#34;");
          } else {
            attrValue = attrValue.replace(/'/g, "&#39;");
          }
        }
        emittedAttrValue = attrQuote + attrValue + attrQuote;
        if (!isLast && !options.removeTagWhitespace) {
          emittedAttrValue += " ";
        }
      } else if (isLast && !hasUnarySlash && !/\/$/.test(attrValue)) {
        emittedAttrValue = attrValue;
      } else {
        emittedAttrValue = attrValue + " ";
      }
      if (typeof attrValue === "undefined" || options.collapseBooleanAttributes && isBooleanAttribute(attrName.toLowerCase(), attrValue.toLowerCase())) {
        attrFragment = attrName;
        if (!isLast) {
          attrFragment += " ";
        }
      } else {
        attrFragment = attrName + attr.customAssign + emittedAttrValue;
      }
      return attr.customOpen + attrFragment + attr.customClose;
    }
    function identity(value) {
      return value;
    }
    function processOptions(values) {
      var options = {
        name: function(name) {
          return name.toLowerCase();
        },
        canCollapseWhitespace,
        canTrimWhitespace,
        html5: true,
        ignoreCustomComments: [
          /^!/,
          /^\s*#/
        ],
        ignoreCustomFragments: [
          /<%[\s\S]*?%>/,
          /<\?[\s\S]*?\?>/
        ],
        includeAutoGeneratedTags: true,
        log: identity,
        minifyCSS: identity,
        minifyJS: identity,
        minifyURLs: identity
      };
      Object.keys(values).forEach(function(key) {
        var value = values[key];
        if (key === "caseSensitive") {
          if (value) {
            options.name = identity;
          }
        } else if (key === "log") {
          if (typeof value === "function") {
            options.log = value;
          }
        } else if (key === "minifyCSS" && typeof value !== "function") {
          if (!value) {
            return;
          }
          if (typeof value !== "object") {
            value = {};
          }
          options.minifyCSS = function(text, type) {
            text = text.replace(/(url\s*\(\s*)("|'|)(.*?)\2(\s*\))/ig, function(match, prefix, quote, url, suffix) {
              return prefix + quote + options.minifyURLs(url) + quote + suffix;
            });
            var cleanCssOutput = new CleanCSS(value).minify(wrapCSS(text, type));
            if (cleanCssOutput.errors.length > 0) {
              cleanCssOutput.errors.forEach(options.log);
              return text;
            }
            return unwrapCSS(cleanCssOutput.styles, type);
          };
        } else if (key === "minifyJS" && typeof value !== "function") {
          if (!value) {
            return;
          }
          if (typeof value !== "object") {
            value = {};
          }
          (value.parse || (value.parse = {})).bare_returns = false;
          options.minifyJS = async function(text, inline) {
            var start = text.match(/^\s*<!--.*/);
            var code = start ? text.slice(start[0].length).replace(/\n\s*-->\s*$/, "") : text;
            value.parse.bare_returns = inline;
            try {
              const result = await Terser.minify(code, value);
              return result.code.replace(/;$/, "");
            } catch (error) {
              options.log(error);
              return text;
            }
          };
        } else if (key === "minifyURLs" && typeof value !== "function") {
          if (!value) {
            return;
          }
          if (typeof value === "string") {
            value = { site: value };
          } else if (typeof value !== "object") {
            value = {};
          }
          options.minifyURLs = function(text) {
            try {
              return RelateUrl.relate(text, value);
            } catch (err) {
              options.log(err);
              return text;
            }
          };
        } else {
          options[key] = value;
        }
      });
      return options;
    }
    function uniqueId(value) {
      var id;
      do {
        id = Math.random().toString(36).replace(/^0\.[0-9]*/, "");
      } while (~value.indexOf(id));
      return id;
    }
    var specialContentTags = createMapFromString("script,style");
    async function createSortFns(value, options, uidIgnore, uidAttr) {
      var attrChains = options.sortAttributes && /* @__PURE__ */ Object.create(null);
      var classChain = options.sortClassName && new TokenChain();
      function attrNames(attrs) {
        return attrs.map(function(attr) {
          return options.name(attr.name);
        });
      }
      function shouldSkipUID(token, uid) {
        return !uid || token.indexOf(uid) === -1;
      }
      function shouldSkipUIDs(token) {
        return shouldSkipUID(token, uidIgnore) && shouldSkipUID(token, uidAttr);
      }
      async function scan(input) {
        var currentTag, currentType;
        const parser = new HTMLParser(input, {
          start: function(tag2, attrs) {
            if (attrChains) {
              if (!attrChains[tag2]) {
                attrChains[tag2] = new TokenChain();
              }
              attrChains[tag2].add(attrNames(attrs).filter(shouldSkipUIDs));
            }
            for (var i = 0, len = attrs.length; i < len; i++) {
              var attr = attrs[i];
              if (classChain && attr.value && options.name(attr.name) === "class") {
                classChain.add(trimWhitespace(attr.value).split(/[ \t\n\f\r]+/).filter(shouldSkipUIDs));
              } else if (options.processScripts && attr.name.toLowerCase() === "type") {
                currentTag = tag2;
                currentType = attr.value;
              }
            }
          },
          end: function() {
            currentTag = "";
          },
          chars: async function(text) {
            if (options.processScripts && specialContentTags(currentTag) && options.processScripts.indexOf(currentType) > -1) {
              await scan(text);
            }
          }
        });
        await parser.parse();
      }
      var log = options.log;
      options.log = identity;
      options.sortAttributes = false;
      options.sortClassName = false;
      await scan(await minify(value, options));
      options.log = log;
      if (attrChains) {
        var attrSorters = /* @__PURE__ */ Object.create(null);
        for (var tag in attrChains) {
          attrSorters[tag] = attrChains[tag].createSorter();
        }
        options.sortAttributes = function(tag2, attrs) {
          var sorter2 = attrSorters[tag2];
          if (sorter2) {
            var attrMap = /* @__PURE__ */ Object.create(null);
            var names = attrNames(attrs);
            names.forEach(function(name, index) {
              (attrMap[name] || (attrMap[name] = [])).push(attrs[index]);
            });
            sorter2.sort(names).forEach(function(name, index) {
              attrs[index] = attrMap[name].shift();
            });
          }
        };
      }
      if (classChain) {
        var sorter = classChain.createSorter();
        options.sortClassName = function(value2) {
          return sorter.sort(value2.split(/[ \n\f\r]+/)).join(" ");
        };
      }
    }
    async function minify(value, options, partialMarkup) {
      if (options.collapseWhitespace) {
        value = collapseWhitespace(value, options, true, true);
      }
      var buffer = [], charsPrevTag, currentChars = "", hasChars, currentTag = "", currentAttrs = [], stackNoTrimWhitespace = [], stackNoCollapseWhitespace = [], optionalStartTag = "", optionalEndTag = "", ignoredMarkupChunks = [], ignoredCustomMarkupChunks = [], uidIgnore, uidAttr, uidPattern;
      value = value.replace(/<!-- htmlmin:ignore -->([\s\S]*?)<!-- htmlmin:ignore -->/g, function(match, group1) {
        if (!uidIgnore) {
          uidIgnore = uniqueId(value);
          var pattern = new RegExp("^" + uidIgnore + "([0-9]+)$");
          if (options.ignoreCustomComments) {
            options.ignoreCustomComments = options.ignoreCustomComments.slice();
          } else {
            options.ignoreCustomComments = [];
          }
          options.ignoreCustomComments.push(pattern);
        }
        var token = "<!--" + uidIgnore + ignoredMarkupChunks.length + "-->";
        ignoredMarkupChunks.push(group1);
        return token;
      });
      var customFragments = options.ignoreCustomFragments.map(function(re) {
        return re.source;
      });
      if (customFragments.length) {
        var reCustomIgnore = new RegExp("\\s*(?:" + customFragments.join("|") + ")+\\s*", "g");
        value = value.replace(reCustomIgnore, function(match) {
          if (!uidAttr) {
            uidAttr = uniqueId(value);
            uidPattern = new RegExp("(\\s*)" + uidAttr + "([0-9]+)" + uidAttr + "(\\s*)", "g");
            if (options.minifyCSS) {
              options.minifyCSS = /* @__PURE__ */ function(fn) {
                return function(text, type) {
                  text = text.replace(uidPattern, function(match2, prefix, index) {
                    var chunks = ignoredCustomMarkupChunks[+index];
                    return chunks[1] + uidAttr + index + uidAttr + chunks[2];
                  });
                  var ids = [];
                  new CleanCSS().minify(wrapCSS(text, type)).warnings.forEach(function(warning) {
                    var match2 = uidPattern.exec(warning);
                    if (match2) {
                      var id = uidAttr + match2[2] + uidAttr;
                      text = text.replace(id, ignoreCSS(id));
                      ids.push(id);
                    }
                  });
                  text = fn(text, type);
                  ids.forEach(function(id) {
                    text = text.replace(ignoreCSS(id), id);
                  });
                  return text;
                };
              }(options.minifyCSS);
            }
            if (options.minifyJS) {
              options.minifyJS = /* @__PURE__ */ function(fn) {
                return function(text, type) {
                  return fn(text.replace(uidPattern, function(match2, prefix, index) {
                    var chunks = ignoredCustomMarkupChunks[+index];
                    return chunks[1] + uidAttr + index + uidAttr + chunks[2];
                  }), type);
                };
              }(options.minifyJS);
            }
          }
          var token = uidAttr + ignoredCustomMarkupChunks.length + uidAttr;
          ignoredCustomMarkupChunks.push(/^(\s*)[\s\S]*?(\s*)$/.exec(match));
          return "	" + token + "	";
        });
      }
      if (options.sortAttributes && typeof options.sortAttributes !== "function" || options.sortClassName && typeof options.sortClassName !== "function") {
        await createSortFns(value, options, uidIgnore, uidAttr);
      }
      function _canCollapseWhitespace(tag, attrs) {
        return options.canCollapseWhitespace(tag, attrs, canCollapseWhitespace);
      }
      function _canTrimWhitespace(tag, attrs) {
        return options.canTrimWhitespace(tag, attrs, canTrimWhitespace);
      }
      function removeStartTag() {
        var index = buffer.length - 1;
        while (index > 0 && !/^<[^/!]/.test(buffer[index])) {
          index--;
        }
        buffer.length = Math.max(0, index);
      }
      function removeEndTag() {
        var index = buffer.length - 1;
        while (index > 0 && !/^<\//.test(buffer[index])) {
          index--;
        }
        buffer.length = Math.max(0, index);
      }
      function trimTrailingWhitespace(index, nextTag) {
        for (var endTag2 = null; index >= 0 && _canTrimWhitespace(endTag2); index--) {
          var str = buffer[index];
          var match = str.match(/^<\/([\w:-]+)>$/);
          if (match) {
            endTag2 = match[1];
          } else if (/>$/.test(str) || (buffer[index] = collapseWhitespaceSmart(str, null, nextTag, options))) {
            break;
          }
        }
      }
      function squashTrailingWhitespace(nextTag) {
        var charsIndex = buffer.length - 1;
        if (buffer.length > 1) {
          var item = buffer[buffer.length - 1];
          if (/^(?:<!|$)/.test(item) && item.indexOf(uidIgnore) === -1) {
            charsIndex--;
          }
        }
        trimTrailingWhitespace(charsIndex, nextTag);
      }
      const parser = new HTMLParser(value, {
        partialMarkup,
        continueOnParseError: options.continueOnParseError,
        customAttrAssign: options.customAttrAssign,
        customAttrSurround: options.customAttrSurround,
        html5: options.html5,
        start: async function(tag, attrs, unary, unarySlash, autoGenerated) {
          if (tag.toLowerCase() === "svg") {
            options = Object.create(options);
            options.caseSensitive = true;
            options.keepClosingSlash = true;
            options.name = identity;
          }
          tag = options.name(tag);
          currentTag = tag;
          charsPrevTag = tag;
          if (!inlineTextTags(tag)) {
            currentChars = "";
          }
          hasChars = false;
          currentAttrs = attrs;
          var optional = options.removeOptionalTags;
          if (optional) {
            var htmlTag = htmlTags(tag);
            if (htmlTag && canRemoveParentTag(optionalStartTag, tag)) {
              removeStartTag();
            }
            optionalStartTag = "";
            if (htmlTag && canRemovePrecedingTag(optionalEndTag, tag)) {
              removeEndTag();
              optional = !isStartTagMandatory(optionalEndTag, tag);
            }
            optionalEndTag = "";
          }
          if (options.collapseWhitespace) {
            if (!stackNoTrimWhitespace.length) {
              squashTrailingWhitespace(tag);
            }
            if (!unary) {
              if (!_canTrimWhitespace(tag, attrs) || stackNoTrimWhitespace.length) {
                stackNoTrimWhitespace.push(tag);
              }
              if (!_canCollapseWhitespace(tag, attrs) || stackNoCollapseWhitespace.length) {
                stackNoCollapseWhitespace.push(tag);
              }
            }
          }
          var openTag = "<" + tag;
          var hasUnarySlash = unarySlash && options.keepClosingSlash;
          buffer.push(openTag);
          if (options.sortAttributes) {
            options.sortAttributes(tag, attrs);
          }
          var parts = [];
          for (var i = attrs.length, isLast = true; --i >= 0; ) {
            var normalized = await normalizeAttr(attrs[i], attrs, tag, options);
            if (normalized) {
              parts.unshift(buildAttr(normalized, hasUnarySlash, options, isLast, uidAttr));
              isLast = false;
            }
          }
          if (parts.length > 0) {
            buffer.push(" ");
            buffer.push.apply(buffer, parts);
          } else if (optional && optionalStartTags(tag)) {
            optionalStartTag = tag;
          }
          buffer.push(buffer.pop() + (hasUnarySlash ? "/" : "") + ">");
          if (autoGenerated && !options.includeAutoGeneratedTags) {
            removeStartTag();
            optionalStartTag = "";
          }
        },
        end: function(tag, attrs, autoGenerated) {
          if (tag.toLowerCase() === "svg") {
            options = Object.getPrototypeOf(options);
          }
          tag = options.name(tag);
          if (options.collapseWhitespace) {
            if (stackNoTrimWhitespace.length) {
              if (tag === stackNoTrimWhitespace[stackNoTrimWhitespace.length - 1]) {
                stackNoTrimWhitespace.pop();
              }
            } else {
              squashTrailingWhitespace("/" + tag);
            }
            if (stackNoCollapseWhitespace.length && tag === stackNoCollapseWhitespace[stackNoCollapseWhitespace.length - 1]) {
              stackNoCollapseWhitespace.pop();
            }
          }
          var isElementEmpty = false;
          if (tag === currentTag) {
            currentTag = "";
            isElementEmpty = !hasChars;
          }
          if (options.removeOptionalTags) {
            if (isElementEmpty && topLevelTags(optionalStartTag)) {
              removeStartTag();
            }
            optionalStartTag = "";
            if (htmlTags(tag) && optionalEndTag && !trailingTags(optionalEndTag) && (optionalEndTag !== "p" || !pInlineTags(tag))) {
              removeEndTag();
            }
            optionalEndTag = optionalEndTags(tag) ? tag : "";
          }
          if (options.removeEmptyElements && isElementEmpty && canRemoveElement(tag, attrs)) {
            removeStartTag();
            optionalStartTag = "";
            optionalEndTag = "";
          } else {
            if (autoGenerated && !options.includeAutoGeneratedTags) {
              optionalEndTag = "";
            } else {
              buffer.push("</" + tag + ">");
            }
            charsPrevTag = "/" + tag;
            if (!inlineTags(tag)) {
              currentChars = "";
            } else if (isElementEmpty) {
              currentChars += "|";
            }
          }
        },
        chars: async function(text, prevTag, nextTag) {
          prevTag = prevTag === "" ? "comment" : prevTag;
          nextTag = nextTag === "" ? "comment" : nextTag;
          if (options.decodeEntities && text && !specialContentTags(currentTag)) {
            text = decode(text);
          }
          if (options.collapseWhitespace) {
            if (!stackNoTrimWhitespace.length) {
              if (prevTag === "comment") {
                var prevComment = buffer[buffer.length - 1];
                if (prevComment.indexOf(uidIgnore) === -1) {
                  if (!prevComment) {
                    prevTag = charsPrevTag;
                  }
                  if (buffer.length > 1 && (!prevComment || !options.conservativeCollapse && / $/.test(currentChars))) {
                    var charsIndex = buffer.length - 2;
                    buffer[charsIndex] = buffer[charsIndex].replace(/\s+$/, function(trailingSpaces) {
                      text = trailingSpaces + text;
                      return "";
                    });
                  }
                }
              }
              if (prevTag) {
                if (prevTag === "/nobr" || prevTag === "wbr") {
                  if (/^\s/.test(text)) {
                    var tagIndex = buffer.length - 1;
                    while (tagIndex > 0 && buffer[tagIndex].lastIndexOf("<" + prevTag) !== 0) {
                      tagIndex--;
                    }
                    trimTrailingWhitespace(tagIndex - 1, "br");
                  }
                } else if (inlineTextTags(prevTag.charAt(0) === "/" ? prevTag.slice(1) : prevTag)) {
                  text = collapseWhitespace(text, options, /(?:^|\s)$/.test(currentChars));
                }
              }
              if (prevTag || nextTag) {
                text = collapseWhitespaceSmart(text, prevTag, nextTag, options);
              } else {
                text = collapseWhitespace(text, options, true, true);
              }
              if (!text && /\s$/.test(currentChars) && prevTag && prevTag.charAt(0) === "/") {
                trimTrailingWhitespace(buffer.length - 1, nextTag);
              }
            }
            if (!stackNoCollapseWhitespace.length && nextTag !== "html" && !(prevTag && nextTag)) {
              text = collapseWhitespace(text, options, false, false, true);
            }
          }
          if (options.processScripts && specialContentTags(currentTag)) {
            text = await processScript(text, options, currentAttrs);
          }
          if (isExecutableScript(currentTag, currentAttrs)) {
            text = await options.minifyJS(text);
          }
          if (isStyleSheet(currentTag, currentAttrs)) {
            text = options.minifyCSS(text);
          }
          if (options.removeOptionalTags && text) {
            if (optionalStartTag === "html" || optionalStartTag === "body" && !/^\s/.test(text)) {
              removeStartTag();
            }
            optionalStartTag = "";
            if (compactTags(optionalEndTag) || looseTags(optionalEndTag) && !/^\s/.test(text)) {
              removeEndTag();
            }
            optionalEndTag = "";
          }
          charsPrevTag = /^\s*$/.test(text) ? prevTag : "comment";
          if (options.decodeEntities && text && !specialContentTags(currentTag)) {
            text = text.replace(/&((?:Iacute|aacute|uacute|plusmn|Otilde|otilde|agrave|Agrave|Yacute|yacute|Oslash|oslash|atilde|Atilde|brvbar|ccedil|Ccedil|Ograve|curren|divide|eacute|Eacute|ograve|Oacute|egrave|Egrave|Ugrave|frac12|frac14|frac34|ugrave|oacute|iacute|Ntilde|ntilde|Uacute|middot|igrave|Igrave|iquest|Aacute|cedil|laquo|micro|iexcl|Icirc|icirc|acirc|Ucirc|Ecirc|ocirc|Ocirc|ecirc|ucirc|Aring|aring|AElig|aelig|acute|pound|raquo|Acirc|times|THORN|szlig|thorn|COPY|auml|ordf|ordm|Uuml|macr|uuml|Auml|ouml|Ouml|para|nbsp|euml|quot|QUOT|Euml|yuml|cent|sect|copy|sup1|sup2|sup3|iuml|Iuml|ETH|shy|reg|not|yen|amp|AMP|REG|uml|eth|deg|gt|GT|LT|lt)(?!;)|(?:#?[0-9a-zA-Z]+;))/g, "&amp$1").replace(/</g, "&lt;");
          }
          if (uidPattern && options.collapseWhitespace && stackNoTrimWhitespace.length) {
            text = text.replace(uidPattern, function(match, prefix, index) {
              return ignoredCustomMarkupChunks[+index][0];
            });
          }
          currentChars += text;
          if (text) {
            hasChars = true;
          }
          buffer.push(text);
        },
        comment: async function(text, nonStandard) {
          var prefix = nonStandard ? "<!" : "<!--";
          var suffix = nonStandard ? ">" : "-->";
          if (isConditionalComment(text)) {
            text = prefix + await cleanConditionalComment(text, options) + suffix;
          } else if (options.removeComments) {
            if (isIgnoredComment(text, options)) {
              text = "<!--" + text + "-->";
            } else {
              text = "";
            }
          } else {
            text = prefix + text + suffix;
          }
          if (options.removeOptionalTags && text) {
            optionalStartTag = "";
            optionalEndTag = "";
          }
          buffer.push(text);
        },
        doctype: function(doctype) {
          buffer.push(options.useShortDoctype ? "<!doctype" + (options.removeTagWhitespace ? "" : " ") + "html>" : collapseWhitespaceAll(doctype));
        }
      });
      await parser.parse();
      if (options.removeOptionalTags) {
        if (topLevelTags(optionalStartTag)) {
          removeStartTag();
        }
        if (optionalEndTag && !trailingTags(optionalEndTag)) {
          removeEndTag();
        }
      }
      if (options.collapseWhitespace) {
        squashTrailingWhitespace("br");
      }
      return joinResultSegments(buffer, options, uidPattern ? function(str) {
        return str.replace(uidPattern, function(match, prefix, index, suffix) {
          var chunk = ignoredCustomMarkupChunks[+index][0];
          if (options.collapseWhitespace) {
            if (prefix !== "	") {
              chunk = prefix + chunk;
            }
            if (suffix !== "	") {
              chunk += suffix;
            }
            return collapseWhitespace(chunk, {
              preserveLineBreaks: options.preserveLineBreaks,
              conservativeCollapse: !options.trimCustomFragments
            }, /^[ \n\r\t\f]/.test(chunk), /[ \n\r\t\f]$/.test(chunk));
          }
          return chunk;
        });
      } : identity, uidIgnore ? function(str) {
        return str.replace(new RegExp("<!--" + uidIgnore + "([0-9]+)-->", "g"), function(match, index) {
          return ignoredMarkupChunks[+index];
        });
      } : identity);
    }
    function joinResultSegments(results, options, restoreCustom, restoreIgnore) {
      var str;
      var maxLineLength = options.maxLineLength;
      var noNewlinesBeforeTagClose = options.noNewlinesBeforeTagClose;
      if (maxLineLength) {
        var line = "", lines = [];
        while (results.length) {
          var len = line.length;
          var end = results[0].indexOf("\n");
          var isClosingTag = Boolean(results[0].match(endTag));
          var shouldKeepSameLine = noNewlinesBeforeTagClose && isClosingTag;
          if (end < 0) {
            line += restoreIgnore(restoreCustom(results.shift()));
          } else {
            line += restoreIgnore(restoreCustom(results[0].slice(0, end)));
            results[0] = results[0].slice(end + 1);
          }
          if (len > 0 && line.length > maxLineLength && !shouldKeepSameLine) {
            lines.push(line.slice(0, len));
            line = line.slice(len);
          } else if (end >= 0) {
            lines.push(line);
            line = "";
          }
        }
        if (line) {
          lines.push(line);
        }
        str = lines.join("\n");
      } else {
        str = restoreIgnore(restoreCustom(results.join("")));
      }
      return options.collapseWhitespace ? collapseWhitespace(str, options, true, true) : str;
    }
    exports.minify = async function(value, options) {
      var start = Date.now();
      options = processOptions(options || {});
      var result = await minify(value, options);
      options.log("minified in: " + (Date.now() - start) + "ms");
      return result;
    };
  }
});

// node_modules/vite-plugin-minify/dist/index.mjs
var import_html_minifier_terser = __toESM(require_htmlminifier(), 1);
var u = Object.defineProperty;
var r = Object.getOwnPropertySymbols;
var m = Object.prototype.hasOwnProperty;
var l = Object.prototype.propertyIsEnumerable;
var n = (i, e, t) => e in i ? u(i, e, { enumerable: true, configurable: true, writable: true, value: t }) : i[e] = t;
var o = (i, e) => {
  for (var t in e || (e = {}))
    m.call(e, t) && n(i, t, e[t]);
  if (r)
    for (var t of r(e))
      l.call(e, t) && n(i, t, e[t]);
  return i;
};
function f(i) {
  return { name: "vite-plugin-minify", enforce: "post", apply: "build", transformIndexHtml: (e) => (0, import_html_minifier_terser.minify)(e, o({ removeComments: true, collapseWhitespace: true, collapseBooleanAttributes: true, removeAttributeQuotes: false, removeEmptyAttributes: true, minifyCSS: true, minifyJS: true, minifyURLs: true }, i)) };
}
var c = f;
export {
  f as ViteMinifyPlugin,
  c as default
};
/*! Bundled license information:

he/he.js:
  (*! https://mths.be/he v1.2.0 by @mathias | MIT license *)

html-minifier-terser/src/htmlparser.js:
  (*!
   * HTML Parser By John Resig (ejohn.org)
   * Modified by Juriy "kangax" Zaytsev
   * Original code by Erik Arvidsson, Mozilla Public License
   * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
   *)
*/
//# sourceMappingURL=vite-plugin-minify.js.map
